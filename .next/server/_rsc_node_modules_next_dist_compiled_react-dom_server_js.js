"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_node_modules_next_dist_compiled_react-dom_server_js";
exports.ids = ["_rsc_node_modules_next_dist_compiled_react-dom_server_js"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server-legacy.node.development.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server-legacy.node.development.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * @license React\n * react-dom-server-legacy.node.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var React = __webpack_require__(/*! next/dist/compiled/react */ \"(rsc)/./node_modules/next/dist/compiled/react/index.js\");\n        var ReactDOM = __webpack_require__(/*! react-dom */ \"(rsc)/./node_modules/next/dist/compiled/react-dom/server-rendering-stub.js\");\n        var stream = __webpack_require__(/*! stream */ \"stream\");\n        var ReactVersion = \"18.3.0-canary-1a001dac6-20230812\";\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        // by calls to these methods by a Babel plugin.\n        //\n        // In PROD (or in packages without access to React internals),\n        // they are left as they are instead.\n        function warn(format) {\n            {\n                {\n                    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                        args[_key - 1] = arguments[_key];\n                    }\n                    printWarning(\"warn\", format, args);\n                }\n            }\n        }\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        function scheduleWork(callback) {\n            callback();\n        }\n        function beginWriting(destination) {}\n        function writeChunk(destination, chunk) {\n            writeChunkAndReturn(destination, chunk);\n        }\n        function writeChunkAndReturn(destination, chunk) {\n            return destination.push(chunk);\n        }\n        function completeWriting(destination) {}\n        function close(destination) {\n            destination.push(null);\n        }\n        function stringToChunk(content) {\n            return content;\n        }\n        function stringToPrecomputedChunk(content) {\n            return content;\n        }\n        function clonePrecomputedChunk(chunk) {\n            return chunk;\n        }\n        function closeWithError(destination, error) {\n            // $FlowFixMe[incompatible-call]: This is an Error object or the destination accepts other types.\n            destination.destroy(error);\n        }\n        function _defineProperty(obj, key, value) {\n            if (key in obj) {\n                Object.defineProperty(obj, key, {\n                    value: value,\n                    enumerable: true,\n                    configurable: true,\n                    writable: true\n                });\n            } else {\n                obj[key] = value;\n            }\n            return obj;\n        }\n        function _inheritsLoose(subClass, superClass) {\n            subClass.prototype = Object.create(superClass.prototype);\n            subClass.prototype.constructor = subClass;\n            subClass.__proto__ = superClass;\n        }\n        var assign = Object.assign;\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkAttributeStringCoercion(value, attributeName) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided `%s` attribute is an unsupported type %s.\" + \" This value must be coerced to a string before before using it here.\", attributeName, typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        function checkCSSPropertyStringCoercion(value, propName) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided `%s` CSS property is an unsupported type %s.\" + \" This value must be coerced to a string before before using it here.\", propName, typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        function checkHtmlStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided HTML markup uses a value of unsupported type %s.\" + \" This value must be coerced to a string before before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        // -----------------------------------------------------------------------------\n        var enableFloat = true; // Enables unstable_useMemoCache hook, intended as a compilation target for\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        /* eslint-disable max-len */ var ATTRIBUTE_NAME_START_CHAR = \":A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n        /* eslint-enable max-len */ var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + \"\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp(\"^[\" + ATTRIBUTE_NAME_START_CHAR + \"][\" + ATTRIBUTE_NAME_CHAR + \"]*$\");\n        var illegalAttributeNameCache = {};\n        var validatedAttributeNameCache = {};\n        function isAttributeNameSafe(attributeName) {\n            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {\n                return true;\n            }\n            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {\n                return false;\n            }\n            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {\n                validatedAttributeNameCache[attributeName] = true;\n                return true;\n            }\n            illegalAttributeNameCache[attributeName] = true;\n            {\n                error(\"Invalid attribute name: `%s`\", attributeName);\n            }\n            return false;\n        }\n        /**\n * CSS properties which accept numbers but are not in units of \"px\".\n */ var unitlessNumbers = new Set([\n            \"animationIterationCount\",\n            \"aspectRatio\",\n            \"borderImageOutset\",\n            \"borderImageSlice\",\n            \"borderImageWidth\",\n            \"boxFlex\",\n            \"boxFlexGroup\",\n            \"boxOrdinalGroup\",\n            \"columnCount\",\n            \"columns\",\n            \"flex\",\n            \"flexGrow\",\n            \"flexPositive\",\n            \"flexShrink\",\n            \"flexNegative\",\n            \"flexOrder\",\n            \"gridArea\",\n            \"gridRow\",\n            \"gridRowEnd\",\n            \"gridRowSpan\",\n            \"gridRowStart\",\n            \"gridColumn\",\n            \"gridColumnEnd\",\n            \"gridColumnSpan\",\n            \"gridColumnStart\",\n            \"fontWeight\",\n            \"lineClamp\",\n            \"lineHeight\",\n            \"opacity\",\n            \"order\",\n            \"orphans\",\n            \"scale\",\n            \"tabSize\",\n            \"widows\",\n            \"zIndex\",\n            \"zoom\",\n            \"fillOpacity\",\n            \"floodOpacity\",\n            \"stopOpacity\",\n            \"strokeDasharray\",\n            \"strokeDashoffset\",\n            \"strokeMiterlimit\",\n            \"strokeOpacity\",\n            \"strokeWidth\",\n            \"MozAnimationIterationCount\",\n            \"MozBoxFlex\",\n            \"MozBoxFlexGroup\",\n            \"MozLineClamp\",\n            \"msAnimationIterationCount\",\n            \"msFlex\",\n            \"msZoom\",\n            \"msFlexGrow\",\n            \"msFlexNegative\",\n            \"msFlexOrder\",\n            \"msFlexPositive\",\n            \"msFlexShrink\",\n            \"msGridColumn\",\n            \"msGridColumnSpan\",\n            \"msGridRow\",\n            \"msGridRowSpan\",\n            \"WebkitAnimationIterationCount\",\n            \"WebkitBoxFlex\",\n            \"WebKitBoxFlexGroup\",\n            \"WebkitBoxOrdinalGroup\",\n            \"WebkitColumnCount\",\n            \"WebkitColumns\",\n            \"WebkitFlex\",\n            \"WebkitFlexGrow\",\n            \"WebkitFlexPositive\",\n            \"WebkitFlexShrink\",\n            \"WebkitLineClamp\"\n        ]);\n        function isUnitlessNumber(name) {\n            return unitlessNumbers.has(name);\n        }\n        var aliases = new Map([\n            [\n                \"acceptCharset\",\n                \"accept-charset\"\n            ],\n            [\n                \"htmlFor\",\n                \"for\"\n            ],\n            [\n                \"httpEquiv\",\n                \"http-equiv\"\n            ],\n            [\n                \"crossOrigin\",\n                \"crossorigin\"\n            ],\n            // Regular attributes that just accept strings.],\n            [\n                \"accentHeight\",\n                \"accent-height\"\n            ],\n            [\n                \"alignmentBaseline\",\n                \"alignment-baseline\"\n            ],\n            [\n                \"arabicForm\",\n                \"arabic-form\"\n            ],\n            [\n                \"baselineShift\",\n                \"baseline-shift\"\n            ],\n            [\n                \"capHeight\",\n                \"cap-height\"\n            ],\n            [\n                \"clipPath\",\n                \"clip-path\"\n            ],\n            [\n                \"clipRule\",\n                \"clip-rule\"\n            ],\n            [\n                \"colorInterpolation\",\n                \"color-interpolation\"\n            ],\n            [\n                \"colorInterpolationFilters\",\n                \"color-interpolation-filters\"\n            ],\n            [\n                \"colorProfile\",\n                \"color-profile\"\n            ],\n            [\n                \"colorRendering\",\n                \"color-rendering\"\n            ],\n            [\n                \"dominantBaseline\",\n                \"dominant-baseline\"\n            ],\n            [\n                \"enableBackground\",\n                \"enable-background\"\n            ],\n            [\n                \"fillOpacity\",\n                \"fill-opacity\"\n            ],\n            [\n                \"fillRule\",\n                \"fill-rule\"\n            ],\n            [\n                \"floodColor\",\n                \"flood-color\"\n            ],\n            [\n                \"floodOpacity\",\n                \"flood-opacity\"\n            ],\n            [\n                \"fontFamily\",\n                \"font-family\"\n            ],\n            [\n                \"fontSize\",\n                \"font-size\"\n            ],\n            [\n                \"fontSizeAdjust\",\n                \"font-size-adjust\"\n            ],\n            [\n                \"fontStretch\",\n                \"font-stretch\"\n            ],\n            [\n                \"fontStyle\",\n                \"font-style\"\n            ],\n            [\n                \"fontVariant\",\n                \"font-variant\"\n            ],\n            [\n                \"fontWeight\",\n                \"font-weight\"\n            ],\n            [\n                \"glyphName\",\n                \"glyph-name\"\n            ],\n            [\n                \"glyphOrientationHorizontal\",\n                \"glyph-orientation-horizontal\"\n            ],\n            [\n                \"glyphOrientationVertical\",\n                \"glyph-orientation-vertical\"\n            ],\n            [\n                \"horizAdvX\",\n                \"horiz-adv-x\"\n            ],\n            [\n                \"horizOriginX\",\n                \"horiz-origin-x\"\n            ],\n            [\n                \"imageRendering\",\n                \"image-rendering\"\n            ],\n            [\n                \"letterSpacing\",\n                \"letter-spacing\"\n            ],\n            [\n                \"lightingColor\",\n                \"lighting-color\"\n            ],\n            [\n                \"markerEnd\",\n                \"marker-end\"\n            ],\n            [\n                \"markerMid\",\n                \"marker-mid\"\n            ],\n            [\n                \"markerStart\",\n                \"marker-start\"\n            ],\n            [\n                \"overlinePosition\",\n                \"overline-position\"\n            ],\n            [\n                \"overlineThickness\",\n                \"overline-thickness\"\n            ],\n            [\n                \"paintOrder\",\n                \"paint-order\"\n            ],\n            [\n                \"panose-1\",\n                \"panose-1\"\n            ],\n            [\n                \"pointerEvents\",\n                \"pointer-events\"\n            ],\n            [\n                \"renderingIntent\",\n                \"rendering-intent\"\n            ],\n            [\n                \"shapeRendering\",\n                \"shape-rendering\"\n            ],\n            [\n                \"stopColor\",\n                \"stop-color\"\n            ],\n            [\n                \"stopOpacity\",\n                \"stop-opacity\"\n            ],\n            [\n                \"strikethroughPosition\",\n                \"strikethrough-position\"\n            ],\n            [\n                \"strikethroughThickness\",\n                \"strikethrough-thickness\"\n            ],\n            [\n                \"strokeDasharray\",\n                \"stroke-dasharray\"\n            ],\n            [\n                \"strokeDashoffset\",\n                \"stroke-dashoffset\"\n            ],\n            [\n                \"strokeLinecap\",\n                \"stroke-linecap\"\n            ],\n            [\n                \"strokeLinejoin\",\n                \"stroke-linejoin\"\n            ],\n            [\n                \"strokeMiterlimit\",\n                \"stroke-miterlimit\"\n            ],\n            [\n                \"strokeOpacity\",\n                \"stroke-opacity\"\n            ],\n            [\n                \"strokeWidth\",\n                \"stroke-width\"\n            ],\n            [\n                \"textAnchor\",\n                \"text-anchor\"\n            ],\n            [\n                \"textDecoration\",\n                \"text-decoration\"\n            ],\n            [\n                \"textRendering\",\n                \"text-rendering\"\n            ],\n            [\n                \"transformOrigin\",\n                \"transform-origin\"\n            ],\n            [\n                \"underlinePosition\",\n                \"underline-position\"\n            ],\n            [\n                \"underlineThickness\",\n                \"underline-thickness\"\n            ],\n            [\n                \"unicodeBidi\",\n                \"unicode-bidi\"\n            ],\n            [\n                \"unicodeRange\",\n                \"unicode-range\"\n            ],\n            [\n                \"unitsPerEm\",\n                \"units-per-em\"\n            ],\n            [\n                \"vAlphabetic\",\n                \"v-alphabetic\"\n            ],\n            [\n                \"vHanging\",\n                \"v-hanging\"\n            ],\n            [\n                \"vIdeographic\",\n                \"v-ideographic\"\n            ],\n            [\n                \"vMathematical\",\n                \"v-mathematical\"\n            ],\n            [\n                \"vectorEffect\",\n                \"vector-effect\"\n            ],\n            [\n                \"vertAdvY\",\n                \"vert-adv-y\"\n            ],\n            [\n                \"vertOriginX\",\n                \"vert-origin-x\"\n            ],\n            [\n                \"vertOriginY\",\n                \"vert-origin-y\"\n            ],\n            [\n                \"wordSpacing\",\n                \"word-spacing\"\n            ],\n            [\n                \"writingMode\",\n                \"writing-mode\"\n            ],\n            [\n                \"xmlnsXlink\",\n                \"xmlns:xlink\"\n            ],\n            [\n                \"xHeight\",\n                \"x-height\"\n            ]\n        ]);\n        function getAttributeAlias(name) {\n            return aliases.get(name) || name;\n        }\n        var hasReadOnlyValue = {\n            button: true,\n            checkbox: true,\n            image: true,\n            hidden: true,\n            radio: true,\n            reset: true,\n            submit: true\n        };\n        function checkControlledValueProps(tagName, props) {\n            {\n                if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {\n                    error(\"You provided a `value` prop to a form field without an \" + \"`onChange` handler. This will render a read-only field. If \" + \"the field should be mutable use `defaultValue`. Otherwise, \" + \"set either `onChange` or `readOnly`.\");\n                }\n                if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {\n                    error(\"You provided a `checked` prop to a form field without an \" + \"`onChange` handler. This will render a read-only field. If \" + \"the field should be mutable use `defaultChecked`. Otherwise, \" + \"set either `onChange` or `readOnly`.\");\n                }\n            }\n        }\n        var ariaProperties = {\n            \"aria-current\": 0,\n            // state\n            \"aria-description\": 0,\n            \"aria-details\": 0,\n            \"aria-disabled\": 0,\n            // state\n            \"aria-hidden\": 0,\n            // state\n            \"aria-invalid\": 0,\n            // state\n            \"aria-keyshortcuts\": 0,\n            \"aria-label\": 0,\n            \"aria-roledescription\": 0,\n            // Widget Attributes\n            \"aria-autocomplete\": 0,\n            \"aria-checked\": 0,\n            \"aria-expanded\": 0,\n            \"aria-haspopup\": 0,\n            \"aria-level\": 0,\n            \"aria-modal\": 0,\n            \"aria-multiline\": 0,\n            \"aria-multiselectable\": 0,\n            \"aria-orientation\": 0,\n            \"aria-placeholder\": 0,\n            \"aria-pressed\": 0,\n            \"aria-readonly\": 0,\n            \"aria-required\": 0,\n            \"aria-selected\": 0,\n            \"aria-sort\": 0,\n            \"aria-valuemax\": 0,\n            \"aria-valuemin\": 0,\n            \"aria-valuenow\": 0,\n            \"aria-valuetext\": 0,\n            // Live Region Attributes\n            \"aria-atomic\": 0,\n            \"aria-busy\": 0,\n            \"aria-live\": 0,\n            \"aria-relevant\": 0,\n            // Drag-and-Drop Attributes\n            \"aria-dropeffect\": 0,\n            \"aria-grabbed\": 0,\n            // Relationship Attributes\n            \"aria-activedescendant\": 0,\n            \"aria-colcount\": 0,\n            \"aria-colindex\": 0,\n            \"aria-colspan\": 0,\n            \"aria-controls\": 0,\n            \"aria-describedby\": 0,\n            \"aria-errormessage\": 0,\n            \"aria-flowto\": 0,\n            \"aria-labelledby\": 0,\n            \"aria-owns\": 0,\n            \"aria-posinset\": 0,\n            \"aria-rowcount\": 0,\n            \"aria-rowindex\": 0,\n            \"aria-rowspan\": 0,\n            \"aria-setsize\": 0\n        };\n        var warnedProperties$1 = {};\n        var rARIA$1 = new RegExp(\"^(aria)-[\" + ATTRIBUTE_NAME_CHAR + \"]*$\");\n        var rARIACamel$1 = new RegExp(\"^(aria)[A-Z][\" + ATTRIBUTE_NAME_CHAR + \"]*$\");\n        function validateProperty$1(tagName, name) {\n            {\n                if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {\n                    return true;\n                }\n                if (rARIACamel$1.test(name)) {\n                    var ariaName = \"aria-\" + name.slice(4).toLowerCase();\n                    var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM\n                    // DOM properties, then it is an invalid aria-* attribute.\n                    if (correctName == null) {\n                        error(\"Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.\", name);\n                        warnedProperties$1[name] = true;\n                        return true;\n                    } // aria-* attributes should be lowercase; suggest the lowercase version.\n                    if (name !== correctName) {\n                        error(\"Invalid ARIA attribute `%s`. Did you mean `%s`?\", name, correctName);\n                        warnedProperties$1[name] = true;\n                        return true;\n                    }\n                }\n                if (rARIA$1.test(name)) {\n                    var lowerCasedName = name.toLowerCase();\n                    var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM\n                    // DOM properties, then it is an invalid aria-* attribute.\n                    if (standardName == null) {\n                        warnedProperties$1[name] = true;\n                        return false;\n                    } // aria-* attributes should be lowercase; suggest the lowercase version.\n                    if (name !== standardName) {\n                        error(\"Unknown ARIA attribute `%s`. Did you mean `%s`?\", name, standardName);\n                        warnedProperties$1[name] = true;\n                        return true;\n                    }\n                }\n            }\n            return true;\n        }\n        function validateProperties$2(type, props) {\n            {\n                var invalidProps = [];\n                for(var key in props){\n                    var isValid = validateProperty$1(type, key);\n                    if (!isValid) {\n                        invalidProps.push(key);\n                    }\n                }\n                var unknownPropString = invalidProps.map(function(prop) {\n                    return \"`\" + prop + \"`\";\n                }).join(\", \");\n                if (invalidProps.length === 1) {\n                    error(\"Invalid aria prop %s on <%s> tag. \" + \"For details, see https://reactjs.org/link/invalid-aria-props\", unknownPropString, type);\n                } else if (invalidProps.length > 1) {\n                    error(\"Invalid aria props %s on <%s> tag. \" + \"For details, see https://reactjs.org/link/invalid-aria-props\", unknownPropString, type);\n                }\n            }\n        }\n        var didWarnValueNull = false;\n        function validateProperties$1(type, props) {\n            {\n                if (type !== \"input\" && type !== \"textarea\" && type !== \"select\") {\n                    return;\n                }\n                if (props != null && props.value === null && !didWarnValueNull) {\n                    didWarnValueNull = true;\n                    if (type === \"select\" && props.multiple) {\n                        error(\"`value` prop on `%s` should not be null. \" + \"Consider using an empty array when `multiple` is set to `true` \" + \"to clear the component or `undefined` for uncontrolled components.\", type);\n                    } else {\n                        error(\"`value` prop on `%s` should not be null. \" + \"Consider using an empty string to clear the component or `undefined` \" + \"for uncontrolled components.\", type);\n                    }\n                }\n            }\n        }\n        function isCustomElement(tagName, props) {\n            if (tagName.indexOf(\"-\") === -1) {\n                return false;\n            }\n            switch(tagName){\n                // These are reserved SVG and MathML elements.\n                // We don't mind this list too much because we expect it to never grow.\n                // The alternative is to track the namespace in a few places which is convoluted.\n                // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts\n                case \"annotation-xml\":\n                case \"color-profile\":\n                case \"font-face\":\n                case \"font-face-src\":\n                case \"font-face-uri\":\n                case \"font-face-format\":\n                case \"font-face-name\":\n                case \"missing-glyph\":\n                    return false;\n                default:\n                    return true;\n            }\n        }\n        // When adding attributes to the HTML or SVG allowed attribute list, be sure to\n        // also add them to this module to ensure casing and incorrect name\n        // warnings.\n        var possibleStandardNames = {\n            // HTML\n            accept: \"accept\",\n            acceptcharset: \"acceptCharset\",\n            \"accept-charset\": \"acceptCharset\",\n            accesskey: \"accessKey\",\n            action: \"action\",\n            allowfullscreen: \"allowFullScreen\",\n            alt: \"alt\",\n            as: \"as\",\n            async: \"async\",\n            autocapitalize: \"autoCapitalize\",\n            autocomplete: \"autoComplete\",\n            autocorrect: \"autoCorrect\",\n            autofocus: \"autoFocus\",\n            autoplay: \"autoPlay\",\n            autosave: \"autoSave\",\n            capture: \"capture\",\n            cellpadding: \"cellPadding\",\n            cellspacing: \"cellSpacing\",\n            challenge: \"challenge\",\n            charset: \"charSet\",\n            checked: \"checked\",\n            children: \"children\",\n            cite: \"cite\",\n            class: \"className\",\n            classid: \"classID\",\n            classname: \"className\",\n            cols: \"cols\",\n            colspan: \"colSpan\",\n            content: \"content\",\n            contenteditable: \"contentEditable\",\n            contextmenu: \"contextMenu\",\n            controls: \"controls\",\n            controlslist: \"controlsList\",\n            coords: \"coords\",\n            crossorigin: \"crossOrigin\",\n            dangerouslysetinnerhtml: \"dangerouslySetInnerHTML\",\n            data: \"data\",\n            datetime: \"dateTime\",\n            default: \"default\",\n            defaultchecked: \"defaultChecked\",\n            defaultvalue: \"defaultValue\",\n            defer: \"defer\",\n            dir: \"dir\",\n            disabled: \"disabled\",\n            disablepictureinpicture: \"disablePictureInPicture\",\n            disableremoteplayback: \"disableRemotePlayback\",\n            download: \"download\",\n            draggable: \"draggable\",\n            enctype: \"encType\",\n            enterkeyhint: \"enterKeyHint\",\n            fetchpriority: \"fetchPriority\",\n            for: \"htmlFor\",\n            form: \"form\",\n            formmethod: \"formMethod\",\n            formaction: \"formAction\",\n            formenctype: \"formEncType\",\n            formnovalidate: \"formNoValidate\",\n            formtarget: \"formTarget\",\n            frameborder: \"frameBorder\",\n            headers: \"headers\",\n            height: \"height\",\n            hidden: \"hidden\",\n            high: \"high\",\n            href: \"href\",\n            hreflang: \"hrefLang\",\n            htmlfor: \"htmlFor\",\n            httpequiv: \"httpEquiv\",\n            \"http-equiv\": \"httpEquiv\",\n            icon: \"icon\",\n            id: \"id\",\n            imagesizes: \"imageSizes\",\n            imagesrcset: \"imageSrcSet\",\n            innerhtml: \"innerHTML\",\n            inputmode: \"inputMode\",\n            integrity: \"integrity\",\n            is: \"is\",\n            itemid: \"itemID\",\n            itemprop: \"itemProp\",\n            itemref: \"itemRef\",\n            itemscope: \"itemScope\",\n            itemtype: \"itemType\",\n            keyparams: \"keyParams\",\n            keytype: \"keyType\",\n            kind: \"kind\",\n            label: \"label\",\n            lang: \"lang\",\n            list: \"list\",\n            loop: \"loop\",\n            low: \"low\",\n            manifest: \"manifest\",\n            marginwidth: \"marginWidth\",\n            marginheight: \"marginHeight\",\n            max: \"max\",\n            maxlength: \"maxLength\",\n            media: \"media\",\n            mediagroup: \"mediaGroup\",\n            method: \"method\",\n            min: \"min\",\n            minlength: \"minLength\",\n            multiple: \"multiple\",\n            muted: \"muted\",\n            name: \"name\",\n            nomodule: \"noModule\",\n            nonce: \"nonce\",\n            novalidate: \"noValidate\",\n            open: \"open\",\n            optimum: \"optimum\",\n            pattern: \"pattern\",\n            placeholder: \"placeholder\",\n            playsinline: \"playsInline\",\n            poster: \"poster\",\n            preload: \"preload\",\n            profile: \"profile\",\n            radiogroup: \"radioGroup\",\n            readonly: \"readOnly\",\n            referrerpolicy: \"referrerPolicy\",\n            rel: \"rel\",\n            required: \"required\",\n            reversed: \"reversed\",\n            role: \"role\",\n            rows: \"rows\",\n            rowspan: \"rowSpan\",\n            sandbox: \"sandbox\",\n            scope: \"scope\",\n            scoped: \"scoped\",\n            scrolling: \"scrolling\",\n            seamless: \"seamless\",\n            selected: \"selected\",\n            shape: \"shape\",\n            size: \"size\",\n            sizes: \"sizes\",\n            span: \"span\",\n            spellcheck: \"spellCheck\",\n            src: \"src\",\n            srcdoc: \"srcDoc\",\n            srclang: \"srcLang\",\n            srcset: \"srcSet\",\n            start: \"start\",\n            step: \"step\",\n            style: \"style\",\n            summary: \"summary\",\n            tabindex: \"tabIndex\",\n            target: \"target\",\n            title: \"title\",\n            type: \"type\",\n            usemap: \"useMap\",\n            value: \"value\",\n            width: \"width\",\n            wmode: \"wmode\",\n            wrap: \"wrap\",\n            // SVG\n            about: \"about\",\n            accentheight: \"accentHeight\",\n            \"accent-height\": \"accentHeight\",\n            accumulate: \"accumulate\",\n            additive: \"additive\",\n            alignmentbaseline: \"alignmentBaseline\",\n            \"alignment-baseline\": \"alignmentBaseline\",\n            allowreorder: \"allowReorder\",\n            alphabetic: \"alphabetic\",\n            amplitude: \"amplitude\",\n            arabicform: \"arabicForm\",\n            \"arabic-form\": \"arabicForm\",\n            ascent: \"ascent\",\n            attributename: \"attributeName\",\n            attributetype: \"attributeType\",\n            autoreverse: \"autoReverse\",\n            azimuth: \"azimuth\",\n            basefrequency: \"baseFrequency\",\n            baselineshift: \"baselineShift\",\n            \"baseline-shift\": \"baselineShift\",\n            baseprofile: \"baseProfile\",\n            bbox: \"bbox\",\n            begin: \"begin\",\n            bias: \"bias\",\n            by: \"by\",\n            calcmode: \"calcMode\",\n            capheight: \"capHeight\",\n            \"cap-height\": \"capHeight\",\n            clip: \"clip\",\n            clippath: \"clipPath\",\n            \"clip-path\": \"clipPath\",\n            clippathunits: \"clipPathUnits\",\n            cliprule: \"clipRule\",\n            \"clip-rule\": \"clipRule\",\n            color: \"color\",\n            colorinterpolation: \"colorInterpolation\",\n            \"color-interpolation\": \"colorInterpolation\",\n            colorinterpolationfilters: \"colorInterpolationFilters\",\n            \"color-interpolation-filters\": \"colorInterpolationFilters\",\n            colorprofile: \"colorProfile\",\n            \"color-profile\": \"colorProfile\",\n            colorrendering: \"colorRendering\",\n            \"color-rendering\": \"colorRendering\",\n            contentscripttype: \"contentScriptType\",\n            contentstyletype: \"contentStyleType\",\n            cursor: \"cursor\",\n            cx: \"cx\",\n            cy: \"cy\",\n            d: \"d\",\n            datatype: \"datatype\",\n            decelerate: \"decelerate\",\n            descent: \"descent\",\n            diffuseconstant: \"diffuseConstant\",\n            direction: \"direction\",\n            display: \"display\",\n            divisor: \"divisor\",\n            dominantbaseline: \"dominantBaseline\",\n            \"dominant-baseline\": \"dominantBaseline\",\n            dur: \"dur\",\n            dx: \"dx\",\n            dy: \"dy\",\n            edgemode: \"edgeMode\",\n            elevation: \"elevation\",\n            enablebackground: \"enableBackground\",\n            \"enable-background\": \"enableBackground\",\n            end: \"end\",\n            exponent: \"exponent\",\n            externalresourcesrequired: \"externalResourcesRequired\",\n            fill: \"fill\",\n            fillopacity: \"fillOpacity\",\n            \"fill-opacity\": \"fillOpacity\",\n            fillrule: \"fillRule\",\n            \"fill-rule\": \"fillRule\",\n            filter: \"filter\",\n            filterres: \"filterRes\",\n            filterunits: \"filterUnits\",\n            floodopacity: \"floodOpacity\",\n            \"flood-opacity\": \"floodOpacity\",\n            floodcolor: \"floodColor\",\n            \"flood-color\": \"floodColor\",\n            focusable: \"focusable\",\n            fontfamily: \"fontFamily\",\n            \"font-family\": \"fontFamily\",\n            fontsize: \"fontSize\",\n            \"font-size\": \"fontSize\",\n            fontsizeadjust: \"fontSizeAdjust\",\n            \"font-size-adjust\": \"fontSizeAdjust\",\n            fontstretch: \"fontStretch\",\n            \"font-stretch\": \"fontStretch\",\n            fontstyle: \"fontStyle\",\n            \"font-style\": \"fontStyle\",\n            fontvariant: \"fontVariant\",\n            \"font-variant\": \"fontVariant\",\n            fontweight: \"fontWeight\",\n            \"font-weight\": \"fontWeight\",\n            format: \"format\",\n            from: \"from\",\n            fx: \"fx\",\n            fy: \"fy\",\n            g1: \"g1\",\n            g2: \"g2\",\n            glyphname: \"glyphName\",\n            \"glyph-name\": \"glyphName\",\n            glyphorientationhorizontal: \"glyphOrientationHorizontal\",\n            \"glyph-orientation-horizontal\": \"glyphOrientationHorizontal\",\n            glyphorientationvertical: \"glyphOrientationVertical\",\n            \"glyph-orientation-vertical\": \"glyphOrientationVertical\",\n            glyphref: \"glyphRef\",\n            gradienttransform: \"gradientTransform\",\n            gradientunits: \"gradientUnits\",\n            hanging: \"hanging\",\n            horizadvx: \"horizAdvX\",\n            \"horiz-adv-x\": \"horizAdvX\",\n            horizoriginx: \"horizOriginX\",\n            \"horiz-origin-x\": \"horizOriginX\",\n            ideographic: \"ideographic\",\n            imagerendering: \"imageRendering\",\n            \"image-rendering\": \"imageRendering\",\n            in2: \"in2\",\n            in: \"in\",\n            inlist: \"inlist\",\n            intercept: \"intercept\",\n            k1: \"k1\",\n            k2: \"k2\",\n            k3: \"k3\",\n            k4: \"k4\",\n            k: \"k\",\n            kernelmatrix: \"kernelMatrix\",\n            kernelunitlength: \"kernelUnitLength\",\n            kerning: \"kerning\",\n            keypoints: \"keyPoints\",\n            keysplines: \"keySplines\",\n            keytimes: \"keyTimes\",\n            lengthadjust: \"lengthAdjust\",\n            letterspacing: \"letterSpacing\",\n            \"letter-spacing\": \"letterSpacing\",\n            lightingcolor: \"lightingColor\",\n            \"lighting-color\": \"lightingColor\",\n            limitingconeangle: \"limitingConeAngle\",\n            local: \"local\",\n            markerend: \"markerEnd\",\n            \"marker-end\": \"markerEnd\",\n            markerheight: \"markerHeight\",\n            markermid: \"markerMid\",\n            \"marker-mid\": \"markerMid\",\n            markerstart: \"markerStart\",\n            \"marker-start\": \"markerStart\",\n            markerunits: \"markerUnits\",\n            markerwidth: \"markerWidth\",\n            mask: \"mask\",\n            maskcontentunits: \"maskContentUnits\",\n            maskunits: \"maskUnits\",\n            mathematical: \"mathematical\",\n            mode: \"mode\",\n            numoctaves: \"numOctaves\",\n            offset: \"offset\",\n            opacity: \"opacity\",\n            operator: \"operator\",\n            order: \"order\",\n            orient: \"orient\",\n            orientation: \"orientation\",\n            origin: \"origin\",\n            overflow: \"overflow\",\n            overlineposition: \"overlinePosition\",\n            \"overline-position\": \"overlinePosition\",\n            overlinethickness: \"overlineThickness\",\n            \"overline-thickness\": \"overlineThickness\",\n            paintorder: \"paintOrder\",\n            \"paint-order\": \"paintOrder\",\n            panose1: \"panose1\",\n            \"panose-1\": \"panose1\",\n            pathlength: \"pathLength\",\n            patterncontentunits: \"patternContentUnits\",\n            patterntransform: \"patternTransform\",\n            patternunits: \"patternUnits\",\n            pointerevents: \"pointerEvents\",\n            \"pointer-events\": \"pointerEvents\",\n            points: \"points\",\n            pointsatx: \"pointsAtX\",\n            pointsaty: \"pointsAtY\",\n            pointsatz: \"pointsAtZ\",\n            prefix: \"prefix\",\n            preservealpha: \"preserveAlpha\",\n            preserveaspectratio: \"preserveAspectRatio\",\n            primitiveunits: \"primitiveUnits\",\n            property: \"property\",\n            r: \"r\",\n            radius: \"radius\",\n            refx: \"refX\",\n            refy: \"refY\",\n            renderingintent: \"renderingIntent\",\n            \"rendering-intent\": \"renderingIntent\",\n            repeatcount: \"repeatCount\",\n            repeatdur: \"repeatDur\",\n            requiredextensions: \"requiredExtensions\",\n            requiredfeatures: \"requiredFeatures\",\n            resource: \"resource\",\n            restart: \"restart\",\n            result: \"result\",\n            results: \"results\",\n            rotate: \"rotate\",\n            rx: \"rx\",\n            ry: \"ry\",\n            scale: \"scale\",\n            security: \"security\",\n            seed: \"seed\",\n            shaperendering: \"shapeRendering\",\n            \"shape-rendering\": \"shapeRendering\",\n            slope: \"slope\",\n            spacing: \"spacing\",\n            specularconstant: \"specularConstant\",\n            specularexponent: \"specularExponent\",\n            speed: \"speed\",\n            spreadmethod: \"spreadMethod\",\n            startoffset: \"startOffset\",\n            stddeviation: \"stdDeviation\",\n            stemh: \"stemh\",\n            stemv: \"stemv\",\n            stitchtiles: \"stitchTiles\",\n            stopcolor: \"stopColor\",\n            \"stop-color\": \"stopColor\",\n            stopopacity: \"stopOpacity\",\n            \"stop-opacity\": \"stopOpacity\",\n            strikethroughposition: \"strikethroughPosition\",\n            \"strikethrough-position\": \"strikethroughPosition\",\n            strikethroughthickness: \"strikethroughThickness\",\n            \"strikethrough-thickness\": \"strikethroughThickness\",\n            string: \"string\",\n            stroke: \"stroke\",\n            strokedasharray: \"strokeDasharray\",\n            \"stroke-dasharray\": \"strokeDasharray\",\n            strokedashoffset: \"strokeDashoffset\",\n            \"stroke-dashoffset\": \"strokeDashoffset\",\n            strokelinecap: \"strokeLinecap\",\n            \"stroke-linecap\": \"strokeLinecap\",\n            strokelinejoin: \"strokeLinejoin\",\n            \"stroke-linejoin\": \"strokeLinejoin\",\n            strokemiterlimit: \"strokeMiterlimit\",\n            \"stroke-miterlimit\": \"strokeMiterlimit\",\n            strokewidth: \"strokeWidth\",\n            \"stroke-width\": \"strokeWidth\",\n            strokeopacity: \"strokeOpacity\",\n            \"stroke-opacity\": \"strokeOpacity\",\n            suppresscontenteditablewarning: \"suppressContentEditableWarning\",\n            suppresshydrationwarning: \"suppressHydrationWarning\",\n            surfacescale: \"surfaceScale\",\n            systemlanguage: \"systemLanguage\",\n            tablevalues: \"tableValues\",\n            targetx: \"targetX\",\n            targety: \"targetY\",\n            textanchor: \"textAnchor\",\n            \"text-anchor\": \"textAnchor\",\n            textdecoration: \"textDecoration\",\n            \"text-decoration\": \"textDecoration\",\n            textlength: \"textLength\",\n            textrendering: \"textRendering\",\n            \"text-rendering\": \"textRendering\",\n            to: \"to\",\n            transform: \"transform\",\n            transformorigin: \"transformOrigin\",\n            \"transform-origin\": \"transformOrigin\",\n            typeof: \"typeof\",\n            u1: \"u1\",\n            u2: \"u2\",\n            underlineposition: \"underlinePosition\",\n            \"underline-position\": \"underlinePosition\",\n            underlinethickness: \"underlineThickness\",\n            \"underline-thickness\": \"underlineThickness\",\n            unicode: \"unicode\",\n            unicodebidi: \"unicodeBidi\",\n            \"unicode-bidi\": \"unicodeBidi\",\n            unicoderange: \"unicodeRange\",\n            \"unicode-range\": \"unicodeRange\",\n            unitsperem: \"unitsPerEm\",\n            \"units-per-em\": \"unitsPerEm\",\n            unselectable: \"unselectable\",\n            valphabetic: \"vAlphabetic\",\n            \"v-alphabetic\": \"vAlphabetic\",\n            values: \"values\",\n            vectoreffect: \"vectorEffect\",\n            \"vector-effect\": \"vectorEffect\",\n            version: \"version\",\n            vertadvy: \"vertAdvY\",\n            \"vert-adv-y\": \"vertAdvY\",\n            vertoriginx: \"vertOriginX\",\n            \"vert-origin-x\": \"vertOriginX\",\n            vertoriginy: \"vertOriginY\",\n            \"vert-origin-y\": \"vertOriginY\",\n            vhanging: \"vHanging\",\n            \"v-hanging\": \"vHanging\",\n            videographic: \"vIdeographic\",\n            \"v-ideographic\": \"vIdeographic\",\n            viewbox: \"viewBox\",\n            viewtarget: \"viewTarget\",\n            visibility: \"visibility\",\n            vmathematical: \"vMathematical\",\n            \"v-mathematical\": \"vMathematical\",\n            vocab: \"vocab\",\n            widths: \"widths\",\n            wordspacing: \"wordSpacing\",\n            \"word-spacing\": \"wordSpacing\",\n            writingmode: \"writingMode\",\n            \"writing-mode\": \"writingMode\",\n            x1: \"x1\",\n            x2: \"x2\",\n            x: \"x\",\n            xchannelselector: \"xChannelSelector\",\n            xheight: \"xHeight\",\n            \"x-height\": \"xHeight\",\n            xlinkactuate: \"xlinkActuate\",\n            \"xlink:actuate\": \"xlinkActuate\",\n            xlinkarcrole: \"xlinkArcrole\",\n            \"xlink:arcrole\": \"xlinkArcrole\",\n            xlinkhref: \"xlinkHref\",\n            \"xlink:href\": \"xlinkHref\",\n            xlinkrole: \"xlinkRole\",\n            \"xlink:role\": \"xlinkRole\",\n            xlinkshow: \"xlinkShow\",\n            \"xlink:show\": \"xlinkShow\",\n            xlinktitle: \"xlinkTitle\",\n            \"xlink:title\": \"xlinkTitle\",\n            xlinktype: \"xlinkType\",\n            \"xlink:type\": \"xlinkType\",\n            xmlbase: \"xmlBase\",\n            \"xml:base\": \"xmlBase\",\n            xmllang: \"xmlLang\",\n            \"xml:lang\": \"xmlLang\",\n            xmlns: \"xmlns\",\n            \"xml:space\": \"xmlSpace\",\n            xmlnsxlink: \"xmlnsXlink\",\n            \"xmlns:xlink\": \"xmlnsXlink\",\n            xmlspace: \"xmlSpace\",\n            y1: \"y1\",\n            y2: \"y2\",\n            y: \"y\",\n            ychannelselector: \"yChannelSelector\",\n            z: \"z\",\n            zoomandpan: \"zoomAndPan\"\n        };\n        var warnedProperties = {};\n        var EVENT_NAME_REGEX = /^on./;\n        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;\n        var rARIA = new RegExp(\"^(aria)-[\" + ATTRIBUTE_NAME_CHAR + \"]*$\");\n        var rARIACamel = new RegExp(\"^(aria)[A-Z][\" + ATTRIBUTE_NAME_CHAR + \"]*$\");\n        function validateProperty(tagName, name, value, eventRegistry) {\n            {\n                if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {\n                    return true;\n                }\n                var lowerCasedName = name.toLowerCase();\n                if (lowerCasedName === \"onfocusin\" || lowerCasedName === \"onfocusout\") {\n                    error(\"React uses onFocus and onBlur instead of onFocusIn and onFocusOut. \" + \"All React events are normalized to bubble, so onFocusIn and onFocusOut \" + \"are not needed/supported by React.\");\n                    warnedProperties[name] = true;\n                    return true;\n                }\n                if (eventRegistry != null) {\n                    var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;\n                    if (registrationNameDependencies.hasOwnProperty(name)) {\n                        return true;\n                    }\n                    var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;\n                    if (registrationName != null) {\n                        error(\"Invalid event handler property `%s`. Did you mean `%s`?\", name, registrationName);\n                        warnedProperties[name] = true;\n                        return true;\n                    }\n                    if (EVENT_NAME_REGEX.test(name)) {\n                        error(\"Unknown event handler property `%s`. It will be ignored.\", name);\n                        warnedProperties[name] = true;\n                        return true;\n                    }\n                } else if (EVENT_NAME_REGEX.test(name)) {\n                    // If no event plugins have been injected, we are in a server environment.\n                    // So we can't tell if the event name is correct for sure, but we can filter\n                    // out known bad ones like `onclick`. We can't suggest a specific replacement though.\n                    if (INVALID_EVENT_NAME_REGEX.test(name)) {\n                        error(\"Invalid event handler property `%s`. \" + \"React events use the camelCase naming convention, for example `onClick`.\", name);\n                    }\n                    warnedProperties[name] = true;\n                    return true;\n                } // Let the ARIA attribute hook validate ARIA attributes\n                if (rARIA.test(name) || rARIACamel.test(name)) {\n                    return true;\n                }\n                if (lowerCasedName === \"innerhtml\") {\n                    error(\"Directly setting property `innerHTML` is not permitted. \" + \"For more information, lookup documentation on `dangerouslySetInnerHTML`.\");\n                    warnedProperties[name] = true;\n                    return true;\n                }\n                if (lowerCasedName === \"aria\") {\n                    error(\"The `aria` attribute is reserved for future use in React. \" + \"Pass individual `aria-` attributes instead.\");\n                    warnedProperties[name] = true;\n                    return true;\n                }\n                if (lowerCasedName === \"is\" && value !== null && value !== undefined && typeof value !== \"string\") {\n                    error(\"Received a `%s` for a string attribute `is`. If this is expected, cast \" + \"the value to a string.\", typeof value);\n                    warnedProperties[name] = true;\n                    return true;\n                }\n                if (typeof value === \"number\" && isNaN(value)) {\n                    error(\"Received NaN for the `%s` attribute. If this is expected, cast \" + \"the value to a string.\", name);\n                    warnedProperties[name] = true;\n                    return true;\n                } // Known attributes should match the casing specified in the property config.\n                if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {\n                    var standardName = possibleStandardNames[lowerCasedName];\n                    if (standardName !== name) {\n                        error(\"Invalid DOM property `%s`. Did you mean `%s`?\", name, standardName);\n                        warnedProperties[name] = true;\n                        return true;\n                    }\n                } else if (name !== lowerCasedName) {\n                    // Unknown attributes should have lowercase casing since that's how they\n                    // will be cased anyway with server rendering.\n                    error(\"React does not recognize the `%s` prop on a DOM element. If you \" + \"intentionally want it to appear in the DOM as a custom \" + \"attribute, spell it as lowercase `%s` instead. \" + \"If you accidentally passed it from a parent component, remove \" + \"it from the DOM element.\", name, lowerCasedName);\n                    warnedProperties[name] = true;\n                    return true;\n                } // Now that we've validated casing, do not validate\n                // data types for reserved props\n                switch(name){\n                    case \"dangerouslySetInnerHTML\":\n                    case \"children\":\n                    case \"style\":\n                    case \"suppressContentEditableWarning\":\n                    case \"suppressHydrationWarning\":\n                    case \"defaultValue\":\n                    case \"defaultChecked\":\n                    case \"innerHTML\":\n                        {\n                            return true;\n                        }\n                }\n                switch(typeof value){\n                    case \"boolean\":\n                        {\n                            switch(name){\n                                case \"autoFocus\":\n                                case \"checked\":\n                                case \"multiple\":\n                                case \"muted\":\n                                case \"selected\":\n                                case \"contentEditable\":\n                                case \"spellCheck\":\n                                case \"draggable\":\n                                case \"value\":\n                                case \"autoReverse\":\n                                case \"externalResourcesRequired\":\n                                case \"focusable\":\n                                case \"preserveAlpha\":\n                                case \"allowFullScreen\":\n                                case \"async\":\n                                case \"autoPlay\":\n                                case \"controls\":\n                                case \"default\":\n                                case \"defer\":\n                                case \"disabled\":\n                                case \"disablePictureInPicture\":\n                                case \"disableRemotePlayback\":\n                                case \"formNoValidate\":\n                                case \"hidden\":\n                                case \"loop\":\n                                case \"noModule\":\n                                case \"noValidate\":\n                                case \"open\":\n                                case \"playsInline\":\n                                case \"readOnly\":\n                                case \"required\":\n                                case \"reversed\":\n                                case \"scoped\":\n                                case \"seamless\":\n                                case \"itemScope\":\n                                case \"capture\":\n                                case \"download\":\n                                    {\n                                        // Boolean properties can accept boolean values\n                                        return true;\n                                    }\n                                default:\n                                    {\n                                        var prefix = name.toLowerCase().slice(0, 5);\n                                        if (prefix === \"data-\" || prefix === \"aria-\") {\n                                            return true;\n                                        }\n                                        if (value) {\n                                            error(\"Received `%s` for a non-boolean attribute `%s`.\\n\\n\" + \"If you want to write it to the DOM, pass a string instead: \" + '%s=\"%s\" or %s={value.toString()}.', value, name, name, value, name);\n                                        } else {\n                                            error(\"Received `%s` for a non-boolean attribute `%s`.\\n\\n\" + \"If you want to write it to the DOM, pass a string instead: \" + '%s=\"%s\" or %s={value.toString()}.\\n\\n' + \"If you used to conditionally omit it with %s={condition && value}, \" + \"pass %s={condition ? value : undefined} instead.\", value, name, name, value, name, name, name);\n                                        }\n                                        warnedProperties[name] = true;\n                                        return true;\n                                    }\n                            }\n                        }\n                    case \"function\":\n                    case \"symbol\":\n                        // eslint-disable-line\n                        // Warn when a known attribute is a bad type\n                        warnedProperties[name] = true;\n                        return false;\n                    case \"string\":\n                        {\n                            // Warn when passing the strings 'false' or 'true' into a boolean prop\n                            if (value === \"false\" || value === \"true\") {\n                                switch(name){\n                                    case \"checked\":\n                                    case \"selected\":\n                                    case \"multiple\":\n                                    case \"muted\":\n                                    case \"allowFullScreen\":\n                                    case \"async\":\n                                    case \"autoPlay\":\n                                    case \"controls\":\n                                    case \"default\":\n                                    case \"defer\":\n                                    case \"disabled\":\n                                    case \"disablePictureInPicture\":\n                                    case \"disableRemotePlayback\":\n                                    case \"formNoValidate\":\n                                    case \"hidden\":\n                                    case \"loop\":\n                                    case \"noModule\":\n                                    case \"noValidate\":\n                                    case \"open\":\n                                    case \"playsInline\":\n                                    case \"readOnly\":\n                                    case \"required\":\n                                    case \"reversed\":\n                                    case \"scoped\":\n                                    case \"seamless\":\n                                    case \"itemScope\":\n                                        {\n                                            break;\n                                        }\n                                    default:\n                                        {\n                                            return true;\n                                        }\n                                }\n                                error(\"Received the string `%s` for the boolean attribute `%s`. \" + \"%s \" + \"Did you mean %s={%s}?\", value, name, value === \"false\" ? \"The browser will interpret it as a truthy value.\" : 'Although this works, it will not work as expected if you pass the string \"false\".', name, value);\n                                warnedProperties[name] = true;\n                                return true;\n                            }\n                        }\n                }\n                return true;\n            }\n        }\n        function warnUnknownProperties(type, props, eventRegistry) {\n            {\n                var unknownProps = [];\n                for(var key in props){\n                    var isValid = validateProperty(type, key, props[key], eventRegistry);\n                    if (!isValid) {\n                        unknownProps.push(key);\n                    }\n                }\n                var unknownPropString = unknownProps.map(function(prop) {\n                    return \"`\" + prop + \"`\";\n                }).join(\", \");\n                if (unknownProps.length === 1) {\n                    error(\"Invalid value for prop %s on <%s> tag. Either remove it from the element, \" + \"or pass a string or number value to keep it in the DOM. \" + \"For details, see https://reactjs.org/link/attribute-behavior \", unknownPropString, type);\n                } else if (unknownProps.length > 1) {\n                    error(\"Invalid values for props %s on <%s> tag. Either remove them from the element, \" + \"or pass a string or number value to keep them in the DOM. \" + \"For details, see https://reactjs.org/link/attribute-behavior \", unknownPropString, type);\n                }\n            }\n        }\n        function validateProperties(type, props, eventRegistry) {\n            if (isCustomElement(type) || typeof props.is === \"string\") {\n                return;\n            }\n            warnUnknownProperties(type, props, eventRegistry);\n        }\n        // 'msTransform' is correct, but the other prefixes should be capitalized\n        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;\n        var msPattern$1 = /^-ms-/;\n        var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon\n        var badStyleValueWithSemicolonPattern = /;\\s*$/;\n        var warnedStyleNames = {};\n        var warnedStyleValues = {};\n        var warnedForNaNValue = false;\n        var warnedForInfinityValue = false;\n        function camelize(string) {\n            return string.replace(hyphenPattern, function(_, character) {\n                return character.toUpperCase();\n            });\n        }\n        function warnHyphenatedStyleName(name) {\n            {\n                if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n                    return;\n                }\n                warnedStyleNames[name] = true;\n                error(\"Unsupported style property %s. Did you mean %s?\", name, // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix\n                // is converted to lowercase `ms`.\n                camelize(name.replace(msPattern$1, \"ms-\")));\n            }\n        }\n        function warnBadVendoredStyleName(name) {\n            {\n                if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n                    return;\n                }\n                warnedStyleNames[name] = true;\n                error(\"Unsupported vendor-prefixed style property %s. Did you mean %s?\", name, name.charAt(0).toUpperCase() + name.slice(1));\n            }\n        }\n        function warnStyleValueWithSemicolon(name, value) {\n            {\n                if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {\n                    return;\n                }\n                warnedStyleValues[value] = true;\n                error(\"Style property values shouldn't contain a semicolon. \" + 'Try \"%s: %s\" instead.', name, value.replace(badStyleValueWithSemicolonPattern, \"\"));\n            }\n        }\n        function warnStyleValueIsNaN(name, value) {\n            {\n                if (warnedForNaNValue) {\n                    return;\n                }\n                warnedForNaNValue = true;\n                error(\"`NaN` is an invalid value for the `%s` css style property.\", name);\n            }\n        }\n        function warnStyleValueIsInfinity(name, value) {\n            {\n                if (warnedForInfinityValue) {\n                    return;\n                }\n                warnedForInfinityValue = true;\n                error(\"`Infinity` is an invalid value for the `%s` css style property.\", name);\n            }\n        }\n        function warnValidStyle(name, value) {\n            {\n                if (name.indexOf(\"-\") > -1) {\n                    warnHyphenatedStyleName(name);\n                } else if (badVendoredStyleNamePattern.test(name)) {\n                    warnBadVendoredStyleName(name);\n                } else if (badStyleValueWithSemicolonPattern.test(value)) {\n                    warnStyleValueWithSemicolon(name, value);\n                }\n                if (typeof value === \"number\") {\n                    if (isNaN(value)) {\n                        warnStyleValueIsNaN(name);\n                    } else if (!isFinite(value)) {\n                        warnStyleValueIsInfinity(name);\n                    }\n                }\n            }\n        }\n        // code copied and modified from escape-html\n        var matchHtmlRegExp = /[\"'&<>]/;\n        /**\n * Escapes special characters and HTML entities in a given html string.\n *\n * @param  {string} string HTML string to escape for later insertion\n * @return {string}\n * @public\n */ function escapeHtml(string) {\n            {\n                checkHtmlStringCoercion(string);\n            }\n            var str = \"\" + string;\n            var match = matchHtmlRegExp.exec(str);\n            if (!match) {\n                return str;\n            }\n            var escape;\n            var html = \"\";\n            var index;\n            var lastIndex = 0;\n            for(index = match.index; index < str.length; index++){\n                switch(str.charCodeAt(index)){\n                    case 34:\n                        // \"\n                        escape = \"&quot;\";\n                        break;\n                    case 38:\n                        // &\n                        escape = \"&amp;\";\n                        break;\n                    case 39:\n                        // '\n                        escape = \"&#x27;\"; // modified from escape-html; used to be '&#39'\n                        break;\n                    case 60:\n                        // <\n                        escape = \"&lt;\";\n                        break;\n                    case 62:\n                        // >\n                        escape = \"&gt;\";\n                        break;\n                    default:\n                        continue;\n                }\n                if (lastIndex !== index) {\n                    html += str.slice(lastIndex, index);\n                }\n                lastIndex = index + 1;\n                html += escape;\n            }\n            return lastIndex !== index ? html + str.slice(lastIndex, index) : html;\n        } // end code copied and modified from escape-html\n        /**\n * Escapes text to prevent scripting attacks.\n *\n * @param {*} text Text value to escape.\n * @return {string} An escaped string.\n */ function escapeTextForBrowser(text) {\n            if (typeof text === \"boolean\" || typeof text === \"number\") {\n                // this shortcircuit helps perf for types that we know will never have\n                // special characters, especially given that this function is used often\n                // for numeric dom ids.\n                return \"\" + text;\n            }\n            return escapeHtml(text);\n        }\n        var uppercasePattern = /([A-Z])/g;\n        var msPattern = /^ms-/;\n        /**\n * Hyphenates a camelcased CSS property name, for example:\n *\n *   > hyphenateStyleName('backgroundColor')\n *   < \"background-color\"\n *   > hyphenateStyleName('MozTransition')\n *   < \"-moz-transition\"\n *   > hyphenateStyleName('msTransition')\n *   < \"-ms-transition\"\n *\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix\n * is converted to `-ms-`.\n */ function hyphenateStyleName(name) {\n            return name.replace(uppercasePattern, \"-$1\").toLowerCase().replace(msPattern, \"-ms-\");\n        }\n        // and any newline or tab are filtered out as if they're not part of the URL.\n        // https://url.spec.whatwg.org/#url-parsing\n        // Tab or newline are defined as \\r\\n\\t:\n        // https://infra.spec.whatwg.org/#ascii-tab-or-newline\n        // A C0 control is a code point in the range \\u0000 NULL to \\u001F\n        // INFORMATION SEPARATOR ONE, inclusive:\n        // https://infra.spec.whatwg.org/#c0-control-or-space\n        /* eslint-disable max-len */ var isJavaScriptProtocol = /^[\\u0000-\\u001F ]*j[\\r\\n\\t]*a[\\r\\n\\t]*v[\\r\\n\\t]*a[\\r\\n\\t]*s[\\r\\n\\t]*c[\\r\\n\\t]*r[\\r\\n\\t]*i[\\r\\n\\t]*p[\\r\\n\\t]*t[\\r\\n\\t]*\\:/i;\n        var didWarn = false;\n        function sanitizeURL(url) {\n            // We should never have symbols here because they get filtered out elsewhere.\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            var stringifiedURL = \"\" + url;\n            {\n                if (!didWarn && isJavaScriptProtocol.test(stringifiedURL)) {\n                    didWarn = true;\n                    error(\"A future version of React will block javascript: URLs as a security precaution. \" + \"Use event handlers instead if you can. If you need to generate unsafe HTML try \" + \"using dangerouslySetInnerHTML instead. React was passed %s.\", JSON.stringify(stringifiedURL));\n                }\n            }\n            return url;\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        // The build script is at scripts/rollup/generate-inline-fizz-runtime.js.\n        // Run `yarn generate-inline-fizz-runtime` to generate.\n        var clientRenderBoundary = '$RX=function(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data=\"$!\",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};';\n        var completeBoundary = '$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data=\"$!\",a.setAttribute(\"data-dgst\",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if(\"/$\"===d)if(0===f)break;else f--;else\"$\"!==d&&\"$?\"!==d&&\"$!\"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data=\"$\"}b._reactRetry&&b._reactRetry()}};';\n        var completeBoundaryWithStyles = '$RM=new Map;\\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll(\"link[data-precedence],style[data-precedence]\"),v=[],k=0;b=h[k++];)\"not all\"===b.getAttribute(\"media\")?v.push(b):(\"LINK\"===b.tagName&&n.set(b.getAttribute(\"href\"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement(\"link\");a.href=d;a.rel=\"stylesheet\";for(a.dataset.precedence=\\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute(\"media\");!e||\"l\"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute(\"data-precedence\");a.removeAttribute(\"media\")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,\"\"),u.bind(null,r,t,\"Resource failed to load\"))};';\n        var completeSegment = \"$RS=function(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};\";\n        function getValueDescriptorExpectingObjectForWarning(thing) {\n            return thing === null ? \"`null`\" : thing === undefined ? \"`undefined`\" : thing === \"\" ? \"an empty string\" : 'something with type \"' + typeof thing + '\"';\n        }\n        function getValueDescriptorExpectingEnumForWarning(thing) {\n            return thing === null ? \"`null`\" : thing === undefined ? \"`undefined`\" : thing === \"\" ? \"an empty string\" : typeof thing === \"string\" ? JSON.stringify(thing) : 'something with type \"' + typeof thing + '\"';\n        }\n        function compareResourcePropsForWarning(newProps, currentProps) {\n            {\n                var propDiffs = null;\n                var allProps = Array.from(new Set(Object.keys(currentProps).concat(Object.keys(newProps))));\n                for(var i = 0; i < allProps.length; i++){\n                    var propName = allProps[i];\n                    var newValue = newProps[propName];\n                    var currentValue = currentProps[propName];\n                    if (newValue !== currentValue && !(newValue == null && currentValue == null)) {\n                        if (newValue == null) {\n                            if (propDiffs === null) {\n                                propDiffs = {\n                                    missing: {},\n                                    extra: {},\n                                    different: {}\n                                };\n                            }\n                            propDiffs.missing[propName] = currentValue;\n                        } else if (currentValue == null) {\n                            if (propDiffs === null) {\n                                propDiffs = {\n                                    missing: {},\n                                    extra: {},\n                                    different: {}\n                                };\n                            }\n                            propDiffs.extra[propName] = newValue;\n                        } else {\n                            if (propDiffs === null) {\n                                propDiffs = {\n                                    missing: {},\n                                    extra: {},\n                                    different: {}\n                                };\n                            }\n                            propDiffs.different[propName] = {\n                                original: currentValue,\n                                latest: newValue\n                            };\n                        }\n                    }\n                }\n                return propDiffs;\n            }\n        }\n        function describeDifferencesForStylesheets(newProps, currentProps) {\n            var diff = compareResourcePropsForWarning(newProps, currentProps);\n            if (!diff) return \"\";\n            var description = \"\";\n            for(var propName in diff.missing){\n                var propValue = diff.missing[propName];\n                if (propName === \"media\") {\n                    description += '\\n  \"' + propName + '\" missing for props, original value: ' + getValueDescriptorExpectingEnumForWarning(propValue);\n                }\n            }\n            for(var _propName in diff.extra){\n                var _propValue = diff.extra[_propName];\n                description += '\\n  \"' + _propName + '\" prop value: ' + getValueDescriptorExpectingEnumForWarning(_propValue) + \", missing from original props\";\n            }\n            for(var _propName2 in diff.different){\n                var latestValue = diff.different[_propName2].latest;\n                var originalValue = diff.different[_propName2].original;\n                description += '\\n  \"' + _propName2 + '\" prop value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + \", original value: \" + getValueDescriptorExpectingEnumForWarning(originalValue);\n            }\n            return description;\n        }\n        function describeDifferencesForStylesheetOverPreinit(newProps, currentProps) {\n            var diff = compareResourcePropsForWarning(newProps, currentProps);\n            if (!diff) return \"\";\n            var description = \"\";\n            for(var propName in diff.extra){\n                var propValue = diff.extra[propName];\n                if (propName === \"precedence\" || propName === \"crossOrigin\" || propName === \"integrity\") {\n                    description += '\\n  \"' + propName + '\" prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue) + \", option missing\";\n                } else {\n                    description += '\\n  \"' + propName + '\" prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue) + \", option not available with ReactDOM.preinit()\";\n                }\n            }\n            for(var _propName3 in diff.different){\n                var latestValue = diff.different[_propName3].latest;\n                var originalValue = diff.different[_propName3].original;\n                if (_propName3 === \"precedence\" && originalValue === \"default\") {\n                    description += '\\n  \"' + _propName3 + '\" prop value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + \", missing from options\";\n                } else {\n                    description += '\\n  \"' + _propName3 + '\" prop value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + \", option value: \" + getValueDescriptorExpectingEnumForWarning(originalValue);\n                }\n            }\n            return description;\n        }\n        function describeDifferencesForPreinitOverStylesheet(newProps, currentProps) {\n            var diff = compareResourcePropsForWarning(newProps, currentProps);\n            if (!diff) return \"\";\n            var description = \"\";\n            for(var propName in diff.missing){\n                var propValue = diff.missing[propName];\n                if (propName === \"precedence\" && propValue !== \"default\") {\n                    description += '\\n  \"' + propName + '\" missing from options, prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue);\n                }\n            }\n            for(var _propName4 in diff.extra){\n                var _propValue2 = diff.extra[_propName4];\n                if (_propName4 === \"precedence\" || _propName4 === \"crossOrigin\" || _propName4 === \"integrity\") {\n                    description += '\\n  \"' + _propName4 + '\" option value: ' + getValueDescriptorExpectingEnumForWarning(_propValue2) + \", missing from props\";\n                }\n            }\n            for(var _propName5 in diff.different){\n                var latestValue = diff.different[_propName5].latest;\n                var originalValue = diff.different[_propName5].original;\n                description += '\\n  \"' + _propName5 + '\" option value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + \", prop value: \" + getValueDescriptorExpectingEnumForWarning(originalValue);\n            }\n            return description;\n        }\n        function describeDifferencesForPreinits(newProps, currentProps) {\n            var diff = compareResourcePropsForWarning(newProps, currentProps);\n            if (!diff) return \"\";\n            var description = \"\";\n            for(var propName in diff.missing){\n                var propValue = diff.missing[propName];\n                if (propName === \"precedence\" && propValue !== \"default\") {\n                    description += '\\n  \"' + propName + '\" missing from options, original option value: ' + getValueDescriptorExpectingEnumForWarning(propValue);\n                }\n            }\n            for(var _propName6 in diff.extra){\n                var _propValue3 = diff.extra[_propName6];\n                if (_propName6 === \"precedence\" && _propValue3 !== \"default\" || _propName6 === \"crossOrigin\" || _propName6 === \"integrity\") {\n                    description += '\\n  \"' + _propName6 + '\" option value: ' + getValueDescriptorExpectingEnumForWarning(_propValue3) + \", missing from original options\";\n                }\n            }\n            for(var _propName7 in diff.different){\n                var latestValue = diff.different[_propName7].latest;\n                var originalValue = diff.different[_propName7].original;\n                description += '\\n  \"' + _propName7 + '\" option value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + \", original option value: \" + getValueDescriptorExpectingEnumForWarning(originalValue);\n            }\n            return description;\n        }\n        var preloadOptionsForComparison = [\n            \"as\",\n            \"crossOrigin\",\n            \"integrity\",\n            \"media\"\n        ];\n        function describeDifferencesForPreloads(newProps, currentProps) {\n            var diff = compareResourcePropsForWarning(newProps, currentProps);\n            if (!diff) return \"\";\n            var description = \"\";\n            for(var propName in diff.missing){\n                var propValue = diff.missing[propName];\n                if (preloadOptionsForComparison.includes(propName)) {\n                    description += '\\n  \"' + propName + '\" missing from options, original option value: ' + getValueDescriptorExpectingEnumForWarning(propValue);\n                }\n            }\n            for(var _propName8 in diff.extra){\n                var _propValue4 = diff.extra[_propName8];\n                if (preloadOptionsForComparison.includes(_propName8)) {\n                    description += '\\n  \"' + _propName8 + '\" option value: ' + getValueDescriptorExpectingEnumForWarning(_propValue4) + \", missing from original options\";\n                }\n            }\n            for(var _propName9 in diff.different){\n                var latestValue = diff.different[_propName9].latest;\n                var originalValue = diff.different[_propName9].original;\n                if (preloadOptionsForComparison.includes(_propName9)) {\n                    description += '\\n  \"' + _propName9 + '\" option value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + \", original option value: \" + getValueDescriptorExpectingEnumForWarning(originalValue);\n                }\n            }\n            return description;\n        }\n        function describeDifferencesForPreloadOverImplicitPreload(newProps, currentProps) {\n            var diff = compareResourcePropsForWarning(newProps, currentProps);\n            if (!diff) return \"\";\n            var description = \"\";\n            for(var propName in diff.missing){\n                var propValue = diff.missing[propName];\n                if (preloadOptionsForComparison.includes(propName)) {\n                    description += '\\n  \"' + propName + '\" missing from options, underlying prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue);\n                }\n            }\n            for(var _propName10 in diff.extra){\n                var _propValue5 = diff.extra[_propName10];\n                if (preloadOptionsForComparison.includes(_propName10)) {\n                    description += '\\n  \"' + _propName10 + '\" option value: ' + getValueDescriptorExpectingEnumForWarning(_propValue5) + \", missing from underlying props\";\n                }\n            }\n            for(var _propName11 in diff.different){\n                var latestValue = diff.different[_propName11].latest;\n                var originalValue = diff.different[_propName11].original;\n                if (preloadOptionsForComparison.includes(_propName11)) {\n                    description += '\\n  \"' + _propName11 + '\" option value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + \", underlying prop value: \" + getValueDescriptorExpectingEnumForWarning(originalValue);\n                }\n            }\n            return description;\n        }\n        function describeDifferencesForScripts(newProps, currentProps) {\n            var diff = compareResourcePropsForWarning(newProps, currentProps);\n            if (!diff) return \"\";\n            var description = \"\";\n            for(var propName in diff.missing){\n                var propValue = diff.missing[propName];\n                description += '\\n  \"' + propName + '\" missing for props, original value: ' + getValueDescriptorExpectingEnumForWarning(propValue);\n            }\n            for(var _propName12 in diff.extra){\n                var _propValue6 = diff.extra[_propName12];\n                description += '\\n  \"' + _propName12 + '\" prop value: ' + getValueDescriptorExpectingEnumForWarning(_propValue6) + \", missing from original props\";\n            }\n            for(var _propName13 in diff.different){\n                var latestValue = diff.different[_propName13].latest;\n                var originalValue = diff.different[_propName13].original;\n                description += '\\n  \"' + _propName13 + '\" prop value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + \", original value: \" + getValueDescriptorExpectingEnumForWarning(originalValue);\n            }\n            return description;\n        }\n        function describeDifferencesForScriptOverPreinit(newProps, currentProps) {\n            var diff = compareResourcePropsForWarning(newProps, currentProps);\n            if (!diff) return \"\";\n            var description = \"\";\n            for(var propName in diff.extra){\n                var propValue = diff.extra[propName];\n                if (propName === \"crossOrigin\" || propName === \"integrity\") {\n                    description += '\\n  \"' + propName + '\" prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue) + \", option missing\";\n                } else {\n                    description += '\\n  \"' + propName + '\" prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue) + \", option not available with ReactDOM.preinit()\";\n                }\n            }\n            for(var _propName14 in diff.different){\n                var latestValue = diff.different[_propName14].latest;\n                var originalValue = diff.different[_propName14].original;\n                description += '\\n  \"' + _propName14 + '\" prop value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + \", option value: \" + getValueDescriptorExpectingEnumForWarning(originalValue);\n            }\n            return description;\n        }\n        function describeDifferencesForPreinitOverScript(newProps, currentProps) {\n            var diff = compareResourcePropsForWarning(newProps, currentProps);\n            if (!diff) return \"\";\n            var description = \"\";\n            for(var propName in diff.extra){\n                var propValue = diff.extra[propName];\n                if (propName === \"crossOrigin\" || propName === \"integrity\") {\n                    description += '\\n  \"' + propName + '\" option value: ' + getValueDescriptorExpectingEnumForWarning(propValue) + \", missing from props\";\n                }\n            }\n            for(var _propName15 in diff.different){\n                var latestValue = diff.different[_propName15].latest;\n                var originalValue = diff.different[_propName15].original;\n                description += '\\n  \"' + _propName15 + '\" option value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + \", prop value: \" + getValueDescriptorExpectingEnumForWarning(originalValue);\n            }\n            return description;\n        }\n        var ReactDOMSharedInternals = ReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        var ReactDOMCurrentDispatcher = ReactDOMSharedInternals.Dispatcher;\n        var ReactDOMServerDispatcher = {\n            prefetchDNS: prefetchDNS,\n            preconnect: preconnect,\n            preload: preload,\n            preinit: preinit\n        };\n        function prepareHostDispatcher() {\n            ReactDOMCurrentDispatcher.current = ReactDOMServerDispatcher;\n        } // Used to distinguish these contexts from ones used in other renderers.\n        var ScriptStreamingFormat = 0;\n        var DataStreamingFormat = 1;\n        var NothingSent = 0;\n        var SentCompleteSegmentFunction = 1;\n        var SentCompleteBoundaryFunction = 2;\n        var SentClientRenderFunction = 4;\n        var SentStyleInsertionFunction = 8;\n        var dataElementQuotedEnd = stringToPrecomputedChunk('\"></template>');\n        var startInlineScript = stringToPrecomputedChunk(\"<script>\");\n        var endInlineScript = stringToPrecomputedChunk(\"</script>\");\n        var startScriptSrc = stringToPrecomputedChunk('<script src=\"');\n        var startModuleSrc = stringToPrecomputedChunk('<script type=\"module\" src=\"');\n        var scriptNonce = stringToPrecomputedChunk('\" nonce=\"');\n        var scriptIntegirty = stringToPrecomputedChunk('\" integrity=\"');\n        var scriptCrossOrigin = stringToPrecomputedChunk('\" crossorigin=\"');\n        var endAsyncScript = stringToPrecomputedChunk('\" async=\"\"></script>');\n        /**\n * This escaping function is designed to work with bootstrapScriptContent only.\n * because we know we are escaping the entire script. We can avoid for instance\n * escaping html comment string sequences that are valid javascript as well because\n * if there are no sebsequent <script sequences the html parser will never enter\n * script data double escaped state (see: https://www.w3.org/TR/html53/syntax.html#script-data-double-escaped-state)\n *\n * While untrusted script content should be made safe before using this api it will\n * ensure that the script cannot be early terminated or never terminated state\n */ function escapeBootstrapScriptContent(scriptText) {\n            {\n                checkHtmlStringCoercion(scriptText);\n            }\n            return (\"\" + scriptText).replace(scriptRegex, scriptReplacer);\n        }\n        var scriptRegex = /(<\\/|<)(s)(cript)/gi;\n        var scriptReplacer = function(match, prefix, s, suffix) {\n            return \"\" + prefix + (s === \"s\" ? \"\\\\u0073\" : \"\\\\u0053\") + suffix;\n        }; // Allows us to keep track of what we've already written so we can refer back to it.\n        // if passed externalRuntimeConfig and the enableFizzExternalRuntime feature flag\n        // is set, the server will send instructions via data attributes (instead of inline scripts)\n        function createResponseState$1(resources, identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules, externalRuntimeConfig) {\n            var idPrefix = identifierPrefix === undefined ? \"\" : identifierPrefix;\n            var inlineScriptWithNonce = nonce === undefined ? startInlineScript : stringToPrecomputedChunk('<script nonce=\"' + escapeTextForBrowser(nonce) + '\">');\n            var bootstrapChunks = [];\n            var externalRuntimeScript = null;\n            var streamingFormat = ScriptStreamingFormat;\n            if (bootstrapScriptContent !== undefined) {\n                bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapScriptContent(bootstrapScriptContent)), endInlineScript);\n            }\n            {\n                if (externalRuntimeConfig !== undefined) {\n                    streamingFormat = DataStreamingFormat;\n                    if (typeof externalRuntimeConfig === \"string\") {\n                        externalRuntimeScript = {\n                            src: externalRuntimeConfig,\n                            chunks: []\n                        };\n                        pushScriptImpl(externalRuntimeScript.chunks, {\n                            src: externalRuntimeConfig,\n                            async: true,\n                            integrity: undefined,\n                            nonce: nonce\n                        });\n                    } else {\n                        externalRuntimeScript = {\n                            src: externalRuntimeConfig.src,\n                            chunks: []\n                        };\n                        pushScriptImpl(externalRuntimeScript.chunks, {\n                            src: externalRuntimeConfig.src,\n                            async: true,\n                            integrity: externalRuntimeConfig.integrity,\n                            nonce: nonce\n                        });\n                    }\n                }\n            }\n            if (bootstrapScripts !== undefined) {\n                for(var i = 0; i < bootstrapScripts.length; i++){\n                    var scriptConfig = bootstrapScripts[i];\n                    var src = typeof scriptConfig === \"string\" ? scriptConfig : scriptConfig.src;\n                    var integrity = typeof scriptConfig === \"string\" ? undefined : scriptConfig.integrity;\n                    var crossOrigin = typeof scriptConfig === \"string\" || scriptConfig.crossOrigin == null ? undefined : scriptConfig.crossOrigin === \"use-credentials\" ? \"use-credentials\" : \"\";\n                    preloadBootstrapScript(resources, src, nonce, integrity, crossOrigin);\n                    bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(src)));\n                    if (nonce) {\n                        bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));\n                    }\n                    if (integrity) {\n                        bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(integrity)));\n                    }\n                    if (typeof crossOrigin === \"string\") {\n                        bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(crossOrigin)));\n                    }\n                    bootstrapChunks.push(endAsyncScript);\n                }\n            }\n            if (bootstrapModules !== undefined) {\n                for(var _i = 0; _i < bootstrapModules.length; _i++){\n                    var _scriptConfig = bootstrapModules[_i];\n                    var _src = typeof _scriptConfig === \"string\" ? _scriptConfig : _scriptConfig.src;\n                    var _integrity = typeof _scriptConfig === \"string\" ? undefined : _scriptConfig.integrity;\n                    var _crossOrigin = typeof _scriptConfig === \"string\" || _scriptConfig.crossOrigin == null ? undefined : _scriptConfig.crossOrigin === \"use-credentials\" ? \"use-credentials\" : \"\";\n                    preloadBootstrapModule(resources, _src, nonce, _integrity, _crossOrigin);\n                    bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(_src)));\n                    if (nonce) {\n                        bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));\n                    }\n                    if (_integrity) {\n                        bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(_integrity)));\n                    }\n                    if (typeof _crossOrigin === \"string\") {\n                        bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(_crossOrigin)));\n                    }\n                    bootstrapChunks.push(endAsyncScript);\n                }\n            }\n            return {\n                bootstrapChunks: bootstrapChunks,\n                placeholderPrefix: stringToPrecomputedChunk(idPrefix + \"P:\"),\n                segmentPrefix: stringToPrecomputedChunk(idPrefix + \"S:\"),\n                boundaryPrefix: idPrefix + \"B:\",\n                idPrefix: idPrefix,\n                nextSuspenseID: 0,\n                streamingFormat: streamingFormat,\n                startInlineScript: inlineScriptWithNonce,\n                instructions: NothingSent,\n                externalRuntimeScript: externalRuntimeScript,\n                htmlChunks: null,\n                headChunks: null,\n                hasBody: false,\n                charsetChunks: [],\n                preconnectChunks: [],\n                preloadChunks: [],\n                hoistableChunks: [],\n                stylesToHoist: false,\n                nonce: nonce\n            };\n        } // Constants for the insertion mode we're currently writing in. We don't encode all HTML5 insertion\n        // modes. We only include the variants as they matter for the sake of our purposes.\n        // We don't actually provide the namespace therefore we use constants instead of the string.\n        var ROOT_HTML_MODE = 0; // Used for the root most element tag.\n        // We have a less than HTML_HTML_MODE check elsewhere. If you add more cases here, make sure it\n        // still makes sense\n        var HTML_HTML_MODE = 1; // Used for the <html> if it is at the top level.\n        var HTML_MODE = 2;\n        var SVG_MODE = 3;\n        var MATHML_MODE = 4;\n        var HTML_TABLE_MODE = 5;\n        var HTML_TABLE_BODY_MODE = 6;\n        var HTML_TABLE_ROW_MODE = 7;\n        var HTML_COLGROUP_MODE = 8; // We have a greater than HTML_TABLE_MODE check elsewhere. If you add more cases here, make sure it\n        // still makes sense\n        // Lets us keep track of contextual state and pick it back up after suspending.\n        function createFormatContext(insertionMode, selectedValue, noscriptTagInScope) {\n            return {\n                insertionMode: insertionMode,\n                selectedValue: selectedValue,\n                noscriptTagInScope: noscriptTagInScope\n            };\n        }\n        function getChildFormatContext(parentContext, type, props) {\n            switch(type){\n                case \"noscript\":\n                    return createFormatContext(HTML_MODE, null, true);\n                case \"select\":\n                    return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue, parentContext.noscriptTagInScope);\n                case \"svg\":\n                    return createFormatContext(SVG_MODE, null, parentContext.noscriptTagInScope);\n                case \"math\":\n                    return createFormatContext(MATHML_MODE, null, parentContext.noscriptTagInScope);\n                case \"foreignObject\":\n                    return createFormatContext(HTML_MODE, null, parentContext.noscriptTagInScope);\n                // Table parents are special in that their children can only be created at all if they're\n                // wrapped in a table parent. So we need to encode that we're entering this mode.\n                case \"table\":\n                    return createFormatContext(HTML_TABLE_MODE, null, parentContext.noscriptTagInScope);\n                case \"thead\":\n                case \"tbody\":\n                case \"tfoot\":\n                    return createFormatContext(HTML_TABLE_BODY_MODE, null, parentContext.noscriptTagInScope);\n                case \"colgroup\":\n                    return createFormatContext(HTML_COLGROUP_MODE, null, parentContext.noscriptTagInScope);\n                case \"tr\":\n                    return createFormatContext(HTML_TABLE_ROW_MODE, null, parentContext.noscriptTagInScope);\n            }\n            if (parentContext.insertionMode >= HTML_TABLE_MODE) {\n                // Whatever tag this was, it wasn't a table parent or other special parent, so we must have\n                // entered plain HTML again.\n                return createFormatContext(HTML_MODE, null, parentContext.noscriptTagInScope);\n            }\n            if (parentContext.insertionMode === ROOT_HTML_MODE) {\n                if (type === \"html\") {\n                    // We've emitted the root and is now in <html> mode.\n                    return createFormatContext(HTML_HTML_MODE, null, false);\n                } else {\n                    // We've emitted the root and is now in plain HTML mode.\n                    return createFormatContext(HTML_MODE, null, false);\n                }\n            } else if (parentContext.insertionMode === HTML_HTML_MODE) {\n                // We've emitted the document element and is now in plain HTML mode.\n                return createFormatContext(HTML_MODE, null, false);\n            }\n            return parentContext;\n        }\n        var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;\n        function assignSuspenseBoundaryID(responseState) {\n            var generatedID = responseState.nextSuspenseID++;\n            return stringToPrecomputedChunk(responseState.boundaryPrefix + generatedID.toString(16));\n        }\n        function makeId(responseState, treeId, localId) {\n            var idPrefix = responseState.idPrefix;\n            var id = \":\" + idPrefix + \"R\" + treeId; // Unless this is the first id at this level, append a number at the end\n            // that represents the position of this useId hook among all the useId\n            // hooks for this fiber.\n            if (localId > 0) {\n                id += \"H\" + localId.toString(32);\n            }\n            return id + \":\";\n        }\n        function encodeHTMLTextNode(text) {\n            return escapeTextForBrowser(text);\n        }\n        var textSeparator = stringToPrecomputedChunk(\"<!-- -->\");\n        function pushTextInstance$1(target, text, responseState, textEmbedded) {\n            if (text === \"\") {\n                // Empty text doesn't have a DOM node representation and the hydration is aware of this.\n                return textEmbedded;\n            }\n            if (textEmbedded) {\n                target.push(textSeparator);\n            }\n            target.push(stringToChunk(encodeHTMLTextNode(text)));\n            return true;\n        } // Called when Fizz is done with a Segment. Currently the only purpose is to conditionally\n        // emit a text separator when we don't know for sure it is safe to omit\n        function pushSegmentFinale$1(target, responseState, lastPushedText, textEmbedded) {\n            if (lastPushedText && textEmbedded) {\n                target.push(textSeparator);\n            }\n        }\n        var styleNameCache = new Map();\n        function processStyleName(styleName) {\n            var chunk = styleNameCache.get(styleName);\n            if (chunk !== undefined) {\n                return chunk;\n            }\n            var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));\n            styleNameCache.set(styleName, result);\n            return result;\n        }\n        var styleAttributeStart = stringToPrecomputedChunk(' style=\"');\n        var styleAssign = stringToPrecomputedChunk(\":\");\n        var styleSeparator = stringToPrecomputedChunk(\";\");\n        function pushStyleAttribute(target, style) {\n            if (typeof style !== \"object\") {\n                throw new Error(\"The `style` prop expects a mapping from style properties to values, \" + \"not a string. For example, style={{marginRight: spacing + 'em'}} when \" + \"using JSX.\");\n            }\n            var isFirst = true;\n            for(var styleName in style){\n                if (!hasOwnProperty.call(style, styleName)) {\n                    continue;\n                } // If you provide unsafe user data here they can inject arbitrary CSS\n                // which may be problematic (I couldn't repro this):\n                // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n                // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n                // This is not an XSS hole but instead a potential CSS injection issue\n                // which has lead to a greater discussion about how we're going to\n                // trust URLs moving forward. See #2115901\n                var styleValue = style[styleName];\n                if (styleValue == null || typeof styleValue === \"boolean\" || styleValue === \"\") {\n                    continue;\n                }\n                var nameChunk = void 0;\n                var valueChunk = void 0;\n                var isCustomProperty = styleName.indexOf(\"--\") === 0;\n                if (isCustomProperty) {\n                    nameChunk = stringToChunk(escapeTextForBrowser(styleName));\n                    {\n                        checkCSSPropertyStringCoercion(styleValue, styleName);\n                    }\n                    valueChunk = stringToChunk(escapeTextForBrowser((\"\" + styleValue).trim()));\n                } else {\n                    {\n                        warnValidStyle(styleName, styleValue);\n                    }\n                    nameChunk = processStyleName(styleName);\n                    if (typeof styleValue === \"number\") {\n                        if (styleValue !== 0 && !isUnitlessNumber(styleName)) {\n                            valueChunk = stringToChunk(styleValue + \"px\"); // Presumes implicit 'px' suffix for unitless numbers\n                        } else {\n                            valueChunk = stringToChunk(\"\" + styleValue);\n                        }\n                    } else {\n                        {\n                            checkCSSPropertyStringCoercion(styleValue, styleName);\n                        }\n                        valueChunk = stringToChunk(escapeTextForBrowser((\"\" + styleValue).trim()));\n                    }\n                }\n                if (isFirst) {\n                    isFirst = false; // If it's first, we don't need any separators prefixed.\n                    target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);\n                } else {\n                    target.push(styleSeparator, nameChunk, styleAssign, valueChunk);\n                }\n            }\n            if (!isFirst) {\n                target.push(attributeEnd);\n            }\n        }\n        var attributeSeparator = stringToPrecomputedChunk(\" \");\n        var attributeAssign = stringToPrecomputedChunk('=\"');\n        var attributeEnd = stringToPrecomputedChunk('\"');\n        var attributeEmptyString = stringToPrecomputedChunk('=\"\"');\n        function pushBooleanAttribute(target, name, value) {\n            if (value && typeof value !== \"function\" && typeof value !== \"symbol\") {\n                target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);\n            }\n        }\n        function pushStringAttribute(target, name, value) {\n            if (typeof value !== \"function\" && typeof value !== \"symbol\" && typeof value !== \"boolean\") {\n                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n            }\n        }\n        // than on the client and hopefully it's googleable.\n        stringToPrecomputedChunk(escapeTextForBrowser(\"javascript:throw new Error('A React form was unexpectedly submitted.')\"));\n        var startHiddenInputChunk = stringToPrecomputedChunk('<input type=\"hidden\"');\n        function pushAdditionalFormField(value, key) {\n            var target = this;\n            target.push(startHiddenInputChunk);\n            if (typeof value !== \"string\") {\n                throw new Error(\"File/Blob fields are not yet supported in progressive forms. \" + \"It probably means you are closing over binary data or FormData in a Server Action.\");\n            }\n            pushStringAttribute(target, \"name\", key);\n            pushStringAttribute(target, \"value\", value);\n            target.push(endOfStartTagSelfClosing);\n        }\n        function pushAdditionalFormFields(target, formData) {\n            if (formData !== null) {\n                // $FlowFixMe[prop-missing]: FormData has forEach.\n                formData.forEach(pushAdditionalFormField, target);\n            }\n        }\n        function pushFormActionAttribute(target, responseState, formAction, formEncType, formMethod, formTarget, name) {\n            var formData = null;\n            if (name != null) {\n                pushAttribute(target, \"name\", name);\n            }\n            if (formAction != null) {\n                pushAttribute(target, \"formAction\", formAction);\n            }\n            if (formEncType != null) {\n                pushAttribute(target, \"formEncType\", formEncType);\n            }\n            if (formMethod != null) {\n                pushAttribute(target, \"formMethod\", formMethod);\n            }\n            if (formTarget != null) {\n                pushAttribute(target, \"formTarget\", formTarget);\n            }\n            return formData;\n        }\n        function pushAttribute(target, name, value) {\n            switch(name){\n                // These are very common props and therefore are in the beginning of the switch.\n                // TODO: aria-label is a very common prop but allows booleans so is not like the others\n                // but should ideally go in this list too.\n                case \"className\":\n                    {\n                        pushStringAttribute(target, \"class\", value);\n                        break;\n                    }\n                case \"tabIndex\":\n                    {\n                        pushStringAttribute(target, \"tabindex\", value);\n                        break;\n                    }\n                case \"dir\":\n                case \"role\":\n                case \"viewBox\":\n                case \"width\":\n                case \"height\":\n                    {\n                        pushStringAttribute(target, name, value);\n                        break;\n                    }\n                case \"style\":\n                    {\n                        pushStyleAttribute(target, value);\n                        return;\n                    }\n                case \"src\":\n                case \"href\":\n                // Fall through to the last case which shouldn't remove empty strings.\n                case \"action\":\n                case \"formAction\":\n                    {\n                        // TODO: Consider only special casing these for each tag.\n                        if (value == null || typeof value === \"function\" || typeof value === \"symbol\" || typeof value === \"boolean\") {\n                            return;\n                        }\n                        {\n                            checkAttributeStringCoercion(value, name);\n                        }\n                        var sanitizedValue = sanitizeURL(\"\" + value);\n                        target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(sanitizedValue)), attributeEnd);\n                        return;\n                    }\n                case \"defaultValue\":\n                case \"defaultChecked\":\n                case \"innerHTML\":\n                case \"suppressContentEditableWarning\":\n                case \"suppressHydrationWarning\":\n                    // Ignored. These are built-in to React on the client.\n                    return;\n                case \"autoFocus\":\n                case \"multiple\":\n                case \"muted\":\n                    {\n                        pushBooleanAttribute(target, name.toLowerCase(), value);\n                        return;\n                    }\n                case \"xlinkHref\":\n                    {\n                        if (typeof value === \"function\" || typeof value === \"symbol\" || typeof value === \"boolean\") {\n                            return;\n                        }\n                        {\n                            checkAttributeStringCoercion(value, name);\n                        }\n                        var _sanitizedValue = sanitizeURL(\"\" + value);\n                        target.push(attributeSeparator, stringToChunk(\"xlink:href\"), attributeAssign, stringToChunk(escapeTextForBrowser(_sanitizedValue)), attributeEnd);\n                        return;\n                    }\n                case \"contentEditable\":\n                case \"spellCheck\":\n                case \"draggable\":\n                case \"value\":\n                case \"autoReverse\":\n                case \"externalResourcesRequired\":\n                case \"focusable\":\n                case \"preserveAlpha\":\n                    {\n                        // Booleanish String\n                        // These are \"enumerated\" attributes that accept \"true\" and \"false\".\n                        // In React, we let users pass `true` and `false` even though technically\n                        // these aren't boolean attributes (they are coerced to strings).\n                        if (typeof value !== \"function\" && typeof value !== \"symbol\") {\n                            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n                        }\n                        return;\n                    }\n                case \"allowFullScreen\":\n                case \"async\":\n                case \"autoPlay\":\n                case \"controls\":\n                case \"default\":\n                case \"defer\":\n                case \"disabled\":\n                case \"disablePictureInPicture\":\n                case \"disableRemotePlayback\":\n                case \"formNoValidate\":\n                case \"hidden\":\n                case \"loop\":\n                case \"noModule\":\n                case \"noValidate\":\n                case \"open\":\n                case \"playsInline\":\n                case \"readOnly\":\n                case \"required\":\n                case \"reversed\":\n                case \"scoped\":\n                case \"seamless\":\n                case \"itemScope\":\n                    {\n                        // Boolean\n                        if (value && typeof value !== \"function\" && typeof value !== \"symbol\") {\n                            target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);\n                        }\n                        return;\n                    }\n                case \"capture\":\n                case \"download\":\n                    {\n                        // Overloaded Boolean\n                        if (value === true) {\n                            target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);\n                        } else if (value === false) ;\n                        else if (typeof value !== \"function\" && typeof value !== \"symbol\") {\n                            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n                        }\n                        return;\n                    }\n                case \"cols\":\n                case \"rows\":\n                case \"size\":\n                case \"span\":\n                    {\n                        // These are HTML attributes that must be positive numbers.\n                        if (typeof value !== \"function\" && typeof value !== \"symbol\" && !isNaN(value) && value >= 1) {\n                            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n                        }\n                        return;\n                    }\n                case \"rowSpan\":\n                case \"start\":\n                    {\n                        // These are HTML attributes that must be numbers.\n                        if (typeof value !== \"function\" && typeof value !== \"symbol\" && !isNaN(value)) {\n                            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n                        }\n                        return;\n                    }\n                case \"xlinkActuate\":\n                    pushStringAttribute(target, \"xlink:actuate\", value);\n                    return;\n                case \"xlinkArcrole\":\n                    pushStringAttribute(target, \"xlink:arcrole\", value);\n                    return;\n                case \"xlinkRole\":\n                    pushStringAttribute(target, \"xlink:role\", value);\n                    return;\n                case \"xlinkShow\":\n                    pushStringAttribute(target, \"xlink:show\", value);\n                    return;\n                case \"xlinkTitle\":\n                    pushStringAttribute(target, \"xlink:title\", value);\n                    return;\n                case \"xlinkType\":\n                    pushStringAttribute(target, \"xlink:type\", value);\n                    return;\n                case \"xmlBase\":\n                    pushStringAttribute(target, \"xml:base\", value);\n                    return;\n                case \"xmlLang\":\n                    pushStringAttribute(target, \"xml:lang\", value);\n                    return;\n                case \"xmlSpace\":\n                    pushStringAttribute(target, \"xml:space\", value);\n                    return;\n                default:\n                    if (// We have already filtered out null/undefined and reserved words.\n                    name.length > 2 && (name[0] === \"o\" || name[0] === \"O\") && (name[1] === \"n\" || name[1] === \"N\")) {\n                        return;\n                    }\n                    var attributeName = getAttributeAlias(name);\n                    if (isAttributeNameSafe(attributeName)) {\n                        // shouldRemoveAttribute\n                        switch(typeof value){\n                            case \"function\":\n                            case \"symbol\":\n                                // eslint-disable-line\n                                return;\n                            case \"boolean\":\n                                {\n                                    var prefix = attributeName.toLowerCase().slice(0, 5);\n                                    if (prefix !== \"data-\" && prefix !== \"aria-\") {\n                                        return;\n                                    }\n                                }\n                        }\n                        target.push(attributeSeparator, stringToChunk(attributeName), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n                    }\n            }\n        }\n        var endOfStartTag = stringToPrecomputedChunk(\">\");\n        var endOfStartTagSelfClosing = stringToPrecomputedChunk(\"/>\");\n        function pushInnerHTML(target, innerHTML, children) {\n            if (innerHTML != null) {\n                if (children != null) {\n                    throw new Error(\"Can only set one of `children` or `props.dangerouslySetInnerHTML`.\");\n                }\n                if (typeof innerHTML !== \"object\" || !(\"__html\" in innerHTML)) {\n                    throw new Error(\"`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. \" + \"Please visit https://reactjs.org/link/dangerously-set-inner-html \" + \"for more information.\");\n                }\n                var html = innerHTML.__html;\n                if (html !== null && html !== undefined) {\n                    {\n                        checkHtmlStringCoercion(html);\n                    }\n                    target.push(stringToChunk(\"\" + html));\n                }\n            }\n        } // TODO: Move these to ResponseState so that we warn for every request.\n        // It would help debugging in stateful servers (e.g. service worker).\n        var didWarnDefaultInputValue = false;\n        var didWarnDefaultChecked = false;\n        var didWarnDefaultSelectValue = false;\n        var didWarnDefaultTextareaValue = false;\n        var didWarnInvalidOptionChildren = false;\n        var didWarnInvalidOptionInnerHTML = false;\n        var didWarnSelectedSetOnOption = false;\n        var didWarnFormActionType = false;\n        function checkSelectProp(props, propName) {\n            {\n                var value = props[propName];\n                if (value != null) {\n                    var array = isArray(value);\n                    if (props.multiple && !array) {\n                        error(\"The `%s` prop supplied to <select> must be an array if \" + \"`multiple` is true.\", propName);\n                    } else if (!props.multiple && array) {\n                        error(\"The `%s` prop supplied to <select> must be a scalar \" + \"value if `multiple` is false.\", propName);\n                    }\n                }\n            }\n        }\n        function pushStartSelect(target, props) {\n            {\n                checkControlledValueProps(\"select\", props);\n                checkSelectProp(props, \"value\");\n                checkSelectProp(props, \"defaultValue\");\n                if (props.value !== undefined && props.defaultValue !== undefined && !didWarnDefaultSelectValue) {\n                    error(\"Select elements must be either controlled or uncontrolled \" + \"(specify either the value prop, or the defaultValue prop, but not \" + \"both). Decide between using a controlled or uncontrolled select \" + \"element and remove one of these props. More info: \" + \"https://reactjs.org/link/controlled-components\");\n                    didWarnDefaultSelectValue = true;\n                }\n            }\n            target.push(startChunkForTag(\"select\"));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            // TODO: This doesn't really make sense for select since it can't use the controlled\n                            // value in the innerHTML.\n                            innerHTML = propValue;\n                            break;\n                        case \"defaultValue\":\n                        case \"value\":\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            pushInnerHTML(target, innerHTML, children);\n            return children;\n        }\n        function flattenOptionChildren(children) {\n            var content = \"\"; // Flatten children and warn if they aren't strings or numbers;\n            // invalid types are ignored.\n            React.Children.forEach(children, function(child) {\n                if (child == null) {\n                    return;\n                }\n                content += child;\n                {\n                    if (!didWarnInvalidOptionChildren && typeof child !== \"string\" && typeof child !== \"number\") {\n                        didWarnInvalidOptionChildren = true;\n                        error(\"Cannot infer the option value of complex children. \" + \"Pass a `value` prop or use a plain string as children to <option>.\");\n                    }\n                }\n            });\n            return content;\n        }\n        var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=\"\"');\n        function pushStartOption(target, props, formatContext) {\n            var selectedValue = formatContext.selectedValue;\n            target.push(startChunkForTag(\"option\"));\n            var children = null;\n            var value = null;\n            var selected = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"selected\":\n                            // ignore\n                            selected = propValue;\n                            {\n                                // TODO: Remove support for `selected` in <option>.\n                                if (!didWarnSelectedSetOnOption) {\n                                    error(\"Use the `defaultValue` or `value` props on <select> instead of \" + \"setting `selected` on <option>.\");\n                                    didWarnSelectedSetOnOption = true;\n                                }\n                            }\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        case \"value\":\n                            value = propValue;\n                        // We intentionally fallthrough to also set the attribute on the node.\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            if (selectedValue != null) {\n                var stringValue;\n                if (value !== null) {\n                    {\n                        checkAttributeStringCoercion(value, \"value\");\n                    }\n                    stringValue = \"\" + value;\n                } else {\n                    {\n                        if (innerHTML !== null) {\n                            if (!didWarnInvalidOptionInnerHTML) {\n                                didWarnInvalidOptionInnerHTML = true;\n                                error(\"Pass a `value` prop if you set dangerouslyInnerHTML so React knows \" + \"which value should be selected.\");\n                            }\n                        }\n                    }\n                    stringValue = flattenOptionChildren(children);\n                }\n                if (isArray(selectedValue)) {\n                    // multiple\n                    for(var i = 0; i < selectedValue.length; i++){\n                        {\n                            checkAttributeStringCoercion(selectedValue[i], \"value\");\n                        }\n                        var v = \"\" + selectedValue[i];\n                        if (v === stringValue) {\n                            target.push(selectedMarkerAttribute);\n                            break;\n                        }\n                    }\n                } else {\n                    {\n                        checkAttributeStringCoercion(selectedValue, \"select.value\");\n                    }\n                    if (\"\" + selectedValue === stringValue) {\n                        target.push(selectedMarkerAttribute);\n                    }\n                }\n            } else if (selected) {\n                target.push(selectedMarkerAttribute);\n            }\n            target.push(endOfStartTag);\n            pushInnerHTML(target, innerHTML, children);\n            return children;\n        }\n        function pushStartForm(target, props, responseState) {\n            target.push(startChunkForTag(\"form\"));\n            var children = null;\n            var innerHTML = null;\n            var formAction = null;\n            var formEncType = null;\n            var formMethod = null;\n            var formTarget = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        case \"action\":\n                            formAction = propValue;\n                            break;\n                        case \"encType\":\n                            formEncType = propValue;\n                            break;\n                        case \"method\":\n                            formMethod = propValue;\n                            break;\n                        case \"target\":\n                            formTarget = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            if (formAction != null) {\n                pushAttribute(target, \"action\", formAction);\n            }\n            if (formEncType != null) {\n                pushAttribute(target, \"encType\", formEncType);\n            }\n            if (formMethod != null) {\n                pushAttribute(target, \"method\", formMethod);\n            }\n            if (formTarget != null) {\n                pushAttribute(target, \"target\", formTarget);\n            }\n            target.push(endOfStartTag);\n            pushInnerHTML(target, innerHTML, children);\n            if (typeof children === \"string\") {\n                // Special case children as a string to avoid the unnecessary comment.\n                // TODO: Remove this special case after the general optimization is in place.\n                target.push(stringToChunk(encodeHTMLTextNode(children)));\n                return null;\n            }\n            return children;\n        }\n        function pushInput(target, props, responseState) {\n            {\n                checkControlledValueProps(\"input\", props);\n            }\n            target.push(startChunkForTag(\"input\"));\n            var name = null;\n            var formAction = null;\n            var formEncType = null;\n            var formMethod = null;\n            var formTarget = null;\n            var value = null;\n            var defaultValue = null;\n            var checked = null;\n            var defaultChecked = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"input\" + \" is a self-closing tag and must neither have `children` nor \" + \"use `dangerouslySetInnerHTML`.\");\n                        case \"name\":\n                            name = propValue;\n                            break;\n                        case \"formAction\":\n                            formAction = propValue;\n                            break;\n                        case \"formEncType\":\n                            formEncType = propValue;\n                            break;\n                        case \"formMethod\":\n                            formMethod = propValue;\n                            break;\n                        case \"formTarget\":\n                            formTarget = propValue;\n                            break;\n                        case \"defaultChecked\":\n                            defaultChecked = propValue;\n                            break;\n                        case \"defaultValue\":\n                            defaultValue = propValue;\n                            break;\n                        case \"checked\":\n                            checked = propValue;\n                            break;\n                        case \"value\":\n                            value = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            {\n                if (formAction !== null && props.type !== \"image\" && props.type !== \"submit\" && !didWarnFormActionType) {\n                    didWarnFormActionType = true;\n                    error('An input can only specify a formAction along with type=\"submit\" or type=\"image\".');\n                }\n            }\n            var formData = pushFormActionAttribute(target, responseState, formAction, formEncType, formMethod, formTarget, name);\n            {\n                if (checked !== null && defaultChecked !== null && !didWarnDefaultChecked) {\n                    error(\"%s contains an input of type %s with both checked and defaultChecked props. \" + \"Input elements must be either controlled or uncontrolled \" + \"(specify either the checked prop, or the defaultChecked prop, but not \" + \"both). Decide between using a controlled or uncontrolled input \" + \"element and remove one of these props. More info: \" + \"https://reactjs.org/link/controlled-components\", \"A component\", props.type);\n                    didWarnDefaultChecked = true;\n                }\n                if (value !== null && defaultValue !== null && !didWarnDefaultInputValue) {\n                    error(\"%s contains an input of type %s with both value and defaultValue props. \" + \"Input elements must be either controlled or uncontrolled \" + \"(specify either the value prop, or the defaultValue prop, but not \" + \"both). Decide between using a controlled or uncontrolled input \" + \"element and remove one of these props. More info: \" + \"https://reactjs.org/link/controlled-components\", \"A component\", props.type);\n                    didWarnDefaultInputValue = true;\n                }\n            }\n            if (checked !== null) {\n                pushBooleanAttribute(target, \"checked\", checked);\n            } else if (defaultChecked !== null) {\n                pushBooleanAttribute(target, \"checked\", defaultChecked);\n            }\n            if (value !== null) {\n                pushAttribute(target, \"value\", value);\n            } else if (defaultValue !== null) {\n                pushAttribute(target, \"value\", defaultValue);\n            }\n            target.push(endOfStartTagSelfClosing); // We place any additional hidden form fields after the input.\n            pushAdditionalFormFields(target, formData);\n            return null;\n        }\n        function pushStartButton(target, props, responseState) {\n            target.push(startChunkForTag(\"button\"));\n            var children = null;\n            var innerHTML = null;\n            var name = null;\n            var formAction = null;\n            var formEncType = null;\n            var formMethod = null;\n            var formTarget = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        case \"name\":\n                            name = propValue;\n                            break;\n                        case \"formAction\":\n                            formAction = propValue;\n                            break;\n                        case \"formEncType\":\n                            formEncType = propValue;\n                            break;\n                        case \"formMethod\":\n                            formMethod = propValue;\n                            break;\n                        case \"formTarget\":\n                            formTarget = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            {\n                if (formAction !== null && props.type != null && props.type !== \"submit\" && !didWarnFormActionType) {\n                    didWarnFormActionType = true;\n                    error('A button can only specify a formAction along with type=\"submit\" or no type.');\n                }\n            }\n            var formData = pushFormActionAttribute(target, responseState, formAction, formEncType, formMethod, formTarget, name);\n            target.push(endOfStartTag); // We place any additional hidden form fields we need to include inside the button itself.\n            pushAdditionalFormFields(target, formData);\n            pushInnerHTML(target, innerHTML, children);\n            if (typeof children === \"string\") {\n                // Special case children as a string to avoid the unnecessary comment.\n                // TODO: Remove this special case after the general optimization is in place.\n                target.push(stringToChunk(encodeHTMLTextNode(children)));\n                return null;\n            }\n            return children;\n        }\n        function pushStartTextArea(target, props) {\n            {\n                checkControlledValueProps(\"textarea\", props);\n                if (props.value !== undefined && props.defaultValue !== undefined && !didWarnDefaultTextareaValue) {\n                    error(\"Textarea elements must be either controlled or uncontrolled \" + \"(specify either the value prop, or the defaultValue prop, but not \" + \"both). Decide between using a controlled or uncontrolled textarea \" + \"and remove one of these props. More info: \" + \"https://reactjs.org/link/controlled-components\");\n                    didWarnDefaultTextareaValue = true;\n                }\n            }\n            target.push(startChunkForTag(\"textarea\"));\n            var value = null;\n            var defaultValue = null;\n            var children = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"value\":\n                            value = propValue;\n                            break;\n                        case \"defaultValue\":\n                            defaultValue = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"`dangerouslySetInnerHTML` does not make sense on <textarea>.\");\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            if (value === null && defaultValue !== null) {\n                value = defaultValue;\n            }\n            target.push(endOfStartTag); // TODO (yungsters): Remove support for children content in <textarea>.\n            if (children != null) {\n                {\n                    error(\"Use the `defaultValue` or `value` props instead of setting \" + \"children on <textarea>.\");\n                }\n                if (value != null) {\n                    throw new Error(\"If you supply `defaultValue` on a <textarea>, do not pass children.\");\n                }\n                if (isArray(children)) {\n                    if (children.length > 1) {\n                        throw new Error(\"<textarea> can only have at most one child.\");\n                    } // TODO: remove the coercion and the DEV check below because it will\n                    // always be overwritten by the coercion several lines below it. #22309\n                    {\n                        checkHtmlStringCoercion(children[0]);\n                    }\n                    value = \"\" + children[0];\n                }\n                {\n                    checkHtmlStringCoercion(children);\n                }\n                value = \"\" + children;\n            }\n            if (typeof value === \"string\" && value[0] === \"\\n\") {\n                // text/html ignores the first character in these tags if it's a newline\n                // Prefer to break application/xml over text/html (for now) by adding\n                // a newline specifically to get eaten by the parser. (Alternately for\n                // textareas, replacing \"^\\n\" with \"\\r\\n\" doesn't get eaten, and the first\n                // \\r is normalized out by HTMLTextAreaElement#value.)\n                // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>\n                // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>\n                // See: <http://www.w3.org/TR/html5/syntax.html#newlines>\n                // See: Parsing of \"textarea\" \"listing\" and \"pre\" elements\n                //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>\n                target.push(leadingNewline);\n            } // ToString and push directly instead of recurse over children.\n            // We don't really support complex children in the value anyway.\n            // This also currently avoids a trailing comment node which breaks textarea.\n            if (value !== null) {\n                {\n                    checkAttributeStringCoercion(value, \"value\");\n                }\n                target.push(stringToChunk(encodeHTMLTextNode(\"\" + value)));\n            }\n            return null;\n        }\n        function pushMeta(target, props, responseState, textEmbedded, insertionMode, noscriptTagInScope) {\n            {\n                if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {\n                    return pushSelfClosing(target, props, \"meta\");\n                } else {\n                    if (textEmbedded) {\n                        // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n                        // to be safe and assume text will follow by inserting a textSeparator\n                        target.push(textSeparator);\n                    }\n                    if (typeof props.charSet === \"string\") {\n                        return pushSelfClosing(responseState.charsetChunks, props, \"meta\");\n                    } else if (props.name === \"viewport\") {\n                        // \"viewport\" isn't related to preconnect but it has the right priority\n                        return pushSelfClosing(responseState.preconnectChunks, props, \"meta\");\n                    } else {\n                        return pushSelfClosing(responseState.hoistableChunks, props, \"meta\");\n                    }\n                }\n            }\n        }\n        function pushLink(target, props, responseState, resources, textEmbedded, insertionMode, noscriptTagInScope) {\n            {\n                var rel = props.rel;\n                var href = props.href;\n                var precedence = props.precedence;\n                if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof rel !== \"string\" || typeof href !== \"string\" || href === \"\") {\n                    {\n                        if (rel === \"stylesheet\" && typeof props.precedence === \"string\") {\n                            if (typeof href !== \"string\" || !href) {\n                                error('React encountered a `<link rel=\"stylesheet\" .../>` with a `precedence` prop and expected the `href` prop to be a non-empty string but ecountered %s instead. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop ensure there is a non-empty string `href` prop as well, otherwise remove the `precedence` prop.', getValueDescriptorExpectingObjectForWarning(href));\n                            }\n                        }\n                    }\n                    pushLinkImpl(target, props);\n                    return null;\n                }\n                if (props.rel === \"stylesheet\") {\n                    // This <link> may hoistable as a Stylesheet Resource, otherwise it will emit in place\n                    var key = getResourceKey(\"style\", href);\n                    if (typeof precedence !== \"string\" || props.disabled != null || props.onLoad || props.onError) {\n                        // This stylesheet is either not opted into Resource semantics or has conflicting properties which\n                        // disqualify it for such. We can still create a preload resource to help it load faster on the\n                        // client\n                        {\n                            if (typeof precedence === \"string\") {\n                                if (props.disabled != null) {\n                                    error('React encountered a `<link rel=\"stylesheet\" .../>` with a `precedence` prop and a `disabled` prop. The presence of the `disabled` prop indicates an intent to manage the stylesheet active state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the `disabled` prop, otherwise remove the `precedence` prop.');\n                                } else if (props.onLoad || props.onError) {\n                                    var propDescription = props.onLoad && props.onError ? \"`onLoad` and `onError` props\" : props.onLoad ? \"`onLoad` prop\" : \"`onError` prop\";\n                                    error('React encountered a `<link rel=\"stylesheet\" .../>` with a `precedence` prop and %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.', propDescription, propDescription);\n                                }\n                            }\n                        }\n                        return pushLinkImpl(target, props);\n                    } else {\n                        // This stylesheet refers to a Resource and we create a new one if necessary\n                        var resource = resources.stylesMap.get(key);\n                        {\n                            var devResource = getAsResourceDEV(resource);\n                            if (devResource) {\n                                switch(devResource.__provenance){\n                                    case \"rendered\":\n                                        {\n                                            var differenceDescription = describeDifferencesForStylesheets(props, devResource.__originalProps);\n                                            if (differenceDescription) {\n                                                error('React encountered a <link rel=\"stylesheet\" href=\"%s\" .../> with a `precedence` prop that has props that conflict' + ' with another hoistable stylesheet with the same `href`. When using `precedence` with <link rel=\"stylsheet\" .../>' + \" the props from the first encountered instance will be used and props from later instances will be ignored.\" + ' Update the props on either <link rel=\"stylesheet\" .../> instance so they agree.%s', href, differenceDescription);\n                                            }\n                                            break;\n                                        }\n                                    case \"preinit\":\n                                        {\n                                            var _differenceDescription = describeDifferencesForStylesheetOverPreinit(props, devResource.__propsEquivalent);\n                                            if (_differenceDescription) {\n                                                error('React encountered a <link rel=\"stylesheet\" precedence=\"%s\" href=\"%s\" .../> with props that conflict' + ' with the options provided to `ReactDOM.preinit(\"%s\", { as: \"style\", ... })`. React will use the first props or preinitialization' + \" options encountered when rendering a hoistable stylesheet with a particular `href` and will ignore any newer props or\" + \" options. The first instance of this stylesheet resource was created using the `ReactDOM.preinit()` function.\" + \" Please note, `ReactDOM.preinit()` is modeled off of module import assertions capabilities and does not support\" + \" arbitrary props. If you need to have props not included with the preinit options you will need to rely on rendering\" + \" <link> tags only.%s\", precedence, href, href, _differenceDescription);\n                                            }\n                                            break;\n                                        }\n                                }\n                            }\n                        }\n                        if (!resource) {\n                            var resourceProps = stylesheetPropsFromRawProps(props);\n                            var preloadResource = resources.preloadsMap.get(key);\n                            var state = NoState;\n                            if (preloadResource) {\n                                // If we already had a preload we don't want that resource to flush directly.\n                                // We let the newly created resource govern flushing.\n                                preloadResource.state |= Blocked;\n                                adoptPreloadPropsForStylesheetProps(resourceProps, preloadResource.props);\n                                if (preloadResource.state & Flushed) {\n                                    state = PreloadFlushed;\n                                }\n                            }\n                            resource = {\n                                type: \"stylesheet\",\n                                chunks: [],\n                                state: state,\n                                props: resourceProps\n                            };\n                            resources.stylesMap.set(key, resource);\n                            {\n                                markAsRenderedResourceDEV(resource, props);\n                            }\n                            var precedenceSet = resources.precedences.get(precedence);\n                            if (!precedenceSet) {\n                                precedenceSet = new Set();\n                                resources.precedences.set(precedence, precedenceSet);\n                                var emptyStyleResource = {\n                                    type: \"style\",\n                                    chunks: [],\n                                    state: NoState,\n                                    props: {\n                                        precedence: precedence,\n                                        hrefs: []\n                                    }\n                                };\n                                precedenceSet.add(emptyStyleResource);\n                                {\n                                    if (resources.stylePrecedences.has(precedence)) {\n                                        error('React constructed an empty style resource when a style resource already exists for this precedence: \"%s\". This is a bug in React.', precedence);\n                                    }\n                                }\n                                resources.stylePrecedences.set(precedence, emptyStyleResource);\n                            }\n                            precedenceSet.add(resource);\n                        }\n                        if (resources.boundaryResources) {\n                            resources.boundaryResources.add(resource);\n                        }\n                        if (textEmbedded) {\n                            // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n                            // to be safe and assume text will follow by inserting a textSeparator\n                            target.push(textSeparator);\n                        }\n                        return null;\n                    }\n                } else if (props.onLoad || props.onError) {\n                    // When using load handlers we cannot hoist and need to emit links in place\n                    return pushLinkImpl(target, props);\n                } else {\n                    // We can hoist this link so we may need to emit a text separator.\n                    // @TODO refactor text separators so we don't have to defensively add\n                    // them when we don't end up emitting a tag as a result of pushStartInstance\n                    if (textEmbedded) {\n                        // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n                        // to be safe and assume text will follow by inserting a textSeparator\n                        target.push(textSeparator);\n                    }\n                    switch(props.rel){\n                        case \"preconnect\":\n                        case \"dns-prefetch\":\n                            return pushLinkImpl(responseState.preconnectChunks, props);\n                        case \"preload\":\n                            return pushLinkImpl(responseState.preloadChunks, props);\n                        default:\n                            return pushLinkImpl(responseState.hoistableChunks, props);\n                    }\n                }\n            }\n        }\n        function pushLinkImpl(target, props) {\n            target.push(startChunkForTag(\"link\"));\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"link\" + \" is a self-closing tag and must neither have `children` nor \" + \"use `dangerouslySetInnerHTML`.\");\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTagSelfClosing);\n            return null;\n        }\n        function pushStyle(target, props, resources, textEmbedded, insertionMode, noscriptTagInScope) {\n            {\n                if (hasOwnProperty.call(props, \"children\")) {\n                    var children = props.children;\n                    var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n                    if (typeof child === \"function\" || typeof child === \"symbol\" || Array.isArray(child)) {\n                        var childType = typeof child === \"function\" ? \"a Function\" : typeof child === \"symbol\" ? \"a Sybmol\" : \"an Array\";\n                        error(\"React expect children of <style> tags to be a string, number, or object with a `toString` method but found %s instead. \" + \"In browsers style Elements can only have `Text` Nodes as children.\", childType);\n                    }\n                }\n            }\n            {\n                var precedence = props.precedence;\n                var href = props.href;\n                if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof precedence !== \"string\" || typeof href !== \"string\" || href === \"\") {\n                    // This style tag is not able to be turned into a Style Resource\n                    return pushStyleImpl(target, props);\n                }\n                {\n                    if (href.includes(\" \")) {\n                        error('React expected the `href` prop for a <style> tag opting into hoisting semantics using the `precedence` prop to not have any spaces but ecountered spaces instead. using spaces in this prop will cause hydration of this style to fail on the client. The href for the <style> where this ocurred is \"%s\".', href);\n                    }\n                }\n                var key = getResourceKey(\"style\", href);\n                var resource = resources.stylesMap.get(key);\n                if (!resource) {\n                    resource = resources.stylePrecedences.get(precedence);\n                    if (!resource) {\n                        resource = {\n                            type: \"style\",\n                            chunks: [],\n                            state: NoState,\n                            props: {\n                                precedence: precedence,\n                                hrefs: [\n                                    href\n                                ]\n                            }\n                        };\n                        resources.stylePrecedences.set(precedence, resource);\n                        var precedenceSet = new Set();\n                        precedenceSet.add(resource);\n                        {\n                            if (resources.precedences.has(precedence)) {\n                                error('React constructed a new style precedence set when one already exists for this precedence: \"%s\". This is a bug in React.', precedence);\n                            }\n                        }\n                        resources.precedences.set(precedence, precedenceSet);\n                    } else {\n                        resource.props.hrefs.push(href);\n                    }\n                    resources.stylesMap.set(key, resource);\n                    if (resources.boundaryResources) {\n                        resources.boundaryResources.add(resource);\n                    }\n                    pushStyleContents(resource.chunks, props);\n                }\n                if (textEmbedded) {\n                    // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n                    // to be safe and assume text will follow by inserting a textSeparator\n                    target.push(textSeparator);\n                }\n            }\n        }\n        function pushStyleImpl(target, props) {\n            target.push(startChunkForTag(\"style\"));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n            if (typeof child !== \"function\" && typeof child !== \"symbol\" && child !== null && child !== undefined) {\n                // eslint-disable-next-line react-internal/safe-string-coercion\n                target.push(stringToChunk(escapeTextForBrowser(\"\" + child)));\n            }\n            pushInnerHTML(target, innerHTML, children);\n            target.push(endTag1, stringToChunk(\"style\"), endTag2);\n            return null;\n        }\n        function pushStyleContents(target, props) {\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                    }\n                }\n            }\n            var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n            if (typeof child !== \"function\" && typeof child !== \"symbol\" && child !== null && child !== undefined) {\n                // eslint-disable-next-line react-internal/safe-string-coercion\n                target.push(stringToChunk(escapeTextForBrowser(\"\" + child)));\n            }\n            pushInnerHTML(target, innerHTML, children);\n            return;\n        }\n        function getImagePreloadKey(href, imageSrcSet, imageSizes) {\n            var uniquePart = \"\";\n            if (typeof imageSrcSet === \"string\" && imageSrcSet !== \"\") {\n                uniquePart += \"[\" + imageSrcSet + \"]\";\n                if (typeof imageSizes === \"string\") {\n                    uniquePart += \"[\" + imageSizes + \"]\";\n                }\n            } else {\n                uniquePart += \"[][]\" + href;\n            }\n            return getResourceKey(\"image\", uniquePart);\n        }\n        function pushImg(target, props, resources) {\n            var src = props.src, srcSet = props.srcSet;\n            if (props.loading !== \"lazy\" && (typeof src === \"string\" || typeof srcSet === \"string\") && props.fetchPriority !== \"low\" && // We exclude data URIs in src and srcSet since these should not be preloaded\n            !(typeof src === \"string\" && src[4] === \":\" && (src[0] === \"d\" || src[0] === \"D\") && (src[1] === \"a\" || src[1] === \"A\") && (src[2] === \"t\" || src[2] === \"T\") && (src[3] === \"a\" || src[3] === \"A\")) && !(typeof srcSet === \"string\" && srcSet[4] === \":\" && (srcSet[0] === \"d\" || srcSet[0] === \"D\") && (srcSet[1] === \"a\" || srcSet[1] === \"A\") && (srcSet[2] === \"t\" || srcSet[2] === \"T\") && (srcSet[3] === \"a\" || srcSet[3] === \"A\"))) {\n                // We have a suspensey image and ought to preload it to optimize the loading of display blocking\n                // resources.\n                var sizes = props.sizes;\n                var key = getImagePreloadKey(src, srcSet, sizes);\n                var resource = resources.preloadsMap.get(key);\n                if (!resource) {\n                    resource = {\n                        type: \"preload\",\n                        chunks: [],\n                        state: NoState,\n                        props: {\n                            rel: \"preload\",\n                            as: \"image\",\n                            // There is a bug in Safari where imageSrcSet is not respected on preload links\n                            // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.\n                            // This harms older browers that do not support imageSrcSet by making their preloads not work\n                            // but this population is shrinking fast and is already small so we accept this tradeoff.\n                            href: srcSet ? undefined : src,\n                            imageSrcSet: srcSet,\n                            imageSizes: sizes,\n                            crossOrigin: props.crossOrigin,\n                            integrity: props.integrity,\n                            type: props.type,\n                            fetchPriority: props.fetchPriority,\n                            referrerPolicy: props.referrerPolicy\n                        }\n                    };\n                    resources.preloadsMap.set(key, resource);\n                    {\n                        markAsRenderedResourceDEV(resource, props);\n                    }\n                    pushLinkImpl(resource.chunks, resource.props);\n                }\n                if (props.fetchPriority === \"high\" || resources.highImagePreloads.size < 10) {\n                    resources.highImagePreloads.add(resource);\n                } else {\n                    resources.bulkPreloads.add(resource);\n                }\n            }\n            return pushSelfClosing(target, props, \"img\");\n        }\n        function pushSelfClosing(target, props, tag) {\n            target.push(startChunkForTag(tag));\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(tag + \" is a self-closing tag and must neither have `children` nor \" + \"use `dangerouslySetInnerHTML`.\");\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTagSelfClosing);\n            return null;\n        }\n        function pushStartMenuItem(target, props) {\n            target.push(startChunkForTag(\"menuitem\"));\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"menuitems cannot have `children` nor `dangerouslySetInnerHTML`.\");\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            return null;\n        }\n        function pushTitle(target, props, responseState, insertionMode, noscriptTagInScope) {\n            {\n                if (hasOwnProperty.call(props, \"children\")) {\n                    var children = props.children;\n                    var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n                    if (Array.isArray(children) && children.length > 1) {\n                        error(\"React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an Array with length %s instead.\" + \" Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert `children` of <title> tags to a single string value\" + \" which is why Arrays of length greater than 1 are not supported. When using JSX it can be commong to combine text nodes and value nodes.\" + \" For example: <title>hello {nameOfUser}</title>. While not immediately apparent, `children` in this case is an Array with length 2. If your `children` prop\" + \" is using this form try rewriting it using a template string: <title>{`hello ${nameOfUser}`}</title>.\", children.length);\n                    } else if (typeof child === \"function\" || typeof child === \"symbol\") {\n                        var childType = typeof child === \"function\" ? \"a Function\" : \"a Sybmol\";\n                        error(\"React expect children of <title> tags to be a string, number, or object with a novel `toString` method but found %s instead.\" + \" Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title>\" + \" tags to a single string value.\", childType);\n                    } else if (child && child.toString === ({}).toString) {\n                        if (child.$$typeof != null) {\n                            error(\"React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an object that appears to be\" + \" a React element which never implements a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to\" + \" be able to convert children of <title> tags to a single string value which is why rendering React elements is not supported. If the `children` of <title> is\" + \" a React Component try moving the <title> tag into that component. If the `children` of <title> is some HTML markup change it to be Text only to be valid HTML.\");\n                        } else {\n                            error(\"React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an object that does not implement\" + \" a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags\" + \" to a single string value. Using the default `toString` method available on every object is almost certainly an error. Consider whether the `children` of this <title>\" + \" is an object in error and change it to a string or number value if so. Otherwise implement a `toString` method that React can use to produce a valid <title>.\");\n                        }\n                    }\n                }\n            }\n            {\n                if (insertionMode !== SVG_MODE && !noscriptTagInScope && props.itemProp == null) {\n                    pushTitleImpl(responseState.hoistableChunks, props);\n                    return null;\n                } else {\n                    return pushTitleImpl(target, props);\n                }\n            }\n        }\n        function pushTitleImpl(target, props) {\n            target.push(startChunkForTag(\"title\"));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n            if (typeof child !== \"function\" && typeof child !== \"symbol\" && child !== null && child !== undefined) {\n                // eslint-disable-next-line react-internal/safe-string-coercion\n                target.push(stringToChunk(escapeTextForBrowser(\"\" + child)));\n            }\n            pushInnerHTML(target, innerHTML, children);\n            target.push(endTag1, stringToChunk(\"title\"), endTag2);\n            return null;\n        }\n        function pushStartHead(target, props, responseState, insertionMode) {\n            {\n                if (insertionMode < HTML_MODE && responseState.headChunks === null) {\n                    // This <head> is the Document.head and should be part of the preamble\n                    responseState.headChunks = [];\n                    return pushStartGenericElement(responseState.headChunks, props, \"head\");\n                } else {\n                    // This <head> is deep and is likely just an error. we emit it inline though.\n                    // Validation should warn that this tag is the the wrong spot.\n                    return pushStartGenericElement(target, props, \"head\");\n                }\n            }\n        }\n        function pushStartHtml(target, props, responseState, insertionMode) {\n            {\n                if (insertionMode === ROOT_HTML_MODE && responseState.htmlChunks === null) {\n                    // This <html> is the Document.documentElement and should be part of the preamble\n                    responseState.htmlChunks = [\n                        DOCTYPE\n                    ];\n                    return pushStartGenericElement(responseState.htmlChunks, props, \"html\");\n                } else {\n                    // This <html> is deep and is likely just an error. we emit it inline though.\n                    // Validation should warn that this tag is the the wrong spot.\n                    return pushStartGenericElement(target, props, \"html\");\n                }\n            }\n        }\n        function pushScript(target, props, resources, textEmbedded, insertionMode, noscriptTagInScope) {\n            {\n                var asyncProp = props.async;\n                if (typeof props.src !== \"string\" || !props.src || !(asyncProp && typeof asyncProp !== \"function\" && typeof asyncProp !== \"symbol\") || props.onLoad || props.onError || insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {\n                    // This script will not be a resource, we bailout early and emit it in place.\n                    return pushScriptImpl(target, props);\n                }\n                var src = props.src;\n                var key = getResourceKey(\"script\", src); // We can make this <script> into a ScriptResource\n                var resource = resources.scriptsMap.get(key);\n                {\n                    var devResource = getAsResourceDEV(resource);\n                    if (devResource) {\n                        switch(devResource.__provenance){\n                            case \"rendered\":\n                                {\n                                    var differenceDescription = describeDifferencesForScripts(props, devResource.__originalProps);\n                                    if (differenceDescription) {\n                                        error('React encountered a <script async={true} src=\"%s\" .../> that has props that conflict' + \" with another hoistable script with the same `src`. When rendering hoistable scripts (async scripts without any loading handlers)\" + \" the props from the first encountered instance will be used and props from later instances will be ignored.\" + \" Update the props on both <script async={true} .../> instance so they agree.%s\", src, differenceDescription);\n                                    }\n                                    break;\n                                }\n                            case \"preinit\":\n                                {\n                                    var _differenceDescription2 = describeDifferencesForScriptOverPreinit(props, devResource.__propsEquivalent);\n                                    if (_differenceDescription2) {\n                                        error('React encountered a <script async={true} src=\"%s\" .../> with props that conflict' + ' with the options provided to `ReactDOM.preinit(\"%s\", { as: \"script\", ... })`. React will use the first props or preinitialization' + \" options encountered when rendering a hoistable script with a particular `src` and will ignore any newer props or\" + \" options. The first instance of this script resource was created using the `ReactDOM.preinit()` function.\" + \" Please note, `ReactDOM.preinit()` is modeled off of module import assertions capabilities and does not support\" + \" arbitrary props. If you need to have props not included with the preinit options you will need to rely on rendering\" + \" <script> tags only.%s\", src, src, _differenceDescription2);\n                                    }\n                                    break;\n                                }\n                        }\n                    }\n                }\n                if (!resource) {\n                    resource = {\n                        type: \"script\",\n                        chunks: [],\n                        state: NoState,\n                        props: null\n                    };\n                    resources.scriptsMap.set(key, resource);\n                    {\n                        markAsRenderedResourceDEV(resource, props);\n                    }\n                    resources.scripts.add(resource);\n                    var scriptProps = props;\n                    var preloadResource = resources.preloadsMap.get(key);\n                    if (preloadResource) {\n                        // If we already had a preload we don't want that resource to flush directly.\n                        // We let the newly created resource govern flushing.\n                        preloadResource.state |= Blocked;\n                        scriptProps = assign({}, props);\n                        adoptPreloadPropsForScriptProps(scriptProps, preloadResource.props);\n                    } // encode the tag as Chunks\n                    pushScriptImpl(resource.chunks, scriptProps);\n                }\n                if (textEmbedded) {\n                    // This script follows text but we aren't writing a tag. while not as efficient as possible we need\n                    // to be safe and assume text will follow by inserting a textSeparator\n                    target.push(textSeparator);\n                }\n                return null;\n            }\n        }\n        function pushScriptImpl(target, props) {\n            target.push(startChunkForTag(\"script\"));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            {\n                if (children != null && typeof children !== \"string\") {\n                    var descriptiveStatement = typeof children === \"number\" ? \"a number for children\" : Array.isArray(children) ? \"an array for children\" : \"something unexpected for children\";\n                    error(\"A script element was rendered with %s. If script element has children it must be a single string.\" + \" Consider using dangerouslySetInnerHTML or passing a plain string as children.\", descriptiveStatement);\n                }\n            }\n            pushInnerHTML(target, innerHTML, children);\n            if (typeof children === \"string\") {\n                target.push(stringToChunk(encodeHTMLTextNode(children)));\n            }\n            target.push(endTag1, stringToChunk(\"script\"), endTag2);\n            return null;\n        }\n        function pushStartGenericElement(target, props, tag) {\n            target.push(startChunkForTag(tag));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            pushInnerHTML(target, innerHTML, children);\n            if (typeof children === \"string\") {\n                // Special case children as a string to avoid the unnecessary comment.\n                // TODO: Remove this special case after the general optimization is in place.\n                target.push(stringToChunk(encodeHTMLTextNode(children)));\n                return null;\n            }\n            return children;\n        }\n        function pushStartCustomElement(target, props, tag) {\n            target.push(startChunkForTag(tag));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        case \"style\":\n                            pushStyleAttribute(target, propValue);\n                            break;\n                        case \"suppressContentEditableWarning\":\n                        case \"suppressHydrationWarning\":\n                            break;\n                        default:\n                            if (isAttributeNameSafe(propKey) && typeof propValue !== \"function\" && typeof propValue !== \"symbol\") {\n                                target.push(attributeSeparator, stringToChunk(propKey), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);\n                            }\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            pushInnerHTML(target, innerHTML, children);\n            return children;\n        }\n        var leadingNewline = stringToPrecomputedChunk(\"\\n\");\n        function pushStartPreformattedElement(target, props, tag) {\n            target.push(startChunkForTag(tag));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag); // text/html ignores the first character in these tags if it's a newline\n            // Prefer to break application/xml over text/html (for now) by adding\n            // a newline specifically to get eaten by the parser. (Alternately for\n            // textareas, replacing \"^\\n\" with \"\\r\\n\" doesn't get eaten, and the first\n            // \\r is normalized out by HTMLTextAreaElement#value.)\n            // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>\n            // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>\n            // See: <http://www.w3.org/TR/html5/syntax.html#newlines>\n            // See: Parsing of \"textarea\" \"listing\" and \"pre\" elements\n            //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>\n            // TODO: This doesn't deal with the case where the child is an array\n            // or component that returns a string.\n            if (innerHTML != null) {\n                if (children != null) {\n                    throw new Error(\"Can only set one of `children` or `props.dangerouslySetInnerHTML`.\");\n                }\n                if (typeof innerHTML !== \"object\" || !(\"__html\" in innerHTML)) {\n                    throw new Error(\"`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. \" + \"Please visit https://reactjs.org/link/dangerously-set-inner-html \" + \"for more information.\");\n                }\n                var html = innerHTML.__html;\n                if (html !== null && html !== undefined) {\n                    if (typeof html === \"string\" && html.length > 0 && html[0] === \"\\n\") {\n                        target.push(leadingNewline, stringToChunk(html));\n                    } else {\n                        {\n                            checkHtmlStringCoercion(html);\n                        }\n                        target.push(stringToChunk(\"\" + html));\n                    }\n                }\n            }\n            if (typeof children === \"string\" && children[0] === \"\\n\") {\n                target.push(leadingNewline);\n            }\n            return children;\n        } // We accept any tag to be rendered but since this gets injected into arbitrary\n        // HTML, we want to make sure that it's a safe tag.\n        // http://www.w3.org/TR/REC-xml/#NT-Name\n        var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\\.\\-\\d]*$/; // Simplified subset\n        var validatedTagCache = new Map();\n        function startChunkForTag(tag) {\n            var tagStartChunk = validatedTagCache.get(tag);\n            if (tagStartChunk === undefined) {\n                if (!VALID_TAG_REGEX.test(tag)) {\n                    throw new Error(\"Invalid tag: \" + tag);\n                }\n                tagStartChunk = stringToPrecomputedChunk(\"<\" + tag);\n                validatedTagCache.set(tag, tagStartChunk);\n            }\n            return tagStartChunk;\n        }\n        var DOCTYPE = stringToPrecomputedChunk(\"<!DOCTYPE html>\");\n        function pushStartInstance(target, type, props, resources, responseState, formatContext, textEmbedded) {\n            {\n                validateProperties$2(type, props);\n                validateProperties$1(type, props);\n                validateProperties(type, props, null);\n                if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {\n                    error(\"A component is `contentEditable` and contains `children` managed by \" + \"React. It is now your responsibility to guarantee that none of \" + \"those nodes are unexpectedly modified or duplicated. This is \" + \"probably not intentional.\");\n                }\n                if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {\n                    if (type.indexOf(\"-\") === -1 && type.toLowerCase() !== type) {\n                        error(\"<%s /> is using incorrect casing. \" + \"Use PascalCase for React components, \" + \"or lowercase for HTML elements.\", type);\n                    }\n                }\n            }\n            switch(type){\n                case \"div\":\n                case \"span\":\n                case \"svg\":\n                case \"path\":\n                case \"a\":\n                case \"g\":\n                case \"p\":\n                case \"li\":\n                    break;\n                // Special tags\n                case \"select\":\n                    return pushStartSelect(target, props);\n                case \"option\":\n                    return pushStartOption(target, props, formatContext);\n                case \"textarea\":\n                    return pushStartTextArea(target, props);\n                case \"input\":\n                    return pushInput(target, props, responseState);\n                case \"button\":\n                    return pushStartButton(target, props, responseState);\n                case \"form\":\n                    return pushStartForm(target, props);\n                case \"menuitem\":\n                    return pushStartMenuItem(target, props);\n                case \"title\":\n                    return pushTitle(target, props, responseState, formatContext.insertionMode, formatContext.noscriptTagInScope);\n                case \"link\":\n                    return pushLink(target, props, responseState, resources, textEmbedded, formatContext.insertionMode, formatContext.noscriptTagInScope);\n                case \"script\":\n                    return pushScript(target, props, resources, textEmbedded, formatContext.insertionMode, formatContext.noscriptTagInScope);\n                case \"style\":\n                    return pushStyle(target, props, resources, textEmbedded, formatContext.insertionMode, formatContext.noscriptTagInScope);\n                case \"meta\":\n                    return pushMeta(target, props, responseState, textEmbedded, formatContext.insertionMode, formatContext.noscriptTagInScope);\n                // Newline eating tags\n                case \"listing\":\n                case \"pre\":\n                    {\n                        return pushStartPreformattedElement(target, props, type);\n                    }\n                case \"img\":\n                    {\n                        return pushImg(target, props, resources);\n                    }\n                // Omitted close tags\n                case \"base\":\n                case \"area\":\n                case \"br\":\n                case \"col\":\n                case \"embed\":\n                case \"hr\":\n                case \"keygen\":\n                case \"param\":\n                case \"source\":\n                case \"track\":\n                case \"wbr\":\n                    {\n                        return pushSelfClosing(target, props, type);\n                    }\n                // These are reserved SVG and MathML elements, that are never custom elements.\n                // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts\n                case \"annotation-xml\":\n                case \"color-profile\":\n                case \"font-face\":\n                case \"font-face-src\":\n                case \"font-face-uri\":\n                case \"font-face-format\":\n                case \"font-face-name\":\n                case \"missing-glyph\":\n                    {\n                        break;\n                    }\n                // Preamble start tags\n                case \"head\":\n                    return pushStartHead(target, props, responseState, formatContext.insertionMode);\n                case \"html\":\n                    {\n                        return pushStartHtml(target, props, responseState, formatContext.insertionMode);\n                    }\n                default:\n                    {\n                        if (type.indexOf(\"-\") !== -1) {\n                            // Custom element\n                            return pushStartCustomElement(target, props, type);\n                        }\n                    }\n            } // Generic element\n            return pushStartGenericElement(target, props, type);\n        }\n        var endTag1 = stringToPrecomputedChunk(\"</\");\n        var endTag2 = stringToPrecomputedChunk(\">\");\n        function pushEndInstance(target, type, props, responseState, formatContext) {\n            switch(type){\n                // When float is on we expect title and script tags to always be pushed in\n                // a unit and never return children. when we end up pushing the end tag we\n                // want to ensure there is no extra closing tag pushed\n                case \"title\":\n                case \"style\":\n                case \"script\":\n                // Omitted close tags\n                // TODO: Instead of repeating this switch we could try to pass a flag from above.\n                // That would require returning a tuple. Which might be ok if it gets inlined.\n                case \"area\":\n                case \"base\":\n                case \"br\":\n                case \"col\":\n                case \"embed\":\n                case \"hr\":\n                case \"img\":\n                case \"input\":\n                case \"keygen\":\n                case \"link\":\n                case \"meta\":\n                case \"param\":\n                case \"source\":\n                case \"track\":\n                case \"wbr\":\n                    {\n                        // No close tag needed.\n                        return;\n                    }\n                // Postamble end tags\n                // When float is enabled we omit the end tags for body and html when\n                // they represent the Document.body and Document.documentElement Nodes.\n                // This is so we can withhold them until the postamble when we know\n                // we won't emit any more tags\n                case \"body\":\n                    {\n                        if (formatContext.insertionMode <= HTML_HTML_MODE) {\n                            responseState.hasBody = true;\n                            return;\n                        }\n                        break;\n                    }\n                case \"html\":\n                    if (formatContext.insertionMode === ROOT_HTML_MODE) {\n                        return;\n                    }\n                    break;\n            }\n            target.push(endTag1, stringToChunk(type), endTag2);\n        }\n        function writeBootstrap(destination, responseState) {\n            var bootstrapChunks = responseState.bootstrapChunks;\n            var i = 0;\n            for(; i < bootstrapChunks.length - 1; i++){\n                writeChunk(destination, bootstrapChunks[i]);\n            }\n            if (i < bootstrapChunks.length) {\n                var lastChunk = bootstrapChunks[i];\n                bootstrapChunks.length = 0;\n                return writeChunkAndReturn(destination, lastChunk);\n            }\n            return true;\n        }\n        function writeCompletedRoot(destination, responseState) {\n            return writeBootstrap(destination, responseState);\n        } // Structural Nodes\n        // A placeholder is a node inside a hidden partial tree that can be filled in later, but before\n        // display. It's never visible to users. We use the template tag because it can be used in every\n        // type of parent. <script> tags also work in every other tag except <colgroup>.\n        var placeholder1 = stringToPrecomputedChunk('<template id=\"');\n        var placeholder2 = stringToPrecomputedChunk('\"></template>');\n        function writePlaceholder(destination, responseState, id) {\n            writeChunk(destination, placeholder1);\n            writeChunk(destination, responseState.placeholderPrefix);\n            var formattedID = stringToChunk(id.toString(16));\n            writeChunk(destination, formattedID);\n            return writeChunkAndReturn(destination, placeholder2);\n        } // Suspense boundaries are encoded as comments.\n        var startCompletedSuspenseBoundary = stringToPrecomputedChunk(\"<!--$-->\");\n        var startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id=\"');\n        var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('\"></template>');\n        var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk(\"<!--$!-->\");\n        var endSuspenseBoundary = stringToPrecomputedChunk(\"<!--/$-->\");\n        var clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk(\"<template\");\n        var clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('\"');\n        var clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst=\"');\n        var clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg=\"');\n        var clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck=\"');\n        var clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk(\"></template>\");\n        function writeStartCompletedSuspenseBoundary$1(destination, responseState) {\n            return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);\n        }\n        function writeStartPendingSuspenseBoundary(destination, responseState, id) {\n            writeChunk(destination, startPendingSuspenseBoundary1);\n            if (id === null) {\n                throw new Error(\"An ID must have been assigned before we can complete the boundary.\");\n            }\n            writeChunk(destination, id);\n            return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);\n        }\n        function writeStartClientRenderedSuspenseBoundary$1(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {\n            var result;\n            result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);\n            writeChunk(destination, clientRenderedSuspenseBoundaryError1);\n            if (errorDigest) {\n                writeChunk(destination, clientRenderedSuspenseBoundaryError1A);\n                writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest)));\n                writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);\n            }\n            {\n                if (errorMesssage) {\n                    writeChunk(destination, clientRenderedSuspenseBoundaryError1B);\n                    writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage)));\n                    writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);\n                }\n                if (errorComponentStack) {\n                    writeChunk(destination, clientRenderedSuspenseBoundaryError1C);\n                    writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));\n                    writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);\n                }\n            }\n            result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2);\n            return result;\n        }\n        function writeEndCompletedSuspenseBoundary$1(destination, responseState) {\n            return writeChunkAndReturn(destination, endSuspenseBoundary);\n        }\n        function writeEndPendingSuspenseBoundary(destination, responseState) {\n            return writeChunkAndReturn(destination, endSuspenseBoundary);\n        }\n        function writeEndClientRenderedSuspenseBoundary$1(destination, responseState) {\n            return writeChunkAndReturn(destination, endSuspenseBoundary);\n        }\n        var startSegmentHTML = stringToPrecomputedChunk('<div hidden id=\"');\n        var startSegmentHTML2 = stringToPrecomputedChunk('\">');\n        var endSegmentHTML = stringToPrecomputedChunk(\"</div>\");\n        var startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden=\"true\" style=\"display:none\" id=\"');\n        var startSegmentSVG2 = stringToPrecomputedChunk('\">');\n        var endSegmentSVG = stringToPrecomputedChunk(\"</svg>\");\n        var startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden=\"true\" style=\"display:none\" id=\"');\n        var startSegmentMathML2 = stringToPrecomputedChunk('\">');\n        var endSegmentMathML = stringToPrecomputedChunk(\"</math>\");\n        var startSegmentTable = stringToPrecomputedChunk('<table hidden id=\"');\n        var startSegmentTable2 = stringToPrecomputedChunk('\">');\n        var endSegmentTable = stringToPrecomputedChunk(\"</table>\");\n        var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id=\"');\n        var startSegmentTableBody2 = stringToPrecomputedChunk('\">');\n        var endSegmentTableBody = stringToPrecomputedChunk(\"</tbody></table>\");\n        var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id=\"');\n        var startSegmentTableRow2 = stringToPrecomputedChunk('\">');\n        var endSegmentTableRow = stringToPrecomputedChunk(\"</tr></table>\");\n        var startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id=\"');\n        var startSegmentColGroup2 = stringToPrecomputedChunk('\">');\n        var endSegmentColGroup = stringToPrecomputedChunk(\"</colgroup></table>\");\n        function writeStartSegment(destination, responseState, formatContext, id) {\n            switch(formatContext.insertionMode){\n                case ROOT_HTML_MODE:\n                case HTML_HTML_MODE:\n                case HTML_MODE:\n                    {\n                        writeChunk(destination, startSegmentHTML);\n                        writeChunk(destination, responseState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentHTML2);\n                    }\n                case SVG_MODE:\n                    {\n                        writeChunk(destination, startSegmentSVG);\n                        writeChunk(destination, responseState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentSVG2);\n                    }\n                case MATHML_MODE:\n                    {\n                        writeChunk(destination, startSegmentMathML);\n                        writeChunk(destination, responseState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentMathML2);\n                    }\n                case HTML_TABLE_MODE:\n                    {\n                        writeChunk(destination, startSegmentTable);\n                        writeChunk(destination, responseState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentTable2);\n                    }\n                // TODO: For the rest of these, there will be extra wrapper nodes that never\n                // get deleted from the document. We need to delete the table too as part\n                // of the injected scripts. They are invisible though so it's not too terrible\n                // and it's kind of an edge case to suspend in a table. Totally supported though.\n                case HTML_TABLE_BODY_MODE:\n                    {\n                        writeChunk(destination, startSegmentTableBody);\n                        writeChunk(destination, responseState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentTableBody2);\n                    }\n                case HTML_TABLE_ROW_MODE:\n                    {\n                        writeChunk(destination, startSegmentTableRow);\n                        writeChunk(destination, responseState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentTableRow2);\n                    }\n                case HTML_COLGROUP_MODE:\n                    {\n                        writeChunk(destination, startSegmentColGroup);\n                        writeChunk(destination, responseState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentColGroup2);\n                    }\n                default:\n                    {\n                        throw new Error(\"Unknown insertion mode. This is a bug in React.\");\n                    }\n            }\n        }\n        function writeEndSegment(destination, formatContext) {\n            switch(formatContext.insertionMode){\n                case ROOT_HTML_MODE:\n                case HTML_HTML_MODE:\n                case HTML_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentHTML);\n                    }\n                case SVG_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentSVG);\n                    }\n                case MATHML_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentMathML);\n                    }\n                case HTML_TABLE_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentTable);\n                    }\n                case HTML_TABLE_BODY_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentTableBody);\n                    }\n                case HTML_TABLE_ROW_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentTableRow);\n                    }\n                case HTML_COLGROUP_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentColGroup);\n                    }\n                default:\n                    {\n                        throw new Error(\"Unknown insertion mode. This is a bug in React.\");\n                    }\n            }\n        }\n        var completeSegmentScript1Full = stringToPrecomputedChunk(completeSegment + ';$RS(\"');\n        var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS(\"');\n        var completeSegmentScript2 = stringToPrecomputedChunk('\",\"');\n        var completeSegmentScriptEnd = stringToPrecomputedChunk('\")</script>');\n        var completeSegmentData1 = stringToPrecomputedChunk('<template data-rsi=\"\" data-sid=\"');\n        var completeSegmentData2 = stringToPrecomputedChunk('\" data-pid=\"');\n        var completeSegmentDataEnd = dataElementQuotedEnd;\n        function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {\n            var scriptFormat = responseState.streamingFormat === ScriptStreamingFormat;\n            if (scriptFormat) {\n                writeChunk(destination, responseState.startInlineScript);\n                if ((responseState.instructions & SentCompleteSegmentFunction) === NothingSent) {\n                    // The first time we write this, we'll need to include the full implementation.\n                    responseState.instructions |= SentCompleteSegmentFunction;\n                    writeChunk(destination, completeSegmentScript1Full);\n                } else {\n                    // Future calls can just reuse the same function.\n                    writeChunk(destination, completeSegmentScript1Partial);\n                }\n            } else {\n                writeChunk(destination, completeSegmentData1);\n            } // Write function arguments, which are string literals\n            writeChunk(destination, responseState.segmentPrefix);\n            var formattedID = stringToChunk(contentSegmentID.toString(16));\n            writeChunk(destination, formattedID);\n            if (scriptFormat) {\n                writeChunk(destination, completeSegmentScript2);\n            } else {\n                writeChunk(destination, completeSegmentData2);\n            }\n            writeChunk(destination, responseState.placeholderPrefix);\n            writeChunk(destination, formattedID);\n            if (scriptFormat) {\n                return writeChunkAndReturn(destination, completeSegmentScriptEnd);\n            } else {\n                return writeChunkAndReturn(destination, completeSegmentDataEnd);\n            }\n        }\n        var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundary + '$RC(\"');\n        var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC(\"');\n        var completeBoundaryWithStylesScript1FullBoth = stringToPrecomputedChunk(completeBoundary + completeBoundaryWithStyles + '$RR(\"');\n        var completeBoundaryWithStylesScript1FullPartial = stringToPrecomputedChunk(completeBoundaryWithStyles + '$RR(\"');\n        var completeBoundaryWithStylesScript1Partial = stringToPrecomputedChunk('$RR(\"');\n        var completeBoundaryScript2 = stringToPrecomputedChunk('\",\"');\n        var completeBoundaryScript3a = stringToPrecomputedChunk('\",');\n        var completeBoundaryScript3b = stringToPrecomputedChunk('\"');\n        var completeBoundaryScriptEnd = stringToPrecomputedChunk(\")</script>\");\n        var completeBoundaryData1 = stringToPrecomputedChunk('<template data-rci=\"\" data-bid=\"');\n        var completeBoundaryWithStylesData1 = stringToPrecomputedChunk('<template data-rri=\"\" data-bid=\"');\n        var completeBoundaryData2 = stringToPrecomputedChunk('\" data-sid=\"');\n        var completeBoundaryData3a = stringToPrecomputedChunk('\" data-sty=\"');\n        var completeBoundaryDataEnd = dataElementQuotedEnd;\n        function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID, boundaryResources) {\n            var requiresStyleInsertion;\n            {\n                requiresStyleInsertion = responseState.stylesToHoist; // If necessary stylesheets will be flushed with this instruction.\n                // Any style tags not yet hoisted in the Document will also be hoisted.\n                // We reset this state since after this instruction executes all styles\n                // up to this point will have been hoisted\n                responseState.stylesToHoist = false;\n            }\n            var scriptFormat = responseState.streamingFormat === ScriptStreamingFormat;\n            if (scriptFormat) {\n                writeChunk(destination, responseState.startInlineScript);\n                if (requiresStyleInsertion) {\n                    if ((responseState.instructions & SentCompleteBoundaryFunction) === NothingSent) {\n                        responseState.instructions |= SentStyleInsertionFunction | SentCompleteBoundaryFunction;\n                        writeChunk(destination, clonePrecomputedChunk(completeBoundaryWithStylesScript1FullBoth));\n                    } else if ((responseState.instructions & SentStyleInsertionFunction) === NothingSent) {\n                        responseState.instructions |= SentStyleInsertionFunction;\n                        writeChunk(destination, completeBoundaryWithStylesScript1FullPartial);\n                    } else {\n                        writeChunk(destination, completeBoundaryWithStylesScript1Partial);\n                    }\n                } else {\n                    if ((responseState.instructions & SentCompleteBoundaryFunction) === NothingSent) {\n                        responseState.instructions |= SentCompleteBoundaryFunction;\n                        writeChunk(destination, completeBoundaryScript1Full);\n                    } else {\n                        writeChunk(destination, completeBoundaryScript1Partial);\n                    }\n                }\n            } else {\n                if (requiresStyleInsertion) {\n                    writeChunk(destination, completeBoundaryWithStylesData1);\n                } else {\n                    writeChunk(destination, completeBoundaryData1);\n                }\n            }\n            if (boundaryID === null) {\n                throw new Error(\"An ID must have been assigned before we can complete the boundary.\");\n            } // Write function arguments, which are string and array literals\n            var formattedContentID = stringToChunk(contentSegmentID.toString(16));\n            writeChunk(destination, boundaryID);\n            if (scriptFormat) {\n                writeChunk(destination, completeBoundaryScript2);\n            } else {\n                writeChunk(destination, completeBoundaryData2);\n            }\n            writeChunk(destination, responseState.segmentPrefix);\n            writeChunk(destination, formattedContentID);\n            if (requiresStyleInsertion) {\n                // Script and data writers must format this differently:\n                //  - script writer emits an array literal, whose string elements are\n                //    escaped for javascript  e.g. [\"A\", \"B\"]\n                //  - data writer emits a string literal, which is escaped as html\n                //    e.g. [&#34;A&#34;, &#34;B&#34;]\n                if (scriptFormat) {\n                    writeChunk(destination, completeBoundaryScript3a); // boundaryResources encodes an array literal\n                    writeStyleResourceDependenciesInJS(destination, boundaryResources);\n                } else {\n                    writeChunk(destination, completeBoundaryData3a);\n                    writeStyleResourceDependenciesInAttr(destination, boundaryResources);\n                }\n            } else {\n                if (scriptFormat) {\n                    writeChunk(destination, completeBoundaryScript3b);\n                }\n            }\n            var writeMore;\n            if (scriptFormat) {\n                writeMore = writeChunkAndReturn(destination, completeBoundaryScriptEnd);\n            } else {\n                writeMore = writeChunkAndReturn(destination, completeBoundaryDataEnd);\n            }\n            return writeBootstrap(destination, responseState) && writeMore;\n        }\n        var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderBoundary + ';$RX(\"');\n        var clientRenderScript1Partial = stringToPrecomputedChunk('$RX(\"');\n        var clientRenderScript1A = stringToPrecomputedChunk('\"');\n        var clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(\",\");\n        var clientRenderScriptEnd = stringToPrecomputedChunk(\")</script>\");\n        var clientRenderData1 = stringToPrecomputedChunk('<template data-rxi=\"\" data-bid=\"');\n        var clientRenderData2 = stringToPrecomputedChunk('\" data-dgst=\"');\n        var clientRenderData3 = stringToPrecomputedChunk('\" data-msg=\"');\n        var clientRenderData4 = stringToPrecomputedChunk('\" data-stck=\"');\n        var clientRenderDataEnd = dataElementQuotedEnd;\n        function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {\n            var scriptFormat = responseState.streamingFormat === ScriptStreamingFormat;\n            if (scriptFormat) {\n                writeChunk(destination, responseState.startInlineScript);\n                if ((responseState.instructions & SentClientRenderFunction) === NothingSent) {\n                    // The first time we write this, we'll need to include the full implementation.\n                    responseState.instructions |= SentClientRenderFunction;\n                    writeChunk(destination, clientRenderScript1Full);\n                } else {\n                    // Future calls can just reuse the same function.\n                    writeChunk(destination, clientRenderScript1Partial);\n                }\n            } else {\n                // <template data-rxi=\"\" data-bid=\"\n                writeChunk(destination, clientRenderData1);\n            }\n            if (boundaryID === null) {\n                throw new Error(\"An ID must have been assigned before we can complete the boundary.\");\n            }\n            writeChunk(destination, boundaryID);\n            if (scriptFormat) {\n                // \" needs to be inserted for scripts, since ArgInterstitual does not contain\n                // leading or trailing quotes\n                writeChunk(destination, clientRenderScript1A);\n            }\n            if (errorDigest || errorMessage || errorComponentStack) {\n                if (scriptFormat) {\n                    // ,\"JSONString\"\n                    writeChunk(destination, clientRenderErrorScriptArgInterstitial);\n                    writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || \"\")));\n                } else {\n                    // \" data-dgst=\"HTMLString\n                    writeChunk(destination, clientRenderData2);\n                    writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest || \"\")));\n                }\n            }\n            if (errorMessage || errorComponentStack) {\n                if (scriptFormat) {\n                    // ,\"JSONString\"\n                    writeChunk(destination, clientRenderErrorScriptArgInterstitial);\n                    writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || \"\")));\n                } else {\n                    // \" data-msg=\"HTMLString\n                    writeChunk(destination, clientRenderData3);\n                    writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMessage || \"\")));\n                }\n            }\n            if (errorComponentStack) {\n                // ,\"JSONString\"\n                if (scriptFormat) {\n                    writeChunk(destination, clientRenderErrorScriptArgInterstitial);\n                    writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)));\n                } else {\n                    // \" data-stck=\"HTMLString\n                    writeChunk(destination, clientRenderData4);\n                    writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));\n                }\n            }\n            if (scriptFormat) {\n                // ></script>\n                return writeChunkAndReturn(destination, clientRenderScriptEnd);\n            } else {\n                // \"></template>\n                return writeChunkAndReturn(destination, clientRenderDataEnd);\n            }\n        }\n        var regexForJSStringsInInstructionScripts = /[<\\u2028\\u2029]/g;\n        function escapeJSStringsForInstructionScripts(input) {\n            var escaped = JSON.stringify(input);\n            return escaped.replace(regexForJSStringsInInstructionScripts, function(match) {\n                switch(match){\n                    // santizing breaking out of strings and script tags\n                    case \"<\":\n                        return \"\\\\u003c\";\n                    case \"\\u2028\":\n                        return \"\\\\u2028\";\n                    case \"\\u2029\":\n                        return \"\\\\u2029\";\n                    default:\n                        {\n                            // eslint-disable-next-line react-internal/prod-error-codes\n                            throw new Error(\"escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React\");\n                        }\n                }\n            });\n        }\n        var regexForJSStringsInScripts = /[&><\\u2028\\u2029]/g;\n        function escapeJSObjectForInstructionScripts(input) {\n            var escaped = JSON.stringify(input);\n            return escaped.replace(regexForJSStringsInScripts, function(match) {\n                switch(match){\n                    // santizing breaking out of strings and script tags\n                    case \"&\":\n                        return \"\\\\u0026\";\n                    case \">\":\n                        return \"\\\\u003e\";\n                    case \"<\":\n                        return \"\\\\u003c\";\n                    case \"\\u2028\":\n                        return \"\\\\u2028\";\n                    case \"\\u2029\":\n                        return \"\\\\u2029\";\n                    default:\n                        {\n                            // eslint-disable-next-line react-internal/prod-error-codes\n                            throw new Error(\"escapeJSObjectForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React\");\n                        }\n                }\n            });\n        }\n        var lateStyleTagResourceOpen1 = stringToPrecomputedChunk('<style media=\"not all\" data-precedence=\"');\n        var lateStyleTagResourceOpen2 = stringToPrecomputedChunk('\" data-href=\"');\n        var lateStyleTagResourceOpen3 = stringToPrecomputedChunk('\">');\n        var lateStyleTagTemplateClose = stringToPrecomputedChunk(\"</style>\"); // Tracks whether the boundary currently flushing is flushign style tags or has any\n        // stylesheet dependencies not flushed in the Preamble.\n        var currentlyRenderingBoundaryHasStylesToHoist = false; // Acts as a return value for the forEach execution of style tag flushing.\n        var destinationHasCapacity = true;\n        function flushStyleTagsLateForBoundary(resource) {\n            if (resource.type === \"stylesheet\" && (resource.state & FlushedInPreamble) === NoState) {\n                currentlyRenderingBoundaryHasStylesToHoist = true;\n            } else if (resource.type === \"style\") {\n                var chunks = resource.chunks;\n                var hrefs = resource.props.hrefs;\n                var i = 0;\n                if (chunks.length) {\n                    writeChunk(this, lateStyleTagResourceOpen1);\n                    writeChunk(this, stringToChunk(escapeTextForBrowser(resource.props.precedence)));\n                    if (hrefs.length) {\n                        writeChunk(this, lateStyleTagResourceOpen2);\n                        for(; i < hrefs.length - 1; i++){\n                            writeChunk(this, stringToChunk(escapeTextForBrowser(hrefs[i])));\n                            writeChunk(this, spaceSeparator);\n                        }\n                        writeChunk(this, stringToChunk(escapeTextForBrowser(hrefs[i])));\n                    }\n                    writeChunk(this, lateStyleTagResourceOpen3);\n                    for(i = 0; i < chunks.length; i++){\n                        writeChunk(this, chunks[i]);\n                    }\n                    destinationHasCapacity = writeChunkAndReturn(this, lateStyleTagTemplateClose); // We wrote style tags for this boundary and we may need to emit a script\n                    // to hoist them.\n                    currentlyRenderingBoundaryHasStylesToHoist = true; // style resources can flush continuously since more rules may be written into\n                    // them with new hrefs. Instead of marking it flushed, we simply reset the chunks\n                    // and hrefs\n                    chunks.length = 0;\n                    hrefs.length = 0;\n                }\n            }\n        }\n        function writeResourcesForBoundary(destination, boundaryResources, responseState) {\n            // Reset these on each invocation, they are only safe to read in this function\n            currentlyRenderingBoundaryHasStylesToHoist = false;\n            destinationHasCapacity = true; // Flush each Boundary resource\n            boundaryResources.forEach(flushStyleTagsLateForBoundary, destination);\n            if (currentlyRenderingBoundaryHasStylesToHoist) {\n                responseState.stylesToHoist = true;\n            }\n            return destinationHasCapacity;\n        }\n        function flushResourceInPreamble(resource) {\n            if ((resource.state & (Flushed | Blocked)) === NoState) {\n                var chunks = resource.chunks;\n                for(var i = 0; i < chunks.length; i++){\n                    writeChunk(this, chunks[i]);\n                }\n                resource.state |= FlushedInPreamble;\n            }\n        }\n        function flushResourceLate(resource) {\n            if ((resource.state & (Flushed | Blocked)) === NoState) {\n                var chunks = resource.chunks;\n                for(var i = 0; i < chunks.length; i++){\n                    writeChunk(this, chunks[i]);\n                }\n                resource.state |= FlushedLate;\n            }\n        } // This must always be read after flushing stylesheet styles. we know we will encounter a style resource\n        // per precedence and it will be set before ready so we cast this to avoid an extra check at runtime\n        var precedenceStyleTagResource = null; // This flags let's us opt out of flushing a placeholder style tag to emit the precedence in the right order.\n        // If a stylesheet was flushed then we have the precedence order preserved and only need to emit <style> tags\n        // if there are actual chunks to flush\n        var didFlushPrecedence = false;\n        function flushStyleInPreamble(resource, key, set) {\n            var chunks = resource.chunks;\n            if (resource.state & Flushed) {\n                // In theory this should never happen because we clear from the\n                // Set on flush but to ensure correct semantics we don't emit\n                // anything if we are in this state.\n                set.delete(resource);\n            } else {\n                // We can emit this style or stylesheet as is.\n                if (resource.type === \"style\") {\n                    precedenceStyleTagResource = resource;\n                    return;\n                } // We still need to encode stylesheet chunks\n                // because unlike most Hoistables and Resources we do not eagerly encode\n                // them during render. This is because if we flush late we have to send a\n                // different encoding and we don't want to encode multiple times\n                pushLinkImpl(chunks, resource.props);\n                for(var i = 0; i < chunks.length; i++){\n                    writeChunk(this, chunks[i]);\n                }\n                resource.state |= FlushedInPreamble;\n                didFlushPrecedence = true;\n            }\n        }\n        var styleTagResourceOpen1 = stringToPrecomputedChunk('<style data-precedence=\"');\n        var styleTagResourceOpen2 = stringToPrecomputedChunk('\" data-href=\"');\n        var spaceSeparator = stringToPrecomputedChunk(\" \");\n        var styleTagResourceOpen3 = stringToPrecomputedChunk('\">');\n        var styleTagResourceClose = stringToPrecomputedChunk(\"</style>\");\n        function flushAllStylesInPreamble(set, precedence) {\n            didFlushPrecedence = false;\n            set.forEach(flushStyleInPreamble, this);\n            set.clear();\n            var chunks = precedenceStyleTagResource.chunks;\n            var hrefs = precedenceStyleTagResource.props.hrefs;\n            if (didFlushPrecedence === false || chunks.length) {\n                writeChunk(this, styleTagResourceOpen1);\n                writeChunk(this, stringToChunk(escapeTextForBrowser(precedence)));\n                var i = 0;\n                if (hrefs.length) {\n                    writeChunk(this, styleTagResourceOpen2);\n                    for(; i < hrefs.length - 1; i++){\n                        writeChunk(this, stringToChunk(escapeTextForBrowser(hrefs[i])));\n                        writeChunk(this, spaceSeparator);\n                    }\n                    writeChunk(this, stringToChunk(escapeTextForBrowser(hrefs[i])));\n                }\n                writeChunk(this, styleTagResourceOpen3);\n                for(i = 0; i < chunks.length; i++){\n                    writeChunk(this, chunks[i]);\n                }\n                writeChunk(this, styleTagResourceClose); // style resources can flush continuously since more rules may be written into\n                // them with new hrefs. Instead of marking it flushed, we simply reset the chunks\n                // and hrefs\n                chunks.length = 0;\n                hrefs.length = 0;\n            }\n        }\n        function preloadLateStyle(resource) {\n            if (resource.state & PreloadFlushed) {\n                // This resource has already had a preload flushed\n                return;\n            }\n            if (resource.type === \"style\") {\n                // <style> tags do not need to be preloaded\n                return;\n            }\n            var chunks = resource.chunks;\n            var preloadProps = preloadAsStylePropsFromProps(resource.props.href, resource.props);\n            pushLinkImpl(chunks, preloadProps);\n            for(var i = 0; i < chunks.length; i++){\n                writeChunk(this, chunks[i]);\n            }\n            resource.state |= PreloadFlushed;\n            chunks.length = 0;\n        }\n        function preloadLateStyles(set, precedence) {\n            set.forEach(preloadLateStyle, this);\n            set.clear();\n        } // We don't bother reporting backpressure at the moment because we expect to\n        // flush the entire preamble in a single pass. This probably should be modified\n        // in the future to be backpressure sensitive but that requires a larger refactor\n        // of the flushing code in Fizz.\n        function writePreamble(destination, resources, responseState, willFlushAllSegments) {\n            // This function must be called exactly once on every request\n            if (!willFlushAllSegments && responseState.externalRuntimeScript) {\n                // If the root segment is incomplete due to suspended tasks\n                // (e.g. willFlushAllSegments = false) and we are using data\n                // streaming format, ensure the external runtime is sent.\n                // (User code could choose to send this even earlier by calling\n                //  preinit(...), if they know they will suspend).\n                var _responseState$extern = responseState.externalRuntimeScript, src = _responseState$extern.src, chunks = _responseState$extern.chunks;\n                internalPreinitScript(resources, src, chunks);\n            }\n            var htmlChunks = responseState.htmlChunks;\n            var headChunks = responseState.headChunks;\n            var i = 0; // Emit open tags before Hoistables and Resources\n            if (htmlChunks) {\n                // We have an <html> to emit as part of the preamble\n                for(i = 0; i < htmlChunks.length; i++){\n                    writeChunk(destination, htmlChunks[i]);\n                }\n                if (headChunks) {\n                    for(i = 0; i < headChunks.length; i++){\n                        writeChunk(destination, headChunks[i]);\n                    }\n                } else {\n                    // We did not render a head but we emitted an <html> so we emit one now\n                    writeChunk(destination, startChunkForTag(\"head\"));\n                    writeChunk(destination, endOfStartTag);\n                }\n            } else if (headChunks) {\n                // We do not have an <html> but we do have a <head>\n                for(i = 0; i < headChunks.length; i++){\n                    writeChunk(destination, headChunks[i]);\n                }\n            } // Emit high priority Hoistables\n            var charsetChunks = responseState.charsetChunks;\n            for(i = 0; i < charsetChunks.length; i++){\n                writeChunk(destination, charsetChunks[i]);\n            }\n            charsetChunks.length = 0; // emit preconnect resources\n            resources.preconnects.forEach(flushResourceInPreamble, destination);\n            resources.preconnects.clear();\n            var preconnectChunks = responseState.preconnectChunks;\n            for(i = 0; i < preconnectChunks.length; i++){\n                writeChunk(destination, preconnectChunks[i]);\n            }\n            preconnectChunks.length = 0;\n            resources.fontPreloads.forEach(flushResourceInPreamble, destination);\n            resources.fontPreloads.clear();\n            resources.highImagePreloads.forEach(flushResourceInPreamble, destination);\n            resources.highImagePreloads.clear(); // Flush unblocked stylesheets by precedence\n            resources.precedences.forEach(flushAllStylesInPreamble, destination);\n            resources.bootstrapScripts.forEach(flushResourceInPreamble, destination);\n            resources.scripts.forEach(flushResourceInPreamble, destination);\n            resources.scripts.clear();\n            resources.bulkPreloads.forEach(flushResourceInPreamble, destination);\n            resources.bulkPreloads.clear(); // Write embedding preloadChunks\n            var preloadChunks = responseState.preloadChunks;\n            for(i = 0; i < preloadChunks.length; i++){\n                writeChunk(destination, preloadChunks[i]);\n            }\n            preloadChunks.length = 0; // Write embedding hoistableChunks\n            var hoistableChunks = responseState.hoistableChunks;\n            for(i = 0; i < hoistableChunks.length; i++){\n                writeChunk(destination, hoistableChunks[i]);\n            }\n            hoistableChunks.length = 0; // Flush closing head if necessary\n            if (htmlChunks && headChunks === null) {\n                // We have an <html> rendered but no <head> rendered. We however inserted\n                // a <head> up above so we need to emit the </head> now. This is safe because\n                // if the main content contained the </head> it would also have provided a\n                // <head>. This means that all the content inside <html> is either <body> or\n                // invalid HTML\n                writeChunk(destination, endTag1);\n                writeChunk(destination, stringToChunk(\"head\"));\n                writeChunk(destination, endTag2);\n            }\n        } // We don't bother reporting backpressure at the moment because we expect to\n        // flush the entire preamble in a single pass. This probably should be modified\n        // in the future to be backpressure sensitive but that requires a larger refactor\n        // of the flushing code in Fizz.\n        function writeHoistables(destination, resources, responseState) {\n            var i = 0; // Emit high priority Hoistables\n            // We omit charsetChunks because we have already sent the shell and if it wasn't\n            // already sent it is too late now.\n            resources.preconnects.forEach(flushResourceLate, destination);\n            resources.preconnects.clear();\n            var preconnectChunks = responseState.preconnectChunks;\n            for(i = 0; i < preconnectChunks.length; i++){\n                writeChunk(destination, preconnectChunks[i]);\n            }\n            preconnectChunks.length = 0;\n            resources.fontPreloads.forEach(flushResourceLate, destination);\n            resources.fontPreloads.clear();\n            resources.highImagePreloads.forEach(flushResourceInPreamble, destination);\n            resources.highImagePreloads.clear(); // Preload any stylesheets. these will emit in a render instruction that follows this\n            // but we want to kick off preloading as soon as possible\n            resources.precedences.forEach(preloadLateStyles, destination); // bootstrap scripts should flush above script priority but these can only flush in the preamble\n            // so we elide the code here for performance\n            resources.scripts.forEach(flushResourceLate, destination);\n            resources.scripts.clear();\n            resources.bulkPreloads.forEach(flushResourceLate, destination);\n            resources.bulkPreloads.clear(); // Write embedding preloadChunks\n            var preloadChunks = responseState.preloadChunks;\n            for(i = 0; i < preloadChunks.length; i++){\n                writeChunk(destination, preloadChunks[i]);\n            }\n            preloadChunks.length = 0; // Write embedding hoistableChunks\n            var hoistableChunks = responseState.hoistableChunks;\n            for(i = 0; i < hoistableChunks.length; i++){\n                writeChunk(destination, hoistableChunks[i]);\n            }\n            hoistableChunks.length = 0;\n        }\n        function writePostamble(destination, responseState) {\n            if (responseState.hasBody) {\n                writeChunk(destination, endTag1);\n                writeChunk(destination, stringToChunk(\"body\"));\n                writeChunk(destination, endTag2);\n            }\n            if (responseState.htmlChunks) {\n                writeChunk(destination, endTag1);\n                writeChunk(destination, stringToChunk(\"html\"));\n                writeChunk(destination, endTag2);\n            }\n        }\n        var arrayFirstOpenBracket = stringToPrecomputedChunk(\"[\");\n        var arraySubsequentOpenBracket = stringToPrecomputedChunk(\",[\");\n        var arrayInterstitial = stringToPrecomputedChunk(\",\");\n        var arrayCloseBracket = stringToPrecomputedChunk(\"]\"); // This function writes a 2D array of strings to be embedded in javascript.\n        // E.g.\n        //  [[\"JS_escaped_string1\", \"JS_escaped_string2\"]]\n        function writeStyleResourceDependenciesInJS(destination, boundaryResources) {\n            writeChunk(destination, arrayFirstOpenBracket);\n            var nextArrayOpenBrackChunk = arrayFirstOpenBracket;\n            boundaryResources.forEach(function(resource) {\n                if (resource.type === \"style\") ;\n                else if (resource.state & FlushedInPreamble) ;\n                else if (resource.state & Flushed) {\n                    // We only need to emit the href because this resource flushed in an earlier\n                    // boundary already which encoded the attributes necessary to construct\n                    // the resource instance on the client.\n                    writeChunk(destination, nextArrayOpenBrackChunk);\n                    writeStyleResourceDependencyHrefOnlyInJS(destination, resource.props.href);\n                    writeChunk(destination, arrayCloseBracket);\n                    nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n                } else if (resource.type === \"stylesheet\") {\n                    // We need to emit the whole resource for insertion on the client\n                    writeChunk(destination, nextArrayOpenBrackChunk);\n                    writeStyleResourceDependencyInJS(destination, resource.props.href, resource.props[\"data-precedence\"], resource.props);\n                    writeChunk(destination, arrayCloseBracket);\n                    nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n                    resource.state |= FlushedLate;\n                }\n            });\n            writeChunk(destination, arrayCloseBracket);\n        }\n        /* Helper functions */ function writeStyleResourceDependencyHrefOnlyInJS(destination, href) {\n            // We should actually enforce this earlier when the resource is created but for\n            // now we make sure we are actually dealing with a string here.\n            {\n                checkAttributeStringCoercion(href, \"href\");\n            }\n            var coercedHref = \"\" + href;\n            writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));\n        }\n        function writeStyleResourceDependencyInJS(destination, href, precedence, props) {\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            var coercedHref = sanitizeURL(\"\" + href);\n            writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));\n            {\n                checkAttributeStringCoercion(precedence, \"precedence\");\n            }\n            var coercedPrecedence = \"\" + precedence;\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedPrecedence)));\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"href\":\n                        case \"rel\":\n                        case \"precedence\":\n                        case \"data-precedence\":\n                            {\n                                break;\n                            }\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"link\" + \" is a self-closing tag and must neither have `children` nor \" + \"use `dangerouslySetInnerHTML`.\");\n                        default:\n                            writeStyleResourceAttributeInJS(destination, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            return null;\n        }\n        function writeStyleResourceAttributeInJS(destination, name, value) {\n            var attributeName = name.toLowerCase();\n            var attributeValue;\n            switch(typeof value){\n                case \"function\":\n                case \"symbol\":\n                    return;\n            }\n            switch(name){\n                // Reserved names\n                case \"innerHTML\":\n                case \"dangerouslySetInnerHTML\":\n                case \"suppressContentEditableWarning\":\n                case \"suppressHydrationWarning\":\n                case \"style\":\n                    // Ignored\n                    return;\n                // Attribute renames\n                case \"className\":\n                    {\n                        attributeName = \"class\";\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                        break;\n                    }\n                // Booleans\n                case \"hidden\":\n                    {\n                        if (value === false) {\n                            return;\n                        }\n                        attributeValue = \"\";\n                        break;\n                    }\n                // Santized URLs\n                case \"src\":\n                case \"href\":\n                    {\n                        value = sanitizeURL(value);\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                        break;\n                    }\n                default:\n                    {\n                        if (// use on* as hueristic for these handler props\n                        name.length > 2 && (name[0] === \"o\" || name[0] === \"O\") && (name[1] === \"n\" || name[1] === \"N\")) {\n                            return;\n                        }\n                        if (!isAttributeNameSafe(name)) {\n                            return;\n                        }\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                    }\n            }\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeName)));\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeValue)));\n        } // This function writes a 2D array of strings to be embedded in an attribute\n        // value and read with JSON.parse in ReactDOMServerExternalRuntime.js\n        // E.g.\n        //  [[&quot;JSON_escaped_string1&quot;, &quot;JSON_escaped_string2&quot;]]\n        function writeStyleResourceDependenciesInAttr(destination, boundaryResources) {\n            writeChunk(destination, arrayFirstOpenBracket);\n            var nextArrayOpenBrackChunk = arrayFirstOpenBracket;\n            boundaryResources.forEach(function(resource) {\n                if (resource.type === \"style\") ;\n                else if (resource.state & FlushedInPreamble) ;\n                else if (resource.state & Flushed) {\n                    // We only need to emit the href because this resource flushed in an earlier\n                    // boundary already which encoded the attributes necessary to construct\n                    // the resource instance on the client.\n                    writeChunk(destination, nextArrayOpenBrackChunk);\n                    writeStyleResourceDependencyHrefOnlyInAttr(destination, resource.props.href);\n                    writeChunk(destination, arrayCloseBracket);\n                    nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n                } else if (resource.type === \"stylesheet\") {\n                    // We need to emit the whole resource for insertion on the client\n                    writeChunk(destination, nextArrayOpenBrackChunk);\n                    writeStyleResourceDependencyInAttr(destination, resource.props.href, resource.props[\"data-precedence\"], resource.props);\n                    writeChunk(destination, arrayCloseBracket);\n                    nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n                    resource.state |= FlushedLate;\n                }\n            });\n            writeChunk(destination, arrayCloseBracket);\n        }\n        /* Helper functions */ function writeStyleResourceDependencyHrefOnlyInAttr(destination, href) {\n            // We should actually enforce this earlier when the resource is created but for\n            // now we make sure we are actually dealing with a string here.\n            {\n                checkAttributeStringCoercion(href, \"href\");\n            }\n            var coercedHref = \"\" + href;\n            writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));\n        }\n        function writeStyleResourceDependencyInAttr(destination, href, precedence, props) {\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            var coercedHref = sanitizeURL(\"\" + href);\n            writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));\n            {\n                checkAttributeStringCoercion(precedence, \"precedence\");\n            }\n            var coercedPrecedence = \"\" + precedence;\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedPrecedence))));\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"href\":\n                        case \"rel\":\n                        case \"precedence\":\n                        case \"data-precedence\":\n                            {\n                                break;\n                            }\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"link\" + \" is a self-closing tag and must neither have `children` nor \" + \"use `dangerouslySetInnerHTML`.\");\n                        default:\n                            writeStyleResourceAttributeInAttr(destination, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            return null;\n        }\n        function writeStyleResourceAttributeInAttr(destination, name, value) {\n            var attributeName = name.toLowerCase();\n            var attributeValue;\n            switch(typeof value){\n                case \"function\":\n                case \"symbol\":\n                    return;\n            }\n            switch(name){\n                // Reserved names\n                case \"innerHTML\":\n                case \"dangerouslySetInnerHTML\":\n                case \"suppressContentEditableWarning\":\n                case \"suppressHydrationWarning\":\n                case \"style\":\n                    // Ignored\n                    return;\n                // Attribute renames\n                case \"className\":\n                    {\n                        attributeName = \"class\";\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                        break;\n                    }\n                // Booleans\n                case \"hidden\":\n                    {\n                        if (value === false) {\n                            return;\n                        }\n                        attributeValue = \"\";\n                        break;\n                    }\n                // Santized URLs\n                case \"src\":\n                case \"href\":\n                    {\n                        value = sanitizeURL(value);\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                        break;\n                    }\n                default:\n                    {\n                        if (// use on* as hueristic for these handler props\n                        name.length > 2 && (name[0] === \"o\" || name[0] === \"O\") && (name[1] === \"n\" || name[1] === \"N\")) {\n                            return;\n                        }\n                        if (!isAttributeNameSafe(name)) {\n                            return;\n                        }\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                    }\n            }\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeName))));\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeValue))));\n        }\n        /**\n * Resources\n */ var NoState = 0; // These tags indicate whether the Resource was flushed and in which phase\n        var FlushedInPreamble = 1;\n        var FlushedLate = 2;\n        var Flushed = 3; // This tag indicates whether this Resource is blocked from flushing.\n        // This currently is only used with stylesheets that are blocked by a Boundary\n        var Blocked = 4; // This tag indicates whether this Resource has been preloaded.\n        // This generally only makes sense for Resources other than PreloadResource\n        var PreloadFlushed = 8; // Dev extensions.\n        // Stylesheets and Scripts rendered with jsx\n        // Preloads, Stylesheets, and Scripts from ReactDOM.preload or ReactDOM.preinit\n        // Preloads created for normal components we rendered but know we can preload early such as\n        // sync Scripts and stylesheets without precedence or with onLoad/onError handlers\n        // @TODO add bootstrap script to implicit preloads\n        function createResources() {\n            return {\n                // persistent\n                preloadsMap: new Map(),\n                preconnectsMap: new Map(),\n                stylesMap: new Map(),\n                scriptsMap: new Map(),\n                // cleared on flush\n                preconnects: new Set(),\n                fontPreloads: new Set(),\n                highImagePreloads: new Set(),\n                // usedImagePreloads: new Set(),\n                precedences: new Map(),\n                stylePrecedences: new Map(),\n                bootstrapScripts: new Set(),\n                scripts: new Set(),\n                bulkPreloads: new Set(),\n                // like a module global for currently rendering boundary\n                boundaryResources: null\n            };\n        }\n        function createBoundaryResources() {\n            return new Set();\n        }\n        function setCurrentlyRenderingBoundaryResourcesTarget(resources, boundaryResources) {\n            resources.boundaryResources = boundaryResources;\n        }\n        function getResourceKey(as, href) {\n            return \"[\" + as + \"]\" + href;\n        }\n        function prefetchDNS(href, options) {\n            var request = resolveRequest();\n            if (!request) {\n                // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n                // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n                // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n                // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n                // fetching) and we don't want to warn in those cases.\n                return;\n            }\n            var resources = getResources(request);\n            {\n                if (typeof href !== \"string\" || !href) {\n                    error(\"ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.\", getValueDescriptorExpectingObjectForWarning(href));\n                } else if (options != null) {\n                    if (typeof options === \"object\" && options.hasOwnProperty(\"crossOrigin\")) {\n                        error(\"ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.\", getValueDescriptorExpectingEnumForWarning(options));\n                    } else {\n                        error(\"ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.\", getValueDescriptorExpectingEnumForWarning(options));\n                    }\n                }\n            }\n            if (typeof href === \"string\" && href) {\n                var key = getResourceKey(\"prefetchDNS\", href);\n                var resource = resources.preconnectsMap.get(key);\n                if (!resource) {\n                    resource = {\n                        type: \"preconnect\",\n                        chunks: [],\n                        state: NoState,\n                        props: null\n                    };\n                    resources.preconnectsMap.set(key, resource);\n                    pushLinkImpl(resource.chunks, {\n                        href: href,\n                        rel: \"dns-prefetch\"\n                    });\n                }\n                resources.preconnects.add(resource);\n                flushResources(request);\n            }\n        }\n        function preconnect(href, options) {\n            var request = resolveRequest();\n            if (!request) {\n                // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n                // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n                // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n                // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n                // fetching) and we don't want to warn in those cases.\n                return;\n            }\n            var resources = getResources(request);\n            {\n                if (typeof href !== \"string\" || !href) {\n                    error(\"ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.\", getValueDescriptorExpectingObjectForWarning(href));\n                } else if (options != null && typeof options !== \"object\") {\n                    error(\"ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.\", getValueDescriptorExpectingEnumForWarning(options));\n                } else if (options != null && typeof options.crossOrigin !== \"string\") {\n                    error(\"ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.\", getValueDescriptorExpectingObjectForWarning(options.crossOrigin));\n                }\n            }\n            if (typeof href === \"string\" && href) {\n                var crossOrigin = options == null || typeof options.crossOrigin !== \"string\" ? null : options.crossOrigin === \"use-credentials\" ? \"use-credentials\" : \"\";\n                var key = \"[preconnect][\" + (crossOrigin === null ? \"null\" : crossOrigin) + \"]\" + href;\n                var resource = resources.preconnectsMap.get(key);\n                if (!resource) {\n                    resource = {\n                        type: \"preconnect\",\n                        chunks: [],\n                        state: NoState,\n                        props: null\n                    };\n                    resources.preconnectsMap.set(key, resource);\n                    pushLinkImpl(resource.chunks, {\n                        rel: \"preconnect\",\n                        href: href,\n                        crossOrigin: crossOrigin\n                    });\n                }\n                resources.preconnects.add(resource);\n                flushResources(request);\n            }\n        }\n        function preload(href, options) {\n            var request = resolveRequest();\n            if (!request) {\n                // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n                // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n                // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n                // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n                // fetching) and we don't want to warn in those cases.\n                return;\n            }\n            var resources = getResources(request);\n            {\n                var encountered = \"\";\n                if (typeof href !== \"string\" || !href) {\n                    encountered += \" The `href` argument encountered was \" + getValueDescriptorExpectingObjectForWarning(href) + \".\";\n                }\n                if (options == null || typeof options !== \"object\") {\n                    encountered += \" The `options` argument encountered was \" + getValueDescriptorExpectingObjectForWarning(options) + \".\";\n                } else if (typeof options.as !== \"string\" || !options.as) {\n                    encountered += \" The `as` option encountered was \" + getValueDescriptorExpectingObjectForWarning(options.as) + \".\";\n                }\n                if (encountered) {\n                    error('ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel=\"preload\" as=\"...\" />` tag.%s', encountered);\n                }\n            }\n            if (typeof href === \"string\" && href && typeof options === \"object\" && options !== null && typeof options.as === \"string\" && options.as) {\n                var as = options.as;\n                var key;\n                if (as === \"image\") {\n                    // For image preloads the key contains either the imageSrcSet + imageSizes or the href but not\n                    // both. This is to prevent identical calls with the same srcSet and sizes to be duplicated\n                    // by varying the href. this is an edge case but it is the most correct behavior.\n                    var imageSrcSet = options.imageSrcSet, imageSizes = options.imageSizes;\n                    key = getImagePreloadKey(href, imageSrcSet, imageSizes);\n                } else {\n                    key = getResourceKey(as, href);\n                }\n                var resource = resources.preloadsMap.get(key);\n                {\n                    var devResource = getAsResourceDEV(resource);\n                    if (devResource) {\n                        switch(devResource.__provenance){\n                            case \"preload\":\n                                {\n                                    var differenceDescription = describeDifferencesForPreloads(options, devResource.__originalOptions);\n                                    if (differenceDescription) {\n                                        error('ReactDOM.preload(): The options provided conflict with another call to `ReactDOM.preload(\"%s\", { as: \"%s\", ...})`.' + \" React will always use the options it first encounters when preloading a resource for a given `href` and `as` type, and any later options will be ignored if different.\" + \" Try updating all calls to `ReactDOM.preload()` with the same `href` and `as` type to use the same options, or eliminate one of the calls.%s\", href, as, differenceDescription);\n                                    }\n                                    break;\n                                }\n                            case \"implicit\":\n                                {\n                                    var _differenceDescription3 = describeDifferencesForPreloadOverImplicitPreload(options, devResource.__impliedProps);\n                                    if (_differenceDescription3) {\n                                        var elementDescription = as === \"style\" ? '<link rel=\"stylesheet\" ... />' : as === \"script\" ? \"<script ... />\" : null;\n                                        if (elementDescription) {\n                                            error('ReactDOM.preload(): For `href` \"%s\", The options provided conflict with props on a matching %s element. When the preload' + \" options disagree with the underlying resource it usually means the browser will not be able to use the preload when the resource\" + \" is fetched, negating any benefit the preload would provide. React will preload the resource using props derived from the resource instead\" + \" and ignore the options provided to the `ReactDOM.preload()` call. In general, preloading is useful when you expect to\" + \" render a resource soon but have not yet done so. In this case since the underlying resource was already rendered the preload call\" + \" may be extraneous. Try removing the call, otherwise try adjusting both the props on the %s and the options\" + \" passed to `ReactDOM.preload()` to agree.%s\", href, elementDescription, elementDescription, _differenceDescription3);\n                                        }\n                                    }\n                                    break;\n                                }\n                        }\n                    }\n                }\n                if (!resource) {\n                    resource = {\n                        type: \"preload\",\n                        chunks: [],\n                        state: NoState,\n                        props: preloadPropsFromPreloadOptions(href, as, options)\n                    };\n                    resources.preloadsMap.set(key, resource);\n                    {\n                        markAsImperativeResourceDEV(resource, \"preload\", href, options, resource.props);\n                    }\n                    pushLinkImpl(resource.chunks, resource.props);\n                }\n                if (as === \"font\") {\n                    resources.fontPreloads.add(resource);\n                } else if (as === \"image\" && options.fetchPriority === \"high\") {\n                    resources.highImagePreloads.add(resource);\n                } else {\n                    resources.bulkPreloads.add(resource);\n                }\n                flushResources(request);\n            }\n        }\n        function preinit(href, options) {\n            var request = resolveRequest();\n            if (!request) {\n                // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n                // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n                // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n                // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n                // fetching) and we don't want to warn in those cases.\n                return;\n            }\n            var resources = getResources(request);\n            {\n                if (typeof href !== \"string\" || !href) {\n                    error(\"ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.\", getValueDescriptorExpectingObjectForWarning(href));\n                } else if (options == null || typeof options !== \"object\") {\n                    error(\"ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.\", getValueDescriptorExpectingEnumForWarning(options));\n                } else if (options.as !== \"style\" && options.as !== \"script\") {\n                    error('ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are \"style\" and \"script\".', getValueDescriptorExpectingEnumForWarning(options.as));\n                }\n            }\n            if (typeof href === \"string\" && href && typeof options === \"object\" && options !== null) {\n                var as = options.as;\n                switch(as){\n                    case \"style\":\n                        {\n                            var key = getResourceKey(as, href);\n                            var resource = resources.stylesMap.get(key);\n                            var precedence = options.precedence || \"default\";\n                            {\n                                var devResource = getAsResourceDEV(resource);\n                                if (devResource) {\n                                    var resourceProps = stylesheetPropsFromPreinitOptions(href, precedence, options);\n                                    var propsEquivalent = assign({}, resourceProps, _defineProperty({\n                                        precedence: options.precedence\n                                    }, \"data-precedence\", null));\n                                    switch(devResource.__provenance){\n                                        case \"rendered\":\n                                            {\n                                                var differenceDescription = describeDifferencesForPreinitOverStylesheet(propsEquivalent, devResource.__originalProps);\n                                                if (differenceDescription) {\n                                                    error('ReactDOM.preinit(): For `href` \"%s\", the options provided conflict with props found on a <link rel=\"stylesheet\" precedence=\"%s\" href=\"%s\" .../> that was already rendered.' + \" React will always use the props or options it first encounters for a hoistable stylesheet for a given `href` and any later props or options will be ignored if different.\" + \" Generally, ReactDOM.preinit() is useful when you are not yet rendering a stylesheet but you anticipate it will be used soon.\" + \" In this case the stylesheet was already rendered so preinitializing it does not provide any additional benefit.\" + ' To resolve, try making the props and options agree between the <link rel=\"stylesheet\" .../> and the `ReactDOM.preinit()` call or' + \" remove the `ReactDOM.preinit()` call.%s\", href, devResource.__originalProps.precedence, href, differenceDescription);\n                                                }\n                                                break;\n                                            }\n                                        case \"preinit\":\n                                            {\n                                                var _differenceDescription4 = describeDifferencesForPreinits(propsEquivalent, devResource.__propsEquivalent);\n                                                if (_differenceDescription4) {\n                                                    error('ReactDOM.preinit(): For `href` \"%s\", the options provided conflict with another call to `ReactDOM.preinit(\"%s\", { as: \"style\", ... })`.' + \" React will always use the options it first encounters when preinitializing a hoistable stylesheet for a given `href` and any later options will be ignored if different.\" + \" Try updating all calls to `ReactDOM.preinit()` for a given `href` to use the same options, or only call `ReactDOM.preinit()` once per `href`.%s\", href, href, _differenceDescription4);\n                                                }\n                                                break;\n                                            }\n                                    }\n                                }\n                            }\n                            if (!resource) {\n                                var state = NoState;\n                                var preloadResource = resources.preloadsMap.get(key);\n                                if (preloadResource && preloadResource.state & Flushed) {\n                                    state = PreloadFlushed;\n                                }\n                                resource = {\n                                    type: \"stylesheet\",\n                                    chunks: [],\n                                    state: state,\n                                    props: stylesheetPropsFromPreinitOptions(href, precedence, options)\n                                };\n                                resources.stylesMap.set(key, resource);\n                                {\n                                    markAsImperativeResourceDEV(resource, \"preinit\", href, options, assign({}, resource.props, _defineProperty({\n                                        precedence: precedence\n                                    }, \"data-precedence\", undefined)));\n                                }\n                                var precedenceSet = resources.precedences.get(precedence);\n                                if (!precedenceSet) {\n                                    precedenceSet = new Set();\n                                    resources.precedences.set(precedence, precedenceSet);\n                                    var emptyStyleResource = {\n                                        type: \"style\",\n                                        chunks: [],\n                                        state: NoState,\n                                        props: {\n                                            precedence: precedence,\n                                            hrefs: []\n                                        }\n                                    };\n                                    precedenceSet.add(emptyStyleResource);\n                                    {\n                                        if (resources.stylePrecedences.has(precedence)) {\n                                            error('React constructed an empty style resource when a style resource already exists for this precedence: \"%s\". This is a bug in React.', precedence);\n                                        }\n                                    }\n                                    resources.stylePrecedences.set(precedence, emptyStyleResource);\n                                }\n                                precedenceSet.add(resource);\n                                flushResources(request);\n                            }\n                            return;\n                        }\n                    case \"script\":\n                        {\n                            var src = href;\n                            var _key = getResourceKey(as, src);\n                            var _resource = resources.scriptsMap.get(_key);\n                            {\n                                var _devResource = getAsResourceDEV(_resource);\n                                if (_devResource) {\n                                    var _propsEquivalent = scriptPropsFromPreinitOptions(src, options);\n                                    switch(_devResource.__provenance){\n                                        case \"rendered\":\n                                            {\n                                                var _differenceDescription5 = describeDifferencesForPreinitOverScript(_propsEquivalent, _devResource.__originalProps);\n                                                if (_differenceDescription5) {\n                                                    error('ReactDOM.preinit(): For `href` \"%s\", the options provided conflict with props found on a <script async={true} src=\"%s\" .../> that was already rendered.' + \" React will always use the props or options it first encounters for a hoistable script for a given `href` and any later props or options will be ignored if different.\" + \" Generally, ReactDOM.preinit() is useful when you are not yet rendering a script but you anticipate it will be used soon and want to go beyond preloading it and have it\" + \" execute early. In this case the script was already rendered so preinitializing it does not provide any additional benefit.\" + \" To resolve, try making the props and options agree between the <script .../> and the `ReactDOM.preinit()` call or remove the `ReactDOM.preinit()` call.%s\", href, href, _differenceDescription5);\n                                                }\n                                                break;\n                                            }\n                                        case \"preinit\":\n                                            {\n                                                var _differenceDescription6 = describeDifferencesForPreinits(_propsEquivalent, _devResource.__propsEquivalent);\n                                                if (_differenceDescription6) {\n                                                    error('ReactDOM.preinit(): For `href` \"%s\", the options provided conflict with another call to `ReactDOM.preinit(\"%s\", { as: \"script\", ... })`.' + \" React will always use the options it first encounters when preinitializing a hoistable script for a given `href` and any later options will be ignored if different.\" + \" Try updating all calls to `ReactDOM.preinit()` for a given `href` to use the same options, or only call `ReactDOM.preinit()` once per `href`.%s\", href, href, _differenceDescription6);\n                                                }\n                                                break;\n                                            }\n                                    }\n                                }\n                            }\n                            if (!_resource) {\n                                _resource = {\n                                    type: \"script\",\n                                    chunks: [],\n                                    state: NoState,\n                                    props: null\n                                };\n                                resources.scriptsMap.set(_key, _resource);\n                                var _resourceProps = scriptPropsFromPreinitOptions(src, options);\n                                {\n                                    markAsImperativeResourceDEV(_resource, \"preinit\", href, options, _resourceProps);\n                                }\n                                resources.scripts.add(_resource);\n                                pushScriptImpl(_resource.chunks, _resourceProps);\n                                flushResources(request);\n                            }\n                            return;\n                        }\n                }\n            }\n        } // This function is only safe to call at Request start time since it assumes\n        // that each script has not already been preloaded. If we find a need to preload\n        // scripts at any other point in time we will need to check whether the preload\n        // already exists and not assume it\n        function preloadBootstrapScript(resources, src, nonce, integrity, crossOrigin) {\n            var key = getResourceKey(\"script\", src);\n            {\n                if (resources.preloadsMap.has(key)) {\n                    // This is coded as a React error because it should be impossible for a userspace preload to preempt this call\n                    // If a userspace preload can preempt it then this assumption is broken and we need to reconsider this strategy\n                    // rather than instruct the user to not preload their bootstrap scripts themselves\n                    error('Internal React Error: React expected bootstrap script with src \"%s\" to not have been preloaded already. please file an issue', src);\n                }\n            }\n            var props = {\n                rel: \"preload\",\n                href: src,\n                as: \"script\",\n                fetchPriority: \"low\",\n                nonce: nonce,\n                integrity: integrity,\n                crossOrigin: crossOrigin\n            };\n            var resource = {\n                type: \"preload\",\n                chunks: [],\n                state: NoState,\n                props: props\n            };\n            resources.preloadsMap.set(key, resource);\n            resources.bootstrapScripts.add(resource);\n            pushLinkImpl(resource.chunks, props);\n        } // This function is only safe to call at Request start time since it assumes\n        // that each module has not already been preloaded. If we find a need to preload\n        // scripts at any other point in time we will need to check whether the preload\n        // already exists and not assume it\n        function preloadBootstrapModule(resources, src, nonce, integrity, crossOrigin) {\n            var key = getResourceKey(\"script\", src);\n            {\n                if (resources.preloadsMap.has(key)) {\n                    // This is coded as a React error because it should be impossible for a userspace preload to preempt this call\n                    // If a userspace preload can preempt it then this assumption is broken and we need to reconsider this strategy\n                    // rather than instruct the user to not preload their bootstrap scripts themselves\n                    error('Internal React Error: React expected bootstrap module with src \"%s\" to not have been preloaded already. please file an issue', src);\n                }\n            }\n            var props = {\n                rel: \"modulepreload\",\n                href: src,\n                fetchPriority: \"low\",\n                nonce: nonce,\n                integrity: integrity,\n                crossOrigin: crossOrigin\n            };\n            var resource = {\n                type: \"preload\",\n                chunks: [],\n                state: NoState,\n                props: props\n            };\n            resources.preloadsMap.set(key, resource);\n            resources.bootstrapScripts.add(resource);\n            pushLinkImpl(resource.chunks, props);\n            return;\n        }\n        function internalPreinitScript(resources, src, chunks) {\n            var key = getResourceKey(\"script\", src);\n            var resource = resources.scriptsMap.get(key);\n            if (!resource) {\n                resource = {\n                    type: \"script\",\n                    chunks: chunks,\n                    state: NoState,\n                    props: null\n                };\n                resources.scriptsMap.set(key, resource);\n                resources.scripts.add(resource);\n            }\n            return;\n        }\n        function preloadPropsFromPreloadOptions(href, as, options) {\n            return {\n                rel: \"preload\",\n                as: as,\n                // There is a bug in Safari where imageSrcSet is not respected on preload links\n                // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.\n                // This harms older browers that do not support imageSrcSet by making their preloads not work\n                // but this population is shrinking fast and is already small so we accept this tradeoff.\n                href: as === \"image\" && options.imageSrcSet ? undefined : href,\n                crossOrigin: as === \"font\" ? \"\" : options.crossOrigin,\n                integrity: options.integrity,\n                type: options.type,\n                nonce: options.nonce,\n                fetchPriority: options.fetchPriority,\n                imageSrcSet: options.imageSrcSet,\n                imageSizes: options.imageSizes,\n                referrerPolicy: options.referrerPolicy\n            };\n        }\n        function preloadAsStylePropsFromProps(href, props) {\n            return {\n                rel: \"preload\",\n                as: \"style\",\n                href: href,\n                crossOrigin: props.crossOrigin,\n                fetchPriority: props.fetchPriority,\n                integrity: props.integrity,\n                media: props.media,\n                hrefLang: props.hrefLang,\n                referrerPolicy: props.referrerPolicy\n            };\n        }\n        function stylesheetPropsFromPreinitOptions(href, precedence, options) {\n            return {\n                rel: \"stylesheet\",\n                href: href,\n                \"data-precedence\": precedence,\n                crossOrigin: options.crossOrigin,\n                integrity: options.integrity,\n                fetchPriority: options.fetchPriority\n            };\n        }\n        function stylesheetPropsFromRawProps(rawProps) {\n            return assign({}, rawProps, {\n                \"data-precedence\": rawProps.precedence,\n                precedence: null\n            });\n        }\n        function adoptPreloadPropsForStylesheetProps(resourceProps, preloadProps) {\n            if (resourceProps.crossOrigin == null) resourceProps.crossOrigin = preloadProps.crossOrigin;\n            if (resourceProps.integrity == null) resourceProps.integrity = preloadProps.integrity;\n        }\n        function scriptPropsFromPreinitOptions(src, options) {\n            return {\n                src: src,\n                async: true,\n                crossOrigin: options.crossOrigin,\n                integrity: options.integrity,\n                nonce: options.nonce,\n                fetchPriority: options.fetchPriority\n            };\n        }\n        function adoptPreloadPropsForScriptProps(resourceProps, preloadProps) {\n            if (resourceProps.crossOrigin == null) resourceProps.crossOrigin = preloadProps.crossOrigin;\n            if (resourceProps.integrity == null) resourceProps.integrity = preloadProps.integrity;\n        }\n        function hoistStyleResource(resource) {\n            this.add(resource);\n        }\n        function hoistResources(resources, source) {\n            var currentBoundaryResources = resources.boundaryResources;\n            if (currentBoundaryResources) {\n                source.forEach(hoistStyleResource, currentBoundaryResources);\n            }\n        }\n        function markAsRenderedResourceDEV(resource, originalProps) {\n            {\n                var devResource = resource;\n                if (typeof devResource.__provenance === \"string\") {\n                    error(\"Resource already marked for DEV type. This is a bug in React.\");\n                }\n                devResource.__provenance = \"rendered\";\n                devResource.__originalProps = originalProps;\n            }\n        }\n        function markAsImperativeResourceDEV(resource, provenance, originalHref, originalOptions, propsEquivalent) {\n            {\n                var devResource = resource;\n                if (typeof devResource.__provenance === \"string\") {\n                    error(\"Resource already marked for DEV type. This is a bug in React.\");\n                }\n                devResource.__provenance = provenance;\n                devResource.__originalHref = originalHref;\n                devResource.__originalOptions = originalOptions;\n                devResource.__propsEquivalent = propsEquivalent;\n            }\n        }\n        function getAsResourceDEV(resource) {\n            {\n                if (resource) {\n                    if (typeof resource.__provenance === \"string\") {\n                        return resource;\n                    }\n                    error(\"Resource was not marked for DEV type. This is a bug in React.\");\n                }\n                return null;\n            }\n        }\n        function createResponseState(resources, generateStaticMarkup, identifierPrefix, externalRuntimeConfig) {\n            var responseState = createResponseState$1(resources, identifierPrefix, undefined, undefined, undefined, undefined, externalRuntimeConfig);\n            return {\n                // Keep this in sync with ReactFizzConfigDOM\n                bootstrapChunks: responseState.bootstrapChunks,\n                placeholderPrefix: responseState.placeholderPrefix,\n                segmentPrefix: responseState.segmentPrefix,\n                boundaryPrefix: responseState.boundaryPrefix,\n                idPrefix: responseState.idPrefix,\n                nextSuspenseID: responseState.nextSuspenseID,\n                streamingFormat: responseState.streamingFormat,\n                startInlineScript: responseState.startInlineScript,\n                instructions: responseState.instructions,\n                externalRuntimeScript: responseState.externalRuntimeScript,\n                htmlChunks: responseState.htmlChunks,\n                headChunks: responseState.headChunks,\n                hasBody: responseState.hasBody,\n                charsetChunks: responseState.charsetChunks,\n                preconnectChunks: responseState.preconnectChunks,\n                preloadChunks: responseState.preloadChunks,\n                hoistableChunks: responseState.hoistableChunks,\n                stylesToHoist: responseState.stylesToHoist,\n                // This is an extra field for the legacy renderer\n                generateStaticMarkup: generateStaticMarkup\n            };\n        }\n        function createRootFormatContext() {\n            return {\n                insertionMode: HTML_MODE,\n                // We skip the root mode because we don't want to emit the DOCTYPE in legacy mode.\n                selectedValue: null,\n                noscriptTagInScope: false\n            };\n        }\n        function pushTextInstance(target, text, responseState, textEmbedded) {\n            if (responseState.generateStaticMarkup) {\n                target.push(stringToChunk(escapeTextForBrowser(text)));\n                return false;\n            } else {\n                return pushTextInstance$1(target, text, responseState, textEmbedded);\n            }\n        }\n        function pushSegmentFinale(target, responseState, lastPushedText, textEmbedded) {\n            if (responseState.generateStaticMarkup) {\n                return;\n            } else {\n                return pushSegmentFinale$1(target, responseState, lastPushedText, textEmbedded);\n            }\n        }\n        function writeStartCompletedSuspenseBoundary(destination, responseState) {\n            if (responseState.generateStaticMarkup) {\n                // A completed boundary is done and doesn't need a representation in the HTML\n                // if we're not going to be hydrating it.\n                return true;\n            }\n            return writeStartCompletedSuspenseBoundary$1(destination);\n        }\n        function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMessage, errorComponentStack) {\n            if (responseState.generateStaticMarkup) {\n                // A client rendered boundary is done and doesn't need a representation in the HTML\n                // since we'll never hydrate it. This is arguably an error in static generation.\n                return true;\n            }\n            return writeStartClientRenderedSuspenseBoundary$1(destination, responseState, errorDigest, errorMessage, errorComponentStack);\n        }\n        function writeEndCompletedSuspenseBoundary(destination, responseState) {\n            if (responseState.generateStaticMarkup) {\n                return true;\n            }\n            return writeEndCompletedSuspenseBoundary$1(destination);\n        }\n        function writeEndClientRenderedSuspenseBoundary(destination, responseState) {\n            if (responseState.generateStaticMarkup) {\n                return true;\n            }\n            return writeEndClientRenderedSuspenseBoundary$1(destination);\n        }\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_SERVER_CONTEXT_TYPE = Symbol.for(\"react.server_context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_SCOPE_TYPE = Symbol.for(\"react.scope\");\n        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for(\"react.debug_trace_mode\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for(\"react.legacy_hidden\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for(\"react.default_value\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            {\n                if (typeof type.tag === \"number\") {\n                    error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                }\n            }\n            if (typeof type === \"function\") {\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                    case REACT_SERVER_CONTEXT_TYPE:\n                        {\n                            var context2 = type;\n                            return (context2.displayName || context2._globalName) + \".Provider\";\n                        }\n                }\n            }\n            return null;\n        }\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            var control;\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher$1.current = null;\n                disableLogs();\n            }\n            try {\n                // This should throw.\n                if (construct) {\n                    // Something should be setting the props in the constructor.\n                    var Fake = function() {\n                        throw Error();\n                    }; // $FlowFixMe[prop-missing]\n                    Object.defineProperty(Fake.prototype, \"props\", {\n                        set: function() {\n                            // We use a throwing setter instead of frozen or non-writable props\n                            // because that won't throw in a non-strict mode function.\n                            throw Error();\n                        }\n                    });\n                    if (typeof Reflect === \"object\" && Reflect.construct) {\n                        // We construct a different control for this case to include any extra\n                        // frames added by the construct call.\n                        try {\n                            Reflect.construct(Fake, []);\n                        } catch (x) {\n                            control = x;\n                        }\n                        Reflect.construct(fn, [], Fake);\n                    } else {\n                        try {\n                            Fake.call();\n                        } catch (x) {\n                            control = x;\n                        } // $FlowFixMe[prop-missing] found when upgrading Flow\n                        fn.call(Fake.prototype);\n                    }\n                } else {\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        control = x;\n                    } // TODO(luna): This will currently only throw if the function component\n                    // tries to access React/ReactDOM/props. We should probably make this throw\n                    // in simple components too\n                    var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                    // component, which we don't yet support. Attach a noop catch handler to\n                    // silence the error.\n                    // TODO: Implement component stacks for async client components?\n                    if (maybePromise && typeof maybePromise.catch === \"function\") {\n                        maybePromise.catch(function() {});\n                    }\n                }\n            } catch (sample) {\n                // This is inlined manually because closure doesn't do it for us.\n                if (sample && control && typeof sample.stack === \"string\") {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sample.stack.split(\"\\n\");\n                    var controlLines = control.stack.split(\"\\n\");\n                    var s = sampleLines.length - 1;\n                    var c = controlLines.length - 1;\n                    while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                        // We expect at least one stack frame to be shared.\n                        // Typically this will be the root most one. However, stack frames may be\n                        // cut off due to maximum stack limits. In this case, one maybe cut off\n                        // earlier than the other. We assume that the sample is longer or the same\n                        // and there for cut off earlier. So we should find the root most frame in\n                        // the sample somewhere in the control.\n                        c--;\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        }\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher$1.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeClassComponentFrame(ctor, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(ctor, true);\n            }\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct$1(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct$1(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement(null);\n                        }\n                    }\n                }\n            }\n        }\n        var warnedAboutMissingGetChildContext;\n        {\n            warnedAboutMissingGetChildContext = {};\n        }\n        var emptyContextObject = {};\n        {\n            Object.freeze(emptyContextObject);\n        }\n        function getMaskedContext(type, unmaskedContext) {\n            {\n                var contextTypes = type.contextTypes;\n                if (!contextTypes) {\n                    return emptyContextObject;\n                }\n                var context = {};\n                for(var key in contextTypes){\n                    context[key] = unmaskedContext[key];\n                }\n                {\n                    var name = getComponentNameFromType(type) || \"Unknown\";\n                    checkPropTypes(contextTypes, context, \"context\", name);\n                }\n                return context;\n            }\n        }\n        function processChildContext(instance, type, parentContext, childContextTypes) {\n            {\n                // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n                // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n                if (typeof instance.getChildContext !== \"function\") {\n                    {\n                        var componentName = getComponentNameFromType(type) || \"Unknown\";\n                        if (!warnedAboutMissingGetChildContext[componentName]) {\n                            warnedAboutMissingGetChildContext[componentName] = true;\n                            error(\"%s.childContextTypes is specified but there is no getChildContext() method \" + \"on the instance. You can either define getChildContext() on %s or remove \" + \"childContextTypes from it.\", componentName, componentName);\n                        }\n                    }\n                    return parentContext;\n                }\n                var childContext = instance.getChildContext();\n                for(var contextKey in childContext){\n                    if (!(contextKey in childContextTypes)) {\n                        throw new Error((getComponentNameFromType(type) || \"Unknown\") + '.getChildContext(): key \"' + contextKey + '\" is not defined in childContextTypes.');\n                    }\n                }\n                {\n                    var name = getComponentNameFromType(type) || \"Unknown\";\n                    checkPropTypes(childContextTypes, childContext, \"child context\", name);\n                }\n                return assign({}, parentContext, childContext);\n            }\n        }\n        var rendererSigil;\n        {\n            // Use this to detect multiple renderers using the same context\n            rendererSigil = {};\n        }\n        // Forming a reverse tree.\n        // The structure of a context snapshot is an implementation of this file.\n        // Currently, it's implemented as tracking the current active node.\n        var rootContextSnapshot = null; // We assume that this runtime owns the \"current\" field on all ReactContext instances.\n        // This global (actually thread local) state represents what state all those \"current\",\n        // fields are currently in.\n        var currentActiveSnapshot = null;\n        function popNode(prev) {\n            {\n                prev.context._currentValue2 = prev.parentValue;\n            }\n        }\n        function pushNode(next) {\n            {\n                next.context._currentValue2 = next.value;\n            }\n        }\n        function popToNearestCommonAncestor(prev, next) {\n            if (prev === next) ;\n            else {\n                popNode(prev);\n                var parentPrev = prev.parent;\n                var parentNext = next.parent;\n                if (parentPrev === null) {\n                    if (parentNext !== null) {\n                        throw new Error(\"The stacks must reach the root at the same time. This is a bug in React.\");\n                    }\n                } else {\n                    if (parentNext === null) {\n                        throw new Error(\"The stacks must reach the root at the same time. This is a bug in React.\");\n                    }\n                    popToNearestCommonAncestor(parentPrev, parentNext);\n                } // On the way back, we push the new ones that weren't common.\n                pushNode(next);\n            }\n        }\n        function popAllPrevious(prev) {\n            popNode(prev);\n            var parentPrev = prev.parent;\n            if (parentPrev !== null) {\n                popAllPrevious(parentPrev);\n            }\n        }\n        function pushAllNext(next) {\n            var parentNext = next.parent;\n            if (parentNext !== null) {\n                pushAllNext(parentNext);\n            }\n            pushNode(next);\n        }\n        function popPreviousToCommonLevel(prev, next) {\n            popNode(prev);\n            var parentPrev = prev.parent;\n            if (parentPrev === null) {\n                throw new Error(\"The depth must equal at least at zero before reaching the root. This is a bug in React.\");\n            }\n            if (parentPrev.depth === next.depth) {\n                // We found the same level. Now we just need to find a shared ancestor.\n                popToNearestCommonAncestor(parentPrev, next);\n            } else {\n                // We must still be deeper.\n                popPreviousToCommonLevel(parentPrev, next);\n            }\n        }\n        function popNextToCommonLevel(prev, next) {\n            var parentNext = next.parent;\n            if (parentNext === null) {\n                throw new Error(\"The depth must equal at least at zero before reaching the root. This is a bug in React.\");\n            }\n            if (prev.depth === parentNext.depth) {\n                // We found the same level. Now we just need to find a shared ancestor.\n                popToNearestCommonAncestor(prev, parentNext);\n            } else {\n                // We must still be deeper.\n                popNextToCommonLevel(prev, parentNext);\n            }\n            pushNode(next);\n        } // Perform context switching to the new snapshot.\n        // To make it cheap to read many contexts, while not suspending, we make the switch eagerly by\n        // updating all the context's current values. That way reads, always just read the current value.\n        // At the cost of updating contexts even if they're never read by this subtree.\n        function switchContext(newSnapshot) {\n            // The basic algorithm we need to do is to pop back any contexts that are no longer on the stack.\n            // We also need to update any new contexts that are now on the stack with the deepest value.\n            // The easiest way to update new contexts is to just reapply them in reverse order from the\n            // perspective of the backpointers. To avoid allocating a lot when switching, we use the stack\n            // for that. Therefore this algorithm is recursive.\n            // 1) First we pop which ever snapshot tree was deepest. Popping old contexts as we go.\n            // 2) Then we find the nearest common ancestor from there. Popping old contexts as we go.\n            // 3) Then we reapply new contexts on the way back up the stack.\n            var prev = currentActiveSnapshot;\n            var next = newSnapshot;\n            if (prev !== next) {\n                if (prev === null) {\n                    // $FlowFixMe[incompatible-call]: This has to be non-null since it's not equal to prev.\n                    pushAllNext(next);\n                } else if (next === null) {\n                    popAllPrevious(prev);\n                } else if (prev.depth === next.depth) {\n                    popToNearestCommonAncestor(prev, next);\n                } else if (prev.depth > next.depth) {\n                    popPreviousToCommonLevel(prev, next);\n                } else {\n                    popNextToCommonLevel(prev, next);\n                }\n                currentActiveSnapshot = next;\n            }\n        }\n        function pushProvider(context, nextValue) {\n            var prevValue;\n            {\n                prevValue = context._currentValue2;\n                context._currentValue2 = nextValue;\n                {\n                    if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n                        error(\"Detected multiple renderers concurrently rendering the \" + \"same context provider. This is currently unsupported.\");\n                    }\n                    context._currentRenderer2 = rendererSigil;\n                }\n            }\n            var prevNode = currentActiveSnapshot;\n            var newNode = {\n                parent: prevNode,\n                depth: prevNode === null ? 0 : prevNode.depth + 1,\n                context: context,\n                parentValue: prevValue,\n                value: nextValue\n            };\n            currentActiveSnapshot = newNode;\n            return newNode;\n        }\n        function popProvider(context) {\n            var prevSnapshot = currentActiveSnapshot;\n            if (prevSnapshot === null) {\n                throw new Error(\"Tried to pop a Context at the root of the app. This is a bug in React.\");\n            }\n            {\n                if (prevSnapshot.context !== context) {\n                    error(\"The parent context is not the expected context. This is probably a bug in React.\");\n                }\n            }\n            {\n                var _value = prevSnapshot.parentValue;\n                if (_value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {\n                    prevSnapshot.context._currentValue2 = prevSnapshot.context._defaultValue;\n                } else {\n                    prevSnapshot.context._currentValue2 = _value;\n                }\n                {\n                    if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n                        error(\"Detected multiple renderers concurrently rendering the \" + \"same context provider. This is currently unsupported.\");\n                    }\n                    context._currentRenderer2 = rendererSigil;\n                }\n            }\n            return currentActiveSnapshot = prevSnapshot.parent;\n        }\n        function getActiveContext() {\n            return currentActiveSnapshot;\n        }\n        function readContext$1(context) {\n            var value = context._currentValue2;\n            return value;\n        }\n        /**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */ function get(key) {\n            return key._reactInternals;\n        }\n        function set(key, value) {\n            key._reactInternals = value;\n        }\n        var didWarnAboutNoopUpdateForComponent = {};\n        var didWarnAboutDeprecatedWillMount = {};\n        var didWarnAboutUninitializedState;\n        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\n        var didWarnAboutLegacyLifecyclesAndDerivedState;\n        var didWarnAboutUndefinedDerivedState;\n        var didWarnAboutDirectlyAssigningPropsToState;\n        var didWarnAboutContextTypeAndContextTypes;\n        var didWarnAboutInvalidateContextType;\n        var didWarnOnInvalidCallback;\n        {\n            didWarnAboutUninitializedState = new Set();\n            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n            didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n            didWarnAboutDirectlyAssigningPropsToState = new Set();\n            didWarnAboutUndefinedDerivedState = new Set();\n            didWarnAboutContextTypeAndContextTypes = new Set();\n            didWarnAboutInvalidateContextType = new Set();\n            didWarnOnInvalidCallback = new Set();\n        }\n        function warnOnInvalidCallback(callback, callerName) {\n            {\n                if (callback === null || typeof callback === \"function\") {\n                    return;\n                }\n                var key = callerName + \"_\" + callback;\n                if (!didWarnOnInvalidCallback.has(key)) {\n                    didWarnOnInvalidCallback.add(key);\n                    error(\"%s(...): Expected the last optional `callback` argument to be a \" + \"function. Instead received: %s.\", callerName, callback);\n                }\n            }\n        }\n        function warnOnUndefinedDerivedState(type, partialState) {\n            {\n                if (partialState === undefined) {\n                    var componentName = getComponentNameFromType(type) || \"Component\";\n                    if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n                        didWarnAboutUndefinedDerivedState.add(componentName);\n                        error(\"%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. \" + \"You have returned undefined.\", componentName);\n                    }\n                }\n            }\n        }\n        function warnNoop(publicInstance, callerName) {\n            {\n                var _constructor = publicInstance.constructor;\n                var componentName = _constructor && getComponentNameFromType(_constructor) || \"ReactClass\";\n                var warningKey = componentName + \".\" + callerName;\n                if (didWarnAboutNoopUpdateForComponent[warningKey]) {\n                    return;\n                }\n                error(\"%s(...): Can only update a mounting component. \" + \"This usually means you called %s() outside componentWillMount() on the server. \" + \"This is a no-op.\\n\\nPlease check the code for the %s component.\", callerName, callerName, componentName);\n                didWarnAboutNoopUpdateForComponent[warningKey] = true;\n            }\n        }\n        var classComponentUpdater = {\n            isMounted: function(inst) {\n                return false;\n            },\n            // $FlowFixMe[missing-local-annot]\n            enqueueSetState: function(inst, payload, callback) {\n                var internals = get(inst);\n                if (internals.queue === null) {\n                    warnNoop(inst, \"setState\");\n                } else {\n                    internals.queue.push(payload);\n                    {\n                        if (callback !== undefined && callback !== null) {\n                            warnOnInvalidCallback(callback, \"setState\");\n                        }\n                    }\n                }\n            },\n            enqueueReplaceState: function(inst, payload, callback) {\n                var internals = get(inst);\n                internals.replace = true;\n                internals.queue = [\n                    payload\n                ];\n                {\n                    if (callback !== undefined && callback !== null) {\n                        warnOnInvalidCallback(callback, \"setState\");\n                    }\n                }\n            },\n            // $FlowFixMe[missing-local-annot]\n            enqueueForceUpdate: function(inst, callback) {\n                var internals = get(inst);\n                if (internals.queue === null) {\n                    warnNoop(inst, \"forceUpdate\");\n                } else {\n                    {\n                        if (callback !== undefined && callback !== null) {\n                            warnOnInvalidCallback(callback, \"setState\");\n                        }\n                    }\n                }\n            }\n        };\n        function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {\n            var partialState = getDerivedStateFromProps(nextProps, prevState);\n            {\n                warnOnUndefinedDerivedState(ctor, partialState);\n            }\n            var newState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\n            return newState;\n        }\n        function constructClassInstance(ctor, props, maskedLegacyContext) {\n            var context = emptyContextObject;\n            var contextType = ctor.contextType;\n            {\n                if (\"contextType\" in ctor) {\n                    var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>\n                    if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n                        didWarnAboutInvalidateContextType.add(ctor);\n                        var addendum = \"\";\n                        if (contextType === undefined) {\n                            addendum = \" However, it is set to undefined. \" + \"This can be caused by a typo or by mixing up named and default imports. \" + \"This can also happen due to a circular dependency, so \" + \"try moving the createContext() call to a separate file.\";\n                        } else if (typeof contextType !== \"object\") {\n                            addendum = \" However, it is set to a \" + typeof contextType + \".\";\n                        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n                            addendum = \" Did you accidentally pass the Context.Provider instead?\";\n                        } else if (contextType._context !== undefined) {\n                            // <Context.Consumer>\n                            addendum = \" Did you accidentally pass the Context.Consumer instead?\";\n                        } else {\n                            addendum = \" However, it is set to an object with keys {\" + Object.keys(contextType).join(\", \") + \"}.\";\n                        }\n                        error(\"%s defines an invalid contextType. \" + \"contextType should point to the Context object returned by React.createContext().%s\", getComponentNameFromType(ctor) || \"Component\", addendum);\n                    }\n                }\n            }\n            if (typeof contextType === \"object\" && contextType !== null) {\n                context = readContext$1(contextType);\n            } else {\n                context = maskedLegacyContext;\n            }\n            var instance = new ctor(props, context);\n            {\n                if (typeof ctor.getDerivedStateFromProps === \"function\" && (instance.state === null || instance.state === undefined)) {\n                    var componentName = getComponentNameFromType(ctor) || \"Component\";\n                    if (!didWarnAboutUninitializedState.has(componentName)) {\n                        didWarnAboutUninitializedState.add(componentName);\n                        error(\"`%s` uses `getDerivedStateFromProps` but its initial state is \" + \"%s. This is not recommended. Instead, define the initial state by \" + \"assigning an object to `this.state` in the constructor of `%s`. \" + \"This ensures that `getDerivedStateFromProps` arguments have a consistent shape.\", componentName, instance.state === null ? \"null\" : \"undefined\", componentName);\n                    }\n                } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n                // Warn about these lifecycles if they are present.\n                // Don't warn about react-lifecycles-compat polyfilled methods though.\n                if (typeof ctor.getDerivedStateFromProps === \"function\" || typeof instance.getSnapshotBeforeUpdate === \"function\") {\n                    var foundWillMountName = null;\n                    var foundWillReceivePropsName = null;\n                    var foundWillUpdateName = null;\n                    if (typeof instance.componentWillMount === \"function\" && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n                        foundWillMountName = \"componentWillMount\";\n                    } else if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n                        foundWillMountName = \"UNSAFE_componentWillMount\";\n                    }\n                    if (typeof instance.componentWillReceiveProps === \"function\" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n                        foundWillReceivePropsName = \"componentWillReceiveProps\";\n                    } else if (typeof instance.UNSAFE_componentWillReceiveProps === \"function\") {\n                        foundWillReceivePropsName = \"UNSAFE_componentWillReceiveProps\";\n                    }\n                    if (typeof instance.componentWillUpdate === \"function\" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n                        foundWillUpdateName = \"componentWillUpdate\";\n                    } else if (typeof instance.UNSAFE_componentWillUpdate === \"function\") {\n                        foundWillUpdateName = \"UNSAFE_componentWillUpdate\";\n                    }\n                    if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n                        var _componentName = getComponentNameFromType(ctor) || \"Component\";\n                        var newApiName = typeof ctor.getDerivedStateFromProps === \"function\" ? \"getDerivedStateFromProps()\" : \"getSnapshotBeforeUpdate()\";\n                        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n                            didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n                            error(\"Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n\" + \"%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n\" + \"The above lifecycles should be removed. Learn more about this warning here:\\n\" + \"https://reactjs.org/link/unsafe-component-lifecycles\", _componentName, newApiName, foundWillMountName !== null ? \"\\n  \" + foundWillMountName : \"\", foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : \"\", foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : \"\");\n                        }\n                    }\n                }\n            }\n            return instance;\n        }\n        function checkClassInstance(instance, ctor, newProps) {\n            {\n                var name = getComponentNameFromType(ctor) || \"Component\";\n                var renderPresent = instance.render;\n                if (!renderPresent) {\n                    if (ctor.prototype && typeof ctor.prototype.render === \"function\") {\n                        error(\"%s(...): No `render` method found on the returned component \" + \"instance: did you accidentally return an object from the constructor?\", name);\n                    } else {\n                        error(\"%s(...): No `render` method found on the returned component \" + \"instance: you may have forgotten to define `render`.\", name);\n                    }\n                }\n                if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\n                    error(\"getInitialState was defined on %s, a plain JavaScript class. \" + \"This is only supported for classes created using React.createClass. \" + \"Did you mean to define a state property instead?\", name);\n                }\n                if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps was defined on %s, a plain JavaScript class. \" + \"This is only supported for classes created using React.createClass. \" + \"Use a static property to define defaultProps instead.\", name);\n                }\n                if (instance.propTypes) {\n                    error(\"propTypes was defined as an instance property on %s. Use a static \" + \"property to define propTypes instead.\", name);\n                }\n                if (instance.contextType) {\n                    error(\"contextType was defined as an instance property on %s. Use a static \" + \"property to define contextType instead.\", name);\n                }\n                {\n                    if (instance.contextTypes) {\n                        error(\"contextTypes was defined as an instance property on %s. Use a static \" + \"property to define contextTypes instead.\", name);\n                    }\n                    if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {\n                        didWarnAboutContextTypeAndContextTypes.add(ctor);\n                        error(\"%s declares both contextTypes and contextType static properties. \" + \"The legacy contextTypes property will be ignored.\", name);\n                    }\n                }\n                if (typeof instance.componentShouldUpdate === \"function\") {\n                    error(\"%s has a method called \" + \"componentShouldUpdate(). Did you mean shouldComponentUpdate()? \" + \"The name is phrased as a question because the function is \" + \"expected to return a value.\", name);\n                }\n                if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== \"undefined\") {\n                    error(\"%s has a method called shouldComponentUpdate(). \" + \"shouldComponentUpdate should not be used when extending React.PureComponent. \" + \"Please extend React.Component if shouldComponentUpdate is used.\", getComponentNameFromType(ctor) || \"A pure component\");\n                }\n                if (typeof instance.componentDidUnmount === \"function\") {\n                    error(\"%s has a method called \" + \"componentDidUnmount(). But there is no such lifecycle method. \" + \"Did you mean componentWillUnmount()?\", name);\n                }\n                if (typeof instance.componentDidReceiveProps === \"function\") {\n                    error(\"%s has a method called \" + \"componentDidReceiveProps(). But there is no such lifecycle method. \" + \"If you meant to update the state in response to changing props, \" + \"use componentWillReceiveProps(). If you meant to fetch data or \" + \"run side-effects or mutations after React has updated the UI, use componentDidUpdate().\", name);\n                }\n                if (typeof instance.componentWillRecieveProps === \"function\") {\n                    error(\"%s has a method called \" + \"componentWillRecieveProps(). Did you mean componentWillReceiveProps()?\", name);\n                }\n                if (typeof instance.UNSAFE_componentWillRecieveProps === \"function\") {\n                    error(\"%s has a method called \" + \"UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?\", name);\n                }\n                var hasMutatedProps = instance.props !== newProps;\n                if (instance.props !== undefined && hasMutatedProps) {\n                    error(\"%s(...): When calling super() in `%s`, make sure to pass \" + \"up the same props that your component's constructor was passed.\", name, name);\n                }\n                if (instance.defaultProps) {\n                    error(\"Setting defaultProps as an instance property on %s is not supported and will be ignored.\" + \" Instead, define defaultProps as a static property on %s.\", name, name);\n                }\n                if (typeof instance.getSnapshotBeforeUpdate === \"function\" && typeof instance.componentDidUpdate !== \"function\" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n                    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n                    error(\"%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). \" + \"This component defines getSnapshotBeforeUpdate() only.\", getComponentNameFromType(ctor));\n                }\n                if (typeof instance.getDerivedStateFromProps === \"function\") {\n                    error(\"%s: getDerivedStateFromProps() is defined as an instance method \" + \"and will be ignored. Instead, declare it as a static method.\", name);\n                }\n                if (typeof instance.getDerivedStateFromError === \"function\") {\n                    error(\"%s: getDerivedStateFromError() is defined as an instance method \" + \"and will be ignored. Instead, declare it as a static method.\", name);\n                }\n                if (typeof ctor.getSnapshotBeforeUpdate === \"function\") {\n                    error(\"%s: getSnapshotBeforeUpdate() is defined as a static method \" + \"and will be ignored. Instead, declare it as an instance method.\", name);\n                }\n                var state = instance.state;\n                if (state && (typeof state !== \"object\" || isArray(state))) {\n                    error(\"%s.state: must be set to an object or null\", name);\n                }\n                if (typeof instance.getChildContext === \"function\" && typeof ctor.childContextTypes !== \"object\") {\n                    error(\"%s.getChildContext(): childContextTypes must be defined in order to \" + \"use getChildContext().\", name);\n                }\n            }\n        }\n        function callComponentWillMount(type, instance) {\n            var oldState = instance.state;\n            if (typeof instance.componentWillMount === \"function\") {\n                {\n                    if (instance.componentWillMount.__suppressDeprecationWarning !== true) {\n                        var componentName = getComponentNameFromType(type) || \"Unknown\";\n                        if (!didWarnAboutDeprecatedWillMount[componentName]) {\n                            warn(\"componentWillMount has been renamed, and is not recommended for use. \" + \"See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n\" + \"* Move code from componentWillMount to componentDidMount (preferred in most cases) \" + \"or the constructor.\\n\" + \"\\nPlease update the following components: %s\", componentName);\n                            didWarnAboutDeprecatedWillMount[componentName] = true;\n                        }\n                    }\n                }\n                instance.componentWillMount();\n            }\n            if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n                instance.UNSAFE_componentWillMount();\n            }\n            if (oldState !== instance.state) {\n                {\n                    error(\"%s.componentWillMount(): Assigning directly to this.state is \" + \"deprecated (except inside a component's \" + \"constructor). Use setState instead.\", getComponentNameFromType(type) || \"Component\");\n                }\n                classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n            }\n        }\n        function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {\n            if (internalInstance.queue !== null && internalInstance.queue.length > 0) {\n                var oldQueue = internalInstance.queue;\n                var oldReplace = internalInstance.replace;\n                internalInstance.queue = null;\n                internalInstance.replace = false;\n                if (oldReplace && oldQueue.length === 1) {\n                    inst.state = oldQueue[0];\n                } else {\n                    var nextState = oldReplace ? oldQueue[0] : inst.state;\n                    var dontMutate = true;\n                    for(var i = oldReplace ? 1 : 0; i < oldQueue.length; i++){\n                        var partial = oldQueue[i];\n                        var partialState = typeof partial === \"function\" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;\n                        if (partialState != null) {\n                            if (dontMutate) {\n                                dontMutate = false;\n                                nextState = assign({}, nextState, partialState);\n                            } else {\n                                assign(nextState, partialState);\n                            }\n                        }\n                    }\n                    inst.state = nextState;\n                }\n            } else {\n                internalInstance.queue = null;\n            }\n        } // Invokes the mount life-cycles on a previously never rendered instance.\n        function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {\n            {\n                checkClassInstance(instance, ctor, newProps);\n            }\n            var initialState = instance.state !== undefined ? instance.state : null;\n            instance.updater = classComponentUpdater;\n            instance.props = newProps;\n            instance.state = initialState; // We don't bother initializing the refs object on the server, since we're not going to resolve them anyway.\n            // The internal instance will be used to manage updates that happen during this mount.\n            var internalInstance = {\n                queue: [],\n                replace: false\n            };\n            set(instance, internalInstance);\n            var contextType = ctor.contextType;\n            if (typeof contextType === \"object\" && contextType !== null) {\n                instance.context = readContext$1(contextType);\n            } else {\n                instance.context = maskedLegacyContext;\n            }\n            {\n                if (instance.state === newProps) {\n                    var componentName = getComponentNameFromType(ctor) || \"Component\";\n                    if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n                        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n                        error(\"%s: It is not recommended to assign props directly to state \" + \"because updates to props won't be reflected in state. \" + \"In most cases, it is better to use props directly.\", componentName);\n                    }\n                }\n            }\n            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n            if (typeof getDerivedStateFromProps === \"function\") {\n                instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);\n            } // In order to support react-lifecycles-compat polyfilled components,\n            // Unsafe lifecycles should not be invoked for components using the new APIs.\n            if (typeof ctor.getDerivedStateFromProps !== \"function\" && typeof instance.getSnapshotBeforeUpdate !== \"function\" && (typeof instance.UNSAFE_componentWillMount === \"function\" || typeof instance.componentWillMount === \"function\")) {\n                callComponentWillMount(ctor, instance); // If we had additional state updates during this life-cycle, let's\n                // process them now.\n                processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);\n            }\n        }\n        // Ids are base 32 strings whose binary representation corresponds to the\n        // position of a node in a tree.\n        // Every time the tree forks into multiple children, we add additional bits to\n        // the left of the sequence that represent the position of the child within the\n        // current level of children.\n        //\n        //      00101       00010001011010101\n        //      ╰─┬─╯       ╰───────┬───────╯\n        //   Fork 5 of 20       Parent id\n        //\n        // The leading 0s are important. In the above example, you only need 3 bits to\n        // represent slot 5. However, you need 5 bits to represent all the forks at\n        // the current level, so we must account for the empty bits at the end.\n        //\n        // For this same reason, slots are 1-indexed instead of 0-indexed. Otherwise,\n        // the zeroth id at a level would be indistinguishable from its parent.\n        //\n        // If a node has only one child, and does not materialize an id (i.e. does not\n        // contain a useId hook), then we don't need to allocate any space in the\n        // sequence. It's treated as a transparent indirection. For example, these two\n        // trees produce the same ids:\n        //\n        // <>                          <>\n        //   <Indirection>               <A />\n        //     <A />                     <B />\n        //   </Indirection>            </>\n        //   <B />\n        // </>\n        //\n        // However, we cannot skip any node that materializes an id. Otherwise, a parent\n        // id that does not fork would be indistinguishable from its child id. For\n        // example, this tree does not fork, but the parent and child must have\n        // different ids.\n        //\n        // <Parent>\n        //   <Child />\n        // </Parent>\n        //\n        // To handle this scenario, every time we materialize an id, we allocate a\n        // new level with a single slot. You can think of this as a fork with only one\n        // prong, or an array of children with length 1.\n        //\n        // It's possible for the size of the sequence to exceed 32 bits, the max\n        // size for bitwise operations. When this happens, we make more room by\n        // converting the right part of the id to a string and storing it in an overflow\n        // variable. We use a base 32 string representation, because 32 is the largest\n        // power of 2 that is supported by toString(). We want the base to be large so\n        // that the resulting ids are compact, and we want the base to be a power of 2\n        // because every log2(base) bits corresponds to a single character, i.e. every\n        // log2(32) = 5 bits. That means we can lop bits off the end 5 at a time without\n        // affecting the final result.\n        var emptyTreeContext = {\n            id: 1,\n            overflow: \"\"\n        };\n        function getTreeId(context) {\n            var overflow = context.overflow;\n            var idWithLeadingBit = context.id;\n            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n            return id.toString(32) + overflow;\n        }\n        function pushTreeContext(baseContext, totalChildren, index) {\n            var baseIdWithLeadingBit = baseContext.id;\n            var baseOverflow = baseContext.overflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n            // of the id; we use it to account for leading 0s.\n            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n            var slot = index + 1;\n            var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into\n            // consideration the leading 1 we use to mark the end of the sequence.\n            if (length > 30) {\n                // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n                // This branch assumes the length of the base id is greater than 5; it won't\n                // work for smaller ids, because you need 5 bits per character.\n                //\n                // We encode the id in multiple steps: first the base id, then the\n                // remaining digits.\n                //\n                // Each 5 bit sequence corresponds to a single base 32 character. So for\n                // example, if the current id is 23 bits long, we can convert 20 of those\n                // bits into a string of 4 characters, with 3 bits left over.\n                //\n                // First calculate how many bits in the base id represent a complete\n                // sequence of characters.\n                var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.\n                var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.\n                var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.\n                var restOfBaseId = baseId >> numberOfOverflowBits;\n                var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because\n                // we made more room, this time it won't overflow.\n                var restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n                var restOfNewBits = slot << restOfBaseLength;\n                var id = restOfNewBits | restOfBaseId;\n                var overflow = newOverflow + baseOverflow;\n                return {\n                    id: 1 << restOfLength | id,\n                    overflow: overflow\n                };\n            } else {\n                // Normal path\n                var newBits = slot << baseLength;\n                var _id = newBits | baseId;\n                var _overflow = baseOverflow;\n                return {\n                    id: 1 << length | _id,\n                    overflow: _overflow\n                };\n            }\n        }\n        function getBitLength(number) {\n            return 32 - clz32(number);\n        }\n        function getLeadingBit(id) {\n            return 1 << getBitLength(id) - 1;\n        } // TODO: Math.clz32 is supported in Node 12+. Maybe we can drop the fallback.\n        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\n        // Based on:\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n        var log = Math.log;\n        var LN2 = Math.LN2;\n        function clz32Fallback(x) {\n            var asUint = x >>> 0;\n            if (asUint === 0) {\n                return 32;\n            }\n            return 31 - (log(asUint) / LN2 | 0) | 0;\n        }\n        // Corresponds to ReactFiberWakeable and ReactFlightWakeable modules. Generally,\n        // changes to one module should be reflected in the others.\n        // TODO: Rename this module and the corresponding Fiber one to \"Thenable\"\n        // instead of \"Wakeable\". Or some other more appropriate name.\n        // An error that is thrown (e.g. by `use`) to trigger Suspense. If we\n        // detect this is caught by userspace, we'll log a warning in development.\n        var SuspenseException = new Error(\"Suspense Exception: This is not a real error! It's an implementation \" + \"detail of `use` to interrupt the current render. You must either \" + \"rethrow it immediately, or move the `use` call outside of the \" + \"`try/catch` block. Capturing without rethrowing will lead to \" + \"unexpected behavior.\\n\\n\" + \"To handle async errors, wrap your component in an error boundary, or \" + \"call the promise's `.catch` method and pass the result to `use`\");\n        function createThenableState() {\n            // The ThenableState is created the first time a component suspends. If it\n            // suspends again, we'll reuse the same state.\n            return [];\n        }\n        function noop$2() {}\n        function trackUsedThenable(thenableState, thenable, index) {\n            var previous = thenableState[index];\n            if (previous === undefined) {\n                thenableState.push(thenable);\n            } else {\n                if (previous !== thenable) {\n                    // Reuse the previous thenable, and drop the new one. We can assume\n                    // they represent the same value, because components are idempotent.\n                    // Avoid an unhandled rejection errors for the Promises that we'll\n                    // intentionally ignore.\n                    thenable.then(noop$2, noop$2);\n                    thenable = previous;\n                }\n            } // We use an expando to track the status and result of a thenable so that we\n            // can synchronously unwrap the value. Think of this as an extension of the\n            // Promise API, or a custom interface that is a superset of Thenable.\n            //\n            // If the thenable doesn't have a status, set it to \"pending\" and attach\n            // a listener that will update its status and result when it resolves.\n            switch(thenable.status){\n                case \"fulfilled\":\n                    {\n                        var fulfilledValue = thenable.value;\n                        return fulfilledValue;\n                    }\n                case \"rejected\":\n                    {\n                        var rejectedError = thenable.reason;\n                        throw rejectedError;\n                    }\n                default:\n                    {\n                        if (typeof thenable.status === \"string\") ;\n                        else {\n                            var pendingThenable = thenable;\n                            pendingThenable.status = \"pending\";\n                            pendingThenable.then(function(fulfilledValue) {\n                                if (thenable.status === \"pending\") {\n                                    var fulfilledThenable = thenable;\n                                    fulfilledThenable.status = \"fulfilled\";\n                                    fulfilledThenable.value = fulfilledValue;\n                                }\n                            }, function(error) {\n                                if (thenable.status === \"pending\") {\n                                    var rejectedThenable = thenable;\n                                    rejectedThenable.status = \"rejected\";\n                                    rejectedThenable.reason = error;\n                                }\n                            }); // Check one more time in case the thenable resolved synchronously\n                            switch(thenable.status){\n                                case \"fulfilled\":\n                                    {\n                                        var fulfilledThenable = thenable;\n                                        return fulfilledThenable.value;\n                                    }\n                                case \"rejected\":\n                                    {\n                                        var rejectedThenable = thenable;\n                                        throw rejectedThenable.reason;\n                                    }\n                            }\n                        } // Suspend.\n                        //\n                        // Throwing here is an implementation detail that allows us to unwind the\n                        // call stack. But we shouldn't allow it to leak into userspace. Throw an\n                        // opaque placeholder value instead of the actual thenable. If it doesn't\n                        // get captured by the work loop, log a warning, because that means\n                        // something in userspace must have caught it.\n                        suspendedThenable = thenable;\n                        throw SuspenseException;\n                    }\n            }\n        } // This is used to track the actual thenable that suspended so it can be\n        // passed to the rest of the Suspense implementation — which, for historical\n        // reasons, expects to receive a thenable.\n        var suspendedThenable = null;\n        function getSuspendedThenable() {\n            // This is called right after `use` suspends by throwing an exception. `use`\n            // throws an opaque value instead of the thenable itself so that it can't be\n            // caught in userspace. Then the work loop accesses the actual thenable using\n            // this function.\n            if (suspendedThenable === null) {\n                throw new Error(\"Expected a suspended thenable. This is a bug in React. Please file \" + \"an issue.\");\n            }\n            var thenable = suspendedThenable;\n            suspendedThenable = null;\n            return thenable;\n        }\n        /**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */ function is(x, y) {\n            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n            ;\n        }\n        var objectIs = typeof Object.is === \"function\" ? Object.is : is;\n        var currentlyRenderingComponent = null;\n        var currentlyRenderingTask = null;\n        var firstWorkInProgressHook = null;\n        var workInProgressHook = null; // Whether the work-in-progress hook is a re-rendered hook\n        var isReRender = false; // Whether an update was scheduled during the currently executing render pass.\n        var didScheduleRenderPhaseUpdate = false; // Counts the number of useId hooks in this component\n        var localIdCounter = 0; // Counts the number of use(thenable) calls in this component\n        var thenableIndexCounter = 0;\n        var thenableState = null; // Lazily created map of render-phase updates\n        var renderPhaseUpdates = null; // Counter to prevent infinite loops.\n        var numberOfReRenders = 0;\n        var RE_RENDER_LIMIT = 25;\n        var isInHookUserCodeInDev = false; // In DEV, this is the name of the currently executing primitive hook\n        var currentHookNameInDev;\n        function resolveCurrentlyRenderingComponent() {\n            if (currentlyRenderingComponent === null) {\n                throw new Error(\"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for\" + \" one of the following reasons:\\n\" + \"1. You might have mismatching versions of React and the renderer (such as React DOM)\\n\" + \"2. You might be breaking the Rules of Hooks\\n\" + \"3. You might have more than one copy of React in the same app\\n\" + \"See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\");\n            }\n            {\n                if (isInHookUserCodeInDev) {\n                    error(\"Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. \" + \"You can only call Hooks at the top level of your React function. \" + \"For more information, see \" + \"https://reactjs.org/link/rules-of-hooks\");\n                }\n            }\n            return currentlyRenderingComponent;\n        }\n        function areHookInputsEqual(nextDeps, prevDeps) {\n            if (prevDeps === null) {\n                {\n                    error(\"%s received a final argument during this render, but not during \" + \"the previous render. Even though the final argument is optional, \" + \"its type cannot change between renders.\", currentHookNameInDev);\n                }\n                return false;\n            }\n            {\n                // Don't bother comparing lengths in prod because these arrays should be\n                // passed inline.\n                if (nextDeps.length !== prevDeps.length) {\n                    error(\"The final argument passed to %s changed size between renders. The \" + \"order and size of this array must remain constant.\\n\\n\" + \"Previous: %s\\n\" + \"Incoming: %s\", currentHookNameInDev, \"[\" + nextDeps.join(\", \") + \"]\", \"[\" + prevDeps.join(\", \") + \"]\");\n                }\n            }\n            for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){\n                // $FlowFixMe[incompatible-use] found when upgrading Flow\n                if (objectIs(nextDeps[i], prevDeps[i])) {\n                    continue;\n                }\n                return false;\n            }\n            return true;\n        }\n        function createHook() {\n            if (numberOfReRenders > 0) {\n                throw new Error(\"Rendered more hooks than during the previous render\");\n            }\n            return {\n                memoizedState: null,\n                queue: null,\n                next: null\n            };\n        }\n        function createWorkInProgressHook() {\n            if (workInProgressHook === null) {\n                // This is the first hook in the list\n                if (firstWorkInProgressHook === null) {\n                    isReRender = false;\n                    firstWorkInProgressHook = workInProgressHook = createHook();\n                } else {\n                    // There's already a work-in-progress. Reuse it.\n                    isReRender = true;\n                    workInProgressHook = firstWorkInProgressHook;\n                }\n            } else {\n                if (workInProgressHook.next === null) {\n                    isReRender = false; // Append to the end of the list\n                    workInProgressHook = workInProgressHook.next = createHook();\n                } else {\n                    // There's already a work-in-progress. Reuse it.\n                    isReRender = true;\n                    workInProgressHook = workInProgressHook.next;\n                }\n            }\n            return workInProgressHook;\n        }\n        function prepareToUseHooks(task, componentIdentity, prevThenableState) {\n            currentlyRenderingComponent = componentIdentity;\n            currentlyRenderingTask = task;\n            {\n                isInHookUserCodeInDev = false;\n            }\n            // didScheduleRenderPhaseUpdate = false;\n            // firstWorkInProgressHook = null;\n            // numberOfReRenders = 0;\n            // renderPhaseUpdates = null;\n            // workInProgressHook = null;\n            localIdCounter = 0;\n            thenableIndexCounter = 0;\n            thenableState = prevThenableState;\n        }\n        function finishHooks(Component, props, children, refOrContext) {\n            // This must be called after every function component to prevent hooks from\n            // being used in classes.\n            while(didScheduleRenderPhaseUpdate){\n                // Updates were scheduled during the render phase. They are stored in\n                // the `renderPhaseUpdates` map. Call the component again, reusing the\n                // work-in-progress hooks and applying the additional updates on top. Keep\n                // restarting until no more updates are scheduled.\n                didScheduleRenderPhaseUpdate = false;\n                localIdCounter = 0;\n                thenableIndexCounter = 0;\n                numberOfReRenders += 1; // Start over from the beginning of the list\n                workInProgressHook = null;\n                children = Component(props, refOrContext);\n            }\n            resetHooksState();\n            return children;\n        }\n        function getThenableStateAfterSuspending() {\n            var state = thenableState;\n            thenableState = null;\n            return state;\n        }\n        function checkDidRenderIdHook() {\n            // This should be called immediately after every finishHooks call.\n            // Conceptually, it's part of the return value of finishHooks; it's only a\n            // separate function to avoid using an array tuple.\n            var didRenderIdHook = localIdCounter !== 0;\n            return didRenderIdHook;\n        } // Reset the internal hooks state if an error occurs while rendering a component\n        function resetHooksState() {\n            {\n                isInHookUserCodeInDev = false;\n            }\n            currentlyRenderingComponent = null;\n            currentlyRenderingTask = null;\n            didScheduleRenderPhaseUpdate = false;\n            firstWorkInProgressHook = null;\n            numberOfReRenders = 0;\n            renderPhaseUpdates = null;\n            workInProgressHook = null;\n        }\n        function readContext(context) {\n            {\n                if (isInHookUserCodeInDev) {\n                    error(\"Context can only be read while React is rendering. \" + \"In classes, you can read it in the render method or getDerivedStateFromProps. \" + \"In function components, you can read it directly in the function body, but not \" + \"inside Hooks like useReducer() or useMemo().\");\n                }\n            }\n            return readContext$1(context);\n        }\n        function useContext(context) {\n            {\n                currentHookNameInDev = \"useContext\";\n            }\n            resolveCurrentlyRenderingComponent();\n            return readContext$1(context);\n        }\n        function basicStateReducer(state, action) {\n            // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types\n            return typeof action === \"function\" ? action(state) : action;\n        }\n        function useState(initialState) {\n            {\n                currentHookNameInDev = \"useState\";\n            }\n            return useReducer(basicStateReducer, initialState);\n        }\n        function useReducer(reducer, initialArg, init) {\n            {\n                if (reducer !== basicStateReducer) {\n                    currentHookNameInDev = \"useReducer\";\n                }\n            }\n            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();\n            workInProgressHook = createWorkInProgressHook();\n            if (isReRender) {\n                // This is a re-render. Apply the new render phase updates to the previous\n                // current hook.\n                var queue = workInProgressHook.queue;\n                var dispatch = queue.dispatch;\n                if (renderPhaseUpdates !== null) {\n                    // Render phase updates are stored in a map of queue -> linked list\n                    var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);\n                    if (firstRenderPhaseUpdate !== undefined) {\n                        // $FlowFixMe[incompatible-use] found when upgrading Flow\n                        renderPhaseUpdates.delete(queue); // $FlowFixMe[incompatible-use] found when upgrading Flow\n                        var newState = workInProgressHook.memoizedState;\n                        var update = firstRenderPhaseUpdate;\n                        do {\n                            // Process this render phase update. We don't have to check the\n                            // priority because it will always be the same as the current\n                            // render's.\n                            var action = update.action;\n                            {\n                                isInHookUserCodeInDev = true;\n                            }\n                            newState = reducer(newState, action);\n                            {\n                                isInHookUserCodeInDev = false;\n                            }\n                            update = update.next;\n                        }while (update !== null); // $FlowFixMe[incompatible-use] found when upgrading Flow\n                        workInProgressHook.memoizedState = newState;\n                        return [\n                            newState,\n                            dispatch\n                        ];\n                    }\n                } // $FlowFixMe[incompatible-use] found when upgrading Flow\n                return [\n                    workInProgressHook.memoizedState,\n                    dispatch\n                ];\n            } else {\n                {\n                    isInHookUserCodeInDev = true;\n                }\n                var initialState;\n                if (reducer === basicStateReducer) {\n                    // Special case for `useState`.\n                    initialState = typeof initialArg === \"function\" ? initialArg() : initialArg;\n                } else {\n                    initialState = init !== undefined ? init(initialArg) : initialArg;\n                }\n                {\n                    isInHookUserCodeInDev = false;\n                }\n                workInProgressHook.memoizedState = initialState; // $FlowFixMe[incompatible-use] found when upgrading Flow\n                var _queue = workInProgressHook.queue = {\n                    last: null,\n                    dispatch: null\n                };\n                var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue); // $FlowFixMe[incompatible-use] found when upgrading Flow\n                return [\n                    workInProgressHook.memoizedState,\n                    _dispatch\n                ];\n            }\n        }\n        function useMemo(nextCreate, deps) {\n            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();\n            workInProgressHook = createWorkInProgressHook();\n            var nextDeps = deps === undefined ? null : deps;\n            if (workInProgressHook !== null) {\n                var prevState = workInProgressHook.memoizedState;\n                if (prevState !== null) {\n                    if (nextDeps !== null) {\n                        var prevDeps = prevState[1];\n                        if (areHookInputsEqual(nextDeps, prevDeps)) {\n                            return prevState[0];\n                        }\n                    }\n                }\n            }\n            {\n                isInHookUserCodeInDev = true;\n            }\n            var nextValue = nextCreate();\n            {\n                isInHookUserCodeInDev = false;\n            }\n            workInProgressHook.memoizedState = [\n                nextValue,\n                nextDeps\n            ];\n            return nextValue;\n        }\n        function useRef(initialValue) {\n            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();\n            workInProgressHook = createWorkInProgressHook();\n            var previousRef = workInProgressHook.memoizedState;\n            if (previousRef === null) {\n                var ref = {\n                    current: initialValue\n                };\n                {\n                    Object.seal(ref);\n                }\n                workInProgressHook.memoizedState = ref;\n                return ref;\n            } else {\n                return previousRef;\n            }\n        }\n        function dispatchAction(componentIdentity, queue, action) {\n            if (numberOfReRenders >= RE_RENDER_LIMIT) {\n                throw new Error(\"Too many re-renders. React limits the number of renders to prevent \" + \"an infinite loop.\");\n            }\n            if (componentIdentity === currentlyRenderingComponent) {\n                // This is a render phase update. Stash it in a lazily-created map of\n                // queue -> linked list of updates. After this render pass, we'll restart\n                // and apply the stashed updates on top of the work-in-progress hook.\n                didScheduleRenderPhaseUpdate = true;\n                var update = {\n                    action: action,\n                    next: null\n                };\n                if (renderPhaseUpdates === null) {\n                    renderPhaseUpdates = new Map();\n                }\n                var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);\n                if (firstRenderPhaseUpdate === undefined) {\n                    // $FlowFixMe[incompatible-use] found when upgrading Flow\n                    renderPhaseUpdates.set(queue, update);\n                } else {\n                    // Append the update to the end of the list.\n                    var lastRenderPhaseUpdate = firstRenderPhaseUpdate;\n                    while(lastRenderPhaseUpdate.next !== null){\n                        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n                    }\n                    lastRenderPhaseUpdate.next = update;\n                }\n            }\n        }\n        function useCallback(callback, deps) {\n            return useMemo(function() {\n                return callback;\n            }, deps);\n        }\n        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n            if (getServerSnapshot === undefined) {\n                throw new Error(\"Missing getServerSnapshot, which is required for \" + \"server-rendered content. Will revert to client rendering.\");\n            }\n            return getServerSnapshot();\n        }\n        function useDeferredValue(value) {\n            resolveCurrentlyRenderingComponent();\n            return value;\n        }\n        function unsupportedStartTransition() {\n            throw new Error(\"startTransition cannot be called during server rendering.\");\n        }\n        function useTransition() {\n            resolveCurrentlyRenderingComponent();\n            return [\n                false,\n                unsupportedStartTransition\n            ];\n        }\n        function useId() {\n            var task = currentlyRenderingTask;\n            var treeId = getTreeId(task.treeContext);\n            var responseState = currentResponseState;\n            if (responseState === null) {\n                throw new Error(\"Invalid hook call. Hooks can only be called inside of the body of a function component.\");\n            }\n            var localId = localIdCounter++;\n            return makeId(responseState, treeId, localId);\n        }\n        function use(usable) {\n            if (usable !== null && typeof usable === \"object\") {\n                // $FlowFixMe[method-unbinding]\n                if (typeof usable.then === \"function\") {\n                    // This is a thenable.\n                    var thenable = usable;\n                    return unwrapThenable(thenable);\n                } else if (usable.$$typeof === REACT_CONTEXT_TYPE || usable.$$typeof === REACT_SERVER_CONTEXT_TYPE) {\n                    var context = usable;\n                    return readContext(context);\n                }\n            } // eslint-disable-next-line react-internal/safe-string-coercion\n            throw new Error(\"An unsupported type was passed to use(): \" + String(usable));\n        }\n        function unwrapThenable(thenable) {\n            var index = thenableIndexCounter;\n            thenableIndexCounter += 1;\n            if (thenableState === null) {\n                thenableState = createThenableState();\n            }\n            return trackUsedThenable(thenableState, thenable, index);\n        }\n        function unsupportedRefresh() {\n            throw new Error(\"Cache cannot be refreshed during server rendering.\");\n        }\n        function useCacheRefresh() {\n            return unsupportedRefresh;\n        }\n        function noop$1() {}\n        var HooksDispatcher = {\n            readContext: readContext,\n            use: use,\n            useContext: useContext,\n            useMemo: useMemo,\n            useReducer: useReducer,\n            useRef: useRef,\n            useState: useState,\n            useInsertionEffect: noop$1,\n            useLayoutEffect: noop$1,\n            useCallback: useCallback,\n            // useImperativeHandle is not run in the server environment\n            useImperativeHandle: noop$1,\n            // Effects are not run in the server environment.\n            useEffect: noop$1,\n            // Debugging effect\n            useDebugValue: noop$1,\n            useDeferredValue: useDeferredValue,\n            useTransition: useTransition,\n            useId: useId,\n            // Subscriptions are not setup in a server environment.\n            useSyncExternalStore: useSyncExternalStore\n        };\n        {\n            HooksDispatcher.useCacheRefresh = useCacheRefresh;\n        }\n        var currentResponseState = null;\n        function setCurrentResponseState(responseState) {\n            currentResponseState = responseState;\n        }\n        function getCacheSignal() {\n            throw new Error(\"Not implemented.\");\n        }\n        function getCacheForType(resourceType) {\n            throw new Error(\"Not implemented.\");\n        }\n        var DefaultCacheDispatcher = {\n            getCacheSignal: getCacheSignal,\n            getCacheForType: getCacheForType\n        };\n        function getStackByComponentStackNode(componentStack) {\n            try {\n                var info = \"\";\n                var node = componentStack;\n                do {\n                    switch(node.tag){\n                        case 0:\n                            info += describeBuiltInComponentFrame(node.type, null, null);\n                            break;\n                        case 1:\n                            info += describeFunctionComponentFrame(node.type, null, null);\n                            break;\n                        case 2:\n                            info += describeClassComponentFrame(node.type, null, null);\n                            break;\n                    } // $FlowFixMe[incompatible-type] we bail out when we get a null\n                    node = node.parent;\n                }while (node);\n                return info;\n            } catch (x) {\n                return \"\\nError generating stack: \" + x.message + \"\\n\" + x.stack;\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var ReactCurrentCache = ReactSharedInternals.ReactCurrentCache;\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var PENDING = 0;\n        var COMPLETED = 1;\n        var FLUSHED = 2;\n        var ABORTED = 3;\n        var ERRORED = 4;\n        var OPEN = 0;\n        var CLOSING = 1;\n        var CLOSED = 2; // This is a default heuristic for how to split up the HTML content into progressive\n        // loading. Our goal is to be able to display additional new content about every 500ms.\n        // Faster than that is unnecessary and should be throttled on the client. It also\n        // adds unnecessary overhead to do more splits. We don't know if it's a higher or lower\n        // end device but higher end suffer less from the overhead than lower end does from\n        // not getting small enough pieces. We error on the side of low end.\n        // We base this on low end 3G speeds which is about 500kbits per second. We assume\n        // that there can be a reasonable drop off from max bandwidth which leaves you with\n        // as little as 80%. We can receive half of that each 500ms - at best. In practice,\n        // a little bandwidth is lost to processing and contention - e.g. CSS and images that\n        // are downloaded along with the main content. So we estimate about half of that to be\n        // the lower end throughput. In other words, we expect that you can at least show\n        // about 12.5kb of content per 500ms. Not counting starting latency for the first\n        // paint.\n        // 500 * 1024 / 8 * .8 * 0.5 / 2\n        var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;\n        function defaultErrorHandler(error) {\n            console[\"error\"](error); // Don't transform to our wrapper\n            return null;\n        }\n        function noop() {}\n        function createRequest(children, resources, responseState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError) {\n            prepareHostDispatcher();\n            var pingedTasks = [];\n            var abortSet = new Set();\n            var request = {\n                destination: null,\n                flushScheduled: false,\n                responseState: responseState,\n                progressiveChunkSize: progressiveChunkSize === undefined ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,\n                status: OPEN,\n                fatalError: null,\n                nextSegmentId: 0,\n                allPendingTasks: 0,\n                pendingRootTasks: 0,\n                resources: resources,\n                completedRootSegment: null,\n                abortableTasks: abortSet,\n                pingedTasks: pingedTasks,\n                clientRenderedBoundaries: [],\n                completedBoundaries: [],\n                partialBoundaries: [],\n                onError: onError === undefined ? defaultErrorHandler : onError,\n                onAllReady: onAllReady === undefined ? noop : onAllReady,\n                onShellReady: onShellReady === undefined ? noop : onShellReady,\n                onShellError: onShellError === undefined ? noop : onShellError,\n                onFatalError: onFatalError === undefined ? noop : onFatalError\n            }; // This segment represents the root fallback.\n            var rootSegment = createPendingSegment(request, 0, null, rootFormatContext, false, false); // There is no parent so conceptually, we're unblocked to flush this segment.\n            rootSegment.parentFlushed = true;\n            var rootTask = createTask(request, null, children, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);\n            pingedTasks.push(rootTask);\n            return request;\n        }\n        var currentRequest = null;\n        function resolveRequest() {\n            if (currentRequest) return currentRequest;\n            return null;\n        }\n        function pingTask(request, task) {\n            var pingedTasks = request.pingedTasks;\n            pingedTasks.push(task);\n            if (request.pingedTasks.length === 1) {\n                request.flushScheduled = request.destination !== null;\n                scheduleWork(function() {\n                    return performWork(request);\n                });\n            }\n        }\n        function createSuspenseBoundary(request, fallbackAbortableTasks) {\n            return {\n                id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,\n                rootSegmentID: -1,\n                parentFlushed: false,\n                pendingTasks: 0,\n                forceClientRender: false,\n                completedSegments: [],\n                byteSize: 0,\n                fallbackAbortableTasks: fallbackAbortableTasks,\n                errorDigest: null,\n                resources: createBoundaryResources()\n            };\n        }\n        function createTask(request, thenableState, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {\n            request.allPendingTasks++;\n            if (blockedBoundary === null) {\n                request.pendingRootTasks++;\n            } else {\n                blockedBoundary.pendingTasks++;\n            }\n            var task = {\n                node: node,\n                ping: function() {\n                    return pingTask(request, task);\n                },\n                blockedBoundary: blockedBoundary,\n                blockedSegment: blockedSegment,\n                abortSet: abortSet,\n                legacyContext: legacyContext,\n                context: context,\n                treeContext: treeContext,\n                thenableState: thenableState\n            };\n            {\n                task.componentStack = null;\n            }\n            abortSet.add(task);\n            return task;\n        }\n        function createPendingSegment(request, index, boundary, formatContext, lastPushedText, textEmbedded) {\n            return {\n                status: PENDING,\n                id: -1,\n                // lazily assigned later\n                index: index,\n                parentFlushed: false,\n                chunks: [],\n                children: [],\n                formatContext: formatContext,\n                boundary: boundary,\n                lastPushedText: lastPushedText,\n                textEmbedded: textEmbedded\n            };\n        } // DEV-only global reference to the currently executing task\n        var currentTaskInDEV = null;\n        function getCurrentStackInDEV() {\n            {\n                if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {\n                    return \"\";\n                }\n                return getStackByComponentStackNode(currentTaskInDEV.componentStack);\n            }\n        }\n        function pushBuiltInComponentStackInDEV(task, type) {\n            {\n                task.componentStack = {\n                    tag: 0,\n                    parent: task.componentStack,\n                    type: type\n                };\n            }\n        }\n        function pushFunctionComponentStackInDEV(task, type) {\n            {\n                task.componentStack = {\n                    tag: 1,\n                    parent: task.componentStack,\n                    type: type\n                };\n            }\n        }\n        function pushClassComponentStackInDEV(task, type) {\n            {\n                task.componentStack = {\n                    tag: 2,\n                    parent: task.componentStack,\n                    type: type\n                };\n            }\n        }\n        function popComponentStackInDEV(task) {\n            {\n                if (task.componentStack === null) {\n                    error(\"Unexpectedly popped too many stack frames. This is a bug in React.\");\n                } else {\n                    task.componentStack = task.componentStack.parent;\n                }\n            }\n        } // stash the component stack of an unwinding error until it is processed\n        var lastBoundaryErrorComponentStackDev = null;\n        function captureBoundaryErrorDetailsDev(boundary, error) {\n            {\n                var errorMessage;\n                if (typeof error === \"string\") {\n                    errorMessage = error;\n                } else if (error && typeof error.message === \"string\") {\n                    errorMessage = error.message;\n                } else {\n                    // eslint-disable-next-line react-internal/safe-string-coercion\n                    errorMessage = String(error);\n                }\n                var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();\n                lastBoundaryErrorComponentStackDev = null;\n                boundary.errorMessage = errorMessage;\n                boundary.errorComponentStack = errorComponentStack;\n            }\n        }\n        function logRecoverableError(request, error) {\n            // If this callback errors, we intentionally let that error bubble up to become a fatal error\n            // so that someone fixes the error reporting instead of hiding it.\n            var errorDigest = request.onError(error);\n            if (errorDigest != null && typeof errorDigest !== \"string\") {\n                // eslint-disable-next-line react-internal/prod-error-codes\n                throw new Error('onError returned something with a type other than \"string\". onError should return a string and may return null or undefined but must not return anything else. It received something of type \"' + typeof errorDigest + '\" instead');\n            }\n            return errorDigest;\n        }\n        function fatalError(request, error) {\n            // This is called outside error handling code such as if the root errors outside\n            // a suspense boundary or if the root suspense boundary's fallback errors.\n            // It's also called if React itself or its host configs errors.\n            var onShellError = request.onShellError;\n            onShellError(error);\n            var onFatalError = request.onFatalError;\n            onFatalError(error);\n            if (request.destination !== null) {\n                request.status = CLOSED;\n                closeWithError(request.destination, error);\n            } else {\n                request.status = CLOSING;\n                request.fatalError = error;\n            }\n        }\n        function renderSuspenseBoundary(request, task, props) {\n            pushBuiltInComponentStackInDEV(task, \"Suspense\");\n            var parentBoundary = task.blockedBoundary;\n            var parentSegment = task.blockedSegment; // Each time we enter a suspense boundary, we split out into a new segment for\n            // the fallback so that we can later replace that segment with the content.\n            // This also lets us split out the main content even if it doesn't suspend,\n            // in case it ends up generating a large subtree of content.\n            var fallback = props.fallback;\n            var content = props.children;\n            var fallbackAbortSet = new Set();\n            var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);\n            var insertionIndex = parentSegment.chunks.length; // The children of the boundary segment is actually the fallback.\n            var boundarySegment = createPendingSegment(request, insertionIndex, newBoundary, parentSegment.formatContext, false, false);\n            parentSegment.children.push(boundarySegment); // The parentSegment has a child Segment at this index so we reset the lastPushedText marker on the parent\n            parentSegment.lastPushedText = false; // This segment is the actual child content. We can start rendering that immediately.\n            var contentRootSegment = createPendingSegment(request, 0, null, parentSegment.formatContext, false, false); // We mark the root segment as having its parent flushed. It's not really flushed but there is\n            // no parent segment so there's nothing to wait on.\n            contentRootSegment.parentFlushed = true; // Currently this is running synchronously. We could instead schedule this to pingedTasks.\n            // I suspect that there might be some efficiency benefits from not creating the suspended task\n            // and instead just using the stack if possible.\n            // TODO: Call this directly instead of messing with saving and restoring contexts.\n            // We can reuse the current context and task to render the content immediately without\n            // context switching. We just need to temporarily switch which boundary and which segment\n            // we're writing to. If something suspends, it'll spawn new suspended task with that context.\n            task.blockedBoundary = newBoundary;\n            task.blockedSegment = contentRootSegment;\n            {\n                setCurrentlyRenderingBoundaryResourcesTarget(request.resources, newBoundary.resources);\n            }\n            try {\n                // We use the safe form because we don't handle suspending here. Only error handling.\n                renderNode(request, task, content);\n                pushSegmentFinale(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);\n                contentRootSegment.status = COMPLETED;\n                queueCompletedSegment(newBoundary, contentRootSegment);\n                if (newBoundary.pendingTasks === 0) {\n                    // This must have been the last segment we were waiting on. This boundary is now complete.\n                    // Therefore we won't need the fallback. We early return so that we don't have to create\n                    // the fallback.\n                    popComponentStackInDEV(task);\n                    return;\n                }\n            } catch (error) {\n                contentRootSegment.status = ERRORED;\n                newBoundary.forceClientRender = true;\n                newBoundary.errorDigest = logRecoverableError(request, error);\n                {\n                    captureBoundaryErrorDetailsDev(newBoundary, error);\n                }\n            // We don't need to schedule any task because we know the parent has written yet.\n            // We do need to fallthrough to create the fallback though.\n            } finally{\n                {\n                    setCurrentlyRenderingBoundaryResourcesTarget(request.resources, parentBoundary ? parentBoundary.resources : null);\n                }\n                task.blockedBoundary = parentBoundary;\n                task.blockedSegment = parentSegment;\n            } // We create suspended task for the fallback because we don't want to actually work\n            // on it yet in case we finish the main content, so we queue for later.\n            var suspendedFallbackTask = createTask(request, null, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);\n            {\n                suspendedFallbackTask.componentStack = task.componentStack;\n            }\n            // on preparing fallbacks if we don't have any more main content to task on.\n            request.pingedTasks.push(suspendedFallbackTask);\n            popComponentStackInDEV(task);\n        }\n        function renderHostElement(request, task, type, props) {\n            pushBuiltInComponentStackInDEV(task, type);\n            var segment = task.blockedSegment;\n            var children = pushStartInstance(segment.chunks, type, props, request.resources, request.responseState, segment.formatContext, segment.lastPushedText);\n            segment.lastPushedText = false;\n            var prevContext = segment.formatContext;\n            segment.formatContext = getChildFormatContext(prevContext, type, props); // We use the non-destructive form because if something suspends, we still\n            // need to pop back up and finish this subtree of HTML.\n            renderNode(request, task, children); // We expect that errors will fatal the whole task and that we don't need\n            // the correct context. Therefore this is not in a finally.\n            segment.formatContext = prevContext;\n            pushEndInstance(segment.chunks, type, props, request.responseState, prevContext);\n            segment.lastPushedText = false;\n            popComponentStackInDEV(task);\n        }\n        function shouldConstruct(Component) {\n            return Component.prototype && Component.prototype.isReactComponent;\n        }\n        function renderWithHooks(request, task, prevThenableState, Component, props, secondArg) {\n            var componentIdentity = {};\n            prepareToUseHooks(task, componentIdentity, prevThenableState);\n            var result = Component(props, secondArg);\n            return finishHooks(Component, props, result, secondArg);\n        }\n        function finishClassComponent(request, task, instance, Component, props) {\n            var nextChildren = instance.render();\n            {\n                if (instance.props !== props) {\n                    if (!didWarnAboutReassigningProps) {\n                        error(\"It looks like %s is reassigning its own `this.props` while rendering. \" + \"This is not supported and can lead to confusing bugs.\", getComponentNameFromType(Component) || \"a component\");\n                    }\n                    didWarnAboutReassigningProps = true;\n                }\n            }\n            {\n                var childContextTypes = Component.childContextTypes;\n                if (childContextTypes !== null && childContextTypes !== undefined) {\n                    var previousContext = task.legacyContext;\n                    var mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);\n                    task.legacyContext = mergedContext;\n                    renderNodeDestructive(request, task, null, nextChildren);\n                    task.legacyContext = previousContext;\n                    return;\n                }\n            }\n            renderNodeDestructive(request, task, null, nextChildren);\n        }\n        function renderClassComponent(request, task, Component, props) {\n            pushClassComponentStackInDEV(task, Component);\n            var maskedContext = getMaskedContext(Component, task.legacyContext);\n            var instance = constructClassInstance(Component, props, maskedContext);\n            mountClassInstance(instance, Component, props, maskedContext);\n            finishClassComponent(request, task, instance, Component, props);\n            popComponentStackInDEV(task);\n        }\n        var didWarnAboutBadClass = {};\n        var didWarnAboutModulePatternComponent = {};\n        var didWarnAboutContextTypeOnFunctionComponent = {};\n        var didWarnAboutGetDerivedStateOnFunctionComponent = {};\n        var didWarnAboutReassigningProps = false;\n        var didWarnAboutDefaultPropsOnFunctionComponent = {};\n        var didWarnAboutGenerators = false;\n        var didWarnAboutMaps = false;\n        var hasWarnedAboutUsingContextAsConsumer = false; // This would typically be a function component but we still support module pattern\n        // components for some reason.\n        function renderIndeterminateComponent(request, task, prevThenableState, Component, props) {\n            var legacyContext;\n            {\n                legacyContext = getMaskedContext(Component, task.legacyContext);\n            }\n            pushFunctionComponentStackInDEV(task, Component);\n            {\n                if (Component.prototype && typeof Component.prototype.render === \"function\") {\n                    var componentName = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutBadClass[componentName]) {\n                        error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + \"This is likely to cause errors. Change %s to extend React.Component instead.\", componentName, componentName);\n                        didWarnAboutBadClass[componentName] = true;\n                    }\n                }\n            }\n            var value = renderWithHooks(request, task, prevThenableState, Component, props, legacyContext);\n            var hasId = checkDidRenderIdHook();\n            {\n                // Support for module components is deprecated and is removed behind a flag.\n                // Whether or not it would crash later, we want to show a good message in DEV first.\n                if (typeof value === \"object\" && value !== null && typeof value.render === \"function\" && value.$$typeof === undefined) {\n                    var _componentName = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutModulePatternComponent[_componentName]) {\n                        error(\"The <%s /> component appears to be a function component that returns a class instance. \" + \"Change %s to a class that extends React.Component instead. \" + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + \"cannot be called with `new` by React.\", _componentName, _componentName, _componentName);\n                        didWarnAboutModulePatternComponent[_componentName] = true;\n                    }\n                }\n            }\n            if (// Eventually we'll delete this branch altogether.\n            typeof value === \"object\" && value !== null && typeof value.render === \"function\" && value.$$typeof === undefined) {\n                {\n                    var _componentName2 = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutModulePatternComponent[_componentName2]) {\n                        error(\"The <%s /> component appears to be a function component that returns a class instance. \" + \"Change %s to a class that extends React.Component instead. \" + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + \"cannot be called with `new` by React.\", _componentName2, _componentName2, _componentName2);\n                        didWarnAboutModulePatternComponent[_componentName2] = true;\n                    }\n                }\n                mountClassInstance(value, Component, props, legacyContext);\n                finishClassComponent(request, task, value, Component, props);\n            } else {\n                {\n                    validateFunctionComponentInDev(Component);\n                }\n                // the previous task every again, so we can use the destructive recursive form.\n                if (hasId) {\n                    // This component materialized an id. We treat this as its own level, with\n                    // a single \"child\" slot.\n                    var prevTreeContext = task.treeContext;\n                    var totalChildren = 1;\n                    var index = 0;\n                    task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);\n                    try {\n                        renderNodeDestructive(request, task, null, value);\n                    } finally{\n                        task.treeContext = prevTreeContext;\n                    }\n                } else {\n                    renderNodeDestructive(request, task, null, value);\n                }\n            }\n            popComponentStackInDEV(task);\n        }\n        function validateFunctionComponentInDev(Component) {\n            {\n                if (Component) {\n                    if (Component.childContextTypes) {\n                        error(\"%s(...): childContextTypes cannot be defined on a function component.\", Component.displayName || Component.name || \"Component\");\n                    }\n                }\n                if (Component.defaultProps !== undefined) {\n                    var componentName = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n                        error(\"%s: Support for defaultProps will be removed from function components \" + \"in a future major release. Use JavaScript default parameters instead.\", componentName);\n                        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n                    }\n                }\n                if (typeof Component.getDerivedStateFromProps === \"function\") {\n                    var _componentName3 = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {\n                        error(\"%s: Function components do not support getDerivedStateFromProps.\", _componentName3);\n                        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;\n                    }\n                }\n                if (typeof Component.contextType === \"object\" && Component.contextType !== null) {\n                    var _componentName4 = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {\n                        error(\"%s: Function components do not support contextType.\", _componentName4);\n                        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;\n                    }\n                }\n            }\n        }\n        function resolveDefaultProps(Component, baseProps) {\n            if (Component && Component.defaultProps) {\n                // Resolve default props. Taken from ReactElement\n                var props = assign({}, baseProps);\n                var defaultProps = Component.defaultProps;\n                for(var propName in defaultProps){\n                    if (props[propName] === undefined) {\n                        props[propName] = defaultProps[propName];\n                    }\n                }\n                return props;\n            }\n            return baseProps;\n        }\n        function renderForwardRef(request, task, prevThenableState, type, props, ref) {\n            pushFunctionComponentStackInDEV(task, type.render);\n            var children = renderWithHooks(request, task, prevThenableState, type.render, props, ref);\n            var hasId = checkDidRenderIdHook();\n            if (hasId) {\n                // This component materialized an id. We treat this as its own level, with\n                // a single \"child\" slot.\n                var prevTreeContext = task.treeContext;\n                var totalChildren = 1;\n                var index = 0;\n                task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);\n                try {\n                    renderNodeDestructive(request, task, null, children);\n                } finally{\n                    task.treeContext = prevTreeContext;\n                }\n            } else {\n                renderNodeDestructive(request, task, null, children);\n            }\n            popComponentStackInDEV(task);\n        }\n        function renderMemo(request, task, prevThenableState, type, props, ref) {\n            var innerType = type.type;\n            var resolvedProps = resolveDefaultProps(innerType, props);\n            renderElement(request, task, prevThenableState, innerType, resolvedProps, ref);\n        }\n        function renderContextConsumer(request, task, context, props) {\n            // The logic below for Context differs depending on PROD or DEV mode. In\n            // DEV mode, we create a separate object for Context.Consumer that acts\n            // like a proxy to Context. This proxy object adds unnecessary code in PROD\n            // so we use the old behaviour (Context.Consumer references Context) to\n            // reduce size and overhead. The separate object references context via\n            // a property called \"_context\", which also gives us the ability to check\n            // in DEV mode if this property exists or not and warn if it does not.\n            {\n                if (context._context === undefined) {\n                    // This may be because it's a Context (rather than a Consumer).\n                    // Or it may be because it's older React where they're the same thing.\n                    // We only want to warn if we're sure it's a new React.\n                    if (context !== context.Consumer) {\n                        if (!hasWarnedAboutUsingContextAsConsumer) {\n                            hasWarnedAboutUsingContextAsConsumer = true;\n                            error(\"Rendering <Context> directly is not supported and will be removed in \" + \"a future major release. Did you mean to render <Context.Consumer> instead?\");\n                        }\n                    }\n                } else {\n                    context = context._context;\n                }\n            }\n            var render = props.children;\n            {\n                if (typeof render !== \"function\") {\n                    error(\"A context consumer was rendered with multiple children, or a child \" + \"that isn't a function. A context consumer expects a single child \" + \"that is a function. If you did pass a function, make sure there \" + \"is no trailing or leading whitespace around it.\");\n                }\n            }\n            var newValue = readContext$1(context);\n            var newChildren = render(newValue);\n            renderNodeDestructive(request, task, null, newChildren);\n        }\n        function renderContextProvider(request, task, type, props) {\n            var context = type._context;\n            var value = props.value;\n            var children = props.children;\n            var prevSnapshot;\n            {\n                prevSnapshot = task.context;\n            }\n            task.context = pushProvider(context, value);\n            renderNodeDestructive(request, task, null, children);\n            task.context = popProvider(context);\n            {\n                if (prevSnapshot !== task.context) {\n                    error(\"Popping the context provider did not return back to the original snapshot. This is a bug in React.\");\n                }\n            }\n        }\n        function renderLazyComponent(request, task, prevThenableState, lazyComponent, props, ref) {\n            pushBuiltInComponentStackInDEV(task, \"Lazy\");\n            var payload = lazyComponent._payload;\n            var init = lazyComponent._init;\n            var Component = init(payload);\n            var resolvedProps = resolveDefaultProps(Component, props);\n            renderElement(request, task, prevThenableState, Component, resolvedProps, ref);\n            popComponentStackInDEV(task);\n        }\n        function renderOffscreen(request, task, props) {\n            var mode = props.mode;\n            if (mode === \"hidden\") ;\n            else {\n                // A visible Offscreen boundary is treated exactly like a fragment: a\n                // pure indirection.\n                renderNodeDestructive(request, task, null, props.children);\n            }\n        }\n        function renderElement(request, task, prevThenableState, type, props, ref) {\n            if (typeof type === \"function\") {\n                if (shouldConstruct(type)) {\n                    renderClassComponent(request, task, type, props);\n                    return;\n                } else {\n                    renderIndeterminateComponent(request, task, prevThenableState, type, props);\n                    return;\n                }\n            }\n            if (typeof type === \"string\") {\n                renderHostElement(request, task, type, props);\n                return;\n            }\n            switch(type){\n                // LegacyHidden acts the same as a fragment. This only works because we\n                // currently assume that every instance of LegacyHidden is accompanied by a\n                // host component wrapper. In the hidden mode, the host component is given a\n                // `hidden` attribute, which ensures that the initial HTML is not visible.\n                // To support the use of LegacyHidden as a true fragment, without an extra\n                // DOM node, we would have to hide the initial HTML in some other way.\n                // TODO: Delete in LegacyHidden. It's an unstable API only used in the\n                // www build. As a migration step, we could add a special prop to Offscreen\n                // that simulates the old behavior (no hiding, no change to effects).\n                case REACT_LEGACY_HIDDEN_TYPE:\n                case REACT_DEBUG_TRACING_MODE_TYPE:\n                case REACT_STRICT_MODE_TYPE:\n                case REACT_PROFILER_TYPE:\n                case REACT_FRAGMENT_TYPE:\n                    {\n                        renderNodeDestructive(request, task, null, props.children);\n                        return;\n                    }\n                case REACT_OFFSCREEN_TYPE:\n                    {\n                        renderOffscreen(request, task, props);\n                        return;\n                    }\n                case REACT_SUSPENSE_LIST_TYPE:\n                    {\n                        pushBuiltInComponentStackInDEV(task, \"SuspenseList\"); // TODO: SuspenseList should control the boundaries.\n                        renderNodeDestructive(request, task, null, props.children);\n                        popComponentStackInDEV(task);\n                        return;\n                    }\n                case REACT_SCOPE_TYPE:\n                    {\n                        throw new Error(\"ReactDOMServer does not yet support scope components.\");\n                    }\n                case REACT_SUSPENSE_TYPE:\n                    {\n                        {\n                            renderSuspenseBoundary(request, task, props);\n                        }\n                        return;\n                    }\n            }\n            if (typeof type === \"object\" && type !== null) {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        {\n                            renderForwardRef(request, task, prevThenableState, type, props, ref);\n                            return;\n                        }\n                    case REACT_MEMO_TYPE:\n                        {\n                            renderMemo(request, task, prevThenableState, type, props, ref);\n                            return;\n                        }\n                    case REACT_PROVIDER_TYPE:\n                        {\n                            renderContextProvider(request, task, type, props);\n                            return;\n                        }\n                    case REACT_CONTEXT_TYPE:\n                        {\n                            renderContextConsumer(request, task, type, props);\n                            return;\n                        }\n                    case REACT_LAZY_TYPE:\n                        {\n                            renderLazyComponent(request, task, prevThenableState, type, props);\n                            return;\n                        }\n                }\n            }\n            var info = \"\";\n            {\n                if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                    info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and \" + \"named imports.\";\n                }\n            }\n            throw new Error(\"Element type is invalid: expected a string (for built-in \" + \"components) or a class/function (for composite components) \" + (\"but got: \" + (type == null ? type : typeof type) + \".\" + info));\n        } // $FlowFixMe[missing-local-annot]\n        function validateIterable(iterable, iteratorFn) {\n            {\n                // We don't support rendering Generators because it's a mutation.\n                // See https://github.com/facebook/react/issues/12995\n                if (typeof Symbol === \"function\" && iterable[Symbol.toStringTag] === \"Generator\") {\n                    if (!didWarnAboutGenerators) {\n                        error(\"Using Generators as children is unsupported and will likely yield \" + \"unexpected results because enumerating a generator mutates it. \" + \"You may convert it to an array with `Array.from()` or the \" + \"`[...spread]` operator before rendering. Keep in mind \" + \"you might need to polyfill these features for older browsers.\");\n                    }\n                    didWarnAboutGenerators = true;\n                } // Warn about using Maps as children\n                if (iterable.entries === iteratorFn) {\n                    if (!didWarnAboutMaps) {\n                        error(\"Using Maps as children is not supported. \" + \"Use an array of keyed ReactElements instead.\");\n                    }\n                    didWarnAboutMaps = true;\n                }\n            }\n        }\n        function renderNodeDestructive(request, task, // always null, except when called by retryTask.\n        prevThenableState, node) {\n            {\n                // In Dev we wrap renderNodeDestructiveImpl in a try / catch so we can capture\n                // a component stack at the right place in the tree. We don't do this in renderNode\n                // becuase it is not called at every layer of the tree and we may lose frames\n                try {\n                    return renderNodeDestructiveImpl(request, task, prevThenableState, node);\n                } catch (x) {\n                    if (typeof x === \"object\" && x !== null && typeof x.then === \"function\") ;\n                    else {\n                        // This is an error, stash the component stack if it is null.\n                        lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV();\n                    } // rethrow so normal suspense logic can handle thrown value accordingly\n                    throw x;\n                }\n            }\n        } // This function by it self renders a node and consumes the task by mutating it\n        // to update the current execution state.\n        function renderNodeDestructiveImpl(request, task, prevThenableState, node) {\n            // Stash the node we're working on. We'll pick up from this task in case\n            // something suspends.\n            task.node = node; // Handle object types\n            if (typeof node === \"object\" && node !== null) {\n                switch(node.$$typeof){\n                    case REACT_ELEMENT_TYPE:\n                        {\n                            var element = node;\n                            var type = element.type;\n                            var props = element.props;\n                            var ref = element.ref;\n                            renderElement(request, task, prevThenableState, type, props, ref);\n                            return;\n                        }\n                    case REACT_PORTAL_TYPE:\n                        throw new Error(\"Portals are not currently supported by the server renderer. \" + \"Render them conditionally so that they only appear on the client render.\");\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyNode = node;\n                            var payload = lazyNode._payload;\n                            var init = lazyNode._init;\n                            var resolvedNode;\n                            {\n                                try {\n                                    resolvedNode = init(payload);\n                                } catch (x) {\n                                    if (typeof x === \"object\" && x !== null && typeof x.then === \"function\") {\n                                        // this Lazy initializer is suspending. push a temporary frame onto the stack so it can be\n                                        // popped off in spawnNewSuspendedTask. This aligns stack behavior between Lazy in element position\n                                        // vs Component position. We do not want the frame for Errors so we exclusively do this in\n                                        // the wakeable branch\n                                        pushBuiltInComponentStackInDEV(task, \"Lazy\");\n                                    }\n                                    throw x;\n                                }\n                            }\n                            renderNodeDestructive(request, task, null, resolvedNode);\n                            return;\n                        }\n                }\n                if (isArray(node)) {\n                    renderChildrenArray(request, task, node);\n                    return;\n                }\n                var iteratorFn = getIteratorFn(node);\n                if (iteratorFn) {\n                    {\n                        validateIterable(node, iteratorFn);\n                    }\n                    var iterator = iteratorFn.call(node);\n                    if (iterator) {\n                        // We need to know how many total children are in this set, so that we\n                        // can allocate enough id slots to acommodate them. So we must exhaust\n                        // the iterator before we start recursively rendering the children.\n                        // TODO: This is not great but I think it's inherent to the id\n                        // generation algorithm.\n                        var step = iterator.next(); // If there are not entries, we need to push an empty so we start by checking that.\n                        if (!step.done) {\n                            var children = [];\n                            do {\n                                children.push(step.value);\n                                step = iterator.next();\n                            }while (!step.done);\n                            renderChildrenArray(request, task, children);\n                            return;\n                        }\n                        return;\n                    }\n                } // Usables are a valid React node type. When React encounters a Usable in\n                // a child position, it unwraps it using the same algorithm as `use`. For\n                // example, for promises, React will throw an exception to unwind the\n                // stack, then replay the component once the promise resolves.\n                //\n                // A difference from `use` is that React will keep unwrapping the value\n                // until it reaches a non-Usable type.\n                //\n                // e.g. Usable<Usable<Usable<T>>> should resolve to T\n                var maybeUsable = node;\n                if (typeof maybeUsable.then === \"function\") {\n                    var thenable = maybeUsable;\n                    return renderNodeDestructiveImpl(request, task, null, unwrapThenable(thenable));\n                }\n                if (maybeUsable.$$typeof === REACT_CONTEXT_TYPE || maybeUsable.$$typeof === REACT_SERVER_CONTEXT_TYPE) {\n                    var context = maybeUsable;\n                    return renderNodeDestructiveImpl(request, task, null, readContext$1(context));\n                } // $FlowFixMe[method-unbinding]\n                var childString = Object.prototype.toString.call(node);\n                throw new Error(\"Objects are not valid as a React child (found: \" + (childString === \"[object Object]\" ? \"object with keys {\" + Object.keys(node).join(\", \") + \"}\" : childString) + \"). \" + \"If you meant to render a collection of children, use an array \" + \"instead.\");\n            }\n            if (typeof node === \"string\") {\n                var segment = task.blockedSegment;\n                segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);\n                return;\n            }\n            if (typeof node === \"number\") {\n                var _segment = task.blockedSegment;\n                _segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, \"\" + node, request.responseState, _segment.lastPushedText);\n                return;\n            }\n            {\n                if (typeof node === \"function\") {\n                    error(\"Functions are not valid as a React child. This may happen if \" + \"you return a Component instead of <Component /> from render. \" + \"Or maybe you meant to call this function rather than return it.\");\n                }\n            }\n        }\n        function renderChildrenArray(request, task, children) {\n            var totalChildren = children.length;\n            for(var i = 0; i < totalChildren; i++){\n                var prevTreeContext = task.treeContext;\n                task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i);\n                try {\n                    // We need to use the non-destructive form so that we can safely pop back\n                    // up and render the sibling if something suspends.\n                    renderNode(request, task, children[i]);\n                } finally{\n                    task.treeContext = prevTreeContext;\n                }\n            }\n        }\n        function spawnNewSuspendedTask(request, task, thenableState, x) {\n            // Something suspended, we'll need to create a new segment and resolve it later.\n            var segment = task.blockedSegment;\n            var insertionIndex = segment.chunks.length;\n            var newSegment = createPendingSegment(request, insertionIndex, null, segment.formatContext, segment.lastPushedText, true);\n            segment.children.push(newSegment); // Reset lastPushedText for current Segment since the new Segment \"consumed\" it\n            segment.lastPushedText = false;\n            var newTask = createTask(request, thenableState, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);\n            {\n                if (task.componentStack !== null) {\n                    // We pop one task off the stack because the node that suspended will be tried again,\n                    // which will add it back onto the stack.\n                    newTask.componentStack = task.componentStack.parent;\n                }\n            }\n            var ping = newTask.ping;\n            x.then(ping, ping);\n        } // This is a non-destructive form of rendering a node. If it suspends it spawns\n        // a new task and restores the context of this task to what it was before.\n        function renderNode(request, task, node) {\n            // Store how much we've pushed at this point so we can reset it in case something\n            // suspended partially through writing something.\n            var segment = task.blockedSegment;\n            var childrenLength = segment.children.length;\n            var chunkLength = segment.chunks.length; // Snapshot the current context in case something throws to interrupt the\n            // process.\n            var previousFormatContext = task.blockedSegment.formatContext;\n            var previousLegacyContext = task.legacyContext;\n            var previousContext = task.context;\n            var previousComponentStack = null;\n            {\n                previousComponentStack = task.componentStack;\n            }\n            try {\n                return renderNodeDestructive(request, task, null, node);\n            } catch (thrownValue) {\n                resetHooksState(); // Reset the write pointers to where we started.\n                segment.children.length = childrenLength;\n                segment.chunks.length = chunkLength;\n                var x = thrownValue === SuspenseException ? // reasons, the rest of the Suspense implementation expects the thrown\n                // value to be a thenable, because before `use` existed that was the\n                // (unstable) API for suspending. This implementation detail can change\n                // later, once we deprecate the old API in favor of `use`.\n                getSuspendedThenable() : thrownValue; // $FlowFixMe[method-unbinding]\n                if (typeof x === \"object\" && x !== null && typeof x.then === \"function\") {\n                    var wakeable = x;\n                    var thenableState = getThenableStateAfterSuspending();\n                    spawnNewSuspendedTask(request, task, thenableState, wakeable); // Restore the context. We assume that this will be restored by the inner\n                    // functions in case nothing throws so we don't use \"finally\" here.\n                    task.blockedSegment.formatContext = previousFormatContext;\n                    task.legacyContext = previousLegacyContext;\n                    task.context = previousContext; // Restore all active ReactContexts to what they were before.\n                    switchContext(previousContext);\n                    {\n                        task.componentStack = previousComponentStack;\n                    }\n                    return;\n                } else {\n                    // Restore the context. We assume that this will be restored by the inner\n                    // functions in case nothing throws so we don't use \"finally\" here.\n                    task.blockedSegment.formatContext = previousFormatContext;\n                    task.legacyContext = previousLegacyContext;\n                    task.context = previousContext; // Restore all active ReactContexts to what they were before.\n                    switchContext(previousContext);\n                    {\n                        task.componentStack = previousComponentStack;\n                    }\n                    // Let's terminate the rest of the tree and don't render any siblings.\n                    throw x;\n                }\n            }\n        }\n        function erroredTask(request, boundary, segment, error) {\n            // Report the error to a global handler.\n            var errorDigest = logRecoverableError(request, error);\n            if (boundary === null) {\n                fatalError(request, error);\n            } else {\n                boundary.pendingTasks--;\n                if (!boundary.forceClientRender) {\n                    boundary.forceClientRender = true;\n                    boundary.errorDigest = errorDigest;\n                    {\n                        captureBoundaryErrorDetailsDev(boundary, error);\n                    }\n                    // so we can flush it, if the parent already flushed.\n                    if (boundary.parentFlushed) {\n                        // We don't have a preference where in the queue this goes since it's likely\n                        // to error on the client anyway. However, intentionally client-rendered\n                        // boundaries should be flushed earlier so that they can start on the client.\n                        // We reuse the same queue for errors.\n                        request.clientRenderedBoundaries.push(boundary);\n                    }\n                }\n            }\n            request.allPendingTasks--;\n            if (request.allPendingTasks === 0) {\n                var onAllReady = request.onAllReady;\n                onAllReady();\n            }\n        }\n        function abortTaskSoft(task) {\n            // This aborts task without aborting the parent boundary that it blocks.\n            // It's used for when we didn't need this task to complete the tree.\n            // If task was needed, then it should use abortTask instead.\n            var request = this;\n            var boundary = task.blockedBoundary;\n            var segment = task.blockedSegment;\n            segment.status = ABORTED;\n            finishedTask(request, boundary, segment);\n        }\n        function abortTask(task, request, error) {\n            // This aborts the task and aborts the parent that it blocks, putting it into\n            // client rendered mode.\n            var boundary = task.blockedBoundary;\n            var segment = task.blockedSegment;\n            segment.status = ABORTED;\n            if (boundary === null) {\n                request.allPendingTasks--; // We didn't complete the root so we have nothing to show. We can close\n                // the request;\n                if (request.status !== CLOSING && request.status !== CLOSED) {\n                    logRecoverableError(request, error);\n                    fatalError(request, error);\n                }\n            } else {\n                boundary.pendingTasks--;\n                if (!boundary.forceClientRender) {\n                    boundary.forceClientRender = true;\n                    boundary.errorDigest = request.onError(error);\n                    {\n                        var errorPrefix = \"The server did not finish this Suspense boundary: \";\n                        var errorMessage;\n                        if (error && typeof error.message === \"string\") {\n                            errorMessage = errorPrefix + error.message;\n                        } else {\n                            // eslint-disable-next-line react-internal/safe-string-coercion\n                            errorMessage = errorPrefix + String(error);\n                        }\n                        var previousTaskInDev = currentTaskInDEV;\n                        currentTaskInDEV = task;\n                        try {\n                            captureBoundaryErrorDetailsDev(boundary, errorMessage);\n                        } finally{\n                            currentTaskInDEV = previousTaskInDev;\n                        }\n                    }\n                    if (boundary.parentFlushed) {\n                        request.clientRenderedBoundaries.push(boundary);\n                    }\n                } // If this boundary was still pending then we haven't already cancelled its fallbacks.\n                // We'll need to abort the fallbacks, which will also error that parent boundary.\n                boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {\n                    return abortTask(fallbackTask, request, error);\n                });\n                boundary.fallbackAbortableTasks.clear();\n                request.allPendingTasks--;\n                if (request.allPendingTasks === 0) {\n                    var onAllReady = request.onAllReady;\n                    onAllReady();\n                }\n            }\n        }\n        function queueCompletedSegment(boundary, segment) {\n            if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {\n                // This is an empty segment. There's nothing to write, so we can instead transfer the ID\n                // to the child. That way any existing references point to the child.\n                var childSegment = segment.children[0];\n                childSegment.id = segment.id;\n                childSegment.parentFlushed = true;\n                if (childSegment.status === COMPLETED) {\n                    queueCompletedSegment(boundary, childSegment);\n                }\n            } else {\n                var completedSegments = boundary.completedSegments;\n                completedSegments.push(segment);\n            }\n        }\n        function finishedTask(request, boundary, segment) {\n            if (boundary === null) {\n                if (segment.parentFlushed) {\n                    if (request.completedRootSegment !== null) {\n                        throw new Error(\"There can only be one root segment. This is a bug in React.\");\n                    }\n                    request.completedRootSegment = segment;\n                }\n                request.pendingRootTasks--;\n                if (request.pendingRootTasks === 0) {\n                    // We have completed the shell so the shell can't error anymore.\n                    request.onShellError = noop;\n                    var onShellReady = request.onShellReady;\n                    onShellReady();\n                }\n            } else {\n                boundary.pendingTasks--;\n                if (boundary.forceClientRender) ;\n                else if (boundary.pendingTasks === 0) {\n                    // This must have been the last segment we were waiting on. This boundary is now complete.\n                    if (segment.parentFlushed) {\n                        // Our parent segment already flushed, so we need to schedule this segment to be emitted.\n                        // If it is a segment that was aborted, we'll write other content instead so we don't need\n                        // to emit it.\n                        if (segment.status === COMPLETED) {\n                            queueCompletedSegment(boundary, segment);\n                        }\n                    }\n                    if (boundary.parentFlushed) {\n                        // The segment might be part of a segment that didn't flush yet, but if the boundary's\n                        // parent flushed, we need to schedule the boundary to be emitted.\n                        request.completedBoundaries.push(boundary);\n                    } // We can now cancel any pending task on the fallback since we won't need to show it anymore.\n                    // This needs to happen after we read the parentFlushed flags because aborting can finish\n                    // work which can trigger user code, which can start flushing, which can change those flags.\n                    boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);\n                    boundary.fallbackAbortableTasks.clear();\n                } else {\n                    if (segment.parentFlushed) {\n                        // Our parent already flushed, so we need to schedule this segment to be emitted.\n                        // If it is a segment that was aborted, we'll write other content instead so we don't need\n                        // to emit it.\n                        if (segment.status === COMPLETED) {\n                            queueCompletedSegment(boundary, segment);\n                            var completedSegments = boundary.completedSegments;\n                            if (completedSegments.length === 1) {\n                                // This is the first time since we last flushed that we completed anything.\n                                // We can schedule this boundary to emit its partially completed segments early\n                                // in case the parent has already been flushed.\n                                if (boundary.parentFlushed) {\n                                    request.partialBoundaries.push(boundary);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            request.allPendingTasks--;\n            if (request.allPendingTasks === 0) {\n                // This needs to be called at the very end so that we can synchronously write the result\n                // in the callback if needed.\n                var onAllReady = request.onAllReady;\n                onAllReady();\n            }\n        }\n        function retryTask(request, task) {\n            {\n                var blockedBoundary = task.blockedBoundary;\n                setCurrentlyRenderingBoundaryResourcesTarget(request.resources, blockedBoundary ? blockedBoundary.resources : null);\n            }\n            var segment = task.blockedSegment;\n            if (segment.status !== PENDING) {\n                // We completed this by other means before we had a chance to retry it.\n                return;\n            } // We restore the context to what it was when we suspended.\n            // We don't restore it after we leave because it's likely that we'll end up\n            // needing a very similar context soon again.\n            switchContext(task.context);\n            var prevTaskInDEV = null;\n            {\n                prevTaskInDEV = currentTaskInDEV;\n                currentTaskInDEV = task;\n            }\n            var childrenLength = segment.children.length;\n            var chunkLength = segment.chunks.length;\n            try {\n                // We call the destructive form that mutates this task. That way if something\n                // suspends again, we can reuse the same task instead of spawning a new one.\n                // Reset the task's thenable state before continuing, so that if a later\n                // component suspends we can reuse the same task object. If the same\n                // component suspends again, the thenable state will be restored.\n                var prevThenableState = task.thenableState;\n                task.thenableState = null;\n                renderNodeDestructive(request, task, prevThenableState, task.node);\n                pushSegmentFinale(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded);\n                task.abortSet.delete(task);\n                segment.status = COMPLETED;\n                finishedTask(request, task.blockedBoundary, segment);\n            } catch (thrownValue) {\n                resetHooksState(); // Reset the write pointers to where we started.\n                segment.children.length = childrenLength;\n                segment.chunks.length = chunkLength;\n                var x = thrownValue === SuspenseException ? // reasons, the rest of the Suspense implementation expects the thrown\n                // value to be a thenable, because before `use` existed that was the\n                // (unstable) API for suspending. This implementation detail can change\n                // later, once we deprecate the old API in favor of `use`.\n                getSuspendedThenable() : thrownValue; // $FlowFixMe[method-unbinding]\n                if (typeof x === \"object\" && x !== null && typeof x.then === \"function\") {\n                    // Something suspended again, let's pick it back up later.\n                    var ping = task.ping;\n                    x.then(ping, ping);\n                    task.thenableState = getThenableStateAfterSuspending();\n                } else {\n                    task.abortSet.delete(task);\n                    segment.status = ERRORED;\n                    erroredTask(request, task.blockedBoundary, segment, x);\n                }\n            } finally{\n                {\n                    setCurrentlyRenderingBoundaryResourcesTarget(request.resources, null);\n                }\n                {\n                    currentTaskInDEV = prevTaskInDEV;\n                }\n            }\n        }\n        function performWork(request) {\n            if (request.status === CLOSED) {\n                return;\n            }\n            var prevContext = getActiveContext();\n            var prevDispatcher = ReactCurrentDispatcher.current;\n            ReactCurrentDispatcher.current = HooksDispatcher;\n            var prevCacheDispatcher;\n            {\n                prevCacheDispatcher = ReactCurrentCache.current;\n                ReactCurrentCache.current = DefaultCacheDispatcher;\n            }\n            var prevRequest = currentRequest;\n            currentRequest = request;\n            var prevGetCurrentStackImpl;\n            {\n                prevGetCurrentStackImpl = ReactDebugCurrentFrame.getCurrentStack;\n                ReactDebugCurrentFrame.getCurrentStack = getCurrentStackInDEV;\n            }\n            var prevResponseState = currentResponseState;\n            setCurrentResponseState(request.responseState);\n            try {\n                var pingedTasks = request.pingedTasks;\n                var i;\n                for(i = 0; i < pingedTasks.length; i++){\n                    var task = pingedTasks[i];\n                    retryTask(request, task);\n                }\n                pingedTasks.splice(0, i);\n                if (request.destination !== null) {\n                    flushCompletedQueues(request, request.destination);\n                }\n            } catch (error) {\n                logRecoverableError(request, error);\n                fatalError(request, error);\n            } finally{\n                setCurrentResponseState(prevResponseState);\n                ReactCurrentDispatcher.current = prevDispatcher;\n                {\n                    ReactCurrentCache.current = prevCacheDispatcher;\n                }\n                {\n                    ReactDebugCurrentFrame.getCurrentStack = prevGetCurrentStackImpl;\n                }\n                if (prevDispatcher === HooksDispatcher) {\n                    // This means that we were in a reentrant work loop. This could happen\n                    // in a renderer that supports synchronous work like renderToString,\n                    // when it's called from within another renderer.\n                    // Normally we don't bother switching the contexts to their root/default\n                    // values when leaving because we'll likely need the same or similar\n                    // context again. However, when we're inside a synchronous loop like this\n                    // we'll to restore the context to what it was before returning.\n                    switchContext(prevContext);\n                }\n                currentRequest = prevRequest;\n            }\n        }\n        function flushSubtree(request, destination, segment) {\n            segment.parentFlushed = true;\n            switch(segment.status){\n                case PENDING:\n                    {\n                        // We're emitting a placeholder for this segment to be filled in later.\n                        // Therefore we'll need to assign it an ID - to refer to it by.\n                        var segmentID = segment.id = request.nextSegmentId++; // When this segment finally completes it won't be embedded in text since it will flush separately\n                        segment.lastPushedText = false;\n                        segment.textEmbedded = false;\n                        return writePlaceholder(destination, request.responseState, segmentID);\n                    }\n                case COMPLETED:\n                    {\n                        segment.status = FLUSHED;\n                        var r = true;\n                        var chunks = segment.chunks;\n                        var chunkIdx = 0;\n                        var children = segment.children;\n                        for(var childIdx = 0; childIdx < children.length; childIdx++){\n                            var nextChild = children[childIdx]; // Write all the chunks up until the next child.\n                            for(; chunkIdx < nextChild.index; chunkIdx++){\n                                writeChunk(destination, chunks[chunkIdx]);\n                            }\n                            r = flushSegment(request, destination, nextChild);\n                        } // Finally just write all the remaining chunks\n                        for(; chunkIdx < chunks.length - 1; chunkIdx++){\n                            writeChunk(destination, chunks[chunkIdx]);\n                        }\n                        if (chunkIdx < chunks.length) {\n                            r = writeChunkAndReturn(destination, chunks[chunkIdx]);\n                        }\n                        return r;\n                    }\n                default:\n                    {\n                        throw new Error(\"Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.\");\n                    }\n            }\n        }\n        function flushSegment(request, destination, segment) {\n            var boundary = segment.boundary;\n            if (boundary === null) {\n                // Not a suspense boundary.\n                return flushSubtree(request, destination, segment);\n            }\n            boundary.parentFlushed = true; // This segment is a Suspense boundary. We need to decide whether to\n            // emit the content or the fallback now.\n            if (boundary.forceClientRender) {\n                // Emit a client rendered suspense boundary wrapper.\n                // We never queue the inner boundary so we'll never emit its content or partial segments.\n                writeStartClientRenderedSuspenseBoundary(destination, request.responseState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack); // Flush the fallback.\n                flushSubtree(request, destination, segment);\n                return writeEndClientRenderedSuspenseBoundary(destination, request.responseState);\n            } else if (boundary.pendingTasks > 0) {\n                // This boundary is still loading. Emit a pending suspense boundary wrapper.\n                // Assign an ID to refer to the future content by.\n                boundary.rootSegmentID = request.nextSegmentId++;\n                if (boundary.completedSegments.length > 0) {\n                    // If this is at least partially complete, we can queue it to be partially emitted early.\n                    request.partialBoundaries.push(boundary);\n                } /// This is the first time we should have referenced this ID.\n                var id = boundary.id = assignSuspenseBoundaryID(request.responseState);\n                writeStartPendingSuspenseBoundary(destination, request.responseState, id); // Flush the fallback.\n                flushSubtree(request, destination, segment);\n                return writeEndPendingSuspenseBoundary(destination);\n            } else if (boundary.byteSize > request.progressiveChunkSize) {\n                // This boundary is large and will be emitted separately so that we can progressively show\n                // other content. We add it to the queue during the flush because we have to ensure that\n                // the parent flushes first so that there's something to inject it into.\n                // We also have to make sure that it's emitted into the queue in a deterministic slot.\n                // I.e. we can't insert it here when it completes.\n                // Assign an ID to refer to the future content by.\n                boundary.rootSegmentID = request.nextSegmentId++;\n                request.completedBoundaries.push(boundary); // Emit a pending rendered suspense boundary wrapper.\n                writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id); // Flush the fallback.\n                flushSubtree(request, destination, segment);\n                return writeEndPendingSuspenseBoundary(destination);\n            } else {\n                {\n                    hoistResources(request.resources, boundary.resources);\n                }\n                writeStartCompletedSuspenseBoundary(destination, request.responseState);\n                var completedSegments = boundary.completedSegments;\n                if (completedSegments.length !== 1) {\n                    throw new Error(\"A previously unvisited boundary must have exactly one root segment. This is a bug in React.\");\n                }\n                var contentSegment = completedSegments[0];\n                flushSegment(request, destination, contentSegment);\n                return writeEndCompletedSuspenseBoundary(destination, request.responseState);\n            }\n        }\n        function flushClientRenderedBoundary(request, destination, boundary) {\n            return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);\n        }\n        function flushSegmentContainer(request, destination, segment) {\n            writeStartSegment(destination, request.responseState, segment.formatContext, segment.id);\n            flushSegment(request, destination, segment);\n            return writeEndSegment(destination, segment.formatContext);\n        }\n        function flushCompletedBoundary(request, destination, boundary) {\n            {\n                setCurrentlyRenderingBoundaryResourcesTarget(request.resources, boundary.resources);\n            }\n            var completedSegments = boundary.completedSegments;\n            var i = 0;\n            for(; i < completedSegments.length; i++){\n                var segment = completedSegments[i];\n                flushPartiallyCompletedSegment(request, destination, boundary, segment);\n            }\n            completedSegments.length = 0;\n            {\n                writeResourcesForBoundary(destination, boundary.resources, request.responseState);\n            }\n            return writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID, boundary.resources);\n        }\n        function flushPartialBoundary(request, destination, boundary) {\n            {\n                setCurrentlyRenderingBoundaryResourcesTarget(request.resources, boundary.resources);\n            }\n            var completedSegments = boundary.completedSegments;\n            var i = 0;\n            for(; i < completedSegments.length; i++){\n                var segment = completedSegments[i];\n                if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {\n                    i++;\n                    completedSegments.splice(0, i); // Only write as much as the buffer wants. Something higher priority\n                    // might want to write later.\n                    return false;\n                }\n            }\n            completedSegments.splice(0, i);\n            {\n                // The way this is structured we only write resources for partial boundaries\n                // if there is no backpressure. Later before we complete the boundary we\n                // will write resources regardless of backpressure before we emit the\n                // completion instruction\n                return writeResourcesForBoundary(destination, boundary.resources, request.responseState);\n            }\n        }\n        function flushPartiallyCompletedSegment(request, destination, boundary, segment) {\n            if (segment.status === FLUSHED) {\n                // We've already flushed this inline.\n                return true;\n            }\n            var segmentID = segment.id;\n            if (segmentID === -1) {\n                // This segment wasn't previously referred to. This happens at the root of\n                // a boundary. We make kind of a leap here and assume this is the root.\n                var rootSegmentID = segment.id = boundary.rootSegmentID;\n                if (rootSegmentID === -1) {\n                    throw new Error(\"A root segment ID must have been assigned by now. This is a bug in React.\");\n                }\n                return flushSegmentContainer(request, destination, segment);\n            } else {\n                flushSegmentContainer(request, destination, segment);\n                return writeCompletedSegmentInstruction(destination, request.responseState, segmentID);\n            }\n        }\n        function flushCompletedQueues(request, destination) {\n            try {\n                // The structure of this is to go through each queue one by one and write\n                // until the sink tells us to stop. When we should stop, we still finish writing\n                // that item fully and then yield. At that point we remove the already completed\n                // items up until the point we completed them.\n                var i;\n                var completedRootSegment = request.completedRootSegment;\n                if (completedRootSegment !== null) {\n                    if (request.pendingRootTasks === 0) {\n                        if (enableFloat) {\n                            writePreamble(destination, request.resources, request.responseState, request.allPendingTasks === 0);\n                        }\n                        flushSegment(request, destination, completedRootSegment);\n                        request.completedRootSegment = null;\n                        writeCompletedRoot(destination, request.responseState);\n                    } else {\n                        // We haven't flushed the root yet so we don't need to check any other branches further down\n                        return;\n                    }\n                } else if (request.pendingRootTasks > 0) {\n                    // We have not yet flushed the root segment so we early return\n                    return;\n                }\n                if (enableFloat) {\n                    writeHoistables(destination, request.resources, request.responseState);\n                } // We emit client rendering instructions for already emitted boundaries first.\n                // This is so that we can signal to the client to start client rendering them as\n                // soon as possible.\n                var clientRenderedBoundaries = request.clientRenderedBoundaries;\n                for(i = 0; i < clientRenderedBoundaries.length; i++){\n                    var boundary = clientRenderedBoundaries[i];\n                    if (!flushClientRenderedBoundary(request, destination, boundary)) {\n                        request.destination = null;\n                        i++;\n                        clientRenderedBoundaries.splice(0, i);\n                        return;\n                    }\n                }\n                clientRenderedBoundaries.splice(0, i); // Next we emit any complete boundaries. It's better to favor boundaries\n                // that are completely done since we can actually show them, than it is to emit\n                // any individual segments from a partially complete boundary.\n                var completedBoundaries = request.completedBoundaries;\n                for(i = 0; i < completedBoundaries.length; i++){\n                    var _boundary = completedBoundaries[i];\n                    if (!flushCompletedBoundary(request, destination, _boundary)) {\n                        request.destination = null;\n                        i++;\n                        completedBoundaries.splice(0, i);\n                        return;\n                    }\n                }\n                completedBoundaries.splice(0, i); // Allow anything written so far to flush to the underlying sink before\n                // we continue with lower priorities.\n                completeWriting(destination);\n                beginWriting(destination); // TODO: Here we'll emit data used by hydration.\n                // Next we emit any segments of any boundaries that are partially complete\n                // but not deeply complete.\n                var partialBoundaries = request.partialBoundaries;\n                for(i = 0; i < partialBoundaries.length; i++){\n                    var _boundary2 = partialBoundaries[i];\n                    if (!flushPartialBoundary(request, destination, _boundary2)) {\n                        request.destination = null;\n                        i++;\n                        partialBoundaries.splice(0, i);\n                        return;\n                    }\n                }\n                partialBoundaries.splice(0, i); // Next we check the completed boundaries again. This may have had\n                // boundaries added to it in case they were too larged to be inlined.\n                // New ones might be added in this loop.\n                var largeBoundaries = request.completedBoundaries;\n                for(i = 0; i < largeBoundaries.length; i++){\n                    var _boundary3 = largeBoundaries[i];\n                    if (!flushCompletedBoundary(request, destination, _boundary3)) {\n                        request.destination = null;\n                        i++;\n                        largeBoundaries.splice(0, i);\n                        return;\n                    }\n                }\n                largeBoundaries.splice(0, i);\n            } finally{\n                if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0 // We don't need to check any partially completed segments because\n                ) {\n                    request.flushScheduled = false;\n                    {\n                        writePostamble(destination, request.responseState);\n                    }\n                    {\n                        if (request.abortableTasks.size !== 0) {\n                            error(\"There was still abortable task at the root when we closed. This is a bug in React.\");\n                        }\n                    }\n                    close(destination);\n                }\n            }\n        }\n        function startWork(request) {\n            request.flushScheduled = request.destination !== null;\n            {\n                scheduleWork(function() {\n                    return performWork(request);\n                });\n            }\n        }\n        function enqueueFlush(request) {\n            if (request.flushScheduled === false && // If there are pinged tasks we are going to flush anyway after work completes\n            request.pingedTasks.length === 0 && // If there is no destination there is nothing we can flush to. A flush will\n            // happen when we start flowing again\n            request.destination !== null) {\n                var destination = request.destination;\n                request.flushScheduled = true;\n                scheduleWork(function() {\n                    return flushCompletedQueues(request, destination);\n                });\n            }\n        }\n        function startFlowing(request, destination) {\n            if (request.status === CLOSING) {\n                request.status = CLOSED;\n                closeWithError(destination, request.fatalError);\n                return;\n            }\n            if (request.status === CLOSED) {\n                return;\n            }\n            if (request.destination !== null) {\n                // We're already flowing.\n                return;\n            }\n            request.destination = destination;\n            try {\n                flushCompletedQueues(request, destination);\n            } catch (error) {\n                logRecoverableError(request, error);\n                fatalError(request, error);\n            }\n        } // This is called to early terminate a request. It puts all pending boundaries in client rendered state.\n        function abort(request, reason) {\n            try {\n                var abortableTasks = request.abortableTasks;\n                if (abortableTasks.size > 0) {\n                    var error = reason === undefined ? new Error(\"The render was aborted by the server without a reason.\") : reason;\n                    abortableTasks.forEach(function(task) {\n                        return abortTask(task, request, error);\n                    });\n                    abortableTasks.clear();\n                }\n                if (request.destination !== null) {\n                    flushCompletedQueues(request, request.destination);\n                }\n            } catch (error) {\n                logRecoverableError(request, error);\n                fatalError(request, error);\n            }\n        }\n        function flushResources(request) {\n            enqueueFlush(request);\n        }\n        function getResources(request) {\n            return request.resources;\n        }\n        function onError$1() {}\n        function renderToStringImpl(children, options, generateStaticMarkup, abortReason, unstable_externalRuntimeSrc) {\n            var didFatal = false;\n            var fatalError = null;\n            var result = \"\";\n            var destination = {\n                // $FlowFixMe[missing-local-annot]\n                push: function(chunk) {\n                    if (chunk !== null) {\n                        result += chunk;\n                    }\n                    return true;\n                },\n                // $FlowFixMe[missing-local-annot]\n                destroy: function(error) {\n                    didFatal = true;\n                    fatalError = error;\n                }\n            };\n            var readyToStream = false;\n            function onShellReady() {\n                readyToStream = true;\n            }\n            var resources = createResources();\n            var request = createRequest(children, resources, createResponseState(resources, generateStaticMarkup, options ? options.identifierPrefix : undefined, unstable_externalRuntimeSrc), createRootFormatContext(), Infinity, onError$1, undefined, onShellReady, undefined, undefined);\n            startWork(request); // If anything suspended and is still pending, we'll abort it before writing.\n            // That way we write only client-rendered boundaries from the start.\n            abort(request, abortReason);\n            startFlowing(request, destination);\n            if (didFatal && fatalError !== abortReason) {\n                throw fatalError;\n            }\n            if (!readyToStream) {\n                // Note: This error message is the one we use on the client. It doesn't\n                // really make sense here. But this is the legacy server renderer, anyway.\n                // We're going to delete it soon.\n                throw new Error(\"A component suspended while responding to synchronous input. This \" + \"will cause the UI to be replaced with a loading indicator. To fix, \" + \"updates that suspend should be wrapped with startTransition.\");\n            }\n            return result;\n        }\n        var ReactMarkupReadableStream = /*#__PURE__*/ function(_Readable) {\n            _inheritsLoose(ReactMarkupReadableStream, _Readable);\n            function ReactMarkupReadableStream() {\n                var _this;\n                // Calls the stream.Readable(options) constructor. Consider exposing built-in\n                // features like highWaterMark in the future.\n                _this = _Readable.call(this, {}) || this;\n                _this.request = void 0;\n                _this.startedFlowing = void 0;\n                _this.request = null;\n                _this.startedFlowing = false;\n                return _this;\n            } // $FlowFixMe[missing-local-annot]\n            var _proto = ReactMarkupReadableStream.prototype;\n            _proto._destroy = function _destroy(err, callback) {\n                abort(this.request);\n                callback(err);\n            } // $FlowFixMe[missing-local-annot]\n            ;\n            _proto._read = function _read(size) {\n                if (this.startedFlowing) {\n                    startFlowing(this.request, this);\n                }\n            };\n            return ReactMarkupReadableStream;\n        }(stream.Readable);\n        function onError() {}\n        function renderToNodeStreamImpl(children, options, generateStaticMarkup) {\n            function onAllReady() {\n                // We wait until everything has loaded before starting to write.\n                // That way we only end up with fully resolved HTML even if we suspend.\n                destination.startedFlowing = true;\n                startFlowing(request, destination);\n            }\n            var destination = new ReactMarkupReadableStream();\n            var resources = createResources();\n            var request = createRequest(children, resources, createResponseState(resources, false, options ? options.identifierPrefix : undefined), createRootFormatContext(), Infinity, onError, onAllReady, undefined, undefined);\n            destination.request = request;\n            startWork(request);\n            return destination;\n        }\n        function renderToNodeStream(children, options) {\n            {\n                error(\"renderToNodeStream is deprecated. Use renderToPipeableStream instead.\");\n            }\n            return renderToNodeStreamImpl(children, options);\n        }\n        function renderToStaticNodeStream(children, options) {\n            return renderToNodeStreamImpl(children, options);\n        }\n        function renderToString(children, options) {\n            return renderToStringImpl(children, options, false, 'The server used \"renderToString\" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to \"renderToPipeableStream\" which supports Suspense on the server');\n        }\n        function renderToStaticMarkup(children, options) {\n            return renderToStringImpl(children, options, true, 'The server used \"renderToStaticMarkup\" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to \"renderToPipeableStream\" which supports Suspense on the server');\n        }\n        exports.renderToNodeStream = renderToNodeStream;\n        exports.renderToStaticMarkup = renderToStaticMarkup;\n        exports.renderToStaticNodeStream = renderToStaticNodeStream;\n        exports.renderToString = renderToString;\n        exports.version = ReactVersion;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server-legacy.node.development.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server-rendering-stub.development.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server-rendering-stub.development.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * @license React\n * react-dom-server-rendering-stub.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var ReactVersion = \"18.3.0-canary-1a001dac6-20230812\";\n        var Internals = {\n            usingClientEntryPoint: false,\n            Events: null,\n            Dispatcher: {\n                current: null\n            }\n        };\n        var Dispatcher = Internals.Dispatcher;\n        function prefetchDNS(href) {\n            var passedOptionArg;\n            {\n                if (arguments[1] !== undefined) {\n                    passedOptionArg = arguments[1];\n                }\n            }\n            var dispatcher = Dispatcher.current;\n            if (dispatcher) {\n                {\n                    if (passedOptionArg !== undefined) {\n                        // prefetchDNS will warn if you pass reserved options arg. We pass it along in Dev only to\n                        // elicit the warning. In prod we do not forward since it is not a part of the interface.\n                        // @TODO move all arg validation into this file. It needs to be universal anyway so may as well lock down the interace here and\n                        // let the rest of the codebase trust the types\n                        dispatcher.prefetchDNS(href, passedOptionArg);\n                    } else {\n                        dispatcher.prefetchDNS(href);\n                    }\n                }\n            } // We don't error because preconnect needs to be resilient to being called in a variety of scopes\n        // and the runtime may not be capable of responding. The function is optimistic and not critical\n        // so we favor silent bailout over warning or erroring.\n        }\n        function preconnect(href, options) {\n            var dispatcher = Dispatcher.current;\n            if (dispatcher) {\n                dispatcher.preconnect(href, options);\n            } // We don't error because preconnect needs to be resilient to being called in a variety of scopes\n        // and the runtime may not be capable of responding. The function is optimistic and not critical\n        // so we favor silent bailout over warning or erroring.\n        }\n        function preload(href, options) {\n            var dispatcher = Dispatcher.current;\n            if (dispatcher) {\n                dispatcher.preload(href, options);\n            } // We don't error because preload needs to be resilient to being called in a variety of scopes\n        // and the runtime may not be capable of responding. The function is optimistic and not critical\n        // so we favor silent bailout over warning or erroring.\n        }\n        function preinit(href, options) {\n            var dispatcher = Dispatcher.current;\n            if (dispatcher) {\n                dispatcher.preinit(href, options);\n            } // We don't error because preinit needs to be resilient to being called in a variety of scopes\n        // and the runtime may not be capable of responding. The function is optimistic and not critical\n        // so we favor silent bailout over warning or erroring.\n        }\n        function useFormStatus() {\n            {\n                throw new Error(\"Not implemented.\");\n            }\n        }\n        function createPortal() {\n            throw new Error(\"createPortal was called on the server. Portals are not currently\" + \" supported on the server. Update your program to conditionally call\" + \" createPortal on the client only.\");\n        }\n        function flushSync() {\n            throw new Error(\"flushSync was called on the server. This is likely caused by a\" + \" function being called during render or in module scope that was\" + \" intended to be called from an effect or event handler. Update your\" + \" to not call flushSync no the server.\");\n        } // on the server we just call the callback because there is\n        // not update mechanism. Really this should not be called on the\n        // server but since the semantics are generally clear enough we\n        // can provide this trivial implementation.\n        function batchedUpdates(fn, a) {\n            return fn(a);\n        }\n        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;\n        exports.createPortal = createPortal;\n        exports.experimental_useFormStatus = useFormStatus;\n        exports.flushSync = flushSync;\n        exports.preconnect = preconnect;\n        exports.prefetchDNS = prefetchDNS;\n        exports.preinit = preinit;\n        exports.preload = preload;\n        exports.unstable_batchedUpdates = batchedUpdates;\n        exports.version = ReactVersion;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server-rendering-stub.development.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server.node.development.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server.node.development.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * @license React\n * react-dom-server.node.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var React = __webpack_require__(/*! next/dist/compiled/react */ \"(rsc)/./node_modules/next/dist/compiled/react/index.js\");\n        var util = __webpack_require__(/*! util */ \"util\");\n        var async_hooks = __webpack_require__(/*! async_hooks */ \"async_hooks\");\n        var ReactDOM = __webpack_require__(/*! react-dom */ \"(rsc)/./node_modules/next/dist/compiled/react-dom/server-rendering-stub.js\");\n        var ReactVersion = \"18.3.0-canary-1a001dac6-20230812\";\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        // by calls to these methods by a Babel plugin.\n        //\n        // In PROD (or in packages without access to React internals),\n        // they are left as they are instead.\n        function warn(format) {\n            {\n                {\n                    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                        args[_key - 1] = arguments[_key];\n                    }\n                    printWarning(\"warn\", format, args);\n                }\n            }\n        }\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        function scheduleWork(callback) {\n            setImmediate(callback);\n        }\n        function flushBuffered(destination) {\n            // If we don't have any more data to send right now.\n            // Flush whatever is in the buffer to the wire.\n            if (typeof destination.flush === \"function\") {\n                // By convention the Zlib streams provide a flush function for this purpose.\n                // For Express, compression middleware adds this method.\n                destination.flush();\n            }\n        }\n        var VIEW_SIZE = 2048;\n        var currentView = null;\n        var writtenBytes = 0;\n        var destinationHasCapacity$1 = true;\n        function beginWriting(destination) {\n            currentView = new Uint8Array(VIEW_SIZE);\n            writtenBytes = 0;\n            destinationHasCapacity$1 = true;\n        }\n        function writeStringChunk(destination, stringChunk) {\n            if (stringChunk.length === 0) {\n                return;\n            } // maximum possible view needed to encode entire string\n            if (stringChunk.length * 3 > VIEW_SIZE) {\n                if (writtenBytes > 0) {\n                    writeToDestination(destination, currentView.subarray(0, writtenBytes));\n                    currentView = new Uint8Array(VIEW_SIZE);\n                    writtenBytes = 0;\n                }\n                writeToDestination(destination, textEncoder.encode(stringChunk));\n                return;\n            }\n            var target = currentView;\n            if (writtenBytes > 0) {\n                target = currentView.subarray(writtenBytes);\n            }\n            var _textEncoder$encodeIn = textEncoder.encodeInto(stringChunk, target), read = _textEncoder$encodeIn.read, written = _textEncoder$encodeIn.written;\n            writtenBytes += written;\n            if (read < stringChunk.length) {\n                writeToDestination(destination, currentView.subarray(0, writtenBytes));\n                currentView = new Uint8Array(VIEW_SIZE);\n                writtenBytes = textEncoder.encodeInto(stringChunk.slice(read), currentView).written;\n            }\n            if (writtenBytes === VIEW_SIZE) {\n                writeToDestination(destination, currentView);\n                currentView = new Uint8Array(VIEW_SIZE);\n                writtenBytes = 0;\n            }\n        }\n        function writeViewChunk(destination, chunk) {\n            if (chunk.byteLength === 0) {\n                return;\n            }\n            if (chunk.byteLength > VIEW_SIZE) {\n                {\n                    if (precomputedChunkSet && precomputedChunkSet.has(chunk)) {\n                        error(\"A large precomputed chunk was passed to writeChunk without being copied.\" + \" Large chunks get enqueued directly and are not copied. This is incompatible with precomputed chunks because you cannot enqueue the same precomputed chunk twice.\" + ' Use \"cloneChunk\" to make a copy of this large precomputed chunk before writing it. This is a bug in React.');\n                    }\n                }\n                // one that is cached by the streaming renderer. We will enqueu\n                // it directly and expect it is not re-used\n                if (writtenBytes > 0) {\n                    writeToDestination(destination, currentView.subarray(0, writtenBytes));\n                    currentView = new Uint8Array(VIEW_SIZE);\n                    writtenBytes = 0;\n                }\n                writeToDestination(destination, chunk);\n                return;\n            }\n            var bytesToWrite = chunk;\n            var allowableBytes = currentView.length - writtenBytes;\n            if (allowableBytes < bytesToWrite.byteLength) {\n                // this chunk would overflow the current view. We enqueue a full view\n                // and start a new view with the remaining chunk\n                if (allowableBytes === 0) {\n                    // the current view is already full, send it\n                    writeToDestination(destination, currentView);\n                } else {\n                    // fill up the current view and apply the remaining chunk bytes\n                    // to a new view.\n                    currentView.set(bytesToWrite.subarray(0, allowableBytes), writtenBytes);\n                    writtenBytes += allowableBytes;\n                    writeToDestination(destination, currentView);\n                    bytesToWrite = bytesToWrite.subarray(allowableBytes);\n                }\n                currentView = new Uint8Array(VIEW_SIZE);\n                writtenBytes = 0;\n            }\n            currentView.set(bytesToWrite, writtenBytes);\n            writtenBytes += bytesToWrite.byteLength;\n            if (writtenBytes === VIEW_SIZE) {\n                writeToDestination(destination, currentView);\n                currentView = new Uint8Array(VIEW_SIZE);\n                writtenBytes = 0;\n            }\n        }\n        function writeChunk(destination, chunk) {\n            if (typeof chunk === \"string\") {\n                writeStringChunk(destination, chunk);\n            } else {\n                writeViewChunk(destination, chunk);\n            }\n        }\n        function writeToDestination(destination, view) {\n            var currentHasCapacity = destination.write(view);\n            destinationHasCapacity$1 = destinationHasCapacity$1 && currentHasCapacity;\n        }\n        function writeChunkAndReturn(destination, chunk) {\n            writeChunk(destination, chunk);\n            return destinationHasCapacity$1;\n        }\n        function completeWriting(destination) {\n            if (currentView && writtenBytes > 0) {\n                destination.write(currentView.subarray(0, writtenBytes));\n            }\n            currentView = null;\n            writtenBytes = 0;\n            destinationHasCapacity$1 = true;\n        }\n        function close(destination) {\n            destination.end();\n        }\n        var textEncoder = new util.TextEncoder();\n        function stringToChunk(content) {\n            return content;\n        }\n        var precomputedChunkSet = new Set();\n        function stringToPrecomputedChunk(content) {\n            var precomputedChunk = textEncoder.encode(content);\n            {\n                if (precomputedChunkSet) {\n                    precomputedChunkSet.add(precomputedChunk);\n                }\n            }\n            return precomputedChunk;\n        }\n        function clonePrecomputedChunk(precomputedChunk) {\n            return precomputedChunk.length > VIEW_SIZE ? precomputedChunk.slice() : precomputedChunk;\n        }\n        function closeWithError(destination, error) {\n            // $FlowFixMe[incompatible-call]: This is an Error object or the destination accepts other types.\n            destination.destroy(error);\n        }\n        function _defineProperty(obj, key, value) {\n            if (key in obj) {\n                Object.defineProperty(obj, key, {\n                    value: value,\n                    enumerable: true,\n                    configurable: true,\n                    writable: true\n                });\n            } else {\n                obj[key] = value;\n            }\n            return obj;\n        }\n        var assign = Object.assign;\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkAttributeStringCoercion(value, attributeName) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided `%s` attribute is an unsupported type %s.\" + \" This value must be coerced to a string before before using it here.\", attributeName, typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        function checkCSSPropertyStringCoercion(value, propName) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided `%s` CSS property is an unsupported type %s.\" + \" This value must be coerced to a string before before using it here.\", propName, typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        function checkHtmlStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided HTML markup uses a value of unsupported type %s.\" + \" This value must be coerced to a string before before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        // -----------------------------------------------------------------------------\n        var enableFloat = true; // Enables unstable_useMemoCache hook, intended as a compilation target for\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        /* eslint-disable max-len */ var ATTRIBUTE_NAME_START_CHAR = \":A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n        /* eslint-enable max-len */ var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + \"\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp(\"^[\" + ATTRIBUTE_NAME_START_CHAR + \"][\" + ATTRIBUTE_NAME_CHAR + \"]*$\");\n        var illegalAttributeNameCache = {};\n        var validatedAttributeNameCache = {};\n        function isAttributeNameSafe(attributeName) {\n            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {\n                return true;\n            }\n            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {\n                return false;\n            }\n            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {\n                validatedAttributeNameCache[attributeName] = true;\n                return true;\n            }\n            illegalAttributeNameCache[attributeName] = true;\n            {\n                error(\"Invalid attribute name: `%s`\", attributeName);\n            }\n            return false;\n        }\n        /**\n * CSS properties which accept numbers but are not in units of \"px\".\n */ var unitlessNumbers = new Set([\n            \"animationIterationCount\",\n            \"aspectRatio\",\n            \"borderImageOutset\",\n            \"borderImageSlice\",\n            \"borderImageWidth\",\n            \"boxFlex\",\n            \"boxFlexGroup\",\n            \"boxOrdinalGroup\",\n            \"columnCount\",\n            \"columns\",\n            \"flex\",\n            \"flexGrow\",\n            \"flexPositive\",\n            \"flexShrink\",\n            \"flexNegative\",\n            \"flexOrder\",\n            \"gridArea\",\n            \"gridRow\",\n            \"gridRowEnd\",\n            \"gridRowSpan\",\n            \"gridRowStart\",\n            \"gridColumn\",\n            \"gridColumnEnd\",\n            \"gridColumnSpan\",\n            \"gridColumnStart\",\n            \"fontWeight\",\n            \"lineClamp\",\n            \"lineHeight\",\n            \"opacity\",\n            \"order\",\n            \"orphans\",\n            \"scale\",\n            \"tabSize\",\n            \"widows\",\n            \"zIndex\",\n            \"zoom\",\n            \"fillOpacity\",\n            \"floodOpacity\",\n            \"stopOpacity\",\n            \"strokeDasharray\",\n            \"strokeDashoffset\",\n            \"strokeMiterlimit\",\n            \"strokeOpacity\",\n            \"strokeWidth\",\n            \"MozAnimationIterationCount\",\n            \"MozBoxFlex\",\n            \"MozBoxFlexGroup\",\n            \"MozLineClamp\",\n            \"msAnimationIterationCount\",\n            \"msFlex\",\n            \"msZoom\",\n            \"msFlexGrow\",\n            \"msFlexNegative\",\n            \"msFlexOrder\",\n            \"msFlexPositive\",\n            \"msFlexShrink\",\n            \"msGridColumn\",\n            \"msGridColumnSpan\",\n            \"msGridRow\",\n            \"msGridRowSpan\",\n            \"WebkitAnimationIterationCount\",\n            \"WebkitBoxFlex\",\n            \"WebKitBoxFlexGroup\",\n            \"WebkitBoxOrdinalGroup\",\n            \"WebkitColumnCount\",\n            \"WebkitColumns\",\n            \"WebkitFlex\",\n            \"WebkitFlexGrow\",\n            \"WebkitFlexPositive\",\n            \"WebkitFlexShrink\",\n            \"WebkitLineClamp\"\n        ]);\n        function isUnitlessNumber(name) {\n            return unitlessNumbers.has(name);\n        }\n        var aliases = new Map([\n            [\n                \"acceptCharset\",\n                \"accept-charset\"\n            ],\n            [\n                \"htmlFor\",\n                \"for\"\n            ],\n            [\n                \"httpEquiv\",\n                \"http-equiv\"\n            ],\n            [\n                \"crossOrigin\",\n                \"crossorigin\"\n            ],\n            // Regular attributes that just accept strings.],\n            [\n                \"accentHeight\",\n                \"accent-height\"\n            ],\n            [\n                \"alignmentBaseline\",\n                \"alignment-baseline\"\n            ],\n            [\n                \"arabicForm\",\n                \"arabic-form\"\n            ],\n            [\n                \"baselineShift\",\n                \"baseline-shift\"\n            ],\n            [\n                \"capHeight\",\n                \"cap-height\"\n            ],\n            [\n                \"clipPath\",\n                \"clip-path\"\n            ],\n            [\n                \"clipRule\",\n                \"clip-rule\"\n            ],\n            [\n                \"colorInterpolation\",\n                \"color-interpolation\"\n            ],\n            [\n                \"colorInterpolationFilters\",\n                \"color-interpolation-filters\"\n            ],\n            [\n                \"colorProfile\",\n                \"color-profile\"\n            ],\n            [\n                \"colorRendering\",\n                \"color-rendering\"\n            ],\n            [\n                \"dominantBaseline\",\n                \"dominant-baseline\"\n            ],\n            [\n                \"enableBackground\",\n                \"enable-background\"\n            ],\n            [\n                \"fillOpacity\",\n                \"fill-opacity\"\n            ],\n            [\n                \"fillRule\",\n                \"fill-rule\"\n            ],\n            [\n                \"floodColor\",\n                \"flood-color\"\n            ],\n            [\n                \"floodOpacity\",\n                \"flood-opacity\"\n            ],\n            [\n                \"fontFamily\",\n                \"font-family\"\n            ],\n            [\n                \"fontSize\",\n                \"font-size\"\n            ],\n            [\n                \"fontSizeAdjust\",\n                \"font-size-adjust\"\n            ],\n            [\n                \"fontStretch\",\n                \"font-stretch\"\n            ],\n            [\n                \"fontStyle\",\n                \"font-style\"\n            ],\n            [\n                \"fontVariant\",\n                \"font-variant\"\n            ],\n            [\n                \"fontWeight\",\n                \"font-weight\"\n            ],\n            [\n                \"glyphName\",\n                \"glyph-name\"\n            ],\n            [\n                \"glyphOrientationHorizontal\",\n                \"glyph-orientation-horizontal\"\n            ],\n            [\n                \"glyphOrientationVertical\",\n                \"glyph-orientation-vertical\"\n            ],\n            [\n                \"horizAdvX\",\n                \"horiz-adv-x\"\n            ],\n            [\n                \"horizOriginX\",\n                \"horiz-origin-x\"\n            ],\n            [\n                \"imageRendering\",\n                \"image-rendering\"\n            ],\n            [\n                \"letterSpacing\",\n                \"letter-spacing\"\n            ],\n            [\n                \"lightingColor\",\n                \"lighting-color\"\n            ],\n            [\n                \"markerEnd\",\n                \"marker-end\"\n            ],\n            [\n                \"markerMid\",\n                \"marker-mid\"\n            ],\n            [\n                \"markerStart\",\n                \"marker-start\"\n            ],\n            [\n                \"overlinePosition\",\n                \"overline-position\"\n            ],\n            [\n                \"overlineThickness\",\n                \"overline-thickness\"\n            ],\n            [\n                \"paintOrder\",\n                \"paint-order\"\n            ],\n            [\n                \"panose-1\",\n                \"panose-1\"\n            ],\n            [\n                \"pointerEvents\",\n                \"pointer-events\"\n            ],\n            [\n                \"renderingIntent\",\n                \"rendering-intent\"\n            ],\n            [\n                \"shapeRendering\",\n                \"shape-rendering\"\n            ],\n            [\n                \"stopColor\",\n                \"stop-color\"\n            ],\n            [\n                \"stopOpacity\",\n                \"stop-opacity\"\n            ],\n            [\n                \"strikethroughPosition\",\n                \"strikethrough-position\"\n            ],\n            [\n                \"strikethroughThickness\",\n                \"strikethrough-thickness\"\n            ],\n            [\n                \"strokeDasharray\",\n                \"stroke-dasharray\"\n            ],\n            [\n                \"strokeDashoffset\",\n                \"stroke-dashoffset\"\n            ],\n            [\n                \"strokeLinecap\",\n                \"stroke-linecap\"\n            ],\n            [\n                \"strokeLinejoin\",\n                \"stroke-linejoin\"\n            ],\n            [\n                \"strokeMiterlimit\",\n                \"stroke-miterlimit\"\n            ],\n            [\n                \"strokeOpacity\",\n                \"stroke-opacity\"\n            ],\n            [\n                \"strokeWidth\",\n                \"stroke-width\"\n            ],\n            [\n                \"textAnchor\",\n                \"text-anchor\"\n            ],\n            [\n                \"textDecoration\",\n                \"text-decoration\"\n            ],\n            [\n                \"textRendering\",\n                \"text-rendering\"\n            ],\n            [\n                \"transformOrigin\",\n                \"transform-origin\"\n            ],\n            [\n                \"underlinePosition\",\n                \"underline-position\"\n            ],\n            [\n                \"underlineThickness\",\n                \"underline-thickness\"\n            ],\n            [\n                \"unicodeBidi\",\n                \"unicode-bidi\"\n            ],\n            [\n                \"unicodeRange\",\n                \"unicode-range\"\n            ],\n            [\n                \"unitsPerEm\",\n                \"units-per-em\"\n            ],\n            [\n                \"vAlphabetic\",\n                \"v-alphabetic\"\n            ],\n            [\n                \"vHanging\",\n                \"v-hanging\"\n            ],\n            [\n                \"vIdeographic\",\n                \"v-ideographic\"\n            ],\n            [\n                \"vMathematical\",\n                \"v-mathematical\"\n            ],\n            [\n                \"vectorEffect\",\n                \"vector-effect\"\n            ],\n            [\n                \"vertAdvY\",\n                \"vert-adv-y\"\n            ],\n            [\n                \"vertOriginX\",\n                \"vert-origin-x\"\n            ],\n            [\n                \"vertOriginY\",\n                \"vert-origin-y\"\n            ],\n            [\n                \"wordSpacing\",\n                \"word-spacing\"\n            ],\n            [\n                \"writingMode\",\n                \"writing-mode\"\n            ],\n            [\n                \"xmlnsXlink\",\n                \"xmlns:xlink\"\n            ],\n            [\n                \"xHeight\",\n                \"x-height\"\n            ]\n        ]);\n        function getAttributeAlias(name) {\n            return aliases.get(name) || name;\n        }\n        var hasReadOnlyValue = {\n            button: true,\n            checkbox: true,\n            image: true,\n            hidden: true,\n            radio: true,\n            reset: true,\n            submit: true\n        };\n        function checkControlledValueProps(tagName, props) {\n            {\n                if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {\n                    error(\"You provided a `value` prop to a form field without an \" + \"`onChange` handler. This will render a read-only field. If \" + \"the field should be mutable use `defaultValue`. Otherwise, \" + \"set either `onChange` or `readOnly`.\");\n                }\n                if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {\n                    error(\"You provided a `checked` prop to a form field without an \" + \"`onChange` handler. This will render a read-only field. If \" + \"the field should be mutable use `defaultChecked`. Otherwise, \" + \"set either `onChange` or `readOnly`.\");\n                }\n            }\n        }\n        var ariaProperties = {\n            \"aria-current\": 0,\n            // state\n            \"aria-description\": 0,\n            \"aria-details\": 0,\n            \"aria-disabled\": 0,\n            // state\n            \"aria-hidden\": 0,\n            // state\n            \"aria-invalid\": 0,\n            // state\n            \"aria-keyshortcuts\": 0,\n            \"aria-label\": 0,\n            \"aria-roledescription\": 0,\n            // Widget Attributes\n            \"aria-autocomplete\": 0,\n            \"aria-checked\": 0,\n            \"aria-expanded\": 0,\n            \"aria-haspopup\": 0,\n            \"aria-level\": 0,\n            \"aria-modal\": 0,\n            \"aria-multiline\": 0,\n            \"aria-multiselectable\": 0,\n            \"aria-orientation\": 0,\n            \"aria-placeholder\": 0,\n            \"aria-pressed\": 0,\n            \"aria-readonly\": 0,\n            \"aria-required\": 0,\n            \"aria-selected\": 0,\n            \"aria-sort\": 0,\n            \"aria-valuemax\": 0,\n            \"aria-valuemin\": 0,\n            \"aria-valuenow\": 0,\n            \"aria-valuetext\": 0,\n            // Live Region Attributes\n            \"aria-atomic\": 0,\n            \"aria-busy\": 0,\n            \"aria-live\": 0,\n            \"aria-relevant\": 0,\n            // Drag-and-Drop Attributes\n            \"aria-dropeffect\": 0,\n            \"aria-grabbed\": 0,\n            // Relationship Attributes\n            \"aria-activedescendant\": 0,\n            \"aria-colcount\": 0,\n            \"aria-colindex\": 0,\n            \"aria-colspan\": 0,\n            \"aria-controls\": 0,\n            \"aria-describedby\": 0,\n            \"aria-errormessage\": 0,\n            \"aria-flowto\": 0,\n            \"aria-labelledby\": 0,\n            \"aria-owns\": 0,\n            \"aria-posinset\": 0,\n            \"aria-rowcount\": 0,\n            \"aria-rowindex\": 0,\n            \"aria-rowspan\": 0,\n            \"aria-setsize\": 0\n        };\n        var warnedProperties$1 = {};\n        var rARIA$1 = new RegExp(\"^(aria)-[\" + ATTRIBUTE_NAME_CHAR + \"]*$\");\n        var rARIACamel$1 = new RegExp(\"^(aria)[A-Z][\" + ATTRIBUTE_NAME_CHAR + \"]*$\");\n        function validateProperty$1(tagName, name) {\n            {\n                if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {\n                    return true;\n                }\n                if (rARIACamel$1.test(name)) {\n                    var ariaName = \"aria-\" + name.slice(4).toLowerCase();\n                    var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM\n                    // DOM properties, then it is an invalid aria-* attribute.\n                    if (correctName == null) {\n                        error(\"Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.\", name);\n                        warnedProperties$1[name] = true;\n                        return true;\n                    } // aria-* attributes should be lowercase; suggest the lowercase version.\n                    if (name !== correctName) {\n                        error(\"Invalid ARIA attribute `%s`. Did you mean `%s`?\", name, correctName);\n                        warnedProperties$1[name] = true;\n                        return true;\n                    }\n                }\n                if (rARIA$1.test(name)) {\n                    var lowerCasedName = name.toLowerCase();\n                    var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM\n                    // DOM properties, then it is an invalid aria-* attribute.\n                    if (standardName == null) {\n                        warnedProperties$1[name] = true;\n                        return false;\n                    } // aria-* attributes should be lowercase; suggest the lowercase version.\n                    if (name !== standardName) {\n                        error(\"Unknown ARIA attribute `%s`. Did you mean `%s`?\", name, standardName);\n                        warnedProperties$1[name] = true;\n                        return true;\n                    }\n                }\n            }\n            return true;\n        }\n        function validateProperties$2(type, props) {\n            {\n                var invalidProps = [];\n                for(var key in props){\n                    var isValid = validateProperty$1(type, key);\n                    if (!isValid) {\n                        invalidProps.push(key);\n                    }\n                }\n                var unknownPropString = invalidProps.map(function(prop) {\n                    return \"`\" + prop + \"`\";\n                }).join(\", \");\n                if (invalidProps.length === 1) {\n                    error(\"Invalid aria prop %s on <%s> tag. \" + \"For details, see https://reactjs.org/link/invalid-aria-props\", unknownPropString, type);\n                } else if (invalidProps.length > 1) {\n                    error(\"Invalid aria props %s on <%s> tag. \" + \"For details, see https://reactjs.org/link/invalid-aria-props\", unknownPropString, type);\n                }\n            }\n        }\n        var didWarnValueNull = false;\n        function validateProperties$1(type, props) {\n            {\n                if (type !== \"input\" && type !== \"textarea\" && type !== \"select\") {\n                    return;\n                }\n                if (props != null && props.value === null && !didWarnValueNull) {\n                    didWarnValueNull = true;\n                    if (type === \"select\" && props.multiple) {\n                        error(\"`value` prop on `%s` should not be null. \" + \"Consider using an empty array when `multiple` is set to `true` \" + \"to clear the component or `undefined` for uncontrolled components.\", type);\n                    } else {\n                        error(\"`value` prop on `%s` should not be null. \" + \"Consider using an empty string to clear the component or `undefined` \" + \"for uncontrolled components.\", type);\n                    }\n                }\n            }\n        }\n        function isCustomElement(tagName, props) {\n            if (tagName.indexOf(\"-\") === -1) {\n                return false;\n            }\n            switch(tagName){\n                // These are reserved SVG and MathML elements.\n                // We don't mind this list too much because we expect it to never grow.\n                // The alternative is to track the namespace in a few places which is convoluted.\n                // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts\n                case \"annotation-xml\":\n                case \"color-profile\":\n                case \"font-face\":\n                case \"font-face-src\":\n                case \"font-face-uri\":\n                case \"font-face-format\":\n                case \"font-face-name\":\n                case \"missing-glyph\":\n                    return false;\n                default:\n                    return true;\n            }\n        }\n        // When adding attributes to the HTML or SVG allowed attribute list, be sure to\n        // also add them to this module to ensure casing and incorrect name\n        // warnings.\n        var possibleStandardNames = {\n            // HTML\n            accept: \"accept\",\n            acceptcharset: \"acceptCharset\",\n            \"accept-charset\": \"acceptCharset\",\n            accesskey: \"accessKey\",\n            action: \"action\",\n            allowfullscreen: \"allowFullScreen\",\n            alt: \"alt\",\n            as: \"as\",\n            async: \"async\",\n            autocapitalize: \"autoCapitalize\",\n            autocomplete: \"autoComplete\",\n            autocorrect: \"autoCorrect\",\n            autofocus: \"autoFocus\",\n            autoplay: \"autoPlay\",\n            autosave: \"autoSave\",\n            capture: \"capture\",\n            cellpadding: \"cellPadding\",\n            cellspacing: \"cellSpacing\",\n            challenge: \"challenge\",\n            charset: \"charSet\",\n            checked: \"checked\",\n            children: \"children\",\n            cite: \"cite\",\n            class: \"className\",\n            classid: \"classID\",\n            classname: \"className\",\n            cols: \"cols\",\n            colspan: \"colSpan\",\n            content: \"content\",\n            contenteditable: \"contentEditable\",\n            contextmenu: \"contextMenu\",\n            controls: \"controls\",\n            controlslist: \"controlsList\",\n            coords: \"coords\",\n            crossorigin: \"crossOrigin\",\n            dangerouslysetinnerhtml: \"dangerouslySetInnerHTML\",\n            data: \"data\",\n            datetime: \"dateTime\",\n            default: \"default\",\n            defaultchecked: \"defaultChecked\",\n            defaultvalue: \"defaultValue\",\n            defer: \"defer\",\n            dir: \"dir\",\n            disabled: \"disabled\",\n            disablepictureinpicture: \"disablePictureInPicture\",\n            disableremoteplayback: \"disableRemotePlayback\",\n            download: \"download\",\n            draggable: \"draggable\",\n            enctype: \"encType\",\n            enterkeyhint: \"enterKeyHint\",\n            fetchpriority: \"fetchPriority\",\n            for: \"htmlFor\",\n            form: \"form\",\n            formmethod: \"formMethod\",\n            formaction: \"formAction\",\n            formenctype: \"formEncType\",\n            formnovalidate: \"formNoValidate\",\n            formtarget: \"formTarget\",\n            frameborder: \"frameBorder\",\n            headers: \"headers\",\n            height: \"height\",\n            hidden: \"hidden\",\n            high: \"high\",\n            href: \"href\",\n            hreflang: \"hrefLang\",\n            htmlfor: \"htmlFor\",\n            httpequiv: \"httpEquiv\",\n            \"http-equiv\": \"httpEquiv\",\n            icon: \"icon\",\n            id: \"id\",\n            imagesizes: \"imageSizes\",\n            imagesrcset: \"imageSrcSet\",\n            innerhtml: \"innerHTML\",\n            inputmode: \"inputMode\",\n            integrity: \"integrity\",\n            is: \"is\",\n            itemid: \"itemID\",\n            itemprop: \"itemProp\",\n            itemref: \"itemRef\",\n            itemscope: \"itemScope\",\n            itemtype: \"itemType\",\n            keyparams: \"keyParams\",\n            keytype: \"keyType\",\n            kind: \"kind\",\n            label: \"label\",\n            lang: \"lang\",\n            list: \"list\",\n            loop: \"loop\",\n            low: \"low\",\n            manifest: \"manifest\",\n            marginwidth: \"marginWidth\",\n            marginheight: \"marginHeight\",\n            max: \"max\",\n            maxlength: \"maxLength\",\n            media: \"media\",\n            mediagroup: \"mediaGroup\",\n            method: \"method\",\n            min: \"min\",\n            minlength: \"minLength\",\n            multiple: \"multiple\",\n            muted: \"muted\",\n            name: \"name\",\n            nomodule: \"noModule\",\n            nonce: \"nonce\",\n            novalidate: \"noValidate\",\n            open: \"open\",\n            optimum: \"optimum\",\n            pattern: \"pattern\",\n            placeholder: \"placeholder\",\n            playsinline: \"playsInline\",\n            poster: \"poster\",\n            preload: \"preload\",\n            profile: \"profile\",\n            radiogroup: \"radioGroup\",\n            readonly: \"readOnly\",\n            referrerpolicy: \"referrerPolicy\",\n            rel: \"rel\",\n            required: \"required\",\n            reversed: \"reversed\",\n            role: \"role\",\n            rows: \"rows\",\n            rowspan: \"rowSpan\",\n            sandbox: \"sandbox\",\n            scope: \"scope\",\n            scoped: \"scoped\",\n            scrolling: \"scrolling\",\n            seamless: \"seamless\",\n            selected: \"selected\",\n            shape: \"shape\",\n            size: \"size\",\n            sizes: \"sizes\",\n            span: \"span\",\n            spellcheck: \"spellCheck\",\n            src: \"src\",\n            srcdoc: \"srcDoc\",\n            srclang: \"srcLang\",\n            srcset: \"srcSet\",\n            start: \"start\",\n            step: \"step\",\n            style: \"style\",\n            summary: \"summary\",\n            tabindex: \"tabIndex\",\n            target: \"target\",\n            title: \"title\",\n            type: \"type\",\n            usemap: \"useMap\",\n            value: \"value\",\n            width: \"width\",\n            wmode: \"wmode\",\n            wrap: \"wrap\",\n            // SVG\n            about: \"about\",\n            accentheight: \"accentHeight\",\n            \"accent-height\": \"accentHeight\",\n            accumulate: \"accumulate\",\n            additive: \"additive\",\n            alignmentbaseline: \"alignmentBaseline\",\n            \"alignment-baseline\": \"alignmentBaseline\",\n            allowreorder: \"allowReorder\",\n            alphabetic: \"alphabetic\",\n            amplitude: \"amplitude\",\n            arabicform: \"arabicForm\",\n            \"arabic-form\": \"arabicForm\",\n            ascent: \"ascent\",\n            attributename: \"attributeName\",\n            attributetype: \"attributeType\",\n            autoreverse: \"autoReverse\",\n            azimuth: \"azimuth\",\n            basefrequency: \"baseFrequency\",\n            baselineshift: \"baselineShift\",\n            \"baseline-shift\": \"baselineShift\",\n            baseprofile: \"baseProfile\",\n            bbox: \"bbox\",\n            begin: \"begin\",\n            bias: \"bias\",\n            by: \"by\",\n            calcmode: \"calcMode\",\n            capheight: \"capHeight\",\n            \"cap-height\": \"capHeight\",\n            clip: \"clip\",\n            clippath: \"clipPath\",\n            \"clip-path\": \"clipPath\",\n            clippathunits: \"clipPathUnits\",\n            cliprule: \"clipRule\",\n            \"clip-rule\": \"clipRule\",\n            color: \"color\",\n            colorinterpolation: \"colorInterpolation\",\n            \"color-interpolation\": \"colorInterpolation\",\n            colorinterpolationfilters: \"colorInterpolationFilters\",\n            \"color-interpolation-filters\": \"colorInterpolationFilters\",\n            colorprofile: \"colorProfile\",\n            \"color-profile\": \"colorProfile\",\n            colorrendering: \"colorRendering\",\n            \"color-rendering\": \"colorRendering\",\n            contentscripttype: \"contentScriptType\",\n            contentstyletype: \"contentStyleType\",\n            cursor: \"cursor\",\n            cx: \"cx\",\n            cy: \"cy\",\n            d: \"d\",\n            datatype: \"datatype\",\n            decelerate: \"decelerate\",\n            descent: \"descent\",\n            diffuseconstant: \"diffuseConstant\",\n            direction: \"direction\",\n            display: \"display\",\n            divisor: \"divisor\",\n            dominantbaseline: \"dominantBaseline\",\n            \"dominant-baseline\": \"dominantBaseline\",\n            dur: \"dur\",\n            dx: \"dx\",\n            dy: \"dy\",\n            edgemode: \"edgeMode\",\n            elevation: \"elevation\",\n            enablebackground: \"enableBackground\",\n            \"enable-background\": \"enableBackground\",\n            end: \"end\",\n            exponent: \"exponent\",\n            externalresourcesrequired: \"externalResourcesRequired\",\n            fill: \"fill\",\n            fillopacity: \"fillOpacity\",\n            \"fill-opacity\": \"fillOpacity\",\n            fillrule: \"fillRule\",\n            \"fill-rule\": \"fillRule\",\n            filter: \"filter\",\n            filterres: \"filterRes\",\n            filterunits: \"filterUnits\",\n            floodopacity: \"floodOpacity\",\n            \"flood-opacity\": \"floodOpacity\",\n            floodcolor: \"floodColor\",\n            \"flood-color\": \"floodColor\",\n            focusable: \"focusable\",\n            fontfamily: \"fontFamily\",\n            \"font-family\": \"fontFamily\",\n            fontsize: \"fontSize\",\n            \"font-size\": \"fontSize\",\n            fontsizeadjust: \"fontSizeAdjust\",\n            \"font-size-adjust\": \"fontSizeAdjust\",\n            fontstretch: \"fontStretch\",\n            \"font-stretch\": \"fontStretch\",\n            fontstyle: \"fontStyle\",\n            \"font-style\": \"fontStyle\",\n            fontvariant: \"fontVariant\",\n            \"font-variant\": \"fontVariant\",\n            fontweight: \"fontWeight\",\n            \"font-weight\": \"fontWeight\",\n            format: \"format\",\n            from: \"from\",\n            fx: \"fx\",\n            fy: \"fy\",\n            g1: \"g1\",\n            g2: \"g2\",\n            glyphname: \"glyphName\",\n            \"glyph-name\": \"glyphName\",\n            glyphorientationhorizontal: \"glyphOrientationHorizontal\",\n            \"glyph-orientation-horizontal\": \"glyphOrientationHorizontal\",\n            glyphorientationvertical: \"glyphOrientationVertical\",\n            \"glyph-orientation-vertical\": \"glyphOrientationVertical\",\n            glyphref: \"glyphRef\",\n            gradienttransform: \"gradientTransform\",\n            gradientunits: \"gradientUnits\",\n            hanging: \"hanging\",\n            horizadvx: \"horizAdvX\",\n            \"horiz-adv-x\": \"horizAdvX\",\n            horizoriginx: \"horizOriginX\",\n            \"horiz-origin-x\": \"horizOriginX\",\n            ideographic: \"ideographic\",\n            imagerendering: \"imageRendering\",\n            \"image-rendering\": \"imageRendering\",\n            in2: \"in2\",\n            in: \"in\",\n            inlist: \"inlist\",\n            intercept: \"intercept\",\n            k1: \"k1\",\n            k2: \"k2\",\n            k3: \"k3\",\n            k4: \"k4\",\n            k: \"k\",\n            kernelmatrix: \"kernelMatrix\",\n            kernelunitlength: \"kernelUnitLength\",\n            kerning: \"kerning\",\n            keypoints: \"keyPoints\",\n            keysplines: \"keySplines\",\n            keytimes: \"keyTimes\",\n            lengthadjust: \"lengthAdjust\",\n            letterspacing: \"letterSpacing\",\n            \"letter-spacing\": \"letterSpacing\",\n            lightingcolor: \"lightingColor\",\n            \"lighting-color\": \"lightingColor\",\n            limitingconeangle: \"limitingConeAngle\",\n            local: \"local\",\n            markerend: \"markerEnd\",\n            \"marker-end\": \"markerEnd\",\n            markerheight: \"markerHeight\",\n            markermid: \"markerMid\",\n            \"marker-mid\": \"markerMid\",\n            markerstart: \"markerStart\",\n            \"marker-start\": \"markerStart\",\n            markerunits: \"markerUnits\",\n            markerwidth: \"markerWidth\",\n            mask: \"mask\",\n            maskcontentunits: \"maskContentUnits\",\n            maskunits: \"maskUnits\",\n            mathematical: \"mathematical\",\n            mode: \"mode\",\n            numoctaves: \"numOctaves\",\n            offset: \"offset\",\n            opacity: \"opacity\",\n            operator: \"operator\",\n            order: \"order\",\n            orient: \"orient\",\n            orientation: \"orientation\",\n            origin: \"origin\",\n            overflow: \"overflow\",\n            overlineposition: \"overlinePosition\",\n            \"overline-position\": \"overlinePosition\",\n            overlinethickness: \"overlineThickness\",\n            \"overline-thickness\": \"overlineThickness\",\n            paintorder: \"paintOrder\",\n            \"paint-order\": \"paintOrder\",\n            panose1: \"panose1\",\n            \"panose-1\": \"panose1\",\n            pathlength: \"pathLength\",\n            patterncontentunits: \"patternContentUnits\",\n            patterntransform: \"patternTransform\",\n            patternunits: \"patternUnits\",\n            pointerevents: \"pointerEvents\",\n            \"pointer-events\": \"pointerEvents\",\n            points: \"points\",\n            pointsatx: \"pointsAtX\",\n            pointsaty: \"pointsAtY\",\n            pointsatz: \"pointsAtZ\",\n            prefix: \"prefix\",\n            preservealpha: \"preserveAlpha\",\n            preserveaspectratio: \"preserveAspectRatio\",\n            primitiveunits: \"primitiveUnits\",\n            property: \"property\",\n            r: \"r\",\n            radius: \"radius\",\n            refx: \"refX\",\n            refy: \"refY\",\n            renderingintent: \"renderingIntent\",\n            \"rendering-intent\": \"renderingIntent\",\n            repeatcount: \"repeatCount\",\n            repeatdur: \"repeatDur\",\n            requiredextensions: \"requiredExtensions\",\n            requiredfeatures: \"requiredFeatures\",\n            resource: \"resource\",\n            restart: \"restart\",\n            result: \"result\",\n            results: \"results\",\n            rotate: \"rotate\",\n            rx: \"rx\",\n            ry: \"ry\",\n            scale: \"scale\",\n            security: \"security\",\n            seed: \"seed\",\n            shaperendering: \"shapeRendering\",\n            \"shape-rendering\": \"shapeRendering\",\n            slope: \"slope\",\n            spacing: \"spacing\",\n            specularconstant: \"specularConstant\",\n            specularexponent: \"specularExponent\",\n            speed: \"speed\",\n            spreadmethod: \"spreadMethod\",\n            startoffset: \"startOffset\",\n            stddeviation: \"stdDeviation\",\n            stemh: \"stemh\",\n            stemv: \"stemv\",\n            stitchtiles: \"stitchTiles\",\n            stopcolor: \"stopColor\",\n            \"stop-color\": \"stopColor\",\n            stopopacity: \"stopOpacity\",\n            \"stop-opacity\": \"stopOpacity\",\n            strikethroughposition: \"strikethroughPosition\",\n            \"strikethrough-position\": \"strikethroughPosition\",\n            strikethroughthickness: \"strikethroughThickness\",\n            \"strikethrough-thickness\": \"strikethroughThickness\",\n            string: \"string\",\n            stroke: \"stroke\",\n            strokedasharray: \"strokeDasharray\",\n            \"stroke-dasharray\": \"strokeDasharray\",\n            strokedashoffset: \"strokeDashoffset\",\n            \"stroke-dashoffset\": \"strokeDashoffset\",\n            strokelinecap: \"strokeLinecap\",\n            \"stroke-linecap\": \"strokeLinecap\",\n            strokelinejoin: \"strokeLinejoin\",\n            \"stroke-linejoin\": \"strokeLinejoin\",\n            strokemiterlimit: \"strokeMiterlimit\",\n            \"stroke-miterlimit\": \"strokeMiterlimit\",\n            strokewidth: \"strokeWidth\",\n            \"stroke-width\": \"strokeWidth\",\n            strokeopacity: \"strokeOpacity\",\n            \"stroke-opacity\": \"strokeOpacity\",\n            suppresscontenteditablewarning: \"suppressContentEditableWarning\",\n            suppresshydrationwarning: \"suppressHydrationWarning\",\n            surfacescale: \"surfaceScale\",\n            systemlanguage: \"systemLanguage\",\n            tablevalues: \"tableValues\",\n            targetx: \"targetX\",\n            targety: \"targetY\",\n            textanchor: \"textAnchor\",\n            \"text-anchor\": \"textAnchor\",\n            textdecoration: \"textDecoration\",\n            \"text-decoration\": \"textDecoration\",\n            textlength: \"textLength\",\n            textrendering: \"textRendering\",\n            \"text-rendering\": \"textRendering\",\n            to: \"to\",\n            transform: \"transform\",\n            transformorigin: \"transformOrigin\",\n            \"transform-origin\": \"transformOrigin\",\n            typeof: \"typeof\",\n            u1: \"u1\",\n            u2: \"u2\",\n            underlineposition: \"underlinePosition\",\n            \"underline-position\": \"underlinePosition\",\n            underlinethickness: \"underlineThickness\",\n            \"underline-thickness\": \"underlineThickness\",\n            unicode: \"unicode\",\n            unicodebidi: \"unicodeBidi\",\n            \"unicode-bidi\": \"unicodeBidi\",\n            unicoderange: \"unicodeRange\",\n            \"unicode-range\": \"unicodeRange\",\n            unitsperem: \"unitsPerEm\",\n            \"units-per-em\": \"unitsPerEm\",\n            unselectable: \"unselectable\",\n            valphabetic: \"vAlphabetic\",\n            \"v-alphabetic\": \"vAlphabetic\",\n            values: \"values\",\n            vectoreffect: \"vectorEffect\",\n            \"vector-effect\": \"vectorEffect\",\n            version: \"version\",\n            vertadvy: \"vertAdvY\",\n            \"vert-adv-y\": \"vertAdvY\",\n            vertoriginx: \"vertOriginX\",\n            \"vert-origin-x\": \"vertOriginX\",\n            vertoriginy: \"vertOriginY\",\n            \"vert-origin-y\": \"vertOriginY\",\n            vhanging: \"vHanging\",\n            \"v-hanging\": \"vHanging\",\n            videographic: \"vIdeographic\",\n            \"v-ideographic\": \"vIdeographic\",\n            viewbox: \"viewBox\",\n            viewtarget: \"viewTarget\",\n            visibility: \"visibility\",\n            vmathematical: \"vMathematical\",\n            \"v-mathematical\": \"vMathematical\",\n            vocab: \"vocab\",\n            widths: \"widths\",\n            wordspacing: \"wordSpacing\",\n            \"word-spacing\": \"wordSpacing\",\n            writingmode: \"writingMode\",\n            \"writing-mode\": \"writingMode\",\n            x1: \"x1\",\n            x2: \"x2\",\n            x: \"x\",\n            xchannelselector: \"xChannelSelector\",\n            xheight: \"xHeight\",\n            \"x-height\": \"xHeight\",\n            xlinkactuate: \"xlinkActuate\",\n            \"xlink:actuate\": \"xlinkActuate\",\n            xlinkarcrole: \"xlinkArcrole\",\n            \"xlink:arcrole\": \"xlinkArcrole\",\n            xlinkhref: \"xlinkHref\",\n            \"xlink:href\": \"xlinkHref\",\n            xlinkrole: \"xlinkRole\",\n            \"xlink:role\": \"xlinkRole\",\n            xlinkshow: \"xlinkShow\",\n            \"xlink:show\": \"xlinkShow\",\n            xlinktitle: \"xlinkTitle\",\n            \"xlink:title\": \"xlinkTitle\",\n            xlinktype: \"xlinkType\",\n            \"xlink:type\": \"xlinkType\",\n            xmlbase: \"xmlBase\",\n            \"xml:base\": \"xmlBase\",\n            xmllang: \"xmlLang\",\n            \"xml:lang\": \"xmlLang\",\n            xmlns: \"xmlns\",\n            \"xml:space\": \"xmlSpace\",\n            xmlnsxlink: \"xmlnsXlink\",\n            \"xmlns:xlink\": \"xmlnsXlink\",\n            xmlspace: \"xmlSpace\",\n            y1: \"y1\",\n            y2: \"y2\",\n            y: \"y\",\n            ychannelselector: \"yChannelSelector\",\n            z: \"z\",\n            zoomandpan: \"zoomAndPan\"\n        };\n        var warnedProperties = {};\n        var EVENT_NAME_REGEX = /^on./;\n        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;\n        var rARIA = new RegExp(\"^(aria)-[\" + ATTRIBUTE_NAME_CHAR + \"]*$\");\n        var rARIACamel = new RegExp(\"^(aria)[A-Z][\" + ATTRIBUTE_NAME_CHAR + \"]*$\");\n        function validateProperty(tagName, name, value, eventRegistry) {\n            {\n                if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {\n                    return true;\n                }\n                var lowerCasedName = name.toLowerCase();\n                if (lowerCasedName === \"onfocusin\" || lowerCasedName === \"onfocusout\") {\n                    error(\"React uses onFocus and onBlur instead of onFocusIn and onFocusOut. \" + \"All React events are normalized to bubble, so onFocusIn and onFocusOut \" + \"are not needed/supported by React.\");\n                    warnedProperties[name] = true;\n                    return true;\n                }\n                if (eventRegistry != null) {\n                    var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;\n                    if (registrationNameDependencies.hasOwnProperty(name)) {\n                        return true;\n                    }\n                    var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;\n                    if (registrationName != null) {\n                        error(\"Invalid event handler property `%s`. Did you mean `%s`?\", name, registrationName);\n                        warnedProperties[name] = true;\n                        return true;\n                    }\n                    if (EVENT_NAME_REGEX.test(name)) {\n                        error(\"Unknown event handler property `%s`. It will be ignored.\", name);\n                        warnedProperties[name] = true;\n                        return true;\n                    }\n                } else if (EVENT_NAME_REGEX.test(name)) {\n                    // If no event plugins have been injected, we are in a server environment.\n                    // So we can't tell if the event name is correct for sure, but we can filter\n                    // out known bad ones like `onclick`. We can't suggest a specific replacement though.\n                    if (INVALID_EVENT_NAME_REGEX.test(name)) {\n                        error(\"Invalid event handler property `%s`. \" + \"React events use the camelCase naming convention, for example `onClick`.\", name);\n                    }\n                    warnedProperties[name] = true;\n                    return true;\n                } // Let the ARIA attribute hook validate ARIA attributes\n                if (rARIA.test(name) || rARIACamel.test(name)) {\n                    return true;\n                }\n                if (lowerCasedName === \"innerhtml\") {\n                    error(\"Directly setting property `innerHTML` is not permitted. \" + \"For more information, lookup documentation on `dangerouslySetInnerHTML`.\");\n                    warnedProperties[name] = true;\n                    return true;\n                }\n                if (lowerCasedName === \"aria\") {\n                    error(\"The `aria` attribute is reserved for future use in React. \" + \"Pass individual `aria-` attributes instead.\");\n                    warnedProperties[name] = true;\n                    return true;\n                }\n                if (lowerCasedName === \"is\" && value !== null && value !== undefined && typeof value !== \"string\") {\n                    error(\"Received a `%s` for a string attribute `is`. If this is expected, cast \" + \"the value to a string.\", typeof value);\n                    warnedProperties[name] = true;\n                    return true;\n                }\n                if (typeof value === \"number\" && isNaN(value)) {\n                    error(\"Received NaN for the `%s` attribute. If this is expected, cast \" + \"the value to a string.\", name);\n                    warnedProperties[name] = true;\n                    return true;\n                } // Known attributes should match the casing specified in the property config.\n                if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {\n                    var standardName = possibleStandardNames[lowerCasedName];\n                    if (standardName !== name) {\n                        error(\"Invalid DOM property `%s`. Did you mean `%s`?\", name, standardName);\n                        warnedProperties[name] = true;\n                        return true;\n                    }\n                } else if (name !== lowerCasedName) {\n                    // Unknown attributes should have lowercase casing since that's how they\n                    // will be cased anyway with server rendering.\n                    error(\"React does not recognize the `%s` prop on a DOM element. If you \" + \"intentionally want it to appear in the DOM as a custom \" + \"attribute, spell it as lowercase `%s` instead. \" + \"If you accidentally passed it from a parent component, remove \" + \"it from the DOM element.\", name, lowerCasedName);\n                    warnedProperties[name] = true;\n                    return true;\n                } // Now that we've validated casing, do not validate\n                // data types for reserved props\n                switch(name){\n                    case \"dangerouslySetInnerHTML\":\n                    case \"children\":\n                    case \"style\":\n                    case \"suppressContentEditableWarning\":\n                    case \"suppressHydrationWarning\":\n                    case \"defaultValue\":\n                    case \"defaultChecked\":\n                    case \"innerHTML\":\n                        {\n                            return true;\n                        }\n                }\n                switch(typeof value){\n                    case \"boolean\":\n                        {\n                            switch(name){\n                                case \"autoFocus\":\n                                case \"checked\":\n                                case \"multiple\":\n                                case \"muted\":\n                                case \"selected\":\n                                case \"contentEditable\":\n                                case \"spellCheck\":\n                                case \"draggable\":\n                                case \"value\":\n                                case \"autoReverse\":\n                                case \"externalResourcesRequired\":\n                                case \"focusable\":\n                                case \"preserveAlpha\":\n                                case \"allowFullScreen\":\n                                case \"async\":\n                                case \"autoPlay\":\n                                case \"controls\":\n                                case \"default\":\n                                case \"defer\":\n                                case \"disabled\":\n                                case \"disablePictureInPicture\":\n                                case \"disableRemotePlayback\":\n                                case \"formNoValidate\":\n                                case \"hidden\":\n                                case \"loop\":\n                                case \"noModule\":\n                                case \"noValidate\":\n                                case \"open\":\n                                case \"playsInline\":\n                                case \"readOnly\":\n                                case \"required\":\n                                case \"reversed\":\n                                case \"scoped\":\n                                case \"seamless\":\n                                case \"itemScope\":\n                                case \"capture\":\n                                case \"download\":\n                                    {\n                                        // Boolean properties can accept boolean values\n                                        return true;\n                                    }\n                                default:\n                                    {\n                                        var prefix = name.toLowerCase().slice(0, 5);\n                                        if (prefix === \"data-\" || prefix === \"aria-\") {\n                                            return true;\n                                        }\n                                        if (value) {\n                                            error(\"Received `%s` for a non-boolean attribute `%s`.\\n\\n\" + \"If you want to write it to the DOM, pass a string instead: \" + '%s=\"%s\" or %s={value.toString()}.', value, name, name, value, name);\n                                        } else {\n                                            error(\"Received `%s` for a non-boolean attribute `%s`.\\n\\n\" + \"If you want to write it to the DOM, pass a string instead: \" + '%s=\"%s\" or %s={value.toString()}.\\n\\n' + \"If you used to conditionally omit it with %s={condition && value}, \" + \"pass %s={condition ? value : undefined} instead.\", value, name, name, value, name, name, name);\n                                        }\n                                        warnedProperties[name] = true;\n                                        return true;\n                                    }\n                            }\n                        }\n                    case \"function\":\n                    case \"symbol\":\n                        // eslint-disable-line\n                        // Warn when a known attribute is a bad type\n                        warnedProperties[name] = true;\n                        return false;\n                    case \"string\":\n                        {\n                            // Warn when passing the strings 'false' or 'true' into a boolean prop\n                            if (value === \"false\" || value === \"true\") {\n                                switch(name){\n                                    case \"checked\":\n                                    case \"selected\":\n                                    case \"multiple\":\n                                    case \"muted\":\n                                    case \"allowFullScreen\":\n                                    case \"async\":\n                                    case \"autoPlay\":\n                                    case \"controls\":\n                                    case \"default\":\n                                    case \"defer\":\n                                    case \"disabled\":\n                                    case \"disablePictureInPicture\":\n                                    case \"disableRemotePlayback\":\n                                    case \"formNoValidate\":\n                                    case \"hidden\":\n                                    case \"loop\":\n                                    case \"noModule\":\n                                    case \"noValidate\":\n                                    case \"open\":\n                                    case \"playsInline\":\n                                    case \"readOnly\":\n                                    case \"required\":\n                                    case \"reversed\":\n                                    case \"scoped\":\n                                    case \"seamless\":\n                                    case \"itemScope\":\n                                        {\n                                            break;\n                                        }\n                                    default:\n                                        {\n                                            return true;\n                                        }\n                                }\n                                error(\"Received the string `%s` for the boolean attribute `%s`. \" + \"%s \" + \"Did you mean %s={%s}?\", value, name, value === \"false\" ? \"The browser will interpret it as a truthy value.\" : 'Although this works, it will not work as expected if you pass the string \"false\".', name, value);\n                                warnedProperties[name] = true;\n                                return true;\n                            }\n                        }\n                }\n                return true;\n            }\n        }\n        function warnUnknownProperties(type, props, eventRegistry) {\n            {\n                var unknownProps = [];\n                for(var key in props){\n                    var isValid = validateProperty(type, key, props[key], eventRegistry);\n                    if (!isValid) {\n                        unknownProps.push(key);\n                    }\n                }\n                var unknownPropString = unknownProps.map(function(prop) {\n                    return \"`\" + prop + \"`\";\n                }).join(\", \");\n                if (unknownProps.length === 1) {\n                    error(\"Invalid value for prop %s on <%s> tag. Either remove it from the element, \" + \"or pass a string or number value to keep it in the DOM. \" + \"For details, see https://reactjs.org/link/attribute-behavior \", unknownPropString, type);\n                } else if (unknownProps.length > 1) {\n                    error(\"Invalid values for props %s on <%s> tag. Either remove them from the element, \" + \"or pass a string or number value to keep them in the DOM. \" + \"For details, see https://reactjs.org/link/attribute-behavior \", unknownPropString, type);\n                }\n            }\n        }\n        function validateProperties(type, props, eventRegistry) {\n            if (isCustomElement(type) || typeof props.is === \"string\") {\n                return;\n            }\n            warnUnknownProperties(type, props, eventRegistry);\n        }\n        // 'msTransform' is correct, but the other prefixes should be capitalized\n        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;\n        var msPattern$1 = /^-ms-/;\n        var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon\n        var badStyleValueWithSemicolonPattern = /;\\s*$/;\n        var warnedStyleNames = {};\n        var warnedStyleValues = {};\n        var warnedForNaNValue = false;\n        var warnedForInfinityValue = false;\n        function camelize(string) {\n            return string.replace(hyphenPattern, function(_, character) {\n                return character.toUpperCase();\n            });\n        }\n        function warnHyphenatedStyleName(name) {\n            {\n                if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n                    return;\n                }\n                warnedStyleNames[name] = true;\n                error(\"Unsupported style property %s. Did you mean %s?\", name, // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix\n                // is converted to lowercase `ms`.\n                camelize(name.replace(msPattern$1, \"ms-\")));\n            }\n        }\n        function warnBadVendoredStyleName(name) {\n            {\n                if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n                    return;\n                }\n                warnedStyleNames[name] = true;\n                error(\"Unsupported vendor-prefixed style property %s. Did you mean %s?\", name, name.charAt(0).toUpperCase() + name.slice(1));\n            }\n        }\n        function warnStyleValueWithSemicolon(name, value) {\n            {\n                if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {\n                    return;\n                }\n                warnedStyleValues[value] = true;\n                error(\"Style property values shouldn't contain a semicolon. \" + 'Try \"%s: %s\" instead.', name, value.replace(badStyleValueWithSemicolonPattern, \"\"));\n            }\n        }\n        function warnStyleValueIsNaN(name, value) {\n            {\n                if (warnedForNaNValue) {\n                    return;\n                }\n                warnedForNaNValue = true;\n                error(\"`NaN` is an invalid value for the `%s` css style property.\", name);\n            }\n        }\n        function warnStyleValueIsInfinity(name, value) {\n            {\n                if (warnedForInfinityValue) {\n                    return;\n                }\n                warnedForInfinityValue = true;\n                error(\"`Infinity` is an invalid value for the `%s` css style property.\", name);\n            }\n        }\n        function warnValidStyle(name, value) {\n            {\n                if (name.indexOf(\"-\") > -1) {\n                    warnHyphenatedStyleName(name);\n                } else if (badVendoredStyleNamePattern.test(name)) {\n                    warnBadVendoredStyleName(name);\n                } else if (badStyleValueWithSemicolonPattern.test(value)) {\n                    warnStyleValueWithSemicolon(name, value);\n                }\n                if (typeof value === \"number\") {\n                    if (isNaN(value)) {\n                        warnStyleValueIsNaN(name);\n                    } else if (!isFinite(value)) {\n                        warnStyleValueIsInfinity(name);\n                    }\n                }\n            }\n        }\n        // code copied and modified from escape-html\n        var matchHtmlRegExp = /[\"'&<>]/;\n        /**\n * Escapes special characters and HTML entities in a given html string.\n *\n * @param  {string} string HTML string to escape for later insertion\n * @return {string}\n * @public\n */ function escapeHtml(string) {\n            {\n                checkHtmlStringCoercion(string);\n            }\n            var str = \"\" + string;\n            var match = matchHtmlRegExp.exec(str);\n            if (!match) {\n                return str;\n            }\n            var escape;\n            var html = \"\";\n            var index;\n            var lastIndex = 0;\n            for(index = match.index; index < str.length; index++){\n                switch(str.charCodeAt(index)){\n                    case 34:\n                        // \"\n                        escape = \"&quot;\";\n                        break;\n                    case 38:\n                        // &\n                        escape = \"&amp;\";\n                        break;\n                    case 39:\n                        // '\n                        escape = \"&#x27;\"; // modified from escape-html; used to be '&#39'\n                        break;\n                    case 60:\n                        // <\n                        escape = \"&lt;\";\n                        break;\n                    case 62:\n                        // >\n                        escape = \"&gt;\";\n                        break;\n                    default:\n                        continue;\n                }\n                if (lastIndex !== index) {\n                    html += str.slice(lastIndex, index);\n                }\n                lastIndex = index + 1;\n                html += escape;\n            }\n            return lastIndex !== index ? html + str.slice(lastIndex, index) : html;\n        } // end code copied and modified from escape-html\n        /**\n * Escapes text to prevent scripting attacks.\n *\n * @param {*} text Text value to escape.\n * @return {string} An escaped string.\n */ function escapeTextForBrowser(text) {\n            if (typeof text === \"boolean\" || typeof text === \"number\") {\n                // this shortcircuit helps perf for types that we know will never have\n                // special characters, especially given that this function is used often\n                // for numeric dom ids.\n                return \"\" + text;\n            }\n            return escapeHtml(text);\n        }\n        var uppercasePattern = /([A-Z])/g;\n        var msPattern = /^ms-/;\n        /**\n * Hyphenates a camelcased CSS property name, for example:\n *\n *   > hyphenateStyleName('backgroundColor')\n *   < \"background-color\"\n *   > hyphenateStyleName('MozTransition')\n *   < \"-moz-transition\"\n *   > hyphenateStyleName('msTransition')\n *   < \"-ms-transition\"\n *\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix\n * is converted to `-ms-`.\n */ function hyphenateStyleName(name) {\n            return name.replace(uppercasePattern, \"-$1\").toLowerCase().replace(msPattern, \"-ms-\");\n        }\n        // and any newline or tab are filtered out as if they're not part of the URL.\n        // https://url.spec.whatwg.org/#url-parsing\n        // Tab or newline are defined as \\r\\n\\t:\n        // https://infra.spec.whatwg.org/#ascii-tab-or-newline\n        // A C0 control is a code point in the range \\u0000 NULL to \\u001F\n        // INFORMATION SEPARATOR ONE, inclusive:\n        // https://infra.spec.whatwg.org/#c0-control-or-space\n        /* eslint-disable max-len */ var isJavaScriptProtocol = /^[\\u0000-\\u001F ]*j[\\r\\n\\t]*a[\\r\\n\\t]*v[\\r\\n\\t]*a[\\r\\n\\t]*s[\\r\\n\\t]*c[\\r\\n\\t]*r[\\r\\n\\t]*i[\\r\\n\\t]*p[\\r\\n\\t]*t[\\r\\n\\t]*\\:/i;\n        var didWarn = false;\n        function sanitizeURL(url) {\n            // We should never have symbols here because they get filtered out elsewhere.\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            var stringifiedURL = \"\" + url;\n            {\n                if (!didWarn && isJavaScriptProtocol.test(stringifiedURL)) {\n                    didWarn = true;\n                    error(\"A future version of React will block javascript: URLs as a security precaution. \" + \"Use event handlers instead if you can. If you need to generate unsafe HTML try \" + \"using dangerouslySetInnerHTML instead. React was passed %s.\", JSON.stringify(stringifiedURL));\n                }\n            }\n            return url;\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        // The build script is at scripts/rollup/generate-inline-fizz-runtime.js.\n        // Run `yarn generate-inline-fizz-runtime` to generate.\n        var clientRenderBoundary = '$RX=function(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data=\"$!\",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};';\n        var completeBoundary = '$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data=\"$!\",a.setAttribute(\"data-dgst\",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if(\"/$\"===d)if(0===f)break;else f--;else\"$\"!==d&&\"$?\"!==d&&\"$!\"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data=\"$\"}b._reactRetry&&b._reactRetry()}};';\n        var completeBoundaryWithStyles = '$RM=new Map;\\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll(\"link[data-precedence],style[data-precedence]\"),v=[],k=0;b=h[k++];)\"not all\"===b.getAttribute(\"media\")?v.push(b):(\"LINK\"===b.tagName&&n.set(b.getAttribute(\"href\"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement(\"link\");a.href=d;a.rel=\"stylesheet\";for(a.dataset.precedence=\\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute(\"media\");!e||\"l\"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute(\"data-precedence\");a.removeAttribute(\"media\")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,\"\"),u.bind(null,r,t,\"Resource failed to load\"))};';\n        var completeSegment = \"$RS=function(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};\";\n        var formReplaying = 'addEventListener(\"submit\",function(a){if(!a.defaultPrevented){var c=a.target,d=a.submitter,e=c.action,b=d;if(d){var f=d.getAttribute(\"formAction\");null!=f&&(e=f,b=null)}\"javascript:throw new Error(\\'A React form was unexpectedly submitted.\\')\"===e&&(a.preventDefault(),b?(a=document.createElement(\"input\"),a.name=b.name,a.value=b.value,b.parentNode.insertBefore(a,b),b=new FormData(c),a.parentNode.removeChild(a)):b=new FormData(c),a=c.getRootNode(),(a.$$reactFormReplay=a.$$reactFormReplay||[]).push(c,\\nd,b))}});';\n        function getValueDescriptorExpectingObjectForWarning(thing) {\n            return thing === null ? \"`null`\" : thing === undefined ? \"`undefined`\" : thing === \"\" ? \"an empty string\" : 'something with type \"' + typeof thing + '\"';\n        }\n        function getValueDescriptorExpectingEnumForWarning(thing) {\n            return thing === null ? \"`null`\" : thing === undefined ? \"`undefined`\" : thing === \"\" ? \"an empty string\" : typeof thing === \"string\" ? JSON.stringify(thing) : 'something with type \"' + typeof thing + '\"';\n        }\n        function compareResourcePropsForWarning(newProps, currentProps) {\n            {\n                var propDiffs = null;\n                var allProps = Array.from(new Set(Object.keys(currentProps).concat(Object.keys(newProps))));\n                for(var i = 0; i < allProps.length; i++){\n                    var propName = allProps[i];\n                    var newValue = newProps[propName];\n                    var currentValue = currentProps[propName];\n                    if (newValue !== currentValue && !(newValue == null && currentValue == null)) {\n                        if (newValue == null) {\n                            if (propDiffs === null) {\n                                propDiffs = {\n                                    missing: {},\n                                    extra: {},\n                                    different: {}\n                                };\n                            }\n                            propDiffs.missing[propName] = currentValue;\n                        } else if (currentValue == null) {\n                            if (propDiffs === null) {\n                                propDiffs = {\n                                    missing: {},\n                                    extra: {},\n                                    different: {}\n                                };\n                            }\n                            propDiffs.extra[propName] = newValue;\n                        } else {\n                            if (propDiffs === null) {\n                                propDiffs = {\n                                    missing: {},\n                                    extra: {},\n                                    different: {}\n                                };\n                            }\n                            propDiffs.different[propName] = {\n                                original: currentValue,\n                                latest: newValue\n                            };\n                        }\n                    }\n                }\n                return propDiffs;\n            }\n        }\n        function describeDifferencesForStylesheets(newProps, currentProps) {\n            var diff = compareResourcePropsForWarning(newProps, currentProps);\n            if (!diff) return \"\";\n            var description = \"\";\n            for(var propName in diff.missing){\n                var propValue = diff.missing[propName];\n                if (propName === \"media\") {\n                    description += '\\n  \"' + propName + '\" missing for props, original value: ' + getValueDescriptorExpectingEnumForWarning(propValue);\n                }\n            }\n            for(var _propName in diff.extra){\n                var _propValue = diff.extra[_propName];\n                description += '\\n  \"' + _propName + '\" prop value: ' + getValueDescriptorExpectingEnumForWarning(_propValue) + \", missing from original props\";\n            }\n            for(var _propName2 in diff.different){\n                var latestValue = diff.different[_propName2].latest;\n                var originalValue = diff.different[_propName2].original;\n                description += '\\n  \"' + _propName2 + '\" prop value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + \", original value: \" + getValueDescriptorExpectingEnumForWarning(originalValue);\n            }\n            return description;\n        }\n        function describeDifferencesForStylesheetOverPreinit(newProps, currentProps) {\n            var diff = compareResourcePropsForWarning(newProps, currentProps);\n            if (!diff) return \"\";\n            var description = \"\";\n            for(var propName in diff.extra){\n                var propValue = diff.extra[propName];\n                if (propName === \"precedence\" || propName === \"crossOrigin\" || propName === \"integrity\") {\n                    description += '\\n  \"' + propName + '\" prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue) + \", option missing\";\n                } else {\n                    description += '\\n  \"' + propName + '\" prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue) + \", option not available with ReactDOM.preinit()\";\n                }\n            }\n            for(var _propName3 in diff.different){\n                var latestValue = diff.different[_propName3].latest;\n                var originalValue = diff.different[_propName3].original;\n                if (_propName3 === \"precedence\" && originalValue === \"default\") {\n                    description += '\\n  \"' + _propName3 + '\" prop value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + \", missing from options\";\n                } else {\n                    description += '\\n  \"' + _propName3 + '\" prop value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + \", option value: \" + getValueDescriptorExpectingEnumForWarning(originalValue);\n                }\n            }\n            return description;\n        }\n        function describeDifferencesForPreinitOverStylesheet(newProps, currentProps) {\n            var diff = compareResourcePropsForWarning(newProps, currentProps);\n            if (!diff) return \"\";\n            var description = \"\";\n            for(var propName in diff.missing){\n                var propValue = diff.missing[propName];\n                if (propName === \"precedence\" && propValue !== \"default\") {\n                    description += '\\n  \"' + propName + '\" missing from options, prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue);\n                }\n            }\n            for(var _propName4 in diff.extra){\n                var _propValue2 = diff.extra[_propName4];\n                if (_propName4 === \"precedence\" || _propName4 === \"crossOrigin\" || _propName4 === \"integrity\") {\n                    description += '\\n  \"' + _propName4 + '\" option value: ' + getValueDescriptorExpectingEnumForWarning(_propValue2) + \", missing from props\";\n                }\n            }\n            for(var _propName5 in diff.different){\n                var latestValue = diff.different[_propName5].latest;\n                var originalValue = diff.different[_propName5].original;\n                description += '\\n  \"' + _propName5 + '\" option value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + \", prop value: \" + getValueDescriptorExpectingEnumForWarning(originalValue);\n            }\n            return description;\n        }\n        function describeDifferencesForPreinits(newProps, currentProps) {\n            var diff = compareResourcePropsForWarning(newProps, currentProps);\n            if (!diff) return \"\";\n            var description = \"\";\n            for(var propName in diff.missing){\n                var propValue = diff.missing[propName];\n                if (propName === \"precedence\" && propValue !== \"default\") {\n                    description += '\\n  \"' + propName + '\" missing from options, original option value: ' + getValueDescriptorExpectingEnumForWarning(propValue);\n                }\n            }\n            for(var _propName6 in diff.extra){\n                var _propValue3 = diff.extra[_propName6];\n                if (_propName6 === \"precedence\" && _propValue3 !== \"default\" || _propName6 === \"crossOrigin\" || _propName6 === \"integrity\") {\n                    description += '\\n  \"' + _propName6 + '\" option value: ' + getValueDescriptorExpectingEnumForWarning(_propValue3) + \", missing from original options\";\n                }\n            }\n            for(var _propName7 in diff.different){\n                var latestValue = diff.different[_propName7].latest;\n                var originalValue = diff.different[_propName7].original;\n                description += '\\n  \"' + _propName7 + '\" option value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + \", original option value: \" + getValueDescriptorExpectingEnumForWarning(originalValue);\n            }\n            return description;\n        }\n        var preloadOptionsForComparison = [\n            \"as\",\n            \"crossOrigin\",\n            \"integrity\",\n            \"media\"\n        ];\n        function describeDifferencesForPreloads(newProps, currentProps) {\n            var diff = compareResourcePropsForWarning(newProps, currentProps);\n            if (!diff) return \"\";\n            var description = \"\";\n            for(var propName in diff.missing){\n                var propValue = diff.missing[propName];\n                if (preloadOptionsForComparison.includes(propName)) {\n                    description += '\\n  \"' + propName + '\" missing from options, original option value: ' + getValueDescriptorExpectingEnumForWarning(propValue);\n                }\n            }\n            for(var _propName8 in diff.extra){\n                var _propValue4 = diff.extra[_propName8];\n                if (preloadOptionsForComparison.includes(_propName8)) {\n                    description += '\\n  \"' + _propName8 + '\" option value: ' + getValueDescriptorExpectingEnumForWarning(_propValue4) + \", missing from original options\";\n                }\n            }\n            for(var _propName9 in diff.different){\n                var latestValue = diff.different[_propName9].latest;\n                var originalValue = diff.different[_propName9].original;\n                if (preloadOptionsForComparison.includes(_propName9)) {\n                    description += '\\n  \"' + _propName9 + '\" option value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + \", original option value: \" + getValueDescriptorExpectingEnumForWarning(originalValue);\n                }\n            }\n            return description;\n        }\n        function describeDifferencesForPreloadOverImplicitPreload(newProps, currentProps) {\n            var diff = compareResourcePropsForWarning(newProps, currentProps);\n            if (!diff) return \"\";\n            var description = \"\";\n            for(var propName in diff.missing){\n                var propValue = diff.missing[propName];\n                if (preloadOptionsForComparison.includes(propName)) {\n                    description += '\\n  \"' + propName + '\" missing from options, underlying prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue);\n                }\n            }\n            for(var _propName10 in diff.extra){\n                var _propValue5 = diff.extra[_propName10];\n                if (preloadOptionsForComparison.includes(_propName10)) {\n                    description += '\\n  \"' + _propName10 + '\" option value: ' + getValueDescriptorExpectingEnumForWarning(_propValue5) + \", missing from underlying props\";\n                }\n            }\n            for(var _propName11 in diff.different){\n                var latestValue = diff.different[_propName11].latest;\n                var originalValue = diff.different[_propName11].original;\n                if (preloadOptionsForComparison.includes(_propName11)) {\n                    description += '\\n  \"' + _propName11 + '\" option value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + \", underlying prop value: \" + getValueDescriptorExpectingEnumForWarning(originalValue);\n                }\n            }\n            return description;\n        }\n        function describeDifferencesForScripts(newProps, currentProps) {\n            var diff = compareResourcePropsForWarning(newProps, currentProps);\n            if (!diff) return \"\";\n            var description = \"\";\n            for(var propName in diff.missing){\n                var propValue = diff.missing[propName];\n                description += '\\n  \"' + propName + '\" missing for props, original value: ' + getValueDescriptorExpectingEnumForWarning(propValue);\n            }\n            for(var _propName12 in diff.extra){\n                var _propValue6 = diff.extra[_propName12];\n                description += '\\n  \"' + _propName12 + '\" prop value: ' + getValueDescriptorExpectingEnumForWarning(_propValue6) + \", missing from original props\";\n            }\n            for(var _propName13 in diff.different){\n                var latestValue = diff.different[_propName13].latest;\n                var originalValue = diff.different[_propName13].original;\n                description += '\\n  \"' + _propName13 + '\" prop value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + \", original value: \" + getValueDescriptorExpectingEnumForWarning(originalValue);\n            }\n            return description;\n        }\n        function describeDifferencesForScriptOverPreinit(newProps, currentProps) {\n            var diff = compareResourcePropsForWarning(newProps, currentProps);\n            if (!diff) return \"\";\n            var description = \"\";\n            for(var propName in diff.extra){\n                var propValue = diff.extra[propName];\n                if (propName === \"crossOrigin\" || propName === \"integrity\") {\n                    description += '\\n  \"' + propName + '\" prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue) + \", option missing\";\n                } else {\n                    description += '\\n  \"' + propName + '\" prop value: ' + getValueDescriptorExpectingEnumForWarning(propValue) + \", option not available with ReactDOM.preinit()\";\n                }\n            }\n            for(var _propName14 in diff.different){\n                var latestValue = diff.different[_propName14].latest;\n                var originalValue = diff.different[_propName14].original;\n                description += '\\n  \"' + _propName14 + '\" prop value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + \", option value: \" + getValueDescriptorExpectingEnumForWarning(originalValue);\n            }\n            return description;\n        }\n        function describeDifferencesForPreinitOverScript(newProps, currentProps) {\n            var diff = compareResourcePropsForWarning(newProps, currentProps);\n            if (!diff) return \"\";\n            var description = \"\";\n            for(var propName in diff.extra){\n                var propValue = diff.extra[propName];\n                if (propName === \"crossOrigin\" || propName === \"integrity\") {\n                    description += '\\n  \"' + propName + '\" option value: ' + getValueDescriptorExpectingEnumForWarning(propValue) + \", missing from props\";\n                }\n            }\n            for(var _propName15 in diff.different){\n                var latestValue = diff.different[_propName15].latest;\n                var originalValue = diff.different[_propName15].original;\n                description += '\\n  \"' + _propName15 + '\" option value: ' + getValueDescriptorExpectingEnumForWarning(latestValue) + \", prop value: \" + getValueDescriptorExpectingEnumForWarning(originalValue);\n            }\n            return description;\n        }\n        var ReactDOMSharedInternals = ReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        var ReactDOMCurrentDispatcher = ReactDOMSharedInternals.Dispatcher;\n        var ReactDOMServerDispatcher = {\n            prefetchDNS: prefetchDNS,\n            preconnect: preconnect,\n            preload: preload,\n            preinit: preinit\n        };\n        function prepareHostDispatcher() {\n            ReactDOMCurrentDispatcher.current = ReactDOMServerDispatcher;\n        } // Used to distinguish these contexts from ones used in other renderers.\n        var ScriptStreamingFormat = 0;\n        var DataStreamingFormat = 1;\n        var NothingSent = 0;\n        var SentCompleteSegmentFunction = 1;\n        var SentCompleteBoundaryFunction = 2;\n        var SentClientRenderFunction = 4;\n        var SentStyleInsertionFunction = 8;\n        var dataElementQuotedEnd = stringToPrecomputedChunk('\"></template>');\n        var startInlineScript = stringToPrecomputedChunk(\"<script>\");\n        var endInlineScript = stringToPrecomputedChunk(\"</script>\");\n        var startScriptSrc = stringToPrecomputedChunk('<script src=\"');\n        var startModuleSrc = stringToPrecomputedChunk('<script type=\"module\" src=\"');\n        var scriptNonce = stringToPrecomputedChunk('\" nonce=\"');\n        var scriptIntegirty = stringToPrecomputedChunk('\" integrity=\"');\n        var scriptCrossOrigin = stringToPrecomputedChunk('\" crossorigin=\"');\n        var endAsyncScript = stringToPrecomputedChunk('\" async=\"\"></script>');\n        /**\n * This escaping function is designed to work with bootstrapScriptContent only.\n * because we know we are escaping the entire script. We can avoid for instance\n * escaping html comment string sequences that are valid javascript as well because\n * if there are no sebsequent <script sequences the html parser will never enter\n * script data double escaped state (see: https://www.w3.org/TR/html53/syntax.html#script-data-double-escaped-state)\n *\n * While untrusted script content should be made safe before using this api it will\n * ensure that the script cannot be early terminated or never terminated state\n */ function escapeBootstrapScriptContent(scriptText) {\n            {\n                checkHtmlStringCoercion(scriptText);\n            }\n            return (\"\" + scriptText).replace(scriptRegex, scriptReplacer);\n        }\n        var scriptRegex = /(<\\/|<)(s)(cript)/gi;\n        var scriptReplacer = function(match, prefix, s, suffix) {\n            return \"\" + prefix + (s === \"s\" ? \"\\\\u0073\" : \"\\\\u0053\") + suffix;\n        }; // Allows us to keep track of what we've already written so we can refer back to it.\n        // if passed externalRuntimeConfig and the enableFizzExternalRuntime feature flag\n        // is set, the server will send instructions via data attributes (instead of inline scripts)\n        function createResponseState(resources, identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules, externalRuntimeConfig) {\n            var idPrefix = identifierPrefix === undefined ? \"\" : identifierPrefix;\n            var inlineScriptWithNonce = nonce === undefined ? startInlineScript : stringToPrecomputedChunk('<script nonce=\"' + escapeTextForBrowser(nonce) + '\">');\n            var bootstrapChunks = [];\n            var externalRuntimeScript = null;\n            var streamingFormat = ScriptStreamingFormat;\n            if (bootstrapScriptContent !== undefined) {\n                bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapScriptContent(bootstrapScriptContent)), endInlineScript);\n            }\n            {\n                if (externalRuntimeConfig !== undefined) {\n                    streamingFormat = DataStreamingFormat;\n                    if (typeof externalRuntimeConfig === \"string\") {\n                        externalRuntimeScript = {\n                            src: externalRuntimeConfig,\n                            chunks: []\n                        };\n                        pushScriptImpl(externalRuntimeScript.chunks, {\n                            src: externalRuntimeConfig,\n                            async: true,\n                            integrity: undefined,\n                            nonce: nonce\n                        });\n                    } else {\n                        externalRuntimeScript = {\n                            src: externalRuntimeConfig.src,\n                            chunks: []\n                        };\n                        pushScriptImpl(externalRuntimeScript.chunks, {\n                            src: externalRuntimeConfig.src,\n                            async: true,\n                            integrity: externalRuntimeConfig.integrity,\n                            nonce: nonce\n                        });\n                    }\n                }\n            }\n            if (bootstrapScripts !== undefined) {\n                for(var i = 0; i < bootstrapScripts.length; i++){\n                    var scriptConfig = bootstrapScripts[i];\n                    var src = typeof scriptConfig === \"string\" ? scriptConfig : scriptConfig.src;\n                    var integrity = typeof scriptConfig === \"string\" ? undefined : scriptConfig.integrity;\n                    var crossOrigin = typeof scriptConfig === \"string\" || scriptConfig.crossOrigin == null ? undefined : scriptConfig.crossOrigin === \"use-credentials\" ? \"use-credentials\" : \"\";\n                    preloadBootstrapScript(resources, src, nonce, integrity, crossOrigin);\n                    bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(src)));\n                    if (nonce) {\n                        bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));\n                    }\n                    if (integrity) {\n                        bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(integrity)));\n                    }\n                    if (typeof crossOrigin === \"string\") {\n                        bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(crossOrigin)));\n                    }\n                    bootstrapChunks.push(endAsyncScript);\n                }\n            }\n            if (bootstrapModules !== undefined) {\n                for(var _i = 0; _i < bootstrapModules.length; _i++){\n                    var _scriptConfig = bootstrapModules[_i];\n                    var _src = typeof _scriptConfig === \"string\" ? _scriptConfig : _scriptConfig.src;\n                    var _integrity = typeof _scriptConfig === \"string\" ? undefined : _scriptConfig.integrity;\n                    var _crossOrigin = typeof _scriptConfig === \"string\" || _scriptConfig.crossOrigin == null ? undefined : _scriptConfig.crossOrigin === \"use-credentials\" ? \"use-credentials\" : \"\";\n                    preloadBootstrapModule(resources, _src, nonce, _integrity, _crossOrigin);\n                    bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(_src)));\n                    if (nonce) {\n                        bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));\n                    }\n                    if (_integrity) {\n                        bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(_integrity)));\n                    }\n                    if (typeof _crossOrigin === \"string\") {\n                        bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(_crossOrigin)));\n                    }\n                    bootstrapChunks.push(endAsyncScript);\n                }\n            }\n            return {\n                bootstrapChunks: bootstrapChunks,\n                placeholderPrefix: stringToPrecomputedChunk(idPrefix + \"P:\"),\n                segmentPrefix: stringToPrecomputedChunk(idPrefix + \"S:\"),\n                boundaryPrefix: idPrefix + \"B:\",\n                idPrefix: idPrefix,\n                nextSuspenseID: 0,\n                streamingFormat: streamingFormat,\n                startInlineScript: inlineScriptWithNonce,\n                instructions: NothingSent,\n                externalRuntimeScript: externalRuntimeScript,\n                htmlChunks: null,\n                headChunks: null,\n                hasBody: false,\n                charsetChunks: [],\n                preconnectChunks: [],\n                preloadChunks: [],\n                hoistableChunks: [],\n                stylesToHoist: false,\n                nonce: nonce\n            };\n        } // Constants for the insertion mode we're currently writing in. We don't encode all HTML5 insertion\n        // modes. We only include the variants as they matter for the sake of our purposes.\n        // We don't actually provide the namespace therefore we use constants instead of the string.\n        var ROOT_HTML_MODE = 0; // Used for the root most element tag.\n        // We have a less than HTML_HTML_MODE check elsewhere. If you add more cases here, make sure it\n        // still makes sense\n        var HTML_HTML_MODE = 1; // Used for the <html> if it is at the top level.\n        var HTML_MODE = 2;\n        var SVG_MODE = 3;\n        var MATHML_MODE = 4;\n        var HTML_TABLE_MODE = 5;\n        var HTML_TABLE_BODY_MODE = 6;\n        var HTML_TABLE_ROW_MODE = 7;\n        var HTML_COLGROUP_MODE = 8; // We have a greater than HTML_TABLE_MODE check elsewhere. If you add more cases here, make sure it\n        // still makes sense\n        // Lets us keep track of contextual state and pick it back up after suspending.\n        function createFormatContext(insertionMode, selectedValue, noscriptTagInScope) {\n            return {\n                insertionMode: insertionMode,\n                selectedValue: selectedValue,\n                noscriptTagInScope: noscriptTagInScope\n            };\n        }\n        function createRootFormatContext(namespaceURI) {\n            var insertionMode = namespaceURI === \"http://www.w3.org/2000/svg\" ? SVG_MODE : namespaceURI === \"http://www.w3.org/1998/Math/MathML\" ? MATHML_MODE : ROOT_HTML_MODE;\n            return createFormatContext(insertionMode, null, false);\n        }\n        function getChildFormatContext(parentContext, type, props) {\n            switch(type){\n                case \"noscript\":\n                    return createFormatContext(HTML_MODE, null, true);\n                case \"select\":\n                    return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue, parentContext.noscriptTagInScope);\n                case \"svg\":\n                    return createFormatContext(SVG_MODE, null, parentContext.noscriptTagInScope);\n                case \"math\":\n                    return createFormatContext(MATHML_MODE, null, parentContext.noscriptTagInScope);\n                case \"foreignObject\":\n                    return createFormatContext(HTML_MODE, null, parentContext.noscriptTagInScope);\n                // Table parents are special in that their children can only be created at all if they're\n                // wrapped in a table parent. So we need to encode that we're entering this mode.\n                case \"table\":\n                    return createFormatContext(HTML_TABLE_MODE, null, parentContext.noscriptTagInScope);\n                case \"thead\":\n                case \"tbody\":\n                case \"tfoot\":\n                    return createFormatContext(HTML_TABLE_BODY_MODE, null, parentContext.noscriptTagInScope);\n                case \"colgroup\":\n                    return createFormatContext(HTML_COLGROUP_MODE, null, parentContext.noscriptTagInScope);\n                case \"tr\":\n                    return createFormatContext(HTML_TABLE_ROW_MODE, null, parentContext.noscriptTagInScope);\n            }\n            if (parentContext.insertionMode >= HTML_TABLE_MODE) {\n                // Whatever tag this was, it wasn't a table parent or other special parent, so we must have\n                // entered plain HTML again.\n                return createFormatContext(HTML_MODE, null, parentContext.noscriptTagInScope);\n            }\n            if (parentContext.insertionMode === ROOT_HTML_MODE) {\n                if (type === \"html\") {\n                    // We've emitted the root and is now in <html> mode.\n                    return createFormatContext(HTML_HTML_MODE, null, false);\n                } else {\n                    // We've emitted the root and is now in plain HTML mode.\n                    return createFormatContext(HTML_MODE, null, false);\n                }\n            } else if (parentContext.insertionMode === HTML_HTML_MODE) {\n                // We've emitted the document element and is now in plain HTML mode.\n                return createFormatContext(HTML_MODE, null, false);\n            }\n            return parentContext;\n        }\n        var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;\n        function assignSuspenseBoundaryID(responseState) {\n            var generatedID = responseState.nextSuspenseID++;\n            return stringToPrecomputedChunk(responseState.boundaryPrefix + generatedID.toString(16));\n        }\n        function makeId(responseState, treeId, localId) {\n            var idPrefix = responseState.idPrefix;\n            var id = \":\" + idPrefix + \"R\" + treeId; // Unless this is the first id at this level, append a number at the end\n            // that represents the position of this useId hook among all the useId\n            // hooks for this fiber.\n            if (localId > 0) {\n                id += \"H\" + localId.toString(32);\n            }\n            return id + \":\";\n        }\n        function encodeHTMLTextNode(text) {\n            return escapeTextForBrowser(text);\n        }\n        var textSeparator = stringToPrecomputedChunk(\"<!-- -->\");\n        function pushTextInstance(target, text, responseState, textEmbedded) {\n            if (text === \"\") {\n                // Empty text doesn't have a DOM node representation and the hydration is aware of this.\n                return textEmbedded;\n            }\n            if (textEmbedded) {\n                target.push(textSeparator);\n            }\n            target.push(stringToChunk(encodeHTMLTextNode(text)));\n            return true;\n        } // Called when Fizz is done with a Segment. Currently the only purpose is to conditionally\n        // emit a text separator when we don't know for sure it is safe to omit\n        function pushSegmentFinale(target, responseState, lastPushedText, textEmbedded) {\n            if (lastPushedText && textEmbedded) {\n                target.push(textSeparator);\n            }\n        }\n        var styleNameCache = new Map();\n        function processStyleName(styleName) {\n            var chunk = styleNameCache.get(styleName);\n            if (chunk !== undefined) {\n                return chunk;\n            }\n            var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));\n            styleNameCache.set(styleName, result);\n            return result;\n        }\n        var styleAttributeStart = stringToPrecomputedChunk(' style=\"');\n        var styleAssign = stringToPrecomputedChunk(\":\");\n        var styleSeparator = stringToPrecomputedChunk(\";\");\n        function pushStyleAttribute(target, style) {\n            if (typeof style !== \"object\") {\n                throw new Error(\"The `style` prop expects a mapping from style properties to values, \" + \"not a string. For example, style={{marginRight: spacing + 'em'}} when \" + \"using JSX.\");\n            }\n            var isFirst = true;\n            for(var styleName in style){\n                if (!hasOwnProperty.call(style, styleName)) {\n                    continue;\n                } // If you provide unsafe user data here they can inject arbitrary CSS\n                // which may be problematic (I couldn't repro this):\n                // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n                // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n                // This is not an XSS hole but instead a potential CSS injection issue\n                // which has lead to a greater discussion about how we're going to\n                // trust URLs moving forward. See #2115901\n                var styleValue = style[styleName];\n                if (styleValue == null || typeof styleValue === \"boolean\" || styleValue === \"\") {\n                    continue;\n                }\n                var nameChunk = void 0;\n                var valueChunk = void 0;\n                var isCustomProperty = styleName.indexOf(\"--\") === 0;\n                if (isCustomProperty) {\n                    nameChunk = stringToChunk(escapeTextForBrowser(styleName));\n                    {\n                        checkCSSPropertyStringCoercion(styleValue, styleName);\n                    }\n                    valueChunk = stringToChunk(escapeTextForBrowser((\"\" + styleValue).trim()));\n                } else {\n                    {\n                        warnValidStyle(styleName, styleValue);\n                    }\n                    nameChunk = processStyleName(styleName);\n                    if (typeof styleValue === \"number\") {\n                        if (styleValue !== 0 && !isUnitlessNumber(styleName)) {\n                            valueChunk = stringToChunk(styleValue + \"px\"); // Presumes implicit 'px' suffix for unitless numbers\n                        } else {\n                            valueChunk = stringToChunk(\"\" + styleValue);\n                        }\n                    } else {\n                        {\n                            checkCSSPropertyStringCoercion(styleValue, styleName);\n                        }\n                        valueChunk = stringToChunk(escapeTextForBrowser((\"\" + styleValue).trim()));\n                    }\n                }\n                if (isFirst) {\n                    isFirst = false; // If it's first, we don't need any separators prefixed.\n                    target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);\n                } else {\n                    target.push(styleSeparator, nameChunk, styleAssign, valueChunk);\n                }\n            }\n            if (!isFirst) {\n                target.push(attributeEnd);\n            }\n        }\n        var attributeSeparator = stringToPrecomputedChunk(\" \");\n        var attributeAssign = stringToPrecomputedChunk('=\"');\n        var attributeEnd = stringToPrecomputedChunk('\"');\n        var attributeEmptyString = stringToPrecomputedChunk('=\"\"');\n        function pushBooleanAttribute(target, name, value) {\n            if (value && typeof value !== \"function\" && typeof value !== \"symbol\") {\n                target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);\n            }\n        }\n        function pushStringAttribute(target, name, value) {\n            if (typeof value !== \"function\" && typeof value !== \"symbol\" && typeof value !== \"boolean\") {\n                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n            }\n        }\n        // than on the client and hopefully it's googleable.\n        stringToPrecomputedChunk(escapeTextForBrowser(\"javascript:throw new Error('A React form was unexpectedly submitted.')\"));\n        var startHiddenInputChunk = stringToPrecomputedChunk('<input type=\"hidden\"');\n        function pushAdditionalFormField(value, key) {\n            var target = this;\n            target.push(startHiddenInputChunk);\n            if (typeof value !== \"string\") {\n                throw new Error(\"File/Blob fields are not yet supported in progressive forms. \" + \"It probably means you are closing over binary data or FormData in a Server Action.\");\n            }\n            pushStringAttribute(target, \"name\", key);\n            pushStringAttribute(target, \"value\", value);\n            target.push(endOfStartTagSelfClosing);\n        }\n        function pushAdditionalFormFields(target, formData) {\n            if (formData !== null) {\n                // $FlowFixMe[prop-missing]: FormData has forEach.\n                formData.forEach(pushAdditionalFormField, target);\n            }\n        }\n        function pushFormActionAttribute(target, responseState, formAction, formEncType, formMethod, formTarget, name) {\n            var formData = null;\n            if (name != null) {\n                pushAttribute(target, \"name\", name);\n            }\n            if (formAction != null) {\n                pushAttribute(target, \"formAction\", formAction);\n            }\n            if (formEncType != null) {\n                pushAttribute(target, \"formEncType\", formEncType);\n            }\n            if (formMethod != null) {\n                pushAttribute(target, \"formMethod\", formMethod);\n            }\n            if (formTarget != null) {\n                pushAttribute(target, \"formTarget\", formTarget);\n            }\n            return formData;\n        }\n        function pushAttribute(target, name, value) {\n            switch(name){\n                // These are very common props and therefore are in the beginning of the switch.\n                // TODO: aria-label is a very common prop but allows booleans so is not like the others\n                // but should ideally go in this list too.\n                case \"className\":\n                    {\n                        pushStringAttribute(target, \"class\", value);\n                        break;\n                    }\n                case \"tabIndex\":\n                    {\n                        pushStringAttribute(target, \"tabindex\", value);\n                        break;\n                    }\n                case \"dir\":\n                case \"role\":\n                case \"viewBox\":\n                case \"width\":\n                case \"height\":\n                    {\n                        pushStringAttribute(target, name, value);\n                        break;\n                    }\n                case \"style\":\n                    {\n                        pushStyleAttribute(target, value);\n                        return;\n                    }\n                case \"src\":\n                case \"href\":\n                // Fall through to the last case which shouldn't remove empty strings.\n                case \"action\":\n                case \"formAction\":\n                    {\n                        // TODO: Consider only special casing these for each tag.\n                        if (value == null || typeof value === \"function\" || typeof value === \"symbol\" || typeof value === \"boolean\") {\n                            return;\n                        }\n                        {\n                            checkAttributeStringCoercion(value, name);\n                        }\n                        var sanitizedValue = sanitizeURL(\"\" + value);\n                        target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(sanitizedValue)), attributeEnd);\n                        return;\n                    }\n                case \"defaultValue\":\n                case \"defaultChecked\":\n                case \"innerHTML\":\n                case \"suppressContentEditableWarning\":\n                case \"suppressHydrationWarning\":\n                    // Ignored. These are built-in to React on the client.\n                    return;\n                case \"autoFocus\":\n                case \"multiple\":\n                case \"muted\":\n                    {\n                        pushBooleanAttribute(target, name.toLowerCase(), value);\n                        return;\n                    }\n                case \"xlinkHref\":\n                    {\n                        if (typeof value === \"function\" || typeof value === \"symbol\" || typeof value === \"boolean\") {\n                            return;\n                        }\n                        {\n                            checkAttributeStringCoercion(value, name);\n                        }\n                        var _sanitizedValue = sanitizeURL(\"\" + value);\n                        target.push(attributeSeparator, stringToChunk(\"xlink:href\"), attributeAssign, stringToChunk(escapeTextForBrowser(_sanitizedValue)), attributeEnd);\n                        return;\n                    }\n                case \"contentEditable\":\n                case \"spellCheck\":\n                case \"draggable\":\n                case \"value\":\n                case \"autoReverse\":\n                case \"externalResourcesRequired\":\n                case \"focusable\":\n                case \"preserveAlpha\":\n                    {\n                        // Booleanish String\n                        // These are \"enumerated\" attributes that accept \"true\" and \"false\".\n                        // In React, we let users pass `true` and `false` even though technically\n                        // these aren't boolean attributes (they are coerced to strings).\n                        if (typeof value !== \"function\" && typeof value !== \"symbol\") {\n                            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n                        }\n                        return;\n                    }\n                case \"allowFullScreen\":\n                case \"async\":\n                case \"autoPlay\":\n                case \"controls\":\n                case \"default\":\n                case \"defer\":\n                case \"disabled\":\n                case \"disablePictureInPicture\":\n                case \"disableRemotePlayback\":\n                case \"formNoValidate\":\n                case \"hidden\":\n                case \"loop\":\n                case \"noModule\":\n                case \"noValidate\":\n                case \"open\":\n                case \"playsInline\":\n                case \"readOnly\":\n                case \"required\":\n                case \"reversed\":\n                case \"scoped\":\n                case \"seamless\":\n                case \"itemScope\":\n                    {\n                        // Boolean\n                        if (value && typeof value !== \"function\" && typeof value !== \"symbol\") {\n                            target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);\n                        }\n                        return;\n                    }\n                case \"capture\":\n                case \"download\":\n                    {\n                        // Overloaded Boolean\n                        if (value === true) {\n                            target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);\n                        } else if (value === false) ;\n                        else if (typeof value !== \"function\" && typeof value !== \"symbol\") {\n                            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n                        }\n                        return;\n                    }\n                case \"cols\":\n                case \"rows\":\n                case \"size\":\n                case \"span\":\n                    {\n                        // These are HTML attributes that must be positive numbers.\n                        if (typeof value !== \"function\" && typeof value !== \"symbol\" && !isNaN(value) && value >= 1) {\n                            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n                        }\n                        return;\n                    }\n                case \"rowSpan\":\n                case \"start\":\n                    {\n                        // These are HTML attributes that must be numbers.\n                        if (typeof value !== \"function\" && typeof value !== \"symbol\" && !isNaN(value)) {\n                            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n                        }\n                        return;\n                    }\n                case \"xlinkActuate\":\n                    pushStringAttribute(target, \"xlink:actuate\", value);\n                    return;\n                case \"xlinkArcrole\":\n                    pushStringAttribute(target, \"xlink:arcrole\", value);\n                    return;\n                case \"xlinkRole\":\n                    pushStringAttribute(target, \"xlink:role\", value);\n                    return;\n                case \"xlinkShow\":\n                    pushStringAttribute(target, \"xlink:show\", value);\n                    return;\n                case \"xlinkTitle\":\n                    pushStringAttribute(target, \"xlink:title\", value);\n                    return;\n                case \"xlinkType\":\n                    pushStringAttribute(target, \"xlink:type\", value);\n                    return;\n                case \"xmlBase\":\n                    pushStringAttribute(target, \"xml:base\", value);\n                    return;\n                case \"xmlLang\":\n                    pushStringAttribute(target, \"xml:lang\", value);\n                    return;\n                case \"xmlSpace\":\n                    pushStringAttribute(target, \"xml:space\", value);\n                    return;\n                default:\n                    if (// We have already filtered out null/undefined and reserved words.\n                    name.length > 2 && (name[0] === \"o\" || name[0] === \"O\") && (name[1] === \"n\" || name[1] === \"N\")) {\n                        return;\n                    }\n                    var attributeName = getAttributeAlias(name);\n                    if (isAttributeNameSafe(attributeName)) {\n                        // shouldRemoveAttribute\n                        switch(typeof value){\n                            case \"function\":\n                            case \"symbol\":\n                                // eslint-disable-line\n                                return;\n                            case \"boolean\":\n                                {\n                                    var prefix = attributeName.toLowerCase().slice(0, 5);\n                                    if (prefix !== \"data-\" && prefix !== \"aria-\") {\n                                        return;\n                                    }\n                                }\n                        }\n                        target.push(attributeSeparator, stringToChunk(attributeName), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);\n                    }\n            }\n        }\n        var endOfStartTag = stringToPrecomputedChunk(\">\");\n        var endOfStartTagSelfClosing = stringToPrecomputedChunk(\"/>\");\n        function pushInnerHTML(target, innerHTML, children) {\n            if (innerHTML != null) {\n                if (children != null) {\n                    throw new Error(\"Can only set one of `children` or `props.dangerouslySetInnerHTML`.\");\n                }\n                if (typeof innerHTML !== \"object\" || !(\"__html\" in innerHTML)) {\n                    throw new Error(\"`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. \" + \"Please visit https://reactjs.org/link/dangerously-set-inner-html \" + \"for more information.\");\n                }\n                var html = innerHTML.__html;\n                if (html !== null && html !== undefined) {\n                    {\n                        checkHtmlStringCoercion(html);\n                    }\n                    target.push(stringToChunk(\"\" + html));\n                }\n            }\n        } // TODO: Move these to ResponseState so that we warn for every request.\n        // It would help debugging in stateful servers (e.g. service worker).\n        var didWarnDefaultInputValue = false;\n        var didWarnDefaultChecked = false;\n        var didWarnDefaultSelectValue = false;\n        var didWarnDefaultTextareaValue = false;\n        var didWarnInvalidOptionChildren = false;\n        var didWarnInvalidOptionInnerHTML = false;\n        var didWarnSelectedSetOnOption = false;\n        var didWarnFormActionType = false;\n        function checkSelectProp(props, propName) {\n            {\n                var value = props[propName];\n                if (value != null) {\n                    var array = isArray(value);\n                    if (props.multiple && !array) {\n                        error(\"The `%s` prop supplied to <select> must be an array if \" + \"`multiple` is true.\", propName);\n                    } else if (!props.multiple && array) {\n                        error(\"The `%s` prop supplied to <select> must be a scalar \" + \"value if `multiple` is false.\", propName);\n                    }\n                }\n            }\n        }\n        function pushStartSelect(target, props) {\n            {\n                checkControlledValueProps(\"select\", props);\n                checkSelectProp(props, \"value\");\n                checkSelectProp(props, \"defaultValue\");\n                if (props.value !== undefined && props.defaultValue !== undefined && !didWarnDefaultSelectValue) {\n                    error(\"Select elements must be either controlled or uncontrolled \" + \"(specify either the value prop, or the defaultValue prop, but not \" + \"both). Decide between using a controlled or uncontrolled select \" + \"element and remove one of these props. More info: \" + \"https://reactjs.org/link/controlled-components\");\n                    didWarnDefaultSelectValue = true;\n                }\n            }\n            target.push(startChunkForTag(\"select\"));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            // TODO: This doesn't really make sense for select since it can't use the controlled\n                            // value in the innerHTML.\n                            innerHTML = propValue;\n                            break;\n                        case \"defaultValue\":\n                        case \"value\":\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            pushInnerHTML(target, innerHTML, children);\n            return children;\n        }\n        function flattenOptionChildren(children) {\n            var content = \"\"; // Flatten children and warn if they aren't strings or numbers;\n            // invalid types are ignored.\n            React.Children.forEach(children, function(child) {\n                if (child == null) {\n                    return;\n                }\n                content += child;\n                {\n                    if (!didWarnInvalidOptionChildren && typeof child !== \"string\" && typeof child !== \"number\") {\n                        didWarnInvalidOptionChildren = true;\n                        error(\"Cannot infer the option value of complex children. \" + \"Pass a `value` prop or use a plain string as children to <option>.\");\n                    }\n                }\n            });\n            return content;\n        }\n        var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=\"\"');\n        function pushStartOption(target, props, formatContext) {\n            var selectedValue = formatContext.selectedValue;\n            target.push(startChunkForTag(\"option\"));\n            var children = null;\n            var value = null;\n            var selected = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"selected\":\n                            // ignore\n                            selected = propValue;\n                            {\n                                // TODO: Remove support for `selected` in <option>.\n                                if (!didWarnSelectedSetOnOption) {\n                                    error(\"Use the `defaultValue` or `value` props on <select> instead of \" + \"setting `selected` on <option>.\");\n                                    didWarnSelectedSetOnOption = true;\n                                }\n                            }\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        case \"value\":\n                            value = propValue;\n                        // We intentionally fallthrough to also set the attribute on the node.\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            if (selectedValue != null) {\n                var stringValue;\n                if (value !== null) {\n                    {\n                        checkAttributeStringCoercion(value, \"value\");\n                    }\n                    stringValue = \"\" + value;\n                } else {\n                    {\n                        if (innerHTML !== null) {\n                            if (!didWarnInvalidOptionInnerHTML) {\n                                didWarnInvalidOptionInnerHTML = true;\n                                error(\"Pass a `value` prop if you set dangerouslyInnerHTML so React knows \" + \"which value should be selected.\");\n                            }\n                        }\n                    }\n                    stringValue = flattenOptionChildren(children);\n                }\n                if (isArray(selectedValue)) {\n                    // multiple\n                    for(var i = 0; i < selectedValue.length; i++){\n                        {\n                            checkAttributeStringCoercion(selectedValue[i], \"value\");\n                        }\n                        var v = \"\" + selectedValue[i];\n                        if (v === stringValue) {\n                            target.push(selectedMarkerAttribute);\n                            break;\n                        }\n                    }\n                } else {\n                    {\n                        checkAttributeStringCoercion(selectedValue, \"select.value\");\n                    }\n                    if (\"\" + selectedValue === stringValue) {\n                        target.push(selectedMarkerAttribute);\n                    }\n                }\n            } else if (selected) {\n                target.push(selectedMarkerAttribute);\n            }\n            target.push(endOfStartTag);\n            pushInnerHTML(target, innerHTML, children);\n            return children;\n        }\n        stringToPrecomputedChunk(formReplaying);\n        function pushStartForm(target, props, responseState) {\n            target.push(startChunkForTag(\"form\"));\n            var children = null;\n            var innerHTML = null;\n            var formAction = null;\n            var formEncType = null;\n            var formMethod = null;\n            var formTarget = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        case \"action\":\n                            formAction = propValue;\n                            break;\n                        case \"encType\":\n                            formEncType = propValue;\n                            break;\n                        case \"method\":\n                            formMethod = propValue;\n                            break;\n                        case \"target\":\n                            formTarget = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            if (formAction != null) {\n                pushAttribute(target, \"action\", formAction);\n            }\n            if (formEncType != null) {\n                pushAttribute(target, \"encType\", formEncType);\n            }\n            if (formMethod != null) {\n                pushAttribute(target, \"method\", formMethod);\n            }\n            if (formTarget != null) {\n                pushAttribute(target, \"target\", formTarget);\n            }\n            target.push(endOfStartTag);\n            pushInnerHTML(target, innerHTML, children);\n            if (typeof children === \"string\") {\n                // Special case children as a string to avoid the unnecessary comment.\n                // TODO: Remove this special case after the general optimization is in place.\n                target.push(stringToChunk(encodeHTMLTextNode(children)));\n                return null;\n            }\n            return children;\n        }\n        function pushInput(target, props, responseState) {\n            {\n                checkControlledValueProps(\"input\", props);\n            }\n            target.push(startChunkForTag(\"input\"));\n            var name = null;\n            var formAction = null;\n            var formEncType = null;\n            var formMethod = null;\n            var formTarget = null;\n            var value = null;\n            var defaultValue = null;\n            var checked = null;\n            var defaultChecked = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"input\" + \" is a self-closing tag and must neither have `children` nor \" + \"use `dangerouslySetInnerHTML`.\");\n                        case \"name\":\n                            name = propValue;\n                            break;\n                        case \"formAction\":\n                            formAction = propValue;\n                            break;\n                        case \"formEncType\":\n                            formEncType = propValue;\n                            break;\n                        case \"formMethod\":\n                            formMethod = propValue;\n                            break;\n                        case \"formTarget\":\n                            formTarget = propValue;\n                            break;\n                        case \"defaultChecked\":\n                            defaultChecked = propValue;\n                            break;\n                        case \"defaultValue\":\n                            defaultValue = propValue;\n                            break;\n                        case \"checked\":\n                            checked = propValue;\n                            break;\n                        case \"value\":\n                            value = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            {\n                if (formAction !== null && props.type !== \"image\" && props.type !== \"submit\" && !didWarnFormActionType) {\n                    didWarnFormActionType = true;\n                    error('An input can only specify a formAction along with type=\"submit\" or type=\"image\".');\n                }\n            }\n            var formData = pushFormActionAttribute(target, responseState, formAction, formEncType, formMethod, formTarget, name);\n            {\n                if (checked !== null && defaultChecked !== null && !didWarnDefaultChecked) {\n                    error(\"%s contains an input of type %s with both checked and defaultChecked props. \" + \"Input elements must be either controlled or uncontrolled \" + \"(specify either the checked prop, or the defaultChecked prop, but not \" + \"both). Decide between using a controlled or uncontrolled input \" + \"element and remove one of these props. More info: \" + \"https://reactjs.org/link/controlled-components\", \"A component\", props.type);\n                    didWarnDefaultChecked = true;\n                }\n                if (value !== null && defaultValue !== null && !didWarnDefaultInputValue) {\n                    error(\"%s contains an input of type %s with both value and defaultValue props. \" + \"Input elements must be either controlled or uncontrolled \" + \"(specify either the value prop, or the defaultValue prop, but not \" + \"both). Decide between using a controlled or uncontrolled input \" + \"element and remove one of these props. More info: \" + \"https://reactjs.org/link/controlled-components\", \"A component\", props.type);\n                    didWarnDefaultInputValue = true;\n                }\n            }\n            if (checked !== null) {\n                pushBooleanAttribute(target, \"checked\", checked);\n            } else if (defaultChecked !== null) {\n                pushBooleanAttribute(target, \"checked\", defaultChecked);\n            }\n            if (value !== null) {\n                pushAttribute(target, \"value\", value);\n            } else if (defaultValue !== null) {\n                pushAttribute(target, \"value\", defaultValue);\n            }\n            target.push(endOfStartTagSelfClosing); // We place any additional hidden form fields after the input.\n            pushAdditionalFormFields(target, formData);\n            return null;\n        }\n        function pushStartButton(target, props, responseState) {\n            target.push(startChunkForTag(\"button\"));\n            var children = null;\n            var innerHTML = null;\n            var name = null;\n            var formAction = null;\n            var formEncType = null;\n            var formMethod = null;\n            var formTarget = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        case \"name\":\n                            name = propValue;\n                            break;\n                        case \"formAction\":\n                            formAction = propValue;\n                            break;\n                        case \"formEncType\":\n                            formEncType = propValue;\n                            break;\n                        case \"formMethod\":\n                            formMethod = propValue;\n                            break;\n                        case \"formTarget\":\n                            formTarget = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            {\n                if (formAction !== null && props.type != null && props.type !== \"submit\" && !didWarnFormActionType) {\n                    didWarnFormActionType = true;\n                    error('A button can only specify a formAction along with type=\"submit\" or no type.');\n                }\n            }\n            var formData = pushFormActionAttribute(target, responseState, formAction, formEncType, formMethod, formTarget, name);\n            target.push(endOfStartTag); // We place any additional hidden form fields we need to include inside the button itself.\n            pushAdditionalFormFields(target, formData);\n            pushInnerHTML(target, innerHTML, children);\n            if (typeof children === \"string\") {\n                // Special case children as a string to avoid the unnecessary comment.\n                // TODO: Remove this special case after the general optimization is in place.\n                target.push(stringToChunk(encodeHTMLTextNode(children)));\n                return null;\n            }\n            return children;\n        }\n        function pushStartTextArea(target, props) {\n            {\n                checkControlledValueProps(\"textarea\", props);\n                if (props.value !== undefined && props.defaultValue !== undefined && !didWarnDefaultTextareaValue) {\n                    error(\"Textarea elements must be either controlled or uncontrolled \" + \"(specify either the value prop, or the defaultValue prop, but not \" + \"both). Decide between using a controlled or uncontrolled textarea \" + \"and remove one of these props. More info: \" + \"https://reactjs.org/link/controlled-components\");\n                    didWarnDefaultTextareaValue = true;\n                }\n            }\n            target.push(startChunkForTag(\"textarea\"));\n            var value = null;\n            var defaultValue = null;\n            var children = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"value\":\n                            value = propValue;\n                            break;\n                        case \"defaultValue\":\n                            defaultValue = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"`dangerouslySetInnerHTML` does not make sense on <textarea>.\");\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            if (value === null && defaultValue !== null) {\n                value = defaultValue;\n            }\n            target.push(endOfStartTag); // TODO (yungsters): Remove support for children content in <textarea>.\n            if (children != null) {\n                {\n                    error(\"Use the `defaultValue` or `value` props instead of setting \" + \"children on <textarea>.\");\n                }\n                if (value != null) {\n                    throw new Error(\"If you supply `defaultValue` on a <textarea>, do not pass children.\");\n                }\n                if (isArray(children)) {\n                    if (children.length > 1) {\n                        throw new Error(\"<textarea> can only have at most one child.\");\n                    } // TODO: remove the coercion and the DEV check below because it will\n                    // always be overwritten by the coercion several lines below it. #22309\n                    {\n                        checkHtmlStringCoercion(children[0]);\n                    }\n                    value = \"\" + children[0];\n                }\n                {\n                    checkHtmlStringCoercion(children);\n                }\n                value = \"\" + children;\n            }\n            if (typeof value === \"string\" && value[0] === \"\\n\") {\n                // text/html ignores the first character in these tags if it's a newline\n                // Prefer to break application/xml over text/html (for now) by adding\n                // a newline specifically to get eaten by the parser. (Alternately for\n                // textareas, replacing \"^\\n\" with \"\\r\\n\" doesn't get eaten, and the first\n                // \\r is normalized out by HTMLTextAreaElement#value.)\n                // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>\n                // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>\n                // See: <http://www.w3.org/TR/html5/syntax.html#newlines>\n                // See: Parsing of \"textarea\" \"listing\" and \"pre\" elements\n                //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>\n                target.push(leadingNewline);\n            } // ToString and push directly instead of recurse over children.\n            // We don't really support complex children in the value anyway.\n            // This also currently avoids a trailing comment node which breaks textarea.\n            if (value !== null) {\n                {\n                    checkAttributeStringCoercion(value, \"value\");\n                }\n                target.push(stringToChunk(encodeHTMLTextNode(\"\" + value)));\n            }\n            return null;\n        }\n        function pushMeta(target, props, responseState, textEmbedded, insertionMode, noscriptTagInScope) {\n            {\n                if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {\n                    return pushSelfClosing(target, props, \"meta\");\n                } else {\n                    if (textEmbedded) {\n                        // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n                        // to be safe and assume text will follow by inserting a textSeparator\n                        target.push(textSeparator);\n                    }\n                    if (typeof props.charSet === \"string\") {\n                        return pushSelfClosing(responseState.charsetChunks, props, \"meta\");\n                    } else if (props.name === \"viewport\") {\n                        // \"viewport\" isn't related to preconnect but it has the right priority\n                        return pushSelfClosing(responseState.preconnectChunks, props, \"meta\");\n                    } else {\n                        return pushSelfClosing(responseState.hoistableChunks, props, \"meta\");\n                    }\n                }\n            }\n        }\n        function pushLink(target, props, responseState, resources, textEmbedded, insertionMode, noscriptTagInScope) {\n            {\n                var rel = props.rel;\n                var href = props.href;\n                var precedence = props.precedence;\n                if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof rel !== \"string\" || typeof href !== \"string\" || href === \"\") {\n                    {\n                        if (rel === \"stylesheet\" && typeof props.precedence === \"string\") {\n                            if (typeof href !== \"string\" || !href) {\n                                error('React encountered a `<link rel=\"stylesheet\" .../>` with a `precedence` prop and expected the `href` prop to be a non-empty string but ecountered %s instead. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop ensure there is a non-empty string `href` prop as well, otherwise remove the `precedence` prop.', getValueDescriptorExpectingObjectForWarning(href));\n                            }\n                        }\n                    }\n                    pushLinkImpl(target, props);\n                    return null;\n                }\n                if (props.rel === \"stylesheet\") {\n                    // This <link> may hoistable as a Stylesheet Resource, otherwise it will emit in place\n                    var key = getResourceKey(\"style\", href);\n                    if (typeof precedence !== \"string\" || props.disabled != null || props.onLoad || props.onError) {\n                        // This stylesheet is either not opted into Resource semantics or has conflicting properties which\n                        // disqualify it for such. We can still create a preload resource to help it load faster on the\n                        // client\n                        {\n                            if (typeof precedence === \"string\") {\n                                if (props.disabled != null) {\n                                    error('React encountered a `<link rel=\"stylesheet\" .../>` with a `precedence` prop and a `disabled` prop. The presence of the `disabled` prop indicates an intent to manage the stylesheet active state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the `disabled` prop, otherwise remove the `precedence` prop.');\n                                } else if (props.onLoad || props.onError) {\n                                    var propDescription = props.onLoad && props.onError ? \"`onLoad` and `onError` props\" : props.onLoad ? \"`onLoad` prop\" : \"`onError` prop\";\n                                    error('React encountered a `<link rel=\"stylesheet\" .../>` with a `precedence` prop and %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.', propDescription, propDescription);\n                                }\n                            }\n                        }\n                        return pushLinkImpl(target, props);\n                    } else {\n                        // This stylesheet refers to a Resource and we create a new one if necessary\n                        var resource = resources.stylesMap.get(key);\n                        {\n                            var devResource = getAsResourceDEV(resource);\n                            if (devResource) {\n                                switch(devResource.__provenance){\n                                    case \"rendered\":\n                                        {\n                                            var differenceDescription = describeDifferencesForStylesheets(props, devResource.__originalProps);\n                                            if (differenceDescription) {\n                                                error('React encountered a <link rel=\"stylesheet\" href=\"%s\" .../> with a `precedence` prop that has props that conflict' + ' with another hoistable stylesheet with the same `href`. When using `precedence` with <link rel=\"stylsheet\" .../>' + \" the props from the first encountered instance will be used and props from later instances will be ignored.\" + ' Update the props on either <link rel=\"stylesheet\" .../> instance so they agree.%s', href, differenceDescription);\n                                            }\n                                            break;\n                                        }\n                                    case \"preinit\":\n                                        {\n                                            var _differenceDescription = describeDifferencesForStylesheetOverPreinit(props, devResource.__propsEquivalent);\n                                            if (_differenceDescription) {\n                                                error('React encountered a <link rel=\"stylesheet\" precedence=\"%s\" href=\"%s\" .../> with props that conflict' + ' with the options provided to `ReactDOM.preinit(\"%s\", { as: \"style\", ... })`. React will use the first props or preinitialization' + \" options encountered when rendering a hoistable stylesheet with a particular `href` and will ignore any newer props or\" + \" options. The first instance of this stylesheet resource was created using the `ReactDOM.preinit()` function.\" + \" Please note, `ReactDOM.preinit()` is modeled off of module import assertions capabilities and does not support\" + \" arbitrary props. If you need to have props not included with the preinit options you will need to rely on rendering\" + \" <link> tags only.%s\", precedence, href, href, _differenceDescription);\n                                            }\n                                            break;\n                                        }\n                                }\n                            }\n                        }\n                        if (!resource) {\n                            var resourceProps = stylesheetPropsFromRawProps(props);\n                            var preloadResource = resources.preloadsMap.get(key);\n                            var state = NoState;\n                            if (preloadResource) {\n                                // If we already had a preload we don't want that resource to flush directly.\n                                // We let the newly created resource govern flushing.\n                                preloadResource.state |= Blocked;\n                                adoptPreloadPropsForStylesheetProps(resourceProps, preloadResource.props);\n                                if (preloadResource.state & Flushed) {\n                                    state = PreloadFlushed;\n                                }\n                            }\n                            resource = {\n                                type: \"stylesheet\",\n                                chunks: [],\n                                state: state,\n                                props: resourceProps\n                            };\n                            resources.stylesMap.set(key, resource);\n                            {\n                                markAsRenderedResourceDEV(resource, props);\n                            }\n                            var precedenceSet = resources.precedences.get(precedence);\n                            if (!precedenceSet) {\n                                precedenceSet = new Set();\n                                resources.precedences.set(precedence, precedenceSet);\n                                var emptyStyleResource = {\n                                    type: \"style\",\n                                    chunks: [],\n                                    state: NoState,\n                                    props: {\n                                        precedence: precedence,\n                                        hrefs: []\n                                    }\n                                };\n                                precedenceSet.add(emptyStyleResource);\n                                {\n                                    if (resources.stylePrecedences.has(precedence)) {\n                                        error('React constructed an empty style resource when a style resource already exists for this precedence: \"%s\". This is a bug in React.', precedence);\n                                    }\n                                }\n                                resources.stylePrecedences.set(precedence, emptyStyleResource);\n                            }\n                            precedenceSet.add(resource);\n                        }\n                        if (resources.boundaryResources) {\n                            resources.boundaryResources.add(resource);\n                        }\n                        if (textEmbedded) {\n                            // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n                            // to be safe and assume text will follow by inserting a textSeparator\n                            target.push(textSeparator);\n                        }\n                        return null;\n                    }\n                } else if (props.onLoad || props.onError) {\n                    // When using load handlers we cannot hoist and need to emit links in place\n                    return pushLinkImpl(target, props);\n                } else {\n                    // We can hoist this link so we may need to emit a text separator.\n                    // @TODO refactor text separators so we don't have to defensively add\n                    // them when we don't end up emitting a tag as a result of pushStartInstance\n                    if (textEmbedded) {\n                        // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n                        // to be safe and assume text will follow by inserting a textSeparator\n                        target.push(textSeparator);\n                    }\n                    switch(props.rel){\n                        case \"preconnect\":\n                        case \"dns-prefetch\":\n                            return pushLinkImpl(responseState.preconnectChunks, props);\n                        case \"preload\":\n                            return pushLinkImpl(responseState.preloadChunks, props);\n                        default:\n                            return pushLinkImpl(responseState.hoistableChunks, props);\n                    }\n                }\n            }\n        }\n        function pushLinkImpl(target, props) {\n            target.push(startChunkForTag(\"link\"));\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"link\" + \" is a self-closing tag and must neither have `children` nor \" + \"use `dangerouslySetInnerHTML`.\");\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTagSelfClosing);\n            return null;\n        }\n        function pushStyle(target, props, resources, textEmbedded, insertionMode, noscriptTagInScope) {\n            {\n                if (hasOwnProperty.call(props, \"children\")) {\n                    var children = props.children;\n                    var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n                    if (typeof child === \"function\" || typeof child === \"symbol\" || Array.isArray(child)) {\n                        var childType = typeof child === \"function\" ? \"a Function\" : typeof child === \"symbol\" ? \"a Sybmol\" : \"an Array\";\n                        error(\"React expect children of <style> tags to be a string, number, or object with a `toString` method but found %s instead. \" + \"In browsers style Elements can only have `Text` Nodes as children.\", childType);\n                    }\n                }\n            }\n            {\n                var precedence = props.precedence;\n                var href = props.href;\n                if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof precedence !== \"string\" || typeof href !== \"string\" || href === \"\") {\n                    // This style tag is not able to be turned into a Style Resource\n                    return pushStyleImpl(target, props);\n                }\n                {\n                    if (href.includes(\" \")) {\n                        error('React expected the `href` prop for a <style> tag opting into hoisting semantics using the `precedence` prop to not have any spaces but ecountered spaces instead. using spaces in this prop will cause hydration of this style to fail on the client. The href for the <style> where this ocurred is \"%s\".', href);\n                    }\n                }\n                var key = getResourceKey(\"style\", href);\n                var resource = resources.stylesMap.get(key);\n                if (!resource) {\n                    resource = resources.stylePrecedences.get(precedence);\n                    if (!resource) {\n                        resource = {\n                            type: \"style\",\n                            chunks: [],\n                            state: NoState,\n                            props: {\n                                precedence: precedence,\n                                hrefs: [\n                                    href\n                                ]\n                            }\n                        };\n                        resources.stylePrecedences.set(precedence, resource);\n                        var precedenceSet = new Set();\n                        precedenceSet.add(resource);\n                        {\n                            if (resources.precedences.has(precedence)) {\n                                error('React constructed a new style precedence set when one already exists for this precedence: \"%s\". This is a bug in React.', precedence);\n                            }\n                        }\n                        resources.precedences.set(precedence, precedenceSet);\n                    } else {\n                        resource.props.hrefs.push(href);\n                    }\n                    resources.stylesMap.set(key, resource);\n                    if (resources.boundaryResources) {\n                        resources.boundaryResources.add(resource);\n                    }\n                    pushStyleContents(resource.chunks, props);\n                }\n                if (textEmbedded) {\n                    // This link follows text but we aren't writing a tag. while not as efficient as possible we need\n                    // to be safe and assume text will follow by inserting a textSeparator\n                    target.push(textSeparator);\n                }\n            }\n        }\n        function pushStyleImpl(target, props) {\n            target.push(startChunkForTag(\"style\"));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n            if (typeof child !== \"function\" && typeof child !== \"symbol\" && child !== null && child !== undefined) {\n                // eslint-disable-next-line react-internal/safe-string-coercion\n                target.push(stringToChunk(escapeTextForBrowser(\"\" + child)));\n            }\n            pushInnerHTML(target, innerHTML, children);\n            target.push(endTag1, stringToChunk(\"style\"), endTag2);\n            return null;\n        }\n        function pushStyleContents(target, props) {\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                    }\n                }\n            }\n            var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n            if (typeof child !== \"function\" && typeof child !== \"symbol\" && child !== null && child !== undefined) {\n                // eslint-disable-next-line react-internal/safe-string-coercion\n                target.push(stringToChunk(escapeTextForBrowser(\"\" + child)));\n            }\n            pushInnerHTML(target, innerHTML, children);\n            return;\n        }\n        function getImagePreloadKey(href, imageSrcSet, imageSizes) {\n            var uniquePart = \"\";\n            if (typeof imageSrcSet === \"string\" && imageSrcSet !== \"\") {\n                uniquePart += \"[\" + imageSrcSet + \"]\";\n                if (typeof imageSizes === \"string\") {\n                    uniquePart += \"[\" + imageSizes + \"]\";\n                }\n            } else {\n                uniquePart += \"[][]\" + href;\n            }\n            return getResourceKey(\"image\", uniquePart);\n        }\n        function pushImg(target, props, resources) {\n            var src = props.src, srcSet = props.srcSet;\n            if (props.loading !== \"lazy\" && (typeof src === \"string\" || typeof srcSet === \"string\") && props.fetchPriority !== \"low\" && // We exclude data URIs in src and srcSet since these should not be preloaded\n            !(typeof src === \"string\" && src[4] === \":\" && (src[0] === \"d\" || src[0] === \"D\") && (src[1] === \"a\" || src[1] === \"A\") && (src[2] === \"t\" || src[2] === \"T\") && (src[3] === \"a\" || src[3] === \"A\")) && !(typeof srcSet === \"string\" && srcSet[4] === \":\" && (srcSet[0] === \"d\" || srcSet[0] === \"D\") && (srcSet[1] === \"a\" || srcSet[1] === \"A\") && (srcSet[2] === \"t\" || srcSet[2] === \"T\") && (srcSet[3] === \"a\" || srcSet[3] === \"A\"))) {\n                // We have a suspensey image and ought to preload it to optimize the loading of display blocking\n                // resources.\n                var sizes = props.sizes;\n                var key = getImagePreloadKey(src, srcSet, sizes);\n                var resource = resources.preloadsMap.get(key);\n                if (!resource) {\n                    resource = {\n                        type: \"preload\",\n                        chunks: [],\n                        state: NoState,\n                        props: {\n                            rel: \"preload\",\n                            as: \"image\",\n                            // There is a bug in Safari where imageSrcSet is not respected on preload links\n                            // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.\n                            // This harms older browers that do not support imageSrcSet by making their preloads not work\n                            // but this population is shrinking fast and is already small so we accept this tradeoff.\n                            href: srcSet ? undefined : src,\n                            imageSrcSet: srcSet,\n                            imageSizes: sizes,\n                            crossOrigin: props.crossOrigin,\n                            integrity: props.integrity,\n                            type: props.type,\n                            fetchPriority: props.fetchPriority,\n                            referrerPolicy: props.referrerPolicy\n                        }\n                    };\n                    resources.preloadsMap.set(key, resource);\n                    {\n                        markAsRenderedResourceDEV(resource, props);\n                    }\n                    pushLinkImpl(resource.chunks, resource.props);\n                }\n                if (props.fetchPriority === \"high\" || resources.highImagePreloads.size < 10) {\n                    resources.highImagePreloads.add(resource);\n                } else {\n                    resources.bulkPreloads.add(resource);\n                }\n            }\n            return pushSelfClosing(target, props, \"img\");\n        }\n        function pushSelfClosing(target, props, tag) {\n            target.push(startChunkForTag(tag));\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(tag + \" is a self-closing tag and must neither have `children` nor \" + \"use `dangerouslySetInnerHTML`.\");\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTagSelfClosing);\n            return null;\n        }\n        function pushStartMenuItem(target, props) {\n            target.push(startChunkForTag(\"menuitem\"));\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"menuitems cannot have `children` nor `dangerouslySetInnerHTML`.\");\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            return null;\n        }\n        function pushTitle(target, props, responseState, insertionMode, noscriptTagInScope) {\n            {\n                if (hasOwnProperty.call(props, \"children\")) {\n                    var children = props.children;\n                    var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n                    if (Array.isArray(children) && children.length > 1) {\n                        error(\"React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an Array with length %s instead.\" + \" Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert `children` of <title> tags to a single string value\" + \" which is why Arrays of length greater than 1 are not supported. When using JSX it can be commong to combine text nodes and value nodes.\" + \" For example: <title>hello {nameOfUser}</title>. While not immediately apparent, `children` in this case is an Array with length 2. If your `children` prop\" + \" is using this form try rewriting it using a template string: <title>{`hello ${nameOfUser}`}</title>.\", children.length);\n                    } else if (typeof child === \"function\" || typeof child === \"symbol\") {\n                        var childType = typeof child === \"function\" ? \"a Function\" : \"a Sybmol\";\n                        error(\"React expect children of <title> tags to be a string, number, or object with a novel `toString` method but found %s instead.\" + \" Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title>\" + \" tags to a single string value.\", childType);\n                    } else if (child && child.toString === ({}).toString) {\n                        if (child.$$typeof != null) {\n                            error(\"React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an object that appears to be\" + \" a React element which never implements a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to\" + \" be able to convert children of <title> tags to a single string value which is why rendering React elements is not supported. If the `children` of <title> is\" + \" a React Component try moving the <title> tag into that component. If the `children` of <title> is some HTML markup change it to be Text only to be valid HTML.\");\n                        } else {\n                            error(\"React expects the `children` prop of <title> tags to be a string, number, or object with a novel `toString` method but found an object that does not implement\" + \" a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags\" + \" to a single string value. Using the default `toString` method available on every object is almost certainly an error. Consider whether the `children` of this <title>\" + \" is an object in error and change it to a string or number value if so. Otherwise implement a `toString` method that React can use to produce a valid <title>.\");\n                        }\n                    }\n                }\n            }\n            {\n                if (insertionMode !== SVG_MODE && !noscriptTagInScope && props.itemProp == null) {\n                    pushTitleImpl(responseState.hoistableChunks, props);\n                    return null;\n                } else {\n                    return pushTitleImpl(target, props);\n                }\n            }\n        }\n        function pushTitleImpl(target, props) {\n            target.push(startChunkForTag(\"title\"));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;\n            if (typeof child !== \"function\" && typeof child !== \"symbol\" && child !== null && child !== undefined) {\n                // eslint-disable-next-line react-internal/safe-string-coercion\n                target.push(stringToChunk(escapeTextForBrowser(\"\" + child)));\n            }\n            pushInnerHTML(target, innerHTML, children);\n            target.push(endTag1, stringToChunk(\"title\"), endTag2);\n            return null;\n        }\n        function pushStartHead(target, props, responseState, insertionMode) {\n            {\n                if (insertionMode < HTML_MODE && responseState.headChunks === null) {\n                    // This <head> is the Document.head and should be part of the preamble\n                    responseState.headChunks = [];\n                    return pushStartGenericElement(responseState.headChunks, props, \"head\");\n                } else {\n                    // This <head> is deep and is likely just an error. we emit it inline though.\n                    // Validation should warn that this tag is the the wrong spot.\n                    return pushStartGenericElement(target, props, \"head\");\n                }\n            }\n        }\n        function pushStartHtml(target, props, responseState, insertionMode) {\n            {\n                if (insertionMode === ROOT_HTML_MODE && responseState.htmlChunks === null) {\n                    // This <html> is the Document.documentElement and should be part of the preamble\n                    responseState.htmlChunks = [\n                        DOCTYPE\n                    ];\n                    return pushStartGenericElement(responseState.htmlChunks, props, \"html\");\n                } else {\n                    // This <html> is deep and is likely just an error. we emit it inline though.\n                    // Validation should warn that this tag is the the wrong spot.\n                    return pushStartGenericElement(target, props, \"html\");\n                }\n            }\n        }\n        function pushScript(target, props, resources, textEmbedded, insertionMode, noscriptTagInScope) {\n            {\n                var asyncProp = props.async;\n                if (typeof props.src !== \"string\" || !props.src || !(asyncProp && typeof asyncProp !== \"function\" && typeof asyncProp !== \"symbol\") || props.onLoad || props.onError || insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {\n                    // This script will not be a resource, we bailout early and emit it in place.\n                    return pushScriptImpl(target, props);\n                }\n                var src = props.src;\n                var key = getResourceKey(\"script\", src); // We can make this <script> into a ScriptResource\n                var resource = resources.scriptsMap.get(key);\n                {\n                    var devResource = getAsResourceDEV(resource);\n                    if (devResource) {\n                        switch(devResource.__provenance){\n                            case \"rendered\":\n                                {\n                                    var differenceDescription = describeDifferencesForScripts(props, devResource.__originalProps);\n                                    if (differenceDescription) {\n                                        error('React encountered a <script async={true} src=\"%s\" .../> that has props that conflict' + \" with another hoistable script with the same `src`. When rendering hoistable scripts (async scripts without any loading handlers)\" + \" the props from the first encountered instance will be used and props from later instances will be ignored.\" + \" Update the props on both <script async={true} .../> instance so they agree.%s\", src, differenceDescription);\n                                    }\n                                    break;\n                                }\n                            case \"preinit\":\n                                {\n                                    var _differenceDescription2 = describeDifferencesForScriptOverPreinit(props, devResource.__propsEquivalent);\n                                    if (_differenceDescription2) {\n                                        error('React encountered a <script async={true} src=\"%s\" .../> with props that conflict' + ' with the options provided to `ReactDOM.preinit(\"%s\", { as: \"script\", ... })`. React will use the first props or preinitialization' + \" options encountered when rendering a hoistable script with a particular `src` and will ignore any newer props or\" + \" options. The first instance of this script resource was created using the `ReactDOM.preinit()` function.\" + \" Please note, `ReactDOM.preinit()` is modeled off of module import assertions capabilities and does not support\" + \" arbitrary props. If you need to have props not included with the preinit options you will need to rely on rendering\" + \" <script> tags only.%s\", src, src, _differenceDescription2);\n                                    }\n                                    break;\n                                }\n                        }\n                    }\n                }\n                if (!resource) {\n                    resource = {\n                        type: \"script\",\n                        chunks: [],\n                        state: NoState,\n                        props: null\n                    };\n                    resources.scriptsMap.set(key, resource);\n                    {\n                        markAsRenderedResourceDEV(resource, props);\n                    }\n                    resources.scripts.add(resource);\n                    var scriptProps = props;\n                    var preloadResource = resources.preloadsMap.get(key);\n                    if (preloadResource) {\n                        // If we already had a preload we don't want that resource to flush directly.\n                        // We let the newly created resource govern flushing.\n                        preloadResource.state |= Blocked;\n                        scriptProps = assign({}, props);\n                        adoptPreloadPropsForScriptProps(scriptProps, preloadResource.props);\n                    } // encode the tag as Chunks\n                    pushScriptImpl(resource.chunks, scriptProps);\n                }\n                if (textEmbedded) {\n                    // This script follows text but we aren't writing a tag. while not as efficient as possible we need\n                    // to be safe and assume text will follow by inserting a textSeparator\n                    target.push(textSeparator);\n                }\n                return null;\n            }\n        }\n        function pushScriptImpl(target, props) {\n            target.push(startChunkForTag(\"script\"));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            {\n                if (children != null && typeof children !== \"string\") {\n                    var descriptiveStatement = typeof children === \"number\" ? \"a number for children\" : Array.isArray(children) ? \"an array for children\" : \"something unexpected for children\";\n                    error(\"A script element was rendered with %s. If script element has children it must be a single string.\" + \" Consider using dangerouslySetInnerHTML or passing a plain string as children.\", descriptiveStatement);\n                }\n            }\n            pushInnerHTML(target, innerHTML, children);\n            if (typeof children === \"string\") {\n                target.push(stringToChunk(encodeHTMLTextNode(children)));\n            }\n            target.push(endTag1, stringToChunk(\"script\"), endTag2);\n            return null;\n        }\n        function pushStartGenericElement(target, props, tag) {\n            target.push(startChunkForTag(tag));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            pushInnerHTML(target, innerHTML, children);\n            if (typeof children === \"string\") {\n                // Special case children as a string to avoid the unnecessary comment.\n                // TODO: Remove this special case after the general optimization is in place.\n                target.push(stringToChunk(encodeHTMLTextNode(children)));\n                return null;\n            }\n            return children;\n        }\n        function pushStartCustomElement(target, props, tag) {\n            target.push(startChunkForTag(tag));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        case \"style\":\n                            pushStyleAttribute(target, propValue);\n                            break;\n                        case \"suppressContentEditableWarning\":\n                        case \"suppressHydrationWarning\":\n                            break;\n                        default:\n                            if (isAttributeNameSafe(propKey) && typeof propValue !== \"function\" && typeof propValue !== \"symbol\") {\n                                target.push(attributeSeparator, stringToChunk(propKey), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);\n                            }\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag);\n            pushInnerHTML(target, innerHTML, children);\n            return children;\n        }\n        var leadingNewline = stringToPrecomputedChunk(\"\\n\");\n        function pushStartPreformattedElement(target, props, tag) {\n            target.push(startChunkForTag(tag));\n            var children = null;\n            var innerHTML = null;\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"children\":\n                            children = propValue;\n                            break;\n                        case \"dangerouslySetInnerHTML\":\n                            innerHTML = propValue;\n                            break;\n                        default:\n                            pushAttribute(target, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            target.push(endOfStartTag); // text/html ignores the first character in these tags if it's a newline\n            // Prefer to break application/xml over text/html (for now) by adding\n            // a newline specifically to get eaten by the parser. (Alternately for\n            // textareas, replacing \"^\\n\" with \"\\r\\n\" doesn't get eaten, and the first\n            // \\r is normalized out by HTMLTextAreaElement#value.)\n            // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>\n            // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>\n            // See: <http://www.w3.org/TR/html5/syntax.html#newlines>\n            // See: Parsing of \"textarea\" \"listing\" and \"pre\" elements\n            //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>\n            // TODO: This doesn't deal with the case where the child is an array\n            // or component that returns a string.\n            if (innerHTML != null) {\n                if (children != null) {\n                    throw new Error(\"Can only set one of `children` or `props.dangerouslySetInnerHTML`.\");\n                }\n                if (typeof innerHTML !== \"object\" || !(\"__html\" in innerHTML)) {\n                    throw new Error(\"`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. \" + \"Please visit https://reactjs.org/link/dangerously-set-inner-html \" + \"for more information.\");\n                }\n                var html = innerHTML.__html;\n                if (html !== null && html !== undefined) {\n                    if (typeof html === \"string\" && html.length > 0 && html[0] === \"\\n\") {\n                        target.push(leadingNewline, stringToChunk(html));\n                    } else {\n                        {\n                            checkHtmlStringCoercion(html);\n                        }\n                        target.push(stringToChunk(\"\" + html));\n                    }\n                }\n            }\n            if (typeof children === \"string\" && children[0] === \"\\n\") {\n                target.push(leadingNewline);\n            }\n            return children;\n        } // We accept any tag to be rendered but since this gets injected into arbitrary\n        // HTML, we want to make sure that it's a safe tag.\n        // http://www.w3.org/TR/REC-xml/#NT-Name\n        var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\\.\\-\\d]*$/; // Simplified subset\n        var validatedTagCache = new Map();\n        function startChunkForTag(tag) {\n            var tagStartChunk = validatedTagCache.get(tag);\n            if (tagStartChunk === undefined) {\n                if (!VALID_TAG_REGEX.test(tag)) {\n                    throw new Error(\"Invalid tag: \" + tag);\n                }\n                tagStartChunk = stringToPrecomputedChunk(\"<\" + tag);\n                validatedTagCache.set(tag, tagStartChunk);\n            }\n            return tagStartChunk;\n        }\n        var DOCTYPE = stringToPrecomputedChunk(\"<!DOCTYPE html>\");\n        function pushStartInstance(target, type, props, resources, responseState, formatContext, textEmbedded) {\n            {\n                validateProperties$2(type, props);\n                validateProperties$1(type, props);\n                validateProperties(type, props, null);\n                if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {\n                    error(\"A component is `contentEditable` and contains `children` managed by \" + \"React. It is now your responsibility to guarantee that none of \" + \"those nodes are unexpectedly modified or duplicated. This is \" + \"probably not intentional.\");\n                }\n                if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {\n                    if (type.indexOf(\"-\") === -1 && type.toLowerCase() !== type) {\n                        error(\"<%s /> is using incorrect casing. \" + \"Use PascalCase for React components, \" + \"or lowercase for HTML elements.\", type);\n                    }\n                }\n            }\n            switch(type){\n                case \"div\":\n                case \"span\":\n                case \"svg\":\n                case \"path\":\n                case \"a\":\n                case \"g\":\n                case \"p\":\n                case \"li\":\n                    break;\n                // Special tags\n                case \"select\":\n                    return pushStartSelect(target, props);\n                case \"option\":\n                    return pushStartOption(target, props, formatContext);\n                case \"textarea\":\n                    return pushStartTextArea(target, props);\n                case \"input\":\n                    return pushInput(target, props, responseState);\n                case \"button\":\n                    return pushStartButton(target, props, responseState);\n                case \"form\":\n                    return pushStartForm(target, props);\n                case \"menuitem\":\n                    return pushStartMenuItem(target, props);\n                case \"title\":\n                    return pushTitle(target, props, responseState, formatContext.insertionMode, formatContext.noscriptTagInScope);\n                case \"link\":\n                    return pushLink(target, props, responseState, resources, textEmbedded, formatContext.insertionMode, formatContext.noscriptTagInScope);\n                case \"script\":\n                    return pushScript(target, props, resources, textEmbedded, formatContext.insertionMode, formatContext.noscriptTagInScope);\n                case \"style\":\n                    return pushStyle(target, props, resources, textEmbedded, formatContext.insertionMode, formatContext.noscriptTagInScope);\n                case \"meta\":\n                    return pushMeta(target, props, responseState, textEmbedded, formatContext.insertionMode, formatContext.noscriptTagInScope);\n                // Newline eating tags\n                case \"listing\":\n                case \"pre\":\n                    {\n                        return pushStartPreformattedElement(target, props, type);\n                    }\n                case \"img\":\n                    {\n                        return pushImg(target, props, resources);\n                    }\n                // Omitted close tags\n                case \"base\":\n                case \"area\":\n                case \"br\":\n                case \"col\":\n                case \"embed\":\n                case \"hr\":\n                case \"keygen\":\n                case \"param\":\n                case \"source\":\n                case \"track\":\n                case \"wbr\":\n                    {\n                        return pushSelfClosing(target, props, type);\n                    }\n                // These are reserved SVG and MathML elements, that are never custom elements.\n                // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts\n                case \"annotation-xml\":\n                case \"color-profile\":\n                case \"font-face\":\n                case \"font-face-src\":\n                case \"font-face-uri\":\n                case \"font-face-format\":\n                case \"font-face-name\":\n                case \"missing-glyph\":\n                    {\n                        break;\n                    }\n                // Preamble start tags\n                case \"head\":\n                    return pushStartHead(target, props, responseState, formatContext.insertionMode);\n                case \"html\":\n                    {\n                        return pushStartHtml(target, props, responseState, formatContext.insertionMode);\n                    }\n                default:\n                    {\n                        if (type.indexOf(\"-\") !== -1) {\n                            // Custom element\n                            return pushStartCustomElement(target, props, type);\n                        }\n                    }\n            } // Generic element\n            return pushStartGenericElement(target, props, type);\n        }\n        var endTag1 = stringToPrecomputedChunk(\"</\");\n        var endTag2 = stringToPrecomputedChunk(\">\");\n        function pushEndInstance(target, type, props, responseState, formatContext) {\n            switch(type){\n                // When float is on we expect title and script tags to always be pushed in\n                // a unit and never return children. when we end up pushing the end tag we\n                // want to ensure there is no extra closing tag pushed\n                case \"title\":\n                case \"style\":\n                case \"script\":\n                // Omitted close tags\n                // TODO: Instead of repeating this switch we could try to pass a flag from above.\n                // That would require returning a tuple. Which might be ok if it gets inlined.\n                case \"area\":\n                case \"base\":\n                case \"br\":\n                case \"col\":\n                case \"embed\":\n                case \"hr\":\n                case \"img\":\n                case \"input\":\n                case \"keygen\":\n                case \"link\":\n                case \"meta\":\n                case \"param\":\n                case \"source\":\n                case \"track\":\n                case \"wbr\":\n                    {\n                        // No close tag needed.\n                        return;\n                    }\n                // Postamble end tags\n                // When float is enabled we omit the end tags for body and html when\n                // they represent the Document.body and Document.documentElement Nodes.\n                // This is so we can withhold them until the postamble when we know\n                // we won't emit any more tags\n                case \"body\":\n                    {\n                        if (formatContext.insertionMode <= HTML_HTML_MODE) {\n                            responseState.hasBody = true;\n                            return;\n                        }\n                        break;\n                    }\n                case \"html\":\n                    if (formatContext.insertionMode === ROOT_HTML_MODE) {\n                        return;\n                    }\n                    break;\n            }\n            target.push(endTag1, stringToChunk(type), endTag2);\n        }\n        function writeBootstrap(destination, responseState) {\n            var bootstrapChunks = responseState.bootstrapChunks;\n            var i = 0;\n            for(; i < bootstrapChunks.length - 1; i++){\n                writeChunk(destination, bootstrapChunks[i]);\n            }\n            if (i < bootstrapChunks.length) {\n                var lastChunk = bootstrapChunks[i];\n                bootstrapChunks.length = 0;\n                return writeChunkAndReturn(destination, lastChunk);\n            }\n            return true;\n        }\n        function writeCompletedRoot(destination, responseState) {\n            return writeBootstrap(destination, responseState);\n        } // Structural Nodes\n        // A placeholder is a node inside a hidden partial tree that can be filled in later, but before\n        // display. It's never visible to users. We use the template tag because it can be used in every\n        // type of parent. <script> tags also work in every other tag except <colgroup>.\n        var placeholder1 = stringToPrecomputedChunk('<template id=\"');\n        var placeholder2 = stringToPrecomputedChunk('\"></template>');\n        function writePlaceholder(destination, responseState, id) {\n            writeChunk(destination, placeholder1);\n            writeChunk(destination, responseState.placeholderPrefix);\n            var formattedID = stringToChunk(id.toString(16));\n            writeChunk(destination, formattedID);\n            return writeChunkAndReturn(destination, placeholder2);\n        } // Suspense boundaries are encoded as comments.\n        var startCompletedSuspenseBoundary = stringToPrecomputedChunk(\"<!--$-->\");\n        var startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id=\"');\n        var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('\"></template>');\n        var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk(\"<!--$!-->\");\n        var endSuspenseBoundary = stringToPrecomputedChunk(\"<!--/$-->\");\n        var clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk(\"<template\");\n        var clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('\"');\n        var clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst=\"');\n        var clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg=\"');\n        var clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck=\"');\n        var clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk(\"></template>\");\n        function writeStartCompletedSuspenseBoundary(destination, responseState) {\n            return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);\n        }\n        function writeStartPendingSuspenseBoundary(destination, responseState, id) {\n            writeChunk(destination, startPendingSuspenseBoundary1);\n            if (id === null) {\n                throw new Error(\"An ID must have been assigned before we can complete the boundary.\");\n            }\n            writeChunk(destination, id);\n            return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);\n        }\n        function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {\n            var result;\n            result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);\n            writeChunk(destination, clientRenderedSuspenseBoundaryError1);\n            if (errorDigest) {\n                writeChunk(destination, clientRenderedSuspenseBoundaryError1A);\n                writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest)));\n                writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);\n            }\n            {\n                if (errorMesssage) {\n                    writeChunk(destination, clientRenderedSuspenseBoundaryError1B);\n                    writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage)));\n                    writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);\n                }\n                if (errorComponentStack) {\n                    writeChunk(destination, clientRenderedSuspenseBoundaryError1C);\n                    writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));\n                    writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);\n                }\n            }\n            result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2);\n            return result;\n        }\n        function writeEndCompletedSuspenseBoundary(destination, responseState) {\n            return writeChunkAndReturn(destination, endSuspenseBoundary);\n        }\n        function writeEndPendingSuspenseBoundary(destination, responseState) {\n            return writeChunkAndReturn(destination, endSuspenseBoundary);\n        }\n        function writeEndClientRenderedSuspenseBoundary(destination, responseState) {\n            return writeChunkAndReturn(destination, endSuspenseBoundary);\n        }\n        var startSegmentHTML = stringToPrecomputedChunk('<div hidden id=\"');\n        var startSegmentHTML2 = stringToPrecomputedChunk('\">');\n        var endSegmentHTML = stringToPrecomputedChunk(\"</div>\");\n        var startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden=\"true\" style=\"display:none\" id=\"');\n        var startSegmentSVG2 = stringToPrecomputedChunk('\">');\n        var endSegmentSVG = stringToPrecomputedChunk(\"</svg>\");\n        var startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden=\"true\" style=\"display:none\" id=\"');\n        var startSegmentMathML2 = stringToPrecomputedChunk('\">');\n        var endSegmentMathML = stringToPrecomputedChunk(\"</math>\");\n        var startSegmentTable = stringToPrecomputedChunk('<table hidden id=\"');\n        var startSegmentTable2 = stringToPrecomputedChunk('\">');\n        var endSegmentTable = stringToPrecomputedChunk(\"</table>\");\n        var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id=\"');\n        var startSegmentTableBody2 = stringToPrecomputedChunk('\">');\n        var endSegmentTableBody = stringToPrecomputedChunk(\"</tbody></table>\");\n        var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id=\"');\n        var startSegmentTableRow2 = stringToPrecomputedChunk('\">');\n        var endSegmentTableRow = stringToPrecomputedChunk(\"</tr></table>\");\n        var startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id=\"');\n        var startSegmentColGroup2 = stringToPrecomputedChunk('\">');\n        var endSegmentColGroup = stringToPrecomputedChunk(\"</colgroup></table>\");\n        function writeStartSegment(destination, responseState, formatContext, id) {\n            switch(formatContext.insertionMode){\n                case ROOT_HTML_MODE:\n                case HTML_HTML_MODE:\n                case HTML_MODE:\n                    {\n                        writeChunk(destination, startSegmentHTML);\n                        writeChunk(destination, responseState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentHTML2);\n                    }\n                case SVG_MODE:\n                    {\n                        writeChunk(destination, startSegmentSVG);\n                        writeChunk(destination, responseState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentSVG2);\n                    }\n                case MATHML_MODE:\n                    {\n                        writeChunk(destination, startSegmentMathML);\n                        writeChunk(destination, responseState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentMathML2);\n                    }\n                case HTML_TABLE_MODE:\n                    {\n                        writeChunk(destination, startSegmentTable);\n                        writeChunk(destination, responseState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentTable2);\n                    }\n                // TODO: For the rest of these, there will be extra wrapper nodes that never\n                // get deleted from the document. We need to delete the table too as part\n                // of the injected scripts. They are invisible though so it's not too terrible\n                // and it's kind of an edge case to suspend in a table. Totally supported though.\n                case HTML_TABLE_BODY_MODE:\n                    {\n                        writeChunk(destination, startSegmentTableBody);\n                        writeChunk(destination, responseState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentTableBody2);\n                    }\n                case HTML_TABLE_ROW_MODE:\n                    {\n                        writeChunk(destination, startSegmentTableRow);\n                        writeChunk(destination, responseState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentTableRow2);\n                    }\n                case HTML_COLGROUP_MODE:\n                    {\n                        writeChunk(destination, startSegmentColGroup);\n                        writeChunk(destination, responseState.segmentPrefix);\n                        writeChunk(destination, stringToChunk(id.toString(16)));\n                        return writeChunkAndReturn(destination, startSegmentColGroup2);\n                    }\n                default:\n                    {\n                        throw new Error(\"Unknown insertion mode. This is a bug in React.\");\n                    }\n            }\n        }\n        function writeEndSegment(destination, formatContext) {\n            switch(formatContext.insertionMode){\n                case ROOT_HTML_MODE:\n                case HTML_HTML_MODE:\n                case HTML_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentHTML);\n                    }\n                case SVG_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentSVG);\n                    }\n                case MATHML_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentMathML);\n                    }\n                case HTML_TABLE_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentTable);\n                    }\n                case HTML_TABLE_BODY_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentTableBody);\n                    }\n                case HTML_TABLE_ROW_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentTableRow);\n                    }\n                case HTML_COLGROUP_MODE:\n                    {\n                        return writeChunkAndReturn(destination, endSegmentColGroup);\n                    }\n                default:\n                    {\n                        throw new Error(\"Unknown insertion mode. This is a bug in React.\");\n                    }\n            }\n        }\n        var completeSegmentScript1Full = stringToPrecomputedChunk(completeSegment + ';$RS(\"');\n        var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS(\"');\n        var completeSegmentScript2 = stringToPrecomputedChunk('\",\"');\n        var completeSegmentScriptEnd = stringToPrecomputedChunk('\")</script>');\n        var completeSegmentData1 = stringToPrecomputedChunk('<template data-rsi=\"\" data-sid=\"');\n        var completeSegmentData2 = stringToPrecomputedChunk('\" data-pid=\"');\n        var completeSegmentDataEnd = dataElementQuotedEnd;\n        function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {\n            var scriptFormat = responseState.streamingFormat === ScriptStreamingFormat;\n            if (scriptFormat) {\n                writeChunk(destination, responseState.startInlineScript);\n                if ((responseState.instructions & SentCompleteSegmentFunction) === NothingSent) {\n                    // The first time we write this, we'll need to include the full implementation.\n                    responseState.instructions |= SentCompleteSegmentFunction;\n                    writeChunk(destination, completeSegmentScript1Full);\n                } else {\n                    // Future calls can just reuse the same function.\n                    writeChunk(destination, completeSegmentScript1Partial);\n                }\n            } else {\n                writeChunk(destination, completeSegmentData1);\n            } // Write function arguments, which are string literals\n            writeChunk(destination, responseState.segmentPrefix);\n            var formattedID = stringToChunk(contentSegmentID.toString(16));\n            writeChunk(destination, formattedID);\n            if (scriptFormat) {\n                writeChunk(destination, completeSegmentScript2);\n            } else {\n                writeChunk(destination, completeSegmentData2);\n            }\n            writeChunk(destination, responseState.placeholderPrefix);\n            writeChunk(destination, formattedID);\n            if (scriptFormat) {\n                return writeChunkAndReturn(destination, completeSegmentScriptEnd);\n            } else {\n                return writeChunkAndReturn(destination, completeSegmentDataEnd);\n            }\n        }\n        var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundary + '$RC(\"');\n        var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC(\"');\n        var completeBoundaryWithStylesScript1FullBoth = stringToPrecomputedChunk(completeBoundary + completeBoundaryWithStyles + '$RR(\"');\n        var completeBoundaryWithStylesScript1FullPartial = stringToPrecomputedChunk(completeBoundaryWithStyles + '$RR(\"');\n        var completeBoundaryWithStylesScript1Partial = stringToPrecomputedChunk('$RR(\"');\n        var completeBoundaryScript2 = stringToPrecomputedChunk('\",\"');\n        var completeBoundaryScript3a = stringToPrecomputedChunk('\",');\n        var completeBoundaryScript3b = stringToPrecomputedChunk('\"');\n        var completeBoundaryScriptEnd = stringToPrecomputedChunk(\")</script>\");\n        var completeBoundaryData1 = stringToPrecomputedChunk('<template data-rci=\"\" data-bid=\"');\n        var completeBoundaryWithStylesData1 = stringToPrecomputedChunk('<template data-rri=\"\" data-bid=\"');\n        var completeBoundaryData2 = stringToPrecomputedChunk('\" data-sid=\"');\n        var completeBoundaryData3a = stringToPrecomputedChunk('\" data-sty=\"');\n        var completeBoundaryDataEnd = dataElementQuotedEnd;\n        function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID, boundaryResources) {\n            var requiresStyleInsertion;\n            {\n                requiresStyleInsertion = responseState.stylesToHoist; // If necessary stylesheets will be flushed with this instruction.\n                // Any style tags not yet hoisted in the Document will also be hoisted.\n                // We reset this state since after this instruction executes all styles\n                // up to this point will have been hoisted\n                responseState.stylesToHoist = false;\n            }\n            var scriptFormat = responseState.streamingFormat === ScriptStreamingFormat;\n            if (scriptFormat) {\n                writeChunk(destination, responseState.startInlineScript);\n                if (requiresStyleInsertion) {\n                    if ((responseState.instructions & SentCompleteBoundaryFunction) === NothingSent) {\n                        responseState.instructions |= SentStyleInsertionFunction | SentCompleteBoundaryFunction;\n                        writeChunk(destination, clonePrecomputedChunk(completeBoundaryWithStylesScript1FullBoth));\n                    } else if ((responseState.instructions & SentStyleInsertionFunction) === NothingSent) {\n                        responseState.instructions |= SentStyleInsertionFunction;\n                        writeChunk(destination, completeBoundaryWithStylesScript1FullPartial);\n                    } else {\n                        writeChunk(destination, completeBoundaryWithStylesScript1Partial);\n                    }\n                } else {\n                    if ((responseState.instructions & SentCompleteBoundaryFunction) === NothingSent) {\n                        responseState.instructions |= SentCompleteBoundaryFunction;\n                        writeChunk(destination, completeBoundaryScript1Full);\n                    } else {\n                        writeChunk(destination, completeBoundaryScript1Partial);\n                    }\n                }\n            } else {\n                if (requiresStyleInsertion) {\n                    writeChunk(destination, completeBoundaryWithStylesData1);\n                } else {\n                    writeChunk(destination, completeBoundaryData1);\n                }\n            }\n            if (boundaryID === null) {\n                throw new Error(\"An ID must have been assigned before we can complete the boundary.\");\n            } // Write function arguments, which are string and array literals\n            var formattedContentID = stringToChunk(contentSegmentID.toString(16));\n            writeChunk(destination, boundaryID);\n            if (scriptFormat) {\n                writeChunk(destination, completeBoundaryScript2);\n            } else {\n                writeChunk(destination, completeBoundaryData2);\n            }\n            writeChunk(destination, responseState.segmentPrefix);\n            writeChunk(destination, formattedContentID);\n            if (requiresStyleInsertion) {\n                // Script and data writers must format this differently:\n                //  - script writer emits an array literal, whose string elements are\n                //    escaped for javascript  e.g. [\"A\", \"B\"]\n                //  - data writer emits a string literal, which is escaped as html\n                //    e.g. [&#34;A&#34;, &#34;B&#34;]\n                if (scriptFormat) {\n                    writeChunk(destination, completeBoundaryScript3a); // boundaryResources encodes an array literal\n                    writeStyleResourceDependenciesInJS(destination, boundaryResources);\n                } else {\n                    writeChunk(destination, completeBoundaryData3a);\n                    writeStyleResourceDependenciesInAttr(destination, boundaryResources);\n                }\n            } else {\n                if (scriptFormat) {\n                    writeChunk(destination, completeBoundaryScript3b);\n                }\n            }\n            var writeMore;\n            if (scriptFormat) {\n                writeMore = writeChunkAndReturn(destination, completeBoundaryScriptEnd);\n            } else {\n                writeMore = writeChunkAndReturn(destination, completeBoundaryDataEnd);\n            }\n            return writeBootstrap(destination, responseState) && writeMore;\n        }\n        var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderBoundary + ';$RX(\"');\n        var clientRenderScript1Partial = stringToPrecomputedChunk('$RX(\"');\n        var clientRenderScript1A = stringToPrecomputedChunk('\"');\n        var clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(\",\");\n        var clientRenderScriptEnd = stringToPrecomputedChunk(\")</script>\");\n        var clientRenderData1 = stringToPrecomputedChunk('<template data-rxi=\"\" data-bid=\"');\n        var clientRenderData2 = stringToPrecomputedChunk('\" data-dgst=\"');\n        var clientRenderData3 = stringToPrecomputedChunk('\" data-msg=\"');\n        var clientRenderData4 = stringToPrecomputedChunk('\" data-stck=\"');\n        var clientRenderDataEnd = dataElementQuotedEnd;\n        function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {\n            var scriptFormat = responseState.streamingFormat === ScriptStreamingFormat;\n            if (scriptFormat) {\n                writeChunk(destination, responseState.startInlineScript);\n                if ((responseState.instructions & SentClientRenderFunction) === NothingSent) {\n                    // The first time we write this, we'll need to include the full implementation.\n                    responseState.instructions |= SentClientRenderFunction;\n                    writeChunk(destination, clientRenderScript1Full);\n                } else {\n                    // Future calls can just reuse the same function.\n                    writeChunk(destination, clientRenderScript1Partial);\n                }\n            } else {\n                // <template data-rxi=\"\" data-bid=\"\n                writeChunk(destination, clientRenderData1);\n            }\n            if (boundaryID === null) {\n                throw new Error(\"An ID must have been assigned before we can complete the boundary.\");\n            }\n            writeChunk(destination, boundaryID);\n            if (scriptFormat) {\n                // \" needs to be inserted for scripts, since ArgInterstitual does not contain\n                // leading or trailing quotes\n                writeChunk(destination, clientRenderScript1A);\n            }\n            if (errorDigest || errorMessage || errorComponentStack) {\n                if (scriptFormat) {\n                    // ,\"JSONString\"\n                    writeChunk(destination, clientRenderErrorScriptArgInterstitial);\n                    writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || \"\")));\n                } else {\n                    // \" data-dgst=\"HTMLString\n                    writeChunk(destination, clientRenderData2);\n                    writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest || \"\")));\n                }\n            }\n            if (errorMessage || errorComponentStack) {\n                if (scriptFormat) {\n                    // ,\"JSONString\"\n                    writeChunk(destination, clientRenderErrorScriptArgInterstitial);\n                    writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || \"\")));\n                } else {\n                    // \" data-msg=\"HTMLString\n                    writeChunk(destination, clientRenderData3);\n                    writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMessage || \"\")));\n                }\n            }\n            if (errorComponentStack) {\n                // ,\"JSONString\"\n                if (scriptFormat) {\n                    writeChunk(destination, clientRenderErrorScriptArgInterstitial);\n                    writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)));\n                } else {\n                    // \" data-stck=\"HTMLString\n                    writeChunk(destination, clientRenderData4);\n                    writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));\n                }\n            }\n            if (scriptFormat) {\n                // ></script>\n                return writeChunkAndReturn(destination, clientRenderScriptEnd);\n            } else {\n                // \"></template>\n                return writeChunkAndReturn(destination, clientRenderDataEnd);\n            }\n        }\n        var regexForJSStringsInInstructionScripts = /[<\\u2028\\u2029]/g;\n        function escapeJSStringsForInstructionScripts(input) {\n            var escaped = JSON.stringify(input);\n            return escaped.replace(regexForJSStringsInInstructionScripts, function(match) {\n                switch(match){\n                    // santizing breaking out of strings and script tags\n                    case \"<\":\n                        return \"\\\\u003c\";\n                    case \"\\u2028\":\n                        return \"\\\\u2028\";\n                    case \"\\u2029\":\n                        return \"\\\\u2029\";\n                    default:\n                        {\n                            // eslint-disable-next-line react-internal/prod-error-codes\n                            throw new Error(\"escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React\");\n                        }\n                }\n            });\n        }\n        var regexForJSStringsInScripts = /[&><\\u2028\\u2029]/g;\n        function escapeJSObjectForInstructionScripts(input) {\n            var escaped = JSON.stringify(input);\n            return escaped.replace(regexForJSStringsInScripts, function(match) {\n                switch(match){\n                    // santizing breaking out of strings and script tags\n                    case \"&\":\n                        return \"\\\\u0026\";\n                    case \">\":\n                        return \"\\\\u003e\";\n                    case \"<\":\n                        return \"\\\\u003c\";\n                    case \"\\u2028\":\n                        return \"\\\\u2028\";\n                    case \"\\u2029\":\n                        return \"\\\\u2029\";\n                    default:\n                        {\n                            // eslint-disable-next-line react-internal/prod-error-codes\n                            throw new Error(\"escapeJSObjectForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React\");\n                        }\n                }\n            });\n        }\n        var lateStyleTagResourceOpen1 = stringToPrecomputedChunk('<style media=\"not all\" data-precedence=\"');\n        var lateStyleTagResourceOpen2 = stringToPrecomputedChunk('\" data-href=\"');\n        var lateStyleTagResourceOpen3 = stringToPrecomputedChunk('\">');\n        var lateStyleTagTemplateClose = stringToPrecomputedChunk(\"</style>\"); // Tracks whether the boundary currently flushing is flushign style tags or has any\n        // stylesheet dependencies not flushed in the Preamble.\n        var currentlyRenderingBoundaryHasStylesToHoist = false; // Acts as a return value for the forEach execution of style tag flushing.\n        var destinationHasCapacity = true;\n        function flushStyleTagsLateForBoundary(resource) {\n            if (resource.type === \"stylesheet\" && (resource.state & FlushedInPreamble) === NoState) {\n                currentlyRenderingBoundaryHasStylesToHoist = true;\n            } else if (resource.type === \"style\") {\n                var chunks = resource.chunks;\n                var hrefs = resource.props.hrefs;\n                var i = 0;\n                if (chunks.length) {\n                    writeChunk(this, lateStyleTagResourceOpen1);\n                    writeChunk(this, stringToChunk(escapeTextForBrowser(resource.props.precedence)));\n                    if (hrefs.length) {\n                        writeChunk(this, lateStyleTagResourceOpen2);\n                        for(; i < hrefs.length - 1; i++){\n                            writeChunk(this, stringToChunk(escapeTextForBrowser(hrefs[i])));\n                            writeChunk(this, spaceSeparator);\n                        }\n                        writeChunk(this, stringToChunk(escapeTextForBrowser(hrefs[i])));\n                    }\n                    writeChunk(this, lateStyleTagResourceOpen3);\n                    for(i = 0; i < chunks.length; i++){\n                        writeChunk(this, chunks[i]);\n                    }\n                    destinationHasCapacity = writeChunkAndReturn(this, lateStyleTagTemplateClose); // We wrote style tags for this boundary and we may need to emit a script\n                    // to hoist them.\n                    currentlyRenderingBoundaryHasStylesToHoist = true; // style resources can flush continuously since more rules may be written into\n                    // them with new hrefs. Instead of marking it flushed, we simply reset the chunks\n                    // and hrefs\n                    chunks.length = 0;\n                    hrefs.length = 0;\n                }\n            }\n        }\n        function writeResourcesForBoundary(destination, boundaryResources, responseState) {\n            // Reset these on each invocation, they are only safe to read in this function\n            currentlyRenderingBoundaryHasStylesToHoist = false;\n            destinationHasCapacity = true; // Flush each Boundary resource\n            boundaryResources.forEach(flushStyleTagsLateForBoundary, destination);\n            if (currentlyRenderingBoundaryHasStylesToHoist) {\n                responseState.stylesToHoist = true;\n            }\n            return destinationHasCapacity;\n        }\n        function flushResourceInPreamble(resource) {\n            if ((resource.state & (Flushed | Blocked)) === NoState) {\n                var chunks = resource.chunks;\n                for(var i = 0; i < chunks.length; i++){\n                    writeChunk(this, chunks[i]);\n                }\n                resource.state |= FlushedInPreamble;\n            }\n        }\n        function flushResourceLate(resource) {\n            if ((resource.state & (Flushed | Blocked)) === NoState) {\n                var chunks = resource.chunks;\n                for(var i = 0; i < chunks.length; i++){\n                    writeChunk(this, chunks[i]);\n                }\n                resource.state |= FlushedLate;\n            }\n        } // This must always be read after flushing stylesheet styles. we know we will encounter a style resource\n        // per precedence and it will be set before ready so we cast this to avoid an extra check at runtime\n        var precedenceStyleTagResource = null; // This flags let's us opt out of flushing a placeholder style tag to emit the precedence in the right order.\n        // If a stylesheet was flushed then we have the precedence order preserved and only need to emit <style> tags\n        // if there are actual chunks to flush\n        var didFlushPrecedence = false;\n        function flushStyleInPreamble(resource, key, set) {\n            var chunks = resource.chunks;\n            if (resource.state & Flushed) {\n                // In theory this should never happen because we clear from the\n                // Set on flush but to ensure correct semantics we don't emit\n                // anything if we are in this state.\n                set.delete(resource);\n            } else {\n                // We can emit this style or stylesheet as is.\n                if (resource.type === \"style\") {\n                    precedenceStyleTagResource = resource;\n                    return;\n                } // We still need to encode stylesheet chunks\n                // because unlike most Hoistables and Resources we do not eagerly encode\n                // them during render. This is because if we flush late we have to send a\n                // different encoding and we don't want to encode multiple times\n                pushLinkImpl(chunks, resource.props);\n                for(var i = 0; i < chunks.length; i++){\n                    writeChunk(this, chunks[i]);\n                }\n                resource.state |= FlushedInPreamble;\n                didFlushPrecedence = true;\n            }\n        }\n        var styleTagResourceOpen1 = stringToPrecomputedChunk('<style data-precedence=\"');\n        var styleTagResourceOpen2 = stringToPrecomputedChunk('\" data-href=\"');\n        var spaceSeparator = stringToPrecomputedChunk(\" \");\n        var styleTagResourceOpen3 = stringToPrecomputedChunk('\">');\n        var styleTagResourceClose = stringToPrecomputedChunk(\"</style>\");\n        function flushAllStylesInPreamble(set, precedence) {\n            didFlushPrecedence = false;\n            set.forEach(flushStyleInPreamble, this);\n            set.clear();\n            var chunks = precedenceStyleTagResource.chunks;\n            var hrefs = precedenceStyleTagResource.props.hrefs;\n            if (didFlushPrecedence === false || chunks.length) {\n                writeChunk(this, styleTagResourceOpen1);\n                writeChunk(this, stringToChunk(escapeTextForBrowser(precedence)));\n                var i = 0;\n                if (hrefs.length) {\n                    writeChunk(this, styleTagResourceOpen2);\n                    for(; i < hrefs.length - 1; i++){\n                        writeChunk(this, stringToChunk(escapeTextForBrowser(hrefs[i])));\n                        writeChunk(this, spaceSeparator);\n                    }\n                    writeChunk(this, stringToChunk(escapeTextForBrowser(hrefs[i])));\n                }\n                writeChunk(this, styleTagResourceOpen3);\n                for(i = 0; i < chunks.length; i++){\n                    writeChunk(this, chunks[i]);\n                }\n                writeChunk(this, styleTagResourceClose); // style resources can flush continuously since more rules may be written into\n                // them with new hrefs. Instead of marking it flushed, we simply reset the chunks\n                // and hrefs\n                chunks.length = 0;\n                hrefs.length = 0;\n            }\n        }\n        function preloadLateStyle(resource) {\n            if (resource.state & PreloadFlushed) {\n                // This resource has already had a preload flushed\n                return;\n            }\n            if (resource.type === \"style\") {\n                // <style> tags do not need to be preloaded\n                return;\n            }\n            var chunks = resource.chunks;\n            var preloadProps = preloadAsStylePropsFromProps(resource.props.href, resource.props);\n            pushLinkImpl(chunks, preloadProps);\n            for(var i = 0; i < chunks.length; i++){\n                writeChunk(this, chunks[i]);\n            }\n            resource.state |= PreloadFlushed;\n            chunks.length = 0;\n        }\n        function preloadLateStyles(set, precedence) {\n            set.forEach(preloadLateStyle, this);\n            set.clear();\n        } // We don't bother reporting backpressure at the moment because we expect to\n        // flush the entire preamble in a single pass. This probably should be modified\n        // in the future to be backpressure sensitive but that requires a larger refactor\n        // of the flushing code in Fizz.\n        function writePreamble(destination, resources, responseState, willFlushAllSegments) {\n            // This function must be called exactly once on every request\n            if (!willFlushAllSegments && responseState.externalRuntimeScript) {\n                // If the root segment is incomplete due to suspended tasks\n                // (e.g. willFlushAllSegments = false) and we are using data\n                // streaming format, ensure the external runtime is sent.\n                // (User code could choose to send this even earlier by calling\n                //  preinit(...), if they know they will suspend).\n                var _responseState$extern = responseState.externalRuntimeScript, src = _responseState$extern.src, chunks = _responseState$extern.chunks;\n                internalPreinitScript(resources, src, chunks);\n            }\n            var htmlChunks = responseState.htmlChunks;\n            var headChunks = responseState.headChunks;\n            var i = 0; // Emit open tags before Hoistables and Resources\n            if (htmlChunks) {\n                // We have an <html> to emit as part of the preamble\n                for(i = 0; i < htmlChunks.length; i++){\n                    writeChunk(destination, htmlChunks[i]);\n                }\n                if (headChunks) {\n                    for(i = 0; i < headChunks.length; i++){\n                        writeChunk(destination, headChunks[i]);\n                    }\n                } else {\n                    // We did not render a head but we emitted an <html> so we emit one now\n                    writeChunk(destination, startChunkForTag(\"head\"));\n                    writeChunk(destination, endOfStartTag);\n                }\n            } else if (headChunks) {\n                // We do not have an <html> but we do have a <head>\n                for(i = 0; i < headChunks.length; i++){\n                    writeChunk(destination, headChunks[i]);\n                }\n            } // Emit high priority Hoistables\n            var charsetChunks = responseState.charsetChunks;\n            for(i = 0; i < charsetChunks.length; i++){\n                writeChunk(destination, charsetChunks[i]);\n            }\n            charsetChunks.length = 0; // emit preconnect resources\n            resources.preconnects.forEach(flushResourceInPreamble, destination);\n            resources.preconnects.clear();\n            var preconnectChunks = responseState.preconnectChunks;\n            for(i = 0; i < preconnectChunks.length; i++){\n                writeChunk(destination, preconnectChunks[i]);\n            }\n            preconnectChunks.length = 0;\n            resources.fontPreloads.forEach(flushResourceInPreamble, destination);\n            resources.fontPreloads.clear();\n            resources.highImagePreloads.forEach(flushResourceInPreamble, destination);\n            resources.highImagePreloads.clear(); // Flush unblocked stylesheets by precedence\n            resources.precedences.forEach(flushAllStylesInPreamble, destination);\n            resources.bootstrapScripts.forEach(flushResourceInPreamble, destination);\n            resources.scripts.forEach(flushResourceInPreamble, destination);\n            resources.scripts.clear();\n            resources.bulkPreloads.forEach(flushResourceInPreamble, destination);\n            resources.bulkPreloads.clear(); // Write embedding preloadChunks\n            var preloadChunks = responseState.preloadChunks;\n            for(i = 0; i < preloadChunks.length; i++){\n                writeChunk(destination, preloadChunks[i]);\n            }\n            preloadChunks.length = 0; // Write embedding hoistableChunks\n            var hoistableChunks = responseState.hoistableChunks;\n            for(i = 0; i < hoistableChunks.length; i++){\n                writeChunk(destination, hoistableChunks[i]);\n            }\n            hoistableChunks.length = 0; // Flush closing head if necessary\n            if (htmlChunks && headChunks === null) {\n                // We have an <html> rendered but no <head> rendered. We however inserted\n                // a <head> up above so we need to emit the </head> now. This is safe because\n                // if the main content contained the </head> it would also have provided a\n                // <head>. This means that all the content inside <html> is either <body> or\n                // invalid HTML\n                writeChunk(destination, endTag1);\n                writeChunk(destination, stringToChunk(\"head\"));\n                writeChunk(destination, endTag2);\n            }\n        } // We don't bother reporting backpressure at the moment because we expect to\n        // flush the entire preamble in a single pass. This probably should be modified\n        // in the future to be backpressure sensitive but that requires a larger refactor\n        // of the flushing code in Fizz.\n        function writeHoistables(destination, resources, responseState) {\n            var i = 0; // Emit high priority Hoistables\n            // We omit charsetChunks because we have already sent the shell and if it wasn't\n            // already sent it is too late now.\n            resources.preconnects.forEach(flushResourceLate, destination);\n            resources.preconnects.clear();\n            var preconnectChunks = responseState.preconnectChunks;\n            for(i = 0; i < preconnectChunks.length; i++){\n                writeChunk(destination, preconnectChunks[i]);\n            }\n            preconnectChunks.length = 0;\n            resources.fontPreloads.forEach(flushResourceLate, destination);\n            resources.fontPreloads.clear();\n            resources.highImagePreloads.forEach(flushResourceInPreamble, destination);\n            resources.highImagePreloads.clear(); // Preload any stylesheets. these will emit in a render instruction that follows this\n            // but we want to kick off preloading as soon as possible\n            resources.precedences.forEach(preloadLateStyles, destination); // bootstrap scripts should flush above script priority but these can only flush in the preamble\n            // so we elide the code here for performance\n            resources.scripts.forEach(flushResourceLate, destination);\n            resources.scripts.clear();\n            resources.bulkPreloads.forEach(flushResourceLate, destination);\n            resources.bulkPreloads.clear(); // Write embedding preloadChunks\n            var preloadChunks = responseState.preloadChunks;\n            for(i = 0; i < preloadChunks.length; i++){\n                writeChunk(destination, preloadChunks[i]);\n            }\n            preloadChunks.length = 0; // Write embedding hoistableChunks\n            var hoistableChunks = responseState.hoistableChunks;\n            for(i = 0; i < hoistableChunks.length; i++){\n                writeChunk(destination, hoistableChunks[i]);\n            }\n            hoistableChunks.length = 0;\n        }\n        function writePostamble(destination, responseState) {\n            if (responseState.hasBody) {\n                writeChunk(destination, endTag1);\n                writeChunk(destination, stringToChunk(\"body\"));\n                writeChunk(destination, endTag2);\n            }\n            if (responseState.htmlChunks) {\n                writeChunk(destination, endTag1);\n                writeChunk(destination, stringToChunk(\"html\"));\n                writeChunk(destination, endTag2);\n            }\n        }\n        var arrayFirstOpenBracket = stringToPrecomputedChunk(\"[\");\n        var arraySubsequentOpenBracket = stringToPrecomputedChunk(\",[\");\n        var arrayInterstitial = stringToPrecomputedChunk(\",\");\n        var arrayCloseBracket = stringToPrecomputedChunk(\"]\"); // This function writes a 2D array of strings to be embedded in javascript.\n        // E.g.\n        //  [[\"JS_escaped_string1\", \"JS_escaped_string2\"]]\n        function writeStyleResourceDependenciesInJS(destination, boundaryResources) {\n            writeChunk(destination, arrayFirstOpenBracket);\n            var nextArrayOpenBrackChunk = arrayFirstOpenBracket;\n            boundaryResources.forEach(function(resource) {\n                if (resource.type === \"style\") ;\n                else if (resource.state & FlushedInPreamble) ;\n                else if (resource.state & Flushed) {\n                    // We only need to emit the href because this resource flushed in an earlier\n                    // boundary already which encoded the attributes necessary to construct\n                    // the resource instance on the client.\n                    writeChunk(destination, nextArrayOpenBrackChunk);\n                    writeStyleResourceDependencyHrefOnlyInJS(destination, resource.props.href);\n                    writeChunk(destination, arrayCloseBracket);\n                    nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n                } else if (resource.type === \"stylesheet\") {\n                    // We need to emit the whole resource for insertion on the client\n                    writeChunk(destination, nextArrayOpenBrackChunk);\n                    writeStyleResourceDependencyInJS(destination, resource.props.href, resource.props[\"data-precedence\"], resource.props);\n                    writeChunk(destination, arrayCloseBracket);\n                    nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n                    resource.state |= FlushedLate;\n                }\n            });\n            writeChunk(destination, arrayCloseBracket);\n        }\n        /* Helper functions */ function writeStyleResourceDependencyHrefOnlyInJS(destination, href) {\n            // We should actually enforce this earlier when the resource is created but for\n            // now we make sure we are actually dealing with a string here.\n            {\n                checkAttributeStringCoercion(href, \"href\");\n            }\n            var coercedHref = \"\" + href;\n            writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));\n        }\n        function writeStyleResourceDependencyInJS(destination, href, precedence, props) {\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            var coercedHref = sanitizeURL(\"\" + href);\n            writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));\n            {\n                checkAttributeStringCoercion(precedence, \"precedence\");\n            }\n            var coercedPrecedence = \"\" + precedence;\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedPrecedence)));\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"href\":\n                        case \"rel\":\n                        case \"precedence\":\n                        case \"data-precedence\":\n                            {\n                                break;\n                            }\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"link\" + \" is a self-closing tag and must neither have `children` nor \" + \"use `dangerouslySetInnerHTML`.\");\n                        default:\n                            writeStyleResourceAttributeInJS(destination, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            return null;\n        }\n        function writeStyleResourceAttributeInJS(destination, name, value) {\n            var attributeName = name.toLowerCase();\n            var attributeValue;\n            switch(typeof value){\n                case \"function\":\n                case \"symbol\":\n                    return;\n            }\n            switch(name){\n                // Reserved names\n                case \"innerHTML\":\n                case \"dangerouslySetInnerHTML\":\n                case \"suppressContentEditableWarning\":\n                case \"suppressHydrationWarning\":\n                case \"style\":\n                    // Ignored\n                    return;\n                // Attribute renames\n                case \"className\":\n                    {\n                        attributeName = \"class\";\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                        break;\n                    }\n                // Booleans\n                case \"hidden\":\n                    {\n                        if (value === false) {\n                            return;\n                        }\n                        attributeValue = \"\";\n                        break;\n                    }\n                // Santized URLs\n                case \"src\":\n                case \"href\":\n                    {\n                        value = sanitizeURL(value);\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                        break;\n                    }\n                default:\n                    {\n                        if (// use on* as hueristic for these handler props\n                        name.length > 2 && (name[0] === \"o\" || name[0] === \"O\") && (name[1] === \"n\" || name[1] === \"N\")) {\n                            return;\n                        }\n                        if (!isAttributeNameSafe(name)) {\n                            return;\n                        }\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                    }\n            }\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeName)));\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeValue)));\n        } // This function writes a 2D array of strings to be embedded in an attribute\n        // value and read with JSON.parse in ReactDOMServerExternalRuntime.js\n        // E.g.\n        //  [[&quot;JSON_escaped_string1&quot;, &quot;JSON_escaped_string2&quot;]]\n        function writeStyleResourceDependenciesInAttr(destination, boundaryResources) {\n            writeChunk(destination, arrayFirstOpenBracket);\n            var nextArrayOpenBrackChunk = arrayFirstOpenBracket;\n            boundaryResources.forEach(function(resource) {\n                if (resource.type === \"style\") ;\n                else if (resource.state & FlushedInPreamble) ;\n                else if (resource.state & Flushed) {\n                    // We only need to emit the href because this resource flushed in an earlier\n                    // boundary already which encoded the attributes necessary to construct\n                    // the resource instance on the client.\n                    writeChunk(destination, nextArrayOpenBrackChunk);\n                    writeStyleResourceDependencyHrefOnlyInAttr(destination, resource.props.href);\n                    writeChunk(destination, arrayCloseBracket);\n                    nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n                } else if (resource.type === \"stylesheet\") {\n                    // We need to emit the whole resource for insertion on the client\n                    writeChunk(destination, nextArrayOpenBrackChunk);\n                    writeStyleResourceDependencyInAttr(destination, resource.props.href, resource.props[\"data-precedence\"], resource.props);\n                    writeChunk(destination, arrayCloseBracket);\n                    nextArrayOpenBrackChunk = arraySubsequentOpenBracket;\n                    resource.state |= FlushedLate;\n                }\n            });\n            writeChunk(destination, arrayCloseBracket);\n        }\n        /* Helper functions */ function writeStyleResourceDependencyHrefOnlyInAttr(destination, href) {\n            // We should actually enforce this earlier when the resource is created but for\n            // now we make sure we are actually dealing with a string here.\n            {\n                checkAttributeStringCoercion(href, \"href\");\n            }\n            var coercedHref = \"\" + href;\n            writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));\n        }\n        function writeStyleResourceDependencyInAttr(destination, href, precedence, props) {\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            var coercedHref = sanitizeURL(\"\" + href);\n            writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));\n            {\n                checkAttributeStringCoercion(precedence, \"precedence\");\n            }\n            var coercedPrecedence = \"\" + precedence;\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedPrecedence))));\n            for(var propKey in props){\n                if (hasOwnProperty.call(props, propKey)) {\n                    var propValue = props[propKey];\n                    if (propValue == null) {\n                        continue;\n                    }\n                    switch(propKey){\n                        case \"href\":\n                        case \"rel\":\n                        case \"precedence\":\n                        case \"data-precedence\":\n                            {\n                                break;\n                            }\n                        case \"children\":\n                        case \"dangerouslySetInnerHTML\":\n                            throw new Error(\"link\" + \" is a self-closing tag and must neither have `children` nor \" + \"use `dangerouslySetInnerHTML`.\");\n                        default:\n                            writeStyleResourceAttributeInAttr(destination, propKey, propValue);\n                            break;\n                    }\n                }\n            }\n            return null;\n        }\n        function writeStyleResourceAttributeInAttr(destination, name, value) {\n            var attributeName = name.toLowerCase();\n            var attributeValue;\n            switch(typeof value){\n                case \"function\":\n                case \"symbol\":\n                    return;\n            }\n            switch(name){\n                // Reserved names\n                case \"innerHTML\":\n                case \"dangerouslySetInnerHTML\":\n                case \"suppressContentEditableWarning\":\n                case \"suppressHydrationWarning\":\n                case \"style\":\n                    // Ignored\n                    return;\n                // Attribute renames\n                case \"className\":\n                    {\n                        attributeName = \"class\";\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                        break;\n                    }\n                // Booleans\n                case \"hidden\":\n                    {\n                        if (value === false) {\n                            return;\n                        }\n                        attributeValue = \"\";\n                        break;\n                    }\n                // Santized URLs\n                case \"src\":\n                case \"href\":\n                    {\n                        value = sanitizeURL(value);\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                        break;\n                    }\n                default:\n                    {\n                        if (// use on* as hueristic for these handler props\n                        name.length > 2 && (name[0] === \"o\" || name[0] === \"O\") && (name[1] === \"n\" || name[1] === \"N\")) {\n                            return;\n                        }\n                        if (!isAttributeNameSafe(name)) {\n                            return;\n                        }\n                        {\n                            checkAttributeStringCoercion(value, attributeName);\n                        }\n                        attributeValue = \"\" + value;\n                    }\n            }\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeName))));\n            writeChunk(destination, arrayInterstitial);\n            writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeValue))));\n        }\n        /**\n * Resources\n */ var NoState = 0; // These tags indicate whether the Resource was flushed and in which phase\n        var FlushedInPreamble = 1;\n        var FlushedLate = 2;\n        var Flushed = 3; // This tag indicates whether this Resource is blocked from flushing.\n        // This currently is only used with stylesheets that are blocked by a Boundary\n        var Blocked = 4; // This tag indicates whether this Resource has been preloaded.\n        // This generally only makes sense for Resources other than PreloadResource\n        var PreloadFlushed = 8; // Dev extensions.\n        // Stylesheets and Scripts rendered with jsx\n        // Preloads, Stylesheets, and Scripts from ReactDOM.preload or ReactDOM.preinit\n        // Preloads created for normal components we rendered but know we can preload early such as\n        // sync Scripts and stylesheets without precedence or with onLoad/onError handlers\n        // @TODO add bootstrap script to implicit preloads\n        function createResources() {\n            return {\n                // persistent\n                preloadsMap: new Map(),\n                preconnectsMap: new Map(),\n                stylesMap: new Map(),\n                scriptsMap: new Map(),\n                // cleared on flush\n                preconnects: new Set(),\n                fontPreloads: new Set(),\n                highImagePreloads: new Set(),\n                // usedImagePreloads: new Set(),\n                precedences: new Map(),\n                stylePrecedences: new Map(),\n                bootstrapScripts: new Set(),\n                scripts: new Set(),\n                bulkPreloads: new Set(),\n                // like a module global for currently rendering boundary\n                boundaryResources: null\n            };\n        }\n        function createBoundaryResources() {\n            return new Set();\n        }\n        function setCurrentlyRenderingBoundaryResourcesTarget(resources, boundaryResources) {\n            resources.boundaryResources = boundaryResources;\n        }\n        function getResourceKey(as, href) {\n            return \"[\" + as + \"]\" + href;\n        }\n        function prefetchDNS(href, options) {\n            var request = resolveRequest();\n            if (!request) {\n                // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n                // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n                // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n                // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n                // fetching) and we don't want to warn in those cases.\n                return;\n            }\n            var resources = getResources(request);\n            {\n                if (typeof href !== \"string\" || !href) {\n                    error(\"ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.\", getValueDescriptorExpectingObjectForWarning(href));\n                } else if (options != null) {\n                    if (typeof options === \"object\" && options.hasOwnProperty(\"crossOrigin\")) {\n                        error(\"ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.\", getValueDescriptorExpectingEnumForWarning(options));\n                    } else {\n                        error(\"ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.\", getValueDescriptorExpectingEnumForWarning(options));\n                    }\n                }\n            }\n            if (typeof href === \"string\" && href) {\n                var key = getResourceKey(\"prefetchDNS\", href);\n                var resource = resources.preconnectsMap.get(key);\n                if (!resource) {\n                    resource = {\n                        type: \"preconnect\",\n                        chunks: [],\n                        state: NoState,\n                        props: null\n                    };\n                    resources.preconnectsMap.set(key, resource);\n                    pushLinkImpl(resource.chunks, {\n                        href: href,\n                        rel: \"dns-prefetch\"\n                    });\n                }\n                resources.preconnects.add(resource);\n                flushResources(request);\n            }\n        }\n        function preconnect(href, options) {\n            var request = resolveRequest();\n            if (!request) {\n                // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n                // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n                // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n                // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n                // fetching) and we don't want to warn in those cases.\n                return;\n            }\n            var resources = getResources(request);\n            {\n                if (typeof href !== \"string\" || !href) {\n                    error(\"ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.\", getValueDescriptorExpectingObjectForWarning(href));\n                } else if (options != null && typeof options !== \"object\") {\n                    error(\"ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.\", getValueDescriptorExpectingEnumForWarning(options));\n                } else if (options != null && typeof options.crossOrigin !== \"string\") {\n                    error(\"ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.\", getValueDescriptorExpectingObjectForWarning(options.crossOrigin));\n                }\n            }\n            if (typeof href === \"string\" && href) {\n                var crossOrigin = options == null || typeof options.crossOrigin !== \"string\" ? null : options.crossOrigin === \"use-credentials\" ? \"use-credentials\" : \"\";\n                var key = \"[preconnect][\" + (crossOrigin === null ? \"null\" : crossOrigin) + \"]\" + href;\n                var resource = resources.preconnectsMap.get(key);\n                if (!resource) {\n                    resource = {\n                        type: \"preconnect\",\n                        chunks: [],\n                        state: NoState,\n                        props: null\n                    };\n                    resources.preconnectsMap.set(key, resource);\n                    pushLinkImpl(resource.chunks, {\n                        rel: \"preconnect\",\n                        href: href,\n                        crossOrigin: crossOrigin\n                    });\n                }\n                resources.preconnects.add(resource);\n                flushResources(request);\n            }\n        }\n        function preload(href, options) {\n            var request = resolveRequest();\n            if (!request) {\n                // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n                // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n                // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n                // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n                // fetching) and we don't want to warn in those cases.\n                return;\n            }\n            var resources = getResources(request);\n            {\n                var encountered = \"\";\n                if (typeof href !== \"string\" || !href) {\n                    encountered += \" The `href` argument encountered was \" + getValueDescriptorExpectingObjectForWarning(href) + \".\";\n                }\n                if (options == null || typeof options !== \"object\") {\n                    encountered += \" The `options` argument encountered was \" + getValueDescriptorExpectingObjectForWarning(options) + \".\";\n                } else if (typeof options.as !== \"string\" || !options.as) {\n                    encountered += \" The `as` option encountered was \" + getValueDescriptorExpectingObjectForWarning(options.as) + \".\";\n                }\n                if (encountered) {\n                    error('ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel=\"preload\" as=\"...\" />` tag.%s', encountered);\n                }\n            }\n            if (typeof href === \"string\" && href && typeof options === \"object\" && options !== null && typeof options.as === \"string\" && options.as) {\n                var as = options.as;\n                var key;\n                if (as === \"image\") {\n                    // For image preloads the key contains either the imageSrcSet + imageSizes or the href but not\n                    // both. This is to prevent identical calls with the same srcSet and sizes to be duplicated\n                    // by varying the href. this is an edge case but it is the most correct behavior.\n                    var imageSrcSet = options.imageSrcSet, imageSizes = options.imageSizes;\n                    key = getImagePreloadKey(href, imageSrcSet, imageSizes);\n                } else {\n                    key = getResourceKey(as, href);\n                }\n                var resource = resources.preloadsMap.get(key);\n                {\n                    var devResource = getAsResourceDEV(resource);\n                    if (devResource) {\n                        switch(devResource.__provenance){\n                            case \"preload\":\n                                {\n                                    var differenceDescription = describeDifferencesForPreloads(options, devResource.__originalOptions);\n                                    if (differenceDescription) {\n                                        error('ReactDOM.preload(): The options provided conflict with another call to `ReactDOM.preload(\"%s\", { as: \"%s\", ...})`.' + \" React will always use the options it first encounters when preloading a resource for a given `href` and `as` type, and any later options will be ignored if different.\" + \" Try updating all calls to `ReactDOM.preload()` with the same `href` and `as` type to use the same options, or eliminate one of the calls.%s\", href, as, differenceDescription);\n                                    }\n                                    break;\n                                }\n                            case \"implicit\":\n                                {\n                                    var _differenceDescription3 = describeDifferencesForPreloadOverImplicitPreload(options, devResource.__impliedProps);\n                                    if (_differenceDescription3) {\n                                        var elementDescription = as === \"style\" ? '<link rel=\"stylesheet\" ... />' : as === \"script\" ? \"<script ... />\" : null;\n                                        if (elementDescription) {\n                                            error('ReactDOM.preload(): For `href` \"%s\", The options provided conflict with props on a matching %s element. When the preload' + \" options disagree with the underlying resource it usually means the browser will not be able to use the preload when the resource\" + \" is fetched, negating any benefit the preload would provide. React will preload the resource using props derived from the resource instead\" + \" and ignore the options provided to the `ReactDOM.preload()` call. In general, preloading is useful when you expect to\" + \" render a resource soon but have not yet done so. In this case since the underlying resource was already rendered the preload call\" + \" may be extraneous. Try removing the call, otherwise try adjusting both the props on the %s and the options\" + \" passed to `ReactDOM.preload()` to agree.%s\", href, elementDescription, elementDescription, _differenceDescription3);\n                                        }\n                                    }\n                                    break;\n                                }\n                        }\n                    }\n                }\n                if (!resource) {\n                    resource = {\n                        type: \"preload\",\n                        chunks: [],\n                        state: NoState,\n                        props: preloadPropsFromPreloadOptions(href, as, options)\n                    };\n                    resources.preloadsMap.set(key, resource);\n                    {\n                        markAsImperativeResourceDEV(resource, \"preload\", href, options, resource.props);\n                    }\n                    pushLinkImpl(resource.chunks, resource.props);\n                }\n                if (as === \"font\") {\n                    resources.fontPreloads.add(resource);\n                } else if (as === \"image\" && options.fetchPriority === \"high\") {\n                    resources.highImagePreloads.add(resource);\n                } else {\n                    resources.bulkPreloads.add(resource);\n                }\n                flushResources(request);\n            }\n        }\n        function preinit(href, options) {\n            var request = resolveRequest();\n            if (!request) {\n                // In async contexts we can sometimes resolve resources from AsyncLocalStorage. If we can't we can also\n                // possibly get them from the stack if we are not in an async context. Since we were not able to resolve\n                // the resources for this call in either case we opt to do nothing. We can consider making this a warning\n                // but there may be times where calling a function outside of render is intentional (i.e. to warm up data\n                // fetching) and we don't want to warn in those cases.\n                return;\n            }\n            var resources = getResources(request);\n            {\n                if (typeof href !== \"string\" || !href) {\n                    error(\"ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.\", getValueDescriptorExpectingObjectForWarning(href));\n                } else if (options == null || typeof options !== \"object\") {\n                    error(\"ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.\", getValueDescriptorExpectingEnumForWarning(options));\n                } else if (options.as !== \"style\" && options.as !== \"script\") {\n                    error('ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are \"style\" and \"script\".', getValueDescriptorExpectingEnumForWarning(options.as));\n                }\n            }\n            if (typeof href === \"string\" && href && typeof options === \"object\" && options !== null) {\n                var as = options.as;\n                switch(as){\n                    case \"style\":\n                        {\n                            var key = getResourceKey(as, href);\n                            var resource = resources.stylesMap.get(key);\n                            var precedence = options.precedence || \"default\";\n                            {\n                                var devResource = getAsResourceDEV(resource);\n                                if (devResource) {\n                                    var resourceProps = stylesheetPropsFromPreinitOptions(href, precedence, options);\n                                    var propsEquivalent = assign({}, resourceProps, _defineProperty({\n                                        precedence: options.precedence\n                                    }, \"data-precedence\", null));\n                                    switch(devResource.__provenance){\n                                        case \"rendered\":\n                                            {\n                                                var differenceDescription = describeDifferencesForPreinitOverStylesheet(propsEquivalent, devResource.__originalProps);\n                                                if (differenceDescription) {\n                                                    error('ReactDOM.preinit(): For `href` \"%s\", the options provided conflict with props found on a <link rel=\"stylesheet\" precedence=\"%s\" href=\"%s\" .../> that was already rendered.' + \" React will always use the props or options it first encounters for a hoistable stylesheet for a given `href` and any later props or options will be ignored if different.\" + \" Generally, ReactDOM.preinit() is useful when you are not yet rendering a stylesheet but you anticipate it will be used soon.\" + \" In this case the stylesheet was already rendered so preinitializing it does not provide any additional benefit.\" + ' To resolve, try making the props and options agree between the <link rel=\"stylesheet\" .../> and the `ReactDOM.preinit()` call or' + \" remove the `ReactDOM.preinit()` call.%s\", href, devResource.__originalProps.precedence, href, differenceDescription);\n                                                }\n                                                break;\n                                            }\n                                        case \"preinit\":\n                                            {\n                                                var _differenceDescription4 = describeDifferencesForPreinits(propsEquivalent, devResource.__propsEquivalent);\n                                                if (_differenceDescription4) {\n                                                    error('ReactDOM.preinit(): For `href` \"%s\", the options provided conflict with another call to `ReactDOM.preinit(\"%s\", { as: \"style\", ... })`.' + \" React will always use the options it first encounters when preinitializing a hoistable stylesheet for a given `href` and any later options will be ignored if different.\" + \" Try updating all calls to `ReactDOM.preinit()` for a given `href` to use the same options, or only call `ReactDOM.preinit()` once per `href`.%s\", href, href, _differenceDescription4);\n                                                }\n                                                break;\n                                            }\n                                    }\n                                }\n                            }\n                            if (!resource) {\n                                var state = NoState;\n                                var preloadResource = resources.preloadsMap.get(key);\n                                if (preloadResource && preloadResource.state & Flushed) {\n                                    state = PreloadFlushed;\n                                }\n                                resource = {\n                                    type: \"stylesheet\",\n                                    chunks: [],\n                                    state: state,\n                                    props: stylesheetPropsFromPreinitOptions(href, precedence, options)\n                                };\n                                resources.stylesMap.set(key, resource);\n                                {\n                                    markAsImperativeResourceDEV(resource, \"preinit\", href, options, assign({}, resource.props, _defineProperty({\n                                        precedence: precedence\n                                    }, \"data-precedence\", undefined)));\n                                }\n                                var precedenceSet = resources.precedences.get(precedence);\n                                if (!precedenceSet) {\n                                    precedenceSet = new Set();\n                                    resources.precedences.set(precedence, precedenceSet);\n                                    var emptyStyleResource = {\n                                        type: \"style\",\n                                        chunks: [],\n                                        state: NoState,\n                                        props: {\n                                            precedence: precedence,\n                                            hrefs: []\n                                        }\n                                    };\n                                    precedenceSet.add(emptyStyleResource);\n                                    {\n                                        if (resources.stylePrecedences.has(precedence)) {\n                                            error('React constructed an empty style resource when a style resource already exists for this precedence: \"%s\". This is a bug in React.', precedence);\n                                        }\n                                    }\n                                    resources.stylePrecedences.set(precedence, emptyStyleResource);\n                                }\n                                precedenceSet.add(resource);\n                                flushResources(request);\n                            }\n                            return;\n                        }\n                    case \"script\":\n                        {\n                            var src = href;\n                            var _key = getResourceKey(as, src);\n                            var _resource = resources.scriptsMap.get(_key);\n                            {\n                                var _devResource = getAsResourceDEV(_resource);\n                                if (_devResource) {\n                                    var _propsEquivalent = scriptPropsFromPreinitOptions(src, options);\n                                    switch(_devResource.__provenance){\n                                        case \"rendered\":\n                                            {\n                                                var _differenceDescription5 = describeDifferencesForPreinitOverScript(_propsEquivalent, _devResource.__originalProps);\n                                                if (_differenceDescription5) {\n                                                    error('ReactDOM.preinit(): For `href` \"%s\", the options provided conflict with props found on a <script async={true} src=\"%s\" .../> that was already rendered.' + \" React will always use the props or options it first encounters for a hoistable script for a given `href` and any later props or options will be ignored if different.\" + \" Generally, ReactDOM.preinit() is useful when you are not yet rendering a script but you anticipate it will be used soon and want to go beyond preloading it and have it\" + \" execute early. In this case the script was already rendered so preinitializing it does not provide any additional benefit.\" + \" To resolve, try making the props and options agree between the <script .../> and the `ReactDOM.preinit()` call or remove the `ReactDOM.preinit()` call.%s\", href, href, _differenceDescription5);\n                                                }\n                                                break;\n                                            }\n                                        case \"preinit\":\n                                            {\n                                                var _differenceDescription6 = describeDifferencesForPreinits(_propsEquivalent, _devResource.__propsEquivalent);\n                                                if (_differenceDescription6) {\n                                                    error('ReactDOM.preinit(): For `href` \"%s\", the options provided conflict with another call to `ReactDOM.preinit(\"%s\", { as: \"script\", ... })`.' + \" React will always use the options it first encounters when preinitializing a hoistable script for a given `href` and any later options will be ignored if different.\" + \" Try updating all calls to `ReactDOM.preinit()` for a given `href` to use the same options, or only call `ReactDOM.preinit()` once per `href`.%s\", href, href, _differenceDescription6);\n                                                }\n                                                break;\n                                            }\n                                    }\n                                }\n                            }\n                            if (!_resource) {\n                                _resource = {\n                                    type: \"script\",\n                                    chunks: [],\n                                    state: NoState,\n                                    props: null\n                                };\n                                resources.scriptsMap.set(_key, _resource);\n                                var _resourceProps = scriptPropsFromPreinitOptions(src, options);\n                                {\n                                    markAsImperativeResourceDEV(_resource, \"preinit\", href, options, _resourceProps);\n                                }\n                                resources.scripts.add(_resource);\n                                pushScriptImpl(_resource.chunks, _resourceProps);\n                                flushResources(request);\n                            }\n                            return;\n                        }\n                }\n            }\n        } // This function is only safe to call at Request start time since it assumes\n        // that each script has not already been preloaded. If we find a need to preload\n        // scripts at any other point in time we will need to check whether the preload\n        // already exists and not assume it\n        function preloadBootstrapScript(resources, src, nonce, integrity, crossOrigin) {\n            var key = getResourceKey(\"script\", src);\n            {\n                if (resources.preloadsMap.has(key)) {\n                    // This is coded as a React error because it should be impossible for a userspace preload to preempt this call\n                    // If a userspace preload can preempt it then this assumption is broken and we need to reconsider this strategy\n                    // rather than instruct the user to not preload their bootstrap scripts themselves\n                    error('Internal React Error: React expected bootstrap script with src \"%s\" to not have been preloaded already. please file an issue', src);\n                }\n            }\n            var props = {\n                rel: \"preload\",\n                href: src,\n                as: \"script\",\n                fetchPriority: \"low\",\n                nonce: nonce,\n                integrity: integrity,\n                crossOrigin: crossOrigin\n            };\n            var resource = {\n                type: \"preload\",\n                chunks: [],\n                state: NoState,\n                props: props\n            };\n            resources.preloadsMap.set(key, resource);\n            resources.bootstrapScripts.add(resource);\n            pushLinkImpl(resource.chunks, props);\n        } // This function is only safe to call at Request start time since it assumes\n        // that each module has not already been preloaded. If we find a need to preload\n        // scripts at any other point in time we will need to check whether the preload\n        // already exists and not assume it\n        function preloadBootstrapModule(resources, src, nonce, integrity, crossOrigin) {\n            var key = getResourceKey(\"script\", src);\n            {\n                if (resources.preloadsMap.has(key)) {\n                    // This is coded as a React error because it should be impossible for a userspace preload to preempt this call\n                    // If a userspace preload can preempt it then this assumption is broken and we need to reconsider this strategy\n                    // rather than instruct the user to not preload their bootstrap scripts themselves\n                    error('Internal React Error: React expected bootstrap module with src \"%s\" to not have been preloaded already. please file an issue', src);\n                }\n            }\n            var props = {\n                rel: \"modulepreload\",\n                href: src,\n                fetchPriority: \"low\",\n                nonce: nonce,\n                integrity: integrity,\n                crossOrigin: crossOrigin\n            };\n            var resource = {\n                type: \"preload\",\n                chunks: [],\n                state: NoState,\n                props: props\n            };\n            resources.preloadsMap.set(key, resource);\n            resources.bootstrapScripts.add(resource);\n            pushLinkImpl(resource.chunks, props);\n            return;\n        }\n        function internalPreinitScript(resources, src, chunks) {\n            var key = getResourceKey(\"script\", src);\n            var resource = resources.scriptsMap.get(key);\n            if (!resource) {\n                resource = {\n                    type: \"script\",\n                    chunks: chunks,\n                    state: NoState,\n                    props: null\n                };\n                resources.scriptsMap.set(key, resource);\n                resources.scripts.add(resource);\n            }\n            return;\n        }\n        function preloadPropsFromPreloadOptions(href, as, options) {\n            return {\n                rel: \"preload\",\n                as: as,\n                // There is a bug in Safari where imageSrcSet is not respected on preload links\n                // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.\n                // This harms older browers that do not support imageSrcSet by making their preloads not work\n                // but this population is shrinking fast and is already small so we accept this tradeoff.\n                href: as === \"image\" && options.imageSrcSet ? undefined : href,\n                crossOrigin: as === \"font\" ? \"\" : options.crossOrigin,\n                integrity: options.integrity,\n                type: options.type,\n                nonce: options.nonce,\n                fetchPriority: options.fetchPriority,\n                imageSrcSet: options.imageSrcSet,\n                imageSizes: options.imageSizes,\n                referrerPolicy: options.referrerPolicy\n            };\n        }\n        function preloadAsStylePropsFromProps(href, props) {\n            return {\n                rel: \"preload\",\n                as: \"style\",\n                href: href,\n                crossOrigin: props.crossOrigin,\n                fetchPriority: props.fetchPriority,\n                integrity: props.integrity,\n                media: props.media,\n                hrefLang: props.hrefLang,\n                referrerPolicy: props.referrerPolicy\n            };\n        }\n        function stylesheetPropsFromPreinitOptions(href, precedence, options) {\n            return {\n                rel: \"stylesheet\",\n                href: href,\n                \"data-precedence\": precedence,\n                crossOrigin: options.crossOrigin,\n                integrity: options.integrity,\n                fetchPriority: options.fetchPriority\n            };\n        }\n        function stylesheetPropsFromRawProps(rawProps) {\n            return assign({}, rawProps, {\n                \"data-precedence\": rawProps.precedence,\n                precedence: null\n            });\n        }\n        function adoptPreloadPropsForStylesheetProps(resourceProps, preloadProps) {\n            if (resourceProps.crossOrigin == null) resourceProps.crossOrigin = preloadProps.crossOrigin;\n            if (resourceProps.integrity == null) resourceProps.integrity = preloadProps.integrity;\n        }\n        function scriptPropsFromPreinitOptions(src, options) {\n            return {\n                src: src,\n                async: true,\n                crossOrigin: options.crossOrigin,\n                integrity: options.integrity,\n                nonce: options.nonce,\n                fetchPriority: options.fetchPriority\n            };\n        }\n        function adoptPreloadPropsForScriptProps(resourceProps, preloadProps) {\n            if (resourceProps.crossOrigin == null) resourceProps.crossOrigin = preloadProps.crossOrigin;\n            if (resourceProps.integrity == null) resourceProps.integrity = preloadProps.integrity;\n        }\n        function hoistStyleResource(resource) {\n            this.add(resource);\n        }\n        function hoistResources(resources, source) {\n            var currentBoundaryResources = resources.boundaryResources;\n            if (currentBoundaryResources) {\n                source.forEach(hoistStyleResource, currentBoundaryResources);\n            }\n        }\n        function markAsRenderedResourceDEV(resource, originalProps) {\n            {\n                var devResource = resource;\n                if (typeof devResource.__provenance === \"string\") {\n                    error(\"Resource already marked for DEV type. This is a bug in React.\");\n                }\n                devResource.__provenance = \"rendered\";\n                devResource.__originalProps = originalProps;\n            }\n        }\n        function markAsImperativeResourceDEV(resource, provenance, originalHref, originalOptions, propsEquivalent) {\n            {\n                var devResource = resource;\n                if (typeof devResource.__provenance === \"string\") {\n                    error(\"Resource already marked for DEV type. This is a bug in React.\");\n                }\n                devResource.__provenance = provenance;\n                devResource.__originalHref = originalHref;\n                devResource.__originalOptions = originalOptions;\n                devResource.__propsEquivalent = propsEquivalent;\n            }\n        }\n        function getAsResourceDEV(resource) {\n            {\n                if (resource) {\n                    if (typeof resource.__provenance === \"string\") {\n                        return resource;\n                    }\n                    error(\"Resource was not marked for DEV type. This is a bug in React.\");\n                }\n                return null;\n            }\n        }\n        var requestStorage = new async_hooks.AsyncLocalStorage();\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_SERVER_CONTEXT_TYPE = Symbol.for(\"react.server_context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_SCOPE_TYPE = Symbol.for(\"react.scope\");\n        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for(\"react.debug_trace_mode\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for(\"react.legacy_hidden\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for(\"react.default_value\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            {\n                if (typeof type.tag === \"number\") {\n                    error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                }\n            }\n            if (typeof type === \"function\") {\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                    case REACT_SERVER_CONTEXT_TYPE:\n                        {\n                            var context2 = type;\n                            return (context2.displayName || context2._globalName) + \".Provider\";\n                        }\n                }\n            }\n            return null;\n        }\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            var control;\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher$1.current = null;\n                disableLogs();\n            }\n            try {\n                // This should throw.\n                if (construct) {\n                    // Something should be setting the props in the constructor.\n                    var Fake = function() {\n                        throw Error();\n                    }; // $FlowFixMe[prop-missing]\n                    Object.defineProperty(Fake.prototype, \"props\", {\n                        set: function() {\n                            // We use a throwing setter instead of frozen or non-writable props\n                            // because that won't throw in a non-strict mode function.\n                            throw Error();\n                        }\n                    });\n                    if (typeof Reflect === \"object\" && Reflect.construct) {\n                        // We construct a different control for this case to include any extra\n                        // frames added by the construct call.\n                        try {\n                            Reflect.construct(Fake, []);\n                        } catch (x) {\n                            control = x;\n                        }\n                        Reflect.construct(fn, [], Fake);\n                    } else {\n                        try {\n                            Fake.call();\n                        } catch (x) {\n                            control = x;\n                        } // $FlowFixMe[prop-missing] found when upgrading Flow\n                        fn.call(Fake.prototype);\n                    }\n                } else {\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        control = x;\n                    } // TODO(luna): This will currently only throw if the function component\n                    // tries to access React/ReactDOM/props. We should probably make this throw\n                    // in simple components too\n                    var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                    // component, which we don't yet support. Attach a noop catch handler to\n                    // silence the error.\n                    // TODO: Implement component stacks for async client components?\n                    if (maybePromise && typeof maybePromise.catch === \"function\") {\n                        maybePromise.catch(function() {});\n                    }\n                }\n            } catch (sample) {\n                // This is inlined manually because closure doesn't do it for us.\n                if (sample && control && typeof sample.stack === \"string\") {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sample.stack.split(\"\\n\");\n                    var controlLines = control.stack.split(\"\\n\");\n                    var s = sampleLines.length - 1;\n                    var c = controlLines.length - 1;\n                    while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                        // We expect at least one stack frame to be shared.\n                        // Typically this will be the root most one. However, stack frames may be\n                        // cut off due to maximum stack limits. In this case, one maybe cut off\n                        // earlier than the other. We assume that the sample is longer or the same\n                        // and there for cut off earlier. So we should find the root most frame in\n                        // the sample somewhere in the control.\n                        c--;\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        }\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher$1.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeClassComponentFrame(ctor, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(ctor, true);\n            }\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct$1(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct$1(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement(null);\n                        }\n                    }\n                }\n            }\n        }\n        var warnedAboutMissingGetChildContext;\n        {\n            warnedAboutMissingGetChildContext = {};\n        }\n        var emptyContextObject = {};\n        {\n            Object.freeze(emptyContextObject);\n        }\n        function getMaskedContext(type, unmaskedContext) {\n            {\n                var contextTypes = type.contextTypes;\n                if (!contextTypes) {\n                    return emptyContextObject;\n                }\n                var context = {};\n                for(var key in contextTypes){\n                    context[key] = unmaskedContext[key];\n                }\n                {\n                    var name = getComponentNameFromType(type) || \"Unknown\";\n                    checkPropTypes(contextTypes, context, \"context\", name);\n                }\n                return context;\n            }\n        }\n        function processChildContext(instance, type, parentContext, childContextTypes) {\n            {\n                // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n                // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n                if (typeof instance.getChildContext !== \"function\") {\n                    {\n                        var componentName = getComponentNameFromType(type) || \"Unknown\";\n                        if (!warnedAboutMissingGetChildContext[componentName]) {\n                            warnedAboutMissingGetChildContext[componentName] = true;\n                            error(\"%s.childContextTypes is specified but there is no getChildContext() method \" + \"on the instance. You can either define getChildContext() on %s or remove \" + \"childContextTypes from it.\", componentName, componentName);\n                        }\n                    }\n                    return parentContext;\n                }\n                var childContext = instance.getChildContext();\n                for(var contextKey in childContext){\n                    if (!(contextKey in childContextTypes)) {\n                        throw new Error((getComponentNameFromType(type) || \"Unknown\") + '.getChildContext(): key \"' + contextKey + '\" is not defined in childContextTypes.');\n                    }\n                }\n                {\n                    var name = getComponentNameFromType(type) || \"Unknown\";\n                    checkPropTypes(childContextTypes, childContext, \"child context\", name);\n                }\n                return assign({}, parentContext, childContext);\n            }\n        }\n        var rendererSigil;\n        {\n            // Use this to detect multiple renderers using the same context\n            rendererSigil = {};\n        }\n        // Forming a reverse tree.\n        // The structure of a context snapshot is an implementation of this file.\n        // Currently, it's implemented as tracking the current active node.\n        var rootContextSnapshot = null; // We assume that this runtime owns the \"current\" field on all ReactContext instances.\n        // This global (actually thread local) state represents what state all those \"current\",\n        // fields are currently in.\n        var currentActiveSnapshot = null;\n        function popNode(prev) {\n            {\n                prev.context._currentValue = prev.parentValue;\n            }\n        }\n        function pushNode(next) {\n            {\n                next.context._currentValue = next.value;\n            }\n        }\n        function popToNearestCommonAncestor(prev, next) {\n            if (prev === next) ;\n            else {\n                popNode(prev);\n                var parentPrev = prev.parent;\n                var parentNext = next.parent;\n                if (parentPrev === null) {\n                    if (parentNext !== null) {\n                        throw new Error(\"The stacks must reach the root at the same time. This is a bug in React.\");\n                    }\n                } else {\n                    if (parentNext === null) {\n                        throw new Error(\"The stacks must reach the root at the same time. This is a bug in React.\");\n                    }\n                    popToNearestCommonAncestor(parentPrev, parentNext);\n                } // On the way back, we push the new ones that weren't common.\n                pushNode(next);\n            }\n        }\n        function popAllPrevious(prev) {\n            popNode(prev);\n            var parentPrev = prev.parent;\n            if (parentPrev !== null) {\n                popAllPrevious(parentPrev);\n            }\n        }\n        function pushAllNext(next) {\n            var parentNext = next.parent;\n            if (parentNext !== null) {\n                pushAllNext(parentNext);\n            }\n            pushNode(next);\n        }\n        function popPreviousToCommonLevel(prev, next) {\n            popNode(prev);\n            var parentPrev = prev.parent;\n            if (parentPrev === null) {\n                throw new Error(\"The depth must equal at least at zero before reaching the root. This is a bug in React.\");\n            }\n            if (parentPrev.depth === next.depth) {\n                // We found the same level. Now we just need to find a shared ancestor.\n                popToNearestCommonAncestor(parentPrev, next);\n            } else {\n                // We must still be deeper.\n                popPreviousToCommonLevel(parentPrev, next);\n            }\n        }\n        function popNextToCommonLevel(prev, next) {\n            var parentNext = next.parent;\n            if (parentNext === null) {\n                throw new Error(\"The depth must equal at least at zero before reaching the root. This is a bug in React.\");\n            }\n            if (prev.depth === parentNext.depth) {\n                // We found the same level. Now we just need to find a shared ancestor.\n                popToNearestCommonAncestor(prev, parentNext);\n            } else {\n                // We must still be deeper.\n                popNextToCommonLevel(prev, parentNext);\n            }\n            pushNode(next);\n        } // Perform context switching to the new snapshot.\n        // To make it cheap to read many contexts, while not suspending, we make the switch eagerly by\n        // updating all the context's current values. That way reads, always just read the current value.\n        // At the cost of updating contexts even if they're never read by this subtree.\n        function switchContext(newSnapshot) {\n            // The basic algorithm we need to do is to pop back any contexts that are no longer on the stack.\n            // We also need to update any new contexts that are now on the stack with the deepest value.\n            // The easiest way to update new contexts is to just reapply them in reverse order from the\n            // perspective of the backpointers. To avoid allocating a lot when switching, we use the stack\n            // for that. Therefore this algorithm is recursive.\n            // 1) First we pop which ever snapshot tree was deepest. Popping old contexts as we go.\n            // 2) Then we find the nearest common ancestor from there. Popping old contexts as we go.\n            // 3) Then we reapply new contexts on the way back up the stack.\n            var prev = currentActiveSnapshot;\n            var next = newSnapshot;\n            if (prev !== next) {\n                if (prev === null) {\n                    // $FlowFixMe[incompatible-call]: This has to be non-null since it's not equal to prev.\n                    pushAllNext(next);\n                } else if (next === null) {\n                    popAllPrevious(prev);\n                } else if (prev.depth === next.depth) {\n                    popToNearestCommonAncestor(prev, next);\n                } else if (prev.depth > next.depth) {\n                    popPreviousToCommonLevel(prev, next);\n                } else {\n                    popNextToCommonLevel(prev, next);\n                }\n                currentActiveSnapshot = next;\n            }\n        }\n        function pushProvider(context, nextValue) {\n            var prevValue;\n            {\n                prevValue = context._currentValue;\n                context._currentValue = nextValue;\n                {\n                    if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\n                        error(\"Detected multiple renderers concurrently rendering the \" + \"same context provider. This is currently unsupported.\");\n                    }\n                    context._currentRenderer = rendererSigil;\n                }\n            }\n            var prevNode = currentActiveSnapshot;\n            var newNode = {\n                parent: prevNode,\n                depth: prevNode === null ? 0 : prevNode.depth + 1,\n                context: context,\n                parentValue: prevValue,\n                value: nextValue\n            };\n            currentActiveSnapshot = newNode;\n            return newNode;\n        }\n        function popProvider(context) {\n            var prevSnapshot = currentActiveSnapshot;\n            if (prevSnapshot === null) {\n                throw new Error(\"Tried to pop a Context at the root of the app. This is a bug in React.\");\n            }\n            {\n                if (prevSnapshot.context !== context) {\n                    error(\"The parent context is not the expected context. This is probably a bug in React.\");\n                }\n            }\n            {\n                var value = prevSnapshot.parentValue;\n                if (value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {\n                    prevSnapshot.context._currentValue = prevSnapshot.context._defaultValue;\n                } else {\n                    prevSnapshot.context._currentValue = value;\n                }\n                {\n                    if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\n                        error(\"Detected multiple renderers concurrently rendering the \" + \"same context provider. This is currently unsupported.\");\n                    }\n                    context._currentRenderer = rendererSigil;\n                }\n            }\n            return currentActiveSnapshot = prevSnapshot.parent;\n        }\n        function getActiveContext() {\n            return currentActiveSnapshot;\n        }\n        function readContext$1(context) {\n            var value = context._currentValue;\n            return value;\n        }\n        /**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */ function get(key) {\n            return key._reactInternals;\n        }\n        function set(key, value) {\n            key._reactInternals = value;\n        }\n        var didWarnAboutNoopUpdateForComponent = {};\n        var didWarnAboutDeprecatedWillMount = {};\n        var didWarnAboutUninitializedState;\n        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\n        var didWarnAboutLegacyLifecyclesAndDerivedState;\n        var didWarnAboutUndefinedDerivedState;\n        var didWarnAboutDirectlyAssigningPropsToState;\n        var didWarnAboutContextTypeAndContextTypes;\n        var didWarnAboutInvalidateContextType;\n        var didWarnOnInvalidCallback;\n        {\n            didWarnAboutUninitializedState = new Set();\n            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n            didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n            didWarnAboutDirectlyAssigningPropsToState = new Set();\n            didWarnAboutUndefinedDerivedState = new Set();\n            didWarnAboutContextTypeAndContextTypes = new Set();\n            didWarnAboutInvalidateContextType = new Set();\n            didWarnOnInvalidCallback = new Set();\n        }\n        function warnOnInvalidCallback(callback, callerName) {\n            {\n                if (callback === null || typeof callback === \"function\") {\n                    return;\n                }\n                var key = callerName + \"_\" + callback;\n                if (!didWarnOnInvalidCallback.has(key)) {\n                    didWarnOnInvalidCallback.add(key);\n                    error(\"%s(...): Expected the last optional `callback` argument to be a \" + \"function. Instead received: %s.\", callerName, callback);\n                }\n            }\n        }\n        function warnOnUndefinedDerivedState(type, partialState) {\n            {\n                if (partialState === undefined) {\n                    var componentName = getComponentNameFromType(type) || \"Component\";\n                    if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n                        didWarnAboutUndefinedDerivedState.add(componentName);\n                        error(\"%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. \" + \"You have returned undefined.\", componentName);\n                    }\n                }\n            }\n        }\n        function warnNoop(publicInstance, callerName) {\n            {\n                var _constructor = publicInstance.constructor;\n                var componentName = _constructor && getComponentNameFromType(_constructor) || \"ReactClass\";\n                var warningKey = componentName + \".\" + callerName;\n                if (didWarnAboutNoopUpdateForComponent[warningKey]) {\n                    return;\n                }\n                error(\"%s(...): Can only update a mounting component. \" + \"This usually means you called %s() outside componentWillMount() on the server. \" + \"This is a no-op.\\n\\nPlease check the code for the %s component.\", callerName, callerName, componentName);\n                didWarnAboutNoopUpdateForComponent[warningKey] = true;\n            }\n        }\n        var classComponentUpdater = {\n            isMounted: function(inst) {\n                return false;\n            },\n            // $FlowFixMe[missing-local-annot]\n            enqueueSetState: function(inst, payload, callback) {\n                var internals = get(inst);\n                if (internals.queue === null) {\n                    warnNoop(inst, \"setState\");\n                } else {\n                    internals.queue.push(payload);\n                    {\n                        if (callback !== undefined && callback !== null) {\n                            warnOnInvalidCallback(callback, \"setState\");\n                        }\n                    }\n                }\n            },\n            enqueueReplaceState: function(inst, payload, callback) {\n                var internals = get(inst);\n                internals.replace = true;\n                internals.queue = [\n                    payload\n                ];\n                {\n                    if (callback !== undefined && callback !== null) {\n                        warnOnInvalidCallback(callback, \"setState\");\n                    }\n                }\n            },\n            // $FlowFixMe[missing-local-annot]\n            enqueueForceUpdate: function(inst, callback) {\n                var internals = get(inst);\n                if (internals.queue === null) {\n                    warnNoop(inst, \"forceUpdate\");\n                } else {\n                    {\n                        if (callback !== undefined && callback !== null) {\n                            warnOnInvalidCallback(callback, \"setState\");\n                        }\n                    }\n                }\n            }\n        };\n        function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {\n            var partialState = getDerivedStateFromProps(nextProps, prevState);\n            {\n                warnOnUndefinedDerivedState(ctor, partialState);\n            }\n            var newState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\n            return newState;\n        }\n        function constructClassInstance(ctor, props, maskedLegacyContext) {\n            var context = emptyContextObject;\n            var contextType = ctor.contextType;\n            {\n                if (\"contextType\" in ctor) {\n                    var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>\n                    if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n                        didWarnAboutInvalidateContextType.add(ctor);\n                        var addendum = \"\";\n                        if (contextType === undefined) {\n                            addendum = \" However, it is set to undefined. \" + \"This can be caused by a typo or by mixing up named and default imports. \" + \"This can also happen due to a circular dependency, so \" + \"try moving the createContext() call to a separate file.\";\n                        } else if (typeof contextType !== \"object\") {\n                            addendum = \" However, it is set to a \" + typeof contextType + \".\";\n                        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n                            addendum = \" Did you accidentally pass the Context.Provider instead?\";\n                        } else if (contextType._context !== undefined) {\n                            // <Context.Consumer>\n                            addendum = \" Did you accidentally pass the Context.Consumer instead?\";\n                        } else {\n                            addendum = \" However, it is set to an object with keys {\" + Object.keys(contextType).join(\", \") + \"}.\";\n                        }\n                        error(\"%s defines an invalid contextType. \" + \"contextType should point to the Context object returned by React.createContext().%s\", getComponentNameFromType(ctor) || \"Component\", addendum);\n                    }\n                }\n            }\n            if (typeof contextType === \"object\" && contextType !== null) {\n                context = readContext$1(contextType);\n            } else {\n                context = maskedLegacyContext;\n            }\n            var instance = new ctor(props, context);\n            {\n                if (typeof ctor.getDerivedStateFromProps === \"function\" && (instance.state === null || instance.state === undefined)) {\n                    var componentName = getComponentNameFromType(ctor) || \"Component\";\n                    if (!didWarnAboutUninitializedState.has(componentName)) {\n                        didWarnAboutUninitializedState.add(componentName);\n                        error(\"`%s` uses `getDerivedStateFromProps` but its initial state is \" + \"%s. This is not recommended. Instead, define the initial state by \" + \"assigning an object to `this.state` in the constructor of `%s`. \" + \"This ensures that `getDerivedStateFromProps` arguments have a consistent shape.\", componentName, instance.state === null ? \"null\" : \"undefined\", componentName);\n                    }\n                } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n                // Warn about these lifecycles if they are present.\n                // Don't warn about react-lifecycles-compat polyfilled methods though.\n                if (typeof ctor.getDerivedStateFromProps === \"function\" || typeof instance.getSnapshotBeforeUpdate === \"function\") {\n                    var foundWillMountName = null;\n                    var foundWillReceivePropsName = null;\n                    var foundWillUpdateName = null;\n                    if (typeof instance.componentWillMount === \"function\" && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n                        foundWillMountName = \"componentWillMount\";\n                    } else if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n                        foundWillMountName = \"UNSAFE_componentWillMount\";\n                    }\n                    if (typeof instance.componentWillReceiveProps === \"function\" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n                        foundWillReceivePropsName = \"componentWillReceiveProps\";\n                    } else if (typeof instance.UNSAFE_componentWillReceiveProps === \"function\") {\n                        foundWillReceivePropsName = \"UNSAFE_componentWillReceiveProps\";\n                    }\n                    if (typeof instance.componentWillUpdate === \"function\" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n                        foundWillUpdateName = \"componentWillUpdate\";\n                    } else if (typeof instance.UNSAFE_componentWillUpdate === \"function\") {\n                        foundWillUpdateName = \"UNSAFE_componentWillUpdate\";\n                    }\n                    if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n                        var _componentName = getComponentNameFromType(ctor) || \"Component\";\n                        var newApiName = typeof ctor.getDerivedStateFromProps === \"function\" ? \"getDerivedStateFromProps()\" : \"getSnapshotBeforeUpdate()\";\n                        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n                            didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n                            error(\"Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n\" + \"%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n\" + \"The above lifecycles should be removed. Learn more about this warning here:\\n\" + \"https://reactjs.org/link/unsafe-component-lifecycles\", _componentName, newApiName, foundWillMountName !== null ? \"\\n  \" + foundWillMountName : \"\", foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : \"\", foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : \"\");\n                        }\n                    }\n                }\n            }\n            return instance;\n        }\n        function checkClassInstance(instance, ctor, newProps) {\n            {\n                var name = getComponentNameFromType(ctor) || \"Component\";\n                var renderPresent = instance.render;\n                if (!renderPresent) {\n                    if (ctor.prototype && typeof ctor.prototype.render === \"function\") {\n                        error(\"%s(...): No `render` method found on the returned component \" + \"instance: did you accidentally return an object from the constructor?\", name);\n                    } else {\n                        error(\"%s(...): No `render` method found on the returned component \" + \"instance: you may have forgotten to define `render`.\", name);\n                    }\n                }\n                if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\n                    error(\"getInitialState was defined on %s, a plain JavaScript class. \" + \"This is only supported for classes created using React.createClass. \" + \"Did you mean to define a state property instead?\", name);\n                }\n                if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps was defined on %s, a plain JavaScript class. \" + \"This is only supported for classes created using React.createClass. \" + \"Use a static property to define defaultProps instead.\", name);\n                }\n                if (instance.propTypes) {\n                    error(\"propTypes was defined as an instance property on %s. Use a static \" + \"property to define propTypes instead.\", name);\n                }\n                if (instance.contextType) {\n                    error(\"contextType was defined as an instance property on %s. Use a static \" + \"property to define contextType instead.\", name);\n                }\n                {\n                    if (instance.contextTypes) {\n                        error(\"contextTypes was defined as an instance property on %s. Use a static \" + \"property to define contextTypes instead.\", name);\n                    }\n                    if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {\n                        didWarnAboutContextTypeAndContextTypes.add(ctor);\n                        error(\"%s declares both contextTypes and contextType static properties. \" + \"The legacy contextTypes property will be ignored.\", name);\n                    }\n                }\n                if (typeof instance.componentShouldUpdate === \"function\") {\n                    error(\"%s has a method called \" + \"componentShouldUpdate(). Did you mean shouldComponentUpdate()? \" + \"The name is phrased as a question because the function is \" + \"expected to return a value.\", name);\n                }\n                if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== \"undefined\") {\n                    error(\"%s has a method called shouldComponentUpdate(). \" + \"shouldComponentUpdate should not be used when extending React.PureComponent. \" + \"Please extend React.Component if shouldComponentUpdate is used.\", getComponentNameFromType(ctor) || \"A pure component\");\n                }\n                if (typeof instance.componentDidUnmount === \"function\") {\n                    error(\"%s has a method called \" + \"componentDidUnmount(). But there is no such lifecycle method. \" + \"Did you mean componentWillUnmount()?\", name);\n                }\n                if (typeof instance.componentDidReceiveProps === \"function\") {\n                    error(\"%s has a method called \" + \"componentDidReceiveProps(). But there is no such lifecycle method. \" + \"If you meant to update the state in response to changing props, \" + \"use componentWillReceiveProps(). If you meant to fetch data or \" + \"run side-effects or mutations after React has updated the UI, use componentDidUpdate().\", name);\n                }\n                if (typeof instance.componentWillRecieveProps === \"function\") {\n                    error(\"%s has a method called \" + \"componentWillRecieveProps(). Did you mean componentWillReceiveProps()?\", name);\n                }\n                if (typeof instance.UNSAFE_componentWillRecieveProps === \"function\") {\n                    error(\"%s has a method called \" + \"UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?\", name);\n                }\n                var hasMutatedProps = instance.props !== newProps;\n                if (instance.props !== undefined && hasMutatedProps) {\n                    error(\"%s(...): When calling super() in `%s`, make sure to pass \" + \"up the same props that your component's constructor was passed.\", name, name);\n                }\n                if (instance.defaultProps) {\n                    error(\"Setting defaultProps as an instance property on %s is not supported and will be ignored.\" + \" Instead, define defaultProps as a static property on %s.\", name, name);\n                }\n                if (typeof instance.getSnapshotBeforeUpdate === \"function\" && typeof instance.componentDidUpdate !== \"function\" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n                    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n                    error(\"%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). \" + \"This component defines getSnapshotBeforeUpdate() only.\", getComponentNameFromType(ctor));\n                }\n                if (typeof instance.getDerivedStateFromProps === \"function\") {\n                    error(\"%s: getDerivedStateFromProps() is defined as an instance method \" + \"and will be ignored. Instead, declare it as a static method.\", name);\n                }\n                if (typeof instance.getDerivedStateFromError === \"function\") {\n                    error(\"%s: getDerivedStateFromError() is defined as an instance method \" + \"and will be ignored. Instead, declare it as a static method.\", name);\n                }\n                if (typeof ctor.getSnapshotBeforeUpdate === \"function\") {\n                    error(\"%s: getSnapshotBeforeUpdate() is defined as a static method \" + \"and will be ignored. Instead, declare it as an instance method.\", name);\n                }\n                var state = instance.state;\n                if (state && (typeof state !== \"object\" || isArray(state))) {\n                    error(\"%s.state: must be set to an object or null\", name);\n                }\n                if (typeof instance.getChildContext === \"function\" && typeof ctor.childContextTypes !== \"object\") {\n                    error(\"%s.getChildContext(): childContextTypes must be defined in order to \" + \"use getChildContext().\", name);\n                }\n            }\n        }\n        function callComponentWillMount(type, instance) {\n            var oldState = instance.state;\n            if (typeof instance.componentWillMount === \"function\") {\n                {\n                    if (instance.componentWillMount.__suppressDeprecationWarning !== true) {\n                        var componentName = getComponentNameFromType(type) || \"Unknown\";\n                        if (!didWarnAboutDeprecatedWillMount[componentName]) {\n                            warn(\"componentWillMount has been renamed, and is not recommended for use. \" + \"See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n\" + \"* Move code from componentWillMount to componentDidMount (preferred in most cases) \" + \"or the constructor.\\n\" + \"\\nPlease update the following components: %s\", componentName);\n                            didWarnAboutDeprecatedWillMount[componentName] = true;\n                        }\n                    }\n                }\n                instance.componentWillMount();\n            }\n            if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n                instance.UNSAFE_componentWillMount();\n            }\n            if (oldState !== instance.state) {\n                {\n                    error(\"%s.componentWillMount(): Assigning directly to this.state is \" + \"deprecated (except inside a component's \" + \"constructor). Use setState instead.\", getComponentNameFromType(type) || \"Component\");\n                }\n                classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n            }\n        }\n        function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {\n            if (internalInstance.queue !== null && internalInstance.queue.length > 0) {\n                var oldQueue = internalInstance.queue;\n                var oldReplace = internalInstance.replace;\n                internalInstance.queue = null;\n                internalInstance.replace = false;\n                if (oldReplace && oldQueue.length === 1) {\n                    inst.state = oldQueue[0];\n                } else {\n                    var nextState = oldReplace ? oldQueue[0] : inst.state;\n                    var dontMutate = true;\n                    for(var i = oldReplace ? 1 : 0; i < oldQueue.length; i++){\n                        var partial = oldQueue[i];\n                        var partialState = typeof partial === \"function\" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;\n                        if (partialState != null) {\n                            if (dontMutate) {\n                                dontMutate = false;\n                                nextState = assign({}, nextState, partialState);\n                            } else {\n                                assign(nextState, partialState);\n                            }\n                        }\n                    }\n                    inst.state = nextState;\n                }\n            } else {\n                internalInstance.queue = null;\n            }\n        } // Invokes the mount life-cycles on a previously never rendered instance.\n        function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {\n            {\n                checkClassInstance(instance, ctor, newProps);\n            }\n            var initialState = instance.state !== undefined ? instance.state : null;\n            instance.updater = classComponentUpdater;\n            instance.props = newProps;\n            instance.state = initialState; // We don't bother initializing the refs object on the server, since we're not going to resolve them anyway.\n            // The internal instance will be used to manage updates that happen during this mount.\n            var internalInstance = {\n                queue: [],\n                replace: false\n            };\n            set(instance, internalInstance);\n            var contextType = ctor.contextType;\n            if (typeof contextType === \"object\" && contextType !== null) {\n                instance.context = readContext$1(contextType);\n            } else {\n                instance.context = maskedLegacyContext;\n            }\n            {\n                if (instance.state === newProps) {\n                    var componentName = getComponentNameFromType(ctor) || \"Component\";\n                    if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n                        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n                        error(\"%s: It is not recommended to assign props directly to state \" + \"because updates to props won't be reflected in state. \" + \"In most cases, it is better to use props directly.\", componentName);\n                    }\n                }\n            }\n            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n            if (typeof getDerivedStateFromProps === \"function\") {\n                instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);\n            } // In order to support react-lifecycles-compat polyfilled components,\n            // Unsafe lifecycles should not be invoked for components using the new APIs.\n            if (typeof ctor.getDerivedStateFromProps !== \"function\" && typeof instance.getSnapshotBeforeUpdate !== \"function\" && (typeof instance.UNSAFE_componentWillMount === \"function\" || typeof instance.componentWillMount === \"function\")) {\n                callComponentWillMount(ctor, instance); // If we had additional state updates during this life-cycle, let's\n                // process them now.\n                processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);\n            }\n        }\n        // Ids are base 32 strings whose binary representation corresponds to the\n        // position of a node in a tree.\n        // Every time the tree forks into multiple children, we add additional bits to\n        // the left of the sequence that represent the position of the child within the\n        // current level of children.\n        //\n        //      00101       00010001011010101\n        //      ╰─┬─╯       ╰───────┬───────╯\n        //   Fork 5 of 20       Parent id\n        //\n        // The leading 0s are important. In the above example, you only need 3 bits to\n        // represent slot 5. However, you need 5 bits to represent all the forks at\n        // the current level, so we must account for the empty bits at the end.\n        //\n        // For this same reason, slots are 1-indexed instead of 0-indexed. Otherwise,\n        // the zeroth id at a level would be indistinguishable from its parent.\n        //\n        // If a node has only one child, and does not materialize an id (i.e. does not\n        // contain a useId hook), then we don't need to allocate any space in the\n        // sequence. It's treated as a transparent indirection. For example, these two\n        // trees produce the same ids:\n        //\n        // <>                          <>\n        //   <Indirection>               <A />\n        //     <A />                     <B />\n        //   </Indirection>            </>\n        //   <B />\n        // </>\n        //\n        // However, we cannot skip any node that materializes an id. Otherwise, a parent\n        // id that does not fork would be indistinguishable from its child id. For\n        // example, this tree does not fork, but the parent and child must have\n        // different ids.\n        //\n        // <Parent>\n        //   <Child />\n        // </Parent>\n        //\n        // To handle this scenario, every time we materialize an id, we allocate a\n        // new level with a single slot. You can think of this as a fork with only one\n        // prong, or an array of children with length 1.\n        //\n        // It's possible for the size of the sequence to exceed 32 bits, the max\n        // size for bitwise operations. When this happens, we make more room by\n        // converting the right part of the id to a string and storing it in an overflow\n        // variable. We use a base 32 string representation, because 32 is the largest\n        // power of 2 that is supported by toString(). We want the base to be large so\n        // that the resulting ids are compact, and we want the base to be a power of 2\n        // because every log2(base) bits corresponds to a single character, i.e. every\n        // log2(32) = 5 bits. That means we can lop bits off the end 5 at a time without\n        // affecting the final result.\n        var emptyTreeContext = {\n            id: 1,\n            overflow: \"\"\n        };\n        function getTreeId(context) {\n            var overflow = context.overflow;\n            var idWithLeadingBit = context.id;\n            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n            return id.toString(32) + overflow;\n        }\n        function pushTreeContext(baseContext, totalChildren, index) {\n            var baseIdWithLeadingBit = baseContext.id;\n            var baseOverflow = baseContext.overflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n            // of the id; we use it to account for leading 0s.\n            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n            var slot = index + 1;\n            var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into\n            // consideration the leading 1 we use to mark the end of the sequence.\n            if (length > 30) {\n                // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n                // This branch assumes the length of the base id is greater than 5; it won't\n                // work for smaller ids, because you need 5 bits per character.\n                //\n                // We encode the id in multiple steps: first the base id, then the\n                // remaining digits.\n                //\n                // Each 5 bit sequence corresponds to a single base 32 character. So for\n                // example, if the current id is 23 bits long, we can convert 20 of those\n                // bits into a string of 4 characters, with 3 bits left over.\n                //\n                // First calculate how many bits in the base id represent a complete\n                // sequence of characters.\n                var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.\n                var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.\n                var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.\n                var restOfBaseId = baseId >> numberOfOverflowBits;\n                var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because\n                // we made more room, this time it won't overflow.\n                var restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n                var restOfNewBits = slot << restOfBaseLength;\n                var id = restOfNewBits | restOfBaseId;\n                var overflow = newOverflow + baseOverflow;\n                return {\n                    id: 1 << restOfLength | id,\n                    overflow: overflow\n                };\n            } else {\n                // Normal path\n                var newBits = slot << baseLength;\n                var _id = newBits | baseId;\n                var _overflow = baseOverflow;\n                return {\n                    id: 1 << length | _id,\n                    overflow: _overflow\n                };\n            }\n        }\n        function getBitLength(number) {\n            return 32 - clz32(number);\n        }\n        function getLeadingBit(id) {\n            return 1 << getBitLength(id) - 1;\n        } // TODO: Math.clz32 is supported in Node 12+. Maybe we can drop the fallback.\n        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\n        // Based on:\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n        var log = Math.log;\n        var LN2 = Math.LN2;\n        function clz32Fallback(x) {\n            var asUint = x >>> 0;\n            if (asUint === 0) {\n                return 32;\n            }\n            return 31 - (log(asUint) / LN2 | 0) | 0;\n        }\n        // Corresponds to ReactFiberWakeable and ReactFlightWakeable modules. Generally,\n        // changes to one module should be reflected in the others.\n        // TODO: Rename this module and the corresponding Fiber one to \"Thenable\"\n        // instead of \"Wakeable\". Or some other more appropriate name.\n        // An error that is thrown (e.g. by `use`) to trigger Suspense. If we\n        // detect this is caught by userspace, we'll log a warning in development.\n        var SuspenseException = new Error(\"Suspense Exception: This is not a real error! It's an implementation \" + \"detail of `use` to interrupt the current render. You must either \" + \"rethrow it immediately, or move the `use` call outside of the \" + \"`try/catch` block. Capturing without rethrowing will lead to \" + \"unexpected behavior.\\n\\n\" + \"To handle async errors, wrap your component in an error boundary, or \" + \"call the promise's `.catch` method and pass the result to `use`\");\n        function createThenableState() {\n            // The ThenableState is created the first time a component suspends. If it\n            // suspends again, we'll reuse the same state.\n            return [];\n        }\n        function noop$2() {}\n        function trackUsedThenable(thenableState, thenable, index) {\n            var previous = thenableState[index];\n            if (previous === undefined) {\n                thenableState.push(thenable);\n            } else {\n                if (previous !== thenable) {\n                    // Reuse the previous thenable, and drop the new one. We can assume\n                    // they represent the same value, because components are idempotent.\n                    // Avoid an unhandled rejection errors for the Promises that we'll\n                    // intentionally ignore.\n                    thenable.then(noop$2, noop$2);\n                    thenable = previous;\n                }\n            } // We use an expando to track the status and result of a thenable so that we\n            // can synchronously unwrap the value. Think of this as an extension of the\n            // Promise API, or a custom interface that is a superset of Thenable.\n            //\n            // If the thenable doesn't have a status, set it to \"pending\" and attach\n            // a listener that will update its status and result when it resolves.\n            switch(thenable.status){\n                case \"fulfilled\":\n                    {\n                        var fulfilledValue = thenable.value;\n                        return fulfilledValue;\n                    }\n                case \"rejected\":\n                    {\n                        var rejectedError = thenable.reason;\n                        throw rejectedError;\n                    }\n                default:\n                    {\n                        if (typeof thenable.status === \"string\") ;\n                        else {\n                            var pendingThenable = thenable;\n                            pendingThenable.status = \"pending\";\n                            pendingThenable.then(function(fulfilledValue) {\n                                if (thenable.status === \"pending\") {\n                                    var fulfilledThenable = thenable;\n                                    fulfilledThenable.status = \"fulfilled\";\n                                    fulfilledThenable.value = fulfilledValue;\n                                }\n                            }, function(error) {\n                                if (thenable.status === \"pending\") {\n                                    var rejectedThenable = thenable;\n                                    rejectedThenable.status = \"rejected\";\n                                    rejectedThenable.reason = error;\n                                }\n                            }); // Check one more time in case the thenable resolved synchronously\n                            switch(thenable.status){\n                                case \"fulfilled\":\n                                    {\n                                        var fulfilledThenable = thenable;\n                                        return fulfilledThenable.value;\n                                    }\n                                case \"rejected\":\n                                    {\n                                        var rejectedThenable = thenable;\n                                        throw rejectedThenable.reason;\n                                    }\n                            }\n                        } // Suspend.\n                        //\n                        // Throwing here is an implementation detail that allows us to unwind the\n                        // call stack. But we shouldn't allow it to leak into userspace. Throw an\n                        // opaque placeholder value instead of the actual thenable. If it doesn't\n                        // get captured by the work loop, log a warning, because that means\n                        // something in userspace must have caught it.\n                        suspendedThenable = thenable;\n                        throw SuspenseException;\n                    }\n            }\n        } // This is used to track the actual thenable that suspended so it can be\n        // passed to the rest of the Suspense implementation — which, for historical\n        // reasons, expects to receive a thenable.\n        var suspendedThenable = null;\n        function getSuspendedThenable() {\n            // This is called right after `use` suspends by throwing an exception. `use`\n            // throws an opaque value instead of the thenable itself so that it can't be\n            // caught in userspace. Then the work loop accesses the actual thenable using\n            // this function.\n            if (suspendedThenable === null) {\n                throw new Error(\"Expected a suspended thenable. This is a bug in React. Please file \" + \"an issue.\");\n            }\n            var thenable = suspendedThenable;\n            suspendedThenable = null;\n            return thenable;\n        }\n        /**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */ function is(x, y) {\n            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n            ;\n        }\n        var objectIs = typeof Object.is === \"function\" ? Object.is : is;\n        var currentlyRenderingComponent = null;\n        var currentlyRenderingTask = null;\n        var firstWorkInProgressHook = null;\n        var workInProgressHook = null; // Whether the work-in-progress hook is a re-rendered hook\n        var isReRender = false; // Whether an update was scheduled during the currently executing render pass.\n        var didScheduleRenderPhaseUpdate = false; // Counts the number of useId hooks in this component\n        var localIdCounter = 0; // Counts the number of use(thenable) calls in this component\n        var thenableIndexCounter = 0;\n        var thenableState = null; // Lazily created map of render-phase updates\n        var renderPhaseUpdates = null; // Counter to prevent infinite loops.\n        var numberOfReRenders = 0;\n        var RE_RENDER_LIMIT = 25;\n        var isInHookUserCodeInDev = false; // In DEV, this is the name of the currently executing primitive hook\n        var currentHookNameInDev;\n        function resolveCurrentlyRenderingComponent() {\n            if (currentlyRenderingComponent === null) {\n                throw new Error(\"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for\" + \" one of the following reasons:\\n\" + \"1. You might have mismatching versions of React and the renderer (such as React DOM)\\n\" + \"2. You might be breaking the Rules of Hooks\\n\" + \"3. You might have more than one copy of React in the same app\\n\" + \"See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\");\n            }\n            {\n                if (isInHookUserCodeInDev) {\n                    error(\"Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. \" + \"You can only call Hooks at the top level of your React function. \" + \"For more information, see \" + \"https://reactjs.org/link/rules-of-hooks\");\n                }\n            }\n            return currentlyRenderingComponent;\n        }\n        function areHookInputsEqual(nextDeps, prevDeps) {\n            if (prevDeps === null) {\n                {\n                    error(\"%s received a final argument during this render, but not during \" + \"the previous render. Even though the final argument is optional, \" + \"its type cannot change between renders.\", currentHookNameInDev);\n                }\n                return false;\n            }\n            {\n                // Don't bother comparing lengths in prod because these arrays should be\n                // passed inline.\n                if (nextDeps.length !== prevDeps.length) {\n                    error(\"The final argument passed to %s changed size between renders. The \" + \"order and size of this array must remain constant.\\n\\n\" + \"Previous: %s\\n\" + \"Incoming: %s\", currentHookNameInDev, \"[\" + nextDeps.join(\", \") + \"]\", \"[\" + prevDeps.join(\", \") + \"]\");\n                }\n            }\n            for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){\n                // $FlowFixMe[incompatible-use] found when upgrading Flow\n                if (objectIs(nextDeps[i], prevDeps[i])) {\n                    continue;\n                }\n                return false;\n            }\n            return true;\n        }\n        function createHook() {\n            if (numberOfReRenders > 0) {\n                throw new Error(\"Rendered more hooks than during the previous render\");\n            }\n            return {\n                memoizedState: null,\n                queue: null,\n                next: null\n            };\n        }\n        function createWorkInProgressHook() {\n            if (workInProgressHook === null) {\n                // This is the first hook in the list\n                if (firstWorkInProgressHook === null) {\n                    isReRender = false;\n                    firstWorkInProgressHook = workInProgressHook = createHook();\n                } else {\n                    // There's already a work-in-progress. Reuse it.\n                    isReRender = true;\n                    workInProgressHook = firstWorkInProgressHook;\n                }\n            } else {\n                if (workInProgressHook.next === null) {\n                    isReRender = false; // Append to the end of the list\n                    workInProgressHook = workInProgressHook.next = createHook();\n                } else {\n                    // There's already a work-in-progress. Reuse it.\n                    isReRender = true;\n                    workInProgressHook = workInProgressHook.next;\n                }\n            }\n            return workInProgressHook;\n        }\n        function prepareToUseHooks(task, componentIdentity, prevThenableState) {\n            currentlyRenderingComponent = componentIdentity;\n            currentlyRenderingTask = task;\n            {\n                isInHookUserCodeInDev = false;\n            }\n            // didScheduleRenderPhaseUpdate = false;\n            // firstWorkInProgressHook = null;\n            // numberOfReRenders = 0;\n            // renderPhaseUpdates = null;\n            // workInProgressHook = null;\n            localIdCounter = 0;\n            thenableIndexCounter = 0;\n            thenableState = prevThenableState;\n        }\n        function finishHooks(Component, props, children, refOrContext) {\n            // This must be called after every function component to prevent hooks from\n            // being used in classes.\n            while(didScheduleRenderPhaseUpdate){\n                // Updates were scheduled during the render phase. They are stored in\n                // the `renderPhaseUpdates` map. Call the component again, reusing the\n                // work-in-progress hooks and applying the additional updates on top. Keep\n                // restarting until no more updates are scheduled.\n                didScheduleRenderPhaseUpdate = false;\n                localIdCounter = 0;\n                thenableIndexCounter = 0;\n                numberOfReRenders += 1; // Start over from the beginning of the list\n                workInProgressHook = null;\n                children = Component(props, refOrContext);\n            }\n            resetHooksState();\n            return children;\n        }\n        function getThenableStateAfterSuspending() {\n            var state = thenableState;\n            thenableState = null;\n            return state;\n        }\n        function checkDidRenderIdHook() {\n            // This should be called immediately after every finishHooks call.\n            // Conceptually, it's part of the return value of finishHooks; it's only a\n            // separate function to avoid using an array tuple.\n            var didRenderIdHook = localIdCounter !== 0;\n            return didRenderIdHook;\n        } // Reset the internal hooks state if an error occurs while rendering a component\n        function resetHooksState() {\n            {\n                isInHookUserCodeInDev = false;\n            }\n            currentlyRenderingComponent = null;\n            currentlyRenderingTask = null;\n            didScheduleRenderPhaseUpdate = false;\n            firstWorkInProgressHook = null;\n            numberOfReRenders = 0;\n            renderPhaseUpdates = null;\n            workInProgressHook = null;\n        }\n        function readContext(context) {\n            {\n                if (isInHookUserCodeInDev) {\n                    error(\"Context can only be read while React is rendering. \" + \"In classes, you can read it in the render method or getDerivedStateFromProps. \" + \"In function components, you can read it directly in the function body, but not \" + \"inside Hooks like useReducer() or useMemo().\");\n                }\n            }\n            return readContext$1(context);\n        }\n        function useContext(context) {\n            {\n                currentHookNameInDev = \"useContext\";\n            }\n            resolveCurrentlyRenderingComponent();\n            return readContext$1(context);\n        }\n        function basicStateReducer(state, action) {\n            // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types\n            return typeof action === \"function\" ? action(state) : action;\n        }\n        function useState(initialState) {\n            {\n                currentHookNameInDev = \"useState\";\n            }\n            return useReducer(basicStateReducer, initialState);\n        }\n        function useReducer(reducer, initialArg, init) {\n            {\n                if (reducer !== basicStateReducer) {\n                    currentHookNameInDev = \"useReducer\";\n                }\n            }\n            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();\n            workInProgressHook = createWorkInProgressHook();\n            if (isReRender) {\n                // This is a re-render. Apply the new render phase updates to the previous\n                // current hook.\n                var queue = workInProgressHook.queue;\n                var dispatch = queue.dispatch;\n                if (renderPhaseUpdates !== null) {\n                    // Render phase updates are stored in a map of queue -> linked list\n                    var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);\n                    if (firstRenderPhaseUpdate !== undefined) {\n                        // $FlowFixMe[incompatible-use] found when upgrading Flow\n                        renderPhaseUpdates.delete(queue); // $FlowFixMe[incompatible-use] found when upgrading Flow\n                        var newState = workInProgressHook.memoizedState;\n                        var update = firstRenderPhaseUpdate;\n                        do {\n                            // Process this render phase update. We don't have to check the\n                            // priority because it will always be the same as the current\n                            // render's.\n                            var action = update.action;\n                            {\n                                isInHookUserCodeInDev = true;\n                            }\n                            newState = reducer(newState, action);\n                            {\n                                isInHookUserCodeInDev = false;\n                            }\n                            update = update.next;\n                        }while (update !== null); // $FlowFixMe[incompatible-use] found when upgrading Flow\n                        workInProgressHook.memoizedState = newState;\n                        return [\n                            newState,\n                            dispatch\n                        ];\n                    }\n                } // $FlowFixMe[incompatible-use] found when upgrading Flow\n                return [\n                    workInProgressHook.memoizedState,\n                    dispatch\n                ];\n            } else {\n                {\n                    isInHookUserCodeInDev = true;\n                }\n                var initialState;\n                if (reducer === basicStateReducer) {\n                    // Special case for `useState`.\n                    initialState = typeof initialArg === \"function\" ? initialArg() : initialArg;\n                } else {\n                    initialState = init !== undefined ? init(initialArg) : initialArg;\n                }\n                {\n                    isInHookUserCodeInDev = false;\n                }\n                workInProgressHook.memoizedState = initialState; // $FlowFixMe[incompatible-use] found when upgrading Flow\n                var _queue = workInProgressHook.queue = {\n                    last: null,\n                    dispatch: null\n                };\n                var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue); // $FlowFixMe[incompatible-use] found when upgrading Flow\n                return [\n                    workInProgressHook.memoizedState,\n                    _dispatch\n                ];\n            }\n        }\n        function useMemo(nextCreate, deps) {\n            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();\n            workInProgressHook = createWorkInProgressHook();\n            var nextDeps = deps === undefined ? null : deps;\n            if (workInProgressHook !== null) {\n                var prevState = workInProgressHook.memoizedState;\n                if (prevState !== null) {\n                    if (nextDeps !== null) {\n                        var prevDeps = prevState[1];\n                        if (areHookInputsEqual(nextDeps, prevDeps)) {\n                            return prevState[0];\n                        }\n                    }\n                }\n            }\n            {\n                isInHookUserCodeInDev = true;\n            }\n            var nextValue = nextCreate();\n            {\n                isInHookUserCodeInDev = false;\n            }\n            workInProgressHook.memoizedState = [\n                nextValue,\n                nextDeps\n            ];\n            return nextValue;\n        }\n        function useRef(initialValue) {\n            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();\n            workInProgressHook = createWorkInProgressHook();\n            var previousRef = workInProgressHook.memoizedState;\n            if (previousRef === null) {\n                var ref = {\n                    current: initialValue\n                };\n                {\n                    Object.seal(ref);\n                }\n                workInProgressHook.memoizedState = ref;\n                return ref;\n            } else {\n                return previousRef;\n            }\n        }\n        function dispatchAction(componentIdentity, queue, action) {\n            if (numberOfReRenders >= RE_RENDER_LIMIT) {\n                throw new Error(\"Too many re-renders. React limits the number of renders to prevent \" + \"an infinite loop.\");\n            }\n            if (componentIdentity === currentlyRenderingComponent) {\n                // This is a render phase update. Stash it in a lazily-created map of\n                // queue -> linked list of updates. After this render pass, we'll restart\n                // and apply the stashed updates on top of the work-in-progress hook.\n                didScheduleRenderPhaseUpdate = true;\n                var update = {\n                    action: action,\n                    next: null\n                };\n                if (renderPhaseUpdates === null) {\n                    renderPhaseUpdates = new Map();\n                }\n                var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);\n                if (firstRenderPhaseUpdate === undefined) {\n                    // $FlowFixMe[incompatible-use] found when upgrading Flow\n                    renderPhaseUpdates.set(queue, update);\n                } else {\n                    // Append the update to the end of the list.\n                    var lastRenderPhaseUpdate = firstRenderPhaseUpdate;\n                    while(lastRenderPhaseUpdate.next !== null){\n                        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n                    }\n                    lastRenderPhaseUpdate.next = update;\n                }\n            }\n        }\n        function useCallback(callback, deps) {\n            return useMemo(function() {\n                return callback;\n            }, deps);\n        }\n        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n            if (getServerSnapshot === undefined) {\n                throw new Error(\"Missing getServerSnapshot, which is required for \" + \"server-rendered content. Will revert to client rendering.\");\n            }\n            return getServerSnapshot();\n        }\n        function useDeferredValue(value) {\n            resolveCurrentlyRenderingComponent();\n            return value;\n        }\n        function unsupportedStartTransition() {\n            throw new Error(\"startTransition cannot be called during server rendering.\");\n        }\n        function useTransition() {\n            resolveCurrentlyRenderingComponent();\n            return [\n                false,\n                unsupportedStartTransition\n            ];\n        }\n        function useId() {\n            var task = currentlyRenderingTask;\n            var treeId = getTreeId(task.treeContext);\n            var responseState = currentResponseState;\n            if (responseState === null) {\n                throw new Error(\"Invalid hook call. Hooks can only be called inside of the body of a function component.\");\n            }\n            var localId = localIdCounter++;\n            return makeId(responseState, treeId, localId);\n        }\n        function use(usable) {\n            if (usable !== null && typeof usable === \"object\") {\n                // $FlowFixMe[method-unbinding]\n                if (typeof usable.then === \"function\") {\n                    // This is a thenable.\n                    var thenable = usable;\n                    return unwrapThenable(thenable);\n                } else if (usable.$$typeof === REACT_CONTEXT_TYPE || usable.$$typeof === REACT_SERVER_CONTEXT_TYPE) {\n                    var context = usable;\n                    return readContext(context);\n                }\n            } // eslint-disable-next-line react-internal/safe-string-coercion\n            throw new Error(\"An unsupported type was passed to use(): \" + String(usable));\n        }\n        function unwrapThenable(thenable) {\n            var index = thenableIndexCounter;\n            thenableIndexCounter += 1;\n            if (thenableState === null) {\n                thenableState = createThenableState();\n            }\n            return trackUsedThenable(thenableState, thenable, index);\n        }\n        function unsupportedRefresh() {\n            throw new Error(\"Cache cannot be refreshed during server rendering.\");\n        }\n        function useCacheRefresh() {\n            return unsupportedRefresh;\n        }\n        function noop$1() {}\n        var HooksDispatcher = {\n            readContext: readContext,\n            use: use,\n            useContext: useContext,\n            useMemo: useMemo,\n            useReducer: useReducer,\n            useRef: useRef,\n            useState: useState,\n            useInsertionEffect: noop$1,\n            useLayoutEffect: noop$1,\n            useCallback: useCallback,\n            // useImperativeHandle is not run in the server environment\n            useImperativeHandle: noop$1,\n            // Effects are not run in the server environment.\n            useEffect: noop$1,\n            // Debugging effect\n            useDebugValue: noop$1,\n            useDeferredValue: useDeferredValue,\n            useTransition: useTransition,\n            useId: useId,\n            // Subscriptions are not setup in a server environment.\n            useSyncExternalStore: useSyncExternalStore\n        };\n        {\n            HooksDispatcher.useCacheRefresh = useCacheRefresh;\n        }\n        var currentResponseState = null;\n        function setCurrentResponseState(responseState) {\n            currentResponseState = responseState;\n        }\n        function getCacheSignal() {\n            throw new Error(\"Not implemented.\");\n        }\n        function getCacheForType(resourceType) {\n            throw new Error(\"Not implemented.\");\n        }\n        var DefaultCacheDispatcher = {\n            getCacheSignal: getCacheSignal,\n            getCacheForType: getCacheForType\n        };\n        function getStackByComponentStackNode(componentStack) {\n            try {\n                var info = \"\";\n                var node = componentStack;\n                do {\n                    switch(node.tag){\n                        case 0:\n                            info += describeBuiltInComponentFrame(node.type, null, null);\n                            break;\n                        case 1:\n                            info += describeFunctionComponentFrame(node.type, null, null);\n                            break;\n                        case 2:\n                            info += describeClassComponentFrame(node.type, null, null);\n                            break;\n                    } // $FlowFixMe[incompatible-type] we bail out when we get a null\n                    node = node.parent;\n                }while (node);\n                return info;\n            } catch (x) {\n                return \"\\nError generating stack: \" + x.message + \"\\n\" + x.stack;\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var ReactCurrentCache = ReactSharedInternals.ReactCurrentCache;\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var PENDING = 0;\n        var COMPLETED = 1;\n        var FLUSHED = 2;\n        var ABORTED = 3;\n        var ERRORED = 4;\n        var OPEN = 0;\n        var CLOSING = 1;\n        var CLOSED = 2; // This is a default heuristic for how to split up the HTML content into progressive\n        // loading. Our goal is to be able to display additional new content about every 500ms.\n        // Faster than that is unnecessary and should be throttled on the client. It also\n        // adds unnecessary overhead to do more splits. We don't know if it's a higher or lower\n        // end device but higher end suffer less from the overhead than lower end does from\n        // not getting small enough pieces. We error on the side of low end.\n        // We base this on low end 3G speeds which is about 500kbits per second. We assume\n        // that there can be a reasonable drop off from max bandwidth which leaves you with\n        // as little as 80%. We can receive half of that each 500ms - at best. In practice,\n        // a little bandwidth is lost to processing and contention - e.g. CSS and images that\n        // are downloaded along with the main content. So we estimate about half of that to be\n        // the lower end throughput. In other words, we expect that you can at least show\n        // about 12.5kb of content per 500ms. Not counting starting latency for the first\n        // paint.\n        // 500 * 1024 / 8 * .8 * 0.5 / 2\n        var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;\n        function defaultErrorHandler(error) {\n            console[\"error\"](error); // Don't transform to our wrapper\n            return null;\n        }\n        function noop() {}\n        function createRequest(children, resources, responseState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError) {\n            prepareHostDispatcher();\n            var pingedTasks = [];\n            var abortSet = new Set();\n            var request = {\n                destination: null,\n                flushScheduled: false,\n                responseState: responseState,\n                progressiveChunkSize: progressiveChunkSize === undefined ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,\n                status: OPEN,\n                fatalError: null,\n                nextSegmentId: 0,\n                allPendingTasks: 0,\n                pendingRootTasks: 0,\n                resources: resources,\n                completedRootSegment: null,\n                abortableTasks: abortSet,\n                pingedTasks: pingedTasks,\n                clientRenderedBoundaries: [],\n                completedBoundaries: [],\n                partialBoundaries: [],\n                onError: onError === undefined ? defaultErrorHandler : onError,\n                onAllReady: onAllReady === undefined ? noop : onAllReady,\n                onShellReady: onShellReady === undefined ? noop : onShellReady,\n                onShellError: onShellError === undefined ? noop : onShellError,\n                onFatalError: onFatalError === undefined ? noop : onFatalError\n            }; // This segment represents the root fallback.\n            var rootSegment = createPendingSegment(request, 0, null, rootFormatContext, false, false); // There is no parent so conceptually, we're unblocked to flush this segment.\n            rootSegment.parentFlushed = true;\n            var rootTask = createTask(request, null, children, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);\n            pingedTasks.push(rootTask);\n            return request;\n        }\n        var currentRequest = null;\n        function resolveRequest() {\n            if (currentRequest) return currentRequest;\n            {\n                var store = requestStorage.getStore();\n                if (store) return store;\n            }\n            return null;\n        }\n        function pingTask(request, task) {\n            var pingedTasks = request.pingedTasks;\n            pingedTasks.push(task);\n            if (request.pingedTasks.length === 1) {\n                request.flushScheduled = request.destination !== null;\n                scheduleWork(function() {\n                    return performWork(request);\n                });\n            }\n        }\n        function createSuspenseBoundary(request, fallbackAbortableTasks) {\n            return {\n                id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,\n                rootSegmentID: -1,\n                parentFlushed: false,\n                pendingTasks: 0,\n                forceClientRender: false,\n                completedSegments: [],\n                byteSize: 0,\n                fallbackAbortableTasks: fallbackAbortableTasks,\n                errorDigest: null,\n                resources: createBoundaryResources()\n            };\n        }\n        function createTask(request, thenableState, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {\n            request.allPendingTasks++;\n            if (blockedBoundary === null) {\n                request.pendingRootTasks++;\n            } else {\n                blockedBoundary.pendingTasks++;\n            }\n            var task = {\n                node: node,\n                ping: function() {\n                    return pingTask(request, task);\n                },\n                blockedBoundary: blockedBoundary,\n                blockedSegment: blockedSegment,\n                abortSet: abortSet,\n                legacyContext: legacyContext,\n                context: context,\n                treeContext: treeContext,\n                thenableState: thenableState\n            };\n            {\n                task.componentStack = null;\n            }\n            abortSet.add(task);\n            return task;\n        }\n        function createPendingSegment(request, index, boundary, formatContext, lastPushedText, textEmbedded) {\n            return {\n                status: PENDING,\n                id: -1,\n                // lazily assigned later\n                index: index,\n                parentFlushed: false,\n                chunks: [],\n                children: [],\n                formatContext: formatContext,\n                boundary: boundary,\n                lastPushedText: lastPushedText,\n                textEmbedded: textEmbedded\n            };\n        } // DEV-only global reference to the currently executing task\n        var currentTaskInDEV = null;\n        function getCurrentStackInDEV() {\n            {\n                if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {\n                    return \"\";\n                }\n                return getStackByComponentStackNode(currentTaskInDEV.componentStack);\n            }\n        }\n        function pushBuiltInComponentStackInDEV(task, type) {\n            {\n                task.componentStack = {\n                    tag: 0,\n                    parent: task.componentStack,\n                    type: type\n                };\n            }\n        }\n        function pushFunctionComponentStackInDEV(task, type) {\n            {\n                task.componentStack = {\n                    tag: 1,\n                    parent: task.componentStack,\n                    type: type\n                };\n            }\n        }\n        function pushClassComponentStackInDEV(task, type) {\n            {\n                task.componentStack = {\n                    tag: 2,\n                    parent: task.componentStack,\n                    type: type\n                };\n            }\n        }\n        function popComponentStackInDEV(task) {\n            {\n                if (task.componentStack === null) {\n                    error(\"Unexpectedly popped too many stack frames. This is a bug in React.\");\n                } else {\n                    task.componentStack = task.componentStack.parent;\n                }\n            }\n        } // stash the component stack of an unwinding error until it is processed\n        var lastBoundaryErrorComponentStackDev = null;\n        function captureBoundaryErrorDetailsDev(boundary, error) {\n            {\n                var errorMessage;\n                if (typeof error === \"string\") {\n                    errorMessage = error;\n                } else if (error && typeof error.message === \"string\") {\n                    errorMessage = error.message;\n                } else {\n                    // eslint-disable-next-line react-internal/safe-string-coercion\n                    errorMessage = String(error);\n                }\n                var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();\n                lastBoundaryErrorComponentStackDev = null;\n                boundary.errorMessage = errorMessage;\n                boundary.errorComponentStack = errorComponentStack;\n            }\n        }\n        function logRecoverableError(request, error) {\n            // If this callback errors, we intentionally let that error bubble up to become a fatal error\n            // so that someone fixes the error reporting instead of hiding it.\n            var errorDigest = request.onError(error);\n            if (errorDigest != null && typeof errorDigest !== \"string\") {\n                // eslint-disable-next-line react-internal/prod-error-codes\n                throw new Error('onError returned something with a type other than \"string\". onError should return a string and may return null or undefined but must not return anything else. It received something of type \"' + typeof errorDigest + '\" instead');\n            }\n            return errorDigest;\n        }\n        function fatalError(request, error) {\n            // This is called outside error handling code such as if the root errors outside\n            // a suspense boundary or if the root suspense boundary's fallback errors.\n            // It's also called if React itself or its host configs errors.\n            var onShellError = request.onShellError;\n            onShellError(error);\n            var onFatalError = request.onFatalError;\n            onFatalError(error);\n            if (request.destination !== null) {\n                request.status = CLOSED;\n                closeWithError(request.destination, error);\n            } else {\n                request.status = CLOSING;\n                request.fatalError = error;\n            }\n        }\n        function renderSuspenseBoundary(request, task, props) {\n            pushBuiltInComponentStackInDEV(task, \"Suspense\");\n            var parentBoundary = task.blockedBoundary;\n            var parentSegment = task.blockedSegment; // Each time we enter a suspense boundary, we split out into a new segment for\n            // the fallback so that we can later replace that segment with the content.\n            // This also lets us split out the main content even if it doesn't suspend,\n            // in case it ends up generating a large subtree of content.\n            var fallback = props.fallback;\n            var content = props.children;\n            var fallbackAbortSet = new Set();\n            var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);\n            var insertionIndex = parentSegment.chunks.length; // The children of the boundary segment is actually the fallback.\n            var boundarySegment = createPendingSegment(request, insertionIndex, newBoundary, parentSegment.formatContext, false, false);\n            parentSegment.children.push(boundarySegment); // The parentSegment has a child Segment at this index so we reset the lastPushedText marker on the parent\n            parentSegment.lastPushedText = false; // This segment is the actual child content. We can start rendering that immediately.\n            var contentRootSegment = createPendingSegment(request, 0, null, parentSegment.formatContext, false, false); // We mark the root segment as having its parent flushed. It's not really flushed but there is\n            // no parent segment so there's nothing to wait on.\n            contentRootSegment.parentFlushed = true; // Currently this is running synchronously. We could instead schedule this to pingedTasks.\n            // I suspect that there might be some efficiency benefits from not creating the suspended task\n            // and instead just using the stack if possible.\n            // TODO: Call this directly instead of messing with saving and restoring contexts.\n            // We can reuse the current context and task to render the content immediately without\n            // context switching. We just need to temporarily switch which boundary and which segment\n            // we're writing to. If something suspends, it'll spawn new suspended task with that context.\n            task.blockedBoundary = newBoundary;\n            task.blockedSegment = contentRootSegment;\n            {\n                setCurrentlyRenderingBoundaryResourcesTarget(request.resources, newBoundary.resources);\n            }\n            try {\n                // We use the safe form because we don't handle suspending here. Only error handling.\n                renderNode(request, task, content);\n                pushSegmentFinale(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);\n                contentRootSegment.status = COMPLETED;\n                queueCompletedSegment(newBoundary, contentRootSegment);\n                if (newBoundary.pendingTasks === 0) {\n                    // This must have been the last segment we were waiting on. This boundary is now complete.\n                    // Therefore we won't need the fallback. We early return so that we don't have to create\n                    // the fallback.\n                    popComponentStackInDEV(task);\n                    return;\n                }\n            } catch (error) {\n                contentRootSegment.status = ERRORED;\n                newBoundary.forceClientRender = true;\n                newBoundary.errorDigest = logRecoverableError(request, error);\n                {\n                    captureBoundaryErrorDetailsDev(newBoundary, error);\n                }\n            // We don't need to schedule any task because we know the parent has written yet.\n            // We do need to fallthrough to create the fallback though.\n            } finally{\n                {\n                    setCurrentlyRenderingBoundaryResourcesTarget(request.resources, parentBoundary ? parentBoundary.resources : null);\n                }\n                task.blockedBoundary = parentBoundary;\n                task.blockedSegment = parentSegment;\n            } // We create suspended task for the fallback because we don't want to actually work\n            // on it yet in case we finish the main content, so we queue for later.\n            var suspendedFallbackTask = createTask(request, null, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);\n            {\n                suspendedFallbackTask.componentStack = task.componentStack;\n            }\n            // on preparing fallbacks if we don't have any more main content to task on.\n            request.pingedTasks.push(suspendedFallbackTask);\n            popComponentStackInDEV(task);\n        }\n        function renderHostElement(request, task, type, props) {\n            pushBuiltInComponentStackInDEV(task, type);\n            var segment = task.blockedSegment;\n            var children = pushStartInstance(segment.chunks, type, props, request.resources, request.responseState, segment.formatContext, segment.lastPushedText);\n            segment.lastPushedText = false;\n            var prevContext = segment.formatContext;\n            segment.formatContext = getChildFormatContext(prevContext, type, props); // We use the non-destructive form because if something suspends, we still\n            // need to pop back up and finish this subtree of HTML.\n            renderNode(request, task, children); // We expect that errors will fatal the whole task and that we don't need\n            // the correct context. Therefore this is not in a finally.\n            segment.formatContext = prevContext;\n            pushEndInstance(segment.chunks, type, props, request.responseState, prevContext);\n            segment.lastPushedText = false;\n            popComponentStackInDEV(task);\n        }\n        function shouldConstruct(Component) {\n            return Component.prototype && Component.prototype.isReactComponent;\n        }\n        function renderWithHooks(request, task, prevThenableState, Component, props, secondArg) {\n            var componentIdentity = {};\n            prepareToUseHooks(task, componentIdentity, prevThenableState);\n            var result = Component(props, secondArg);\n            return finishHooks(Component, props, result, secondArg);\n        }\n        function finishClassComponent(request, task, instance, Component, props) {\n            var nextChildren = instance.render();\n            {\n                if (instance.props !== props) {\n                    if (!didWarnAboutReassigningProps) {\n                        error(\"It looks like %s is reassigning its own `this.props` while rendering. \" + \"This is not supported and can lead to confusing bugs.\", getComponentNameFromType(Component) || \"a component\");\n                    }\n                    didWarnAboutReassigningProps = true;\n                }\n            }\n            {\n                var childContextTypes = Component.childContextTypes;\n                if (childContextTypes !== null && childContextTypes !== undefined) {\n                    var previousContext = task.legacyContext;\n                    var mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);\n                    task.legacyContext = mergedContext;\n                    renderNodeDestructive(request, task, null, nextChildren);\n                    task.legacyContext = previousContext;\n                    return;\n                }\n            }\n            renderNodeDestructive(request, task, null, nextChildren);\n        }\n        function renderClassComponent(request, task, Component, props) {\n            pushClassComponentStackInDEV(task, Component);\n            var maskedContext = getMaskedContext(Component, task.legacyContext);\n            var instance = constructClassInstance(Component, props, maskedContext);\n            mountClassInstance(instance, Component, props, maskedContext);\n            finishClassComponent(request, task, instance, Component, props);\n            popComponentStackInDEV(task);\n        }\n        var didWarnAboutBadClass = {};\n        var didWarnAboutModulePatternComponent = {};\n        var didWarnAboutContextTypeOnFunctionComponent = {};\n        var didWarnAboutGetDerivedStateOnFunctionComponent = {};\n        var didWarnAboutReassigningProps = false;\n        var didWarnAboutDefaultPropsOnFunctionComponent = {};\n        var didWarnAboutGenerators = false;\n        var didWarnAboutMaps = false;\n        var hasWarnedAboutUsingContextAsConsumer = false; // This would typically be a function component but we still support module pattern\n        // components for some reason.\n        function renderIndeterminateComponent(request, task, prevThenableState, Component, props) {\n            var legacyContext;\n            {\n                legacyContext = getMaskedContext(Component, task.legacyContext);\n            }\n            pushFunctionComponentStackInDEV(task, Component);\n            {\n                if (Component.prototype && typeof Component.prototype.render === \"function\") {\n                    var componentName = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutBadClass[componentName]) {\n                        error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + \"This is likely to cause errors. Change %s to extend React.Component instead.\", componentName, componentName);\n                        didWarnAboutBadClass[componentName] = true;\n                    }\n                }\n            }\n            var value = renderWithHooks(request, task, prevThenableState, Component, props, legacyContext);\n            var hasId = checkDidRenderIdHook();\n            {\n                // Support for module components is deprecated and is removed behind a flag.\n                // Whether or not it would crash later, we want to show a good message in DEV first.\n                if (typeof value === \"object\" && value !== null && typeof value.render === \"function\" && value.$$typeof === undefined) {\n                    var _componentName = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutModulePatternComponent[_componentName]) {\n                        error(\"The <%s /> component appears to be a function component that returns a class instance. \" + \"Change %s to a class that extends React.Component instead. \" + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + \"cannot be called with `new` by React.\", _componentName, _componentName, _componentName);\n                        didWarnAboutModulePatternComponent[_componentName] = true;\n                    }\n                }\n            }\n            if (// Eventually we'll delete this branch altogether.\n            typeof value === \"object\" && value !== null && typeof value.render === \"function\" && value.$$typeof === undefined) {\n                {\n                    var _componentName2 = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutModulePatternComponent[_componentName2]) {\n                        error(\"The <%s /> component appears to be a function component that returns a class instance. \" + \"Change %s to a class that extends React.Component instead. \" + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + \"cannot be called with `new` by React.\", _componentName2, _componentName2, _componentName2);\n                        didWarnAboutModulePatternComponent[_componentName2] = true;\n                    }\n                }\n                mountClassInstance(value, Component, props, legacyContext);\n                finishClassComponent(request, task, value, Component, props);\n            } else {\n                {\n                    validateFunctionComponentInDev(Component);\n                }\n                // the previous task every again, so we can use the destructive recursive form.\n                if (hasId) {\n                    // This component materialized an id. We treat this as its own level, with\n                    // a single \"child\" slot.\n                    var prevTreeContext = task.treeContext;\n                    var totalChildren = 1;\n                    var index = 0;\n                    task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);\n                    try {\n                        renderNodeDestructive(request, task, null, value);\n                    } finally{\n                        task.treeContext = prevTreeContext;\n                    }\n                } else {\n                    renderNodeDestructive(request, task, null, value);\n                }\n            }\n            popComponentStackInDEV(task);\n        }\n        function validateFunctionComponentInDev(Component) {\n            {\n                if (Component) {\n                    if (Component.childContextTypes) {\n                        error(\"%s(...): childContextTypes cannot be defined on a function component.\", Component.displayName || Component.name || \"Component\");\n                    }\n                }\n                if (Component.defaultProps !== undefined) {\n                    var componentName = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n                        error(\"%s: Support for defaultProps will be removed from function components \" + \"in a future major release. Use JavaScript default parameters instead.\", componentName);\n                        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n                    }\n                }\n                if (typeof Component.getDerivedStateFromProps === \"function\") {\n                    var _componentName3 = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {\n                        error(\"%s: Function components do not support getDerivedStateFromProps.\", _componentName3);\n                        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;\n                    }\n                }\n                if (typeof Component.contextType === \"object\" && Component.contextType !== null) {\n                    var _componentName4 = getComponentNameFromType(Component) || \"Unknown\";\n                    if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {\n                        error(\"%s: Function components do not support contextType.\", _componentName4);\n                        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;\n                    }\n                }\n            }\n        }\n        function resolveDefaultProps(Component, baseProps) {\n            if (Component && Component.defaultProps) {\n                // Resolve default props. Taken from ReactElement\n                var props = assign({}, baseProps);\n                var defaultProps = Component.defaultProps;\n                for(var propName in defaultProps){\n                    if (props[propName] === undefined) {\n                        props[propName] = defaultProps[propName];\n                    }\n                }\n                return props;\n            }\n            return baseProps;\n        }\n        function renderForwardRef(request, task, prevThenableState, type, props, ref) {\n            pushFunctionComponentStackInDEV(task, type.render);\n            var children = renderWithHooks(request, task, prevThenableState, type.render, props, ref);\n            var hasId = checkDidRenderIdHook();\n            if (hasId) {\n                // This component materialized an id. We treat this as its own level, with\n                // a single \"child\" slot.\n                var prevTreeContext = task.treeContext;\n                var totalChildren = 1;\n                var index = 0;\n                task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);\n                try {\n                    renderNodeDestructive(request, task, null, children);\n                } finally{\n                    task.treeContext = prevTreeContext;\n                }\n            } else {\n                renderNodeDestructive(request, task, null, children);\n            }\n            popComponentStackInDEV(task);\n        }\n        function renderMemo(request, task, prevThenableState, type, props, ref) {\n            var innerType = type.type;\n            var resolvedProps = resolveDefaultProps(innerType, props);\n            renderElement(request, task, prevThenableState, innerType, resolvedProps, ref);\n        }\n        function renderContextConsumer(request, task, context, props) {\n            // The logic below for Context differs depending on PROD or DEV mode. In\n            // DEV mode, we create a separate object for Context.Consumer that acts\n            // like a proxy to Context. This proxy object adds unnecessary code in PROD\n            // so we use the old behaviour (Context.Consumer references Context) to\n            // reduce size and overhead. The separate object references context via\n            // a property called \"_context\", which also gives us the ability to check\n            // in DEV mode if this property exists or not and warn if it does not.\n            {\n                if (context._context === undefined) {\n                    // This may be because it's a Context (rather than a Consumer).\n                    // Or it may be because it's older React where they're the same thing.\n                    // We only want to warn if we're sure it's a new React.\n                    if (context !== context.Consumer) {\n                        if (!hasWarnedAboutUsingContextAsConsumer) {\n                            hasWarnedAboutUsingContextAsConsumer = true;\n                            error(\"Rendering <Context> directly is not supported and will be removed in \" + \"a future major release. Did you mean to render <Context.Consumer> instead?\");\n                        }\n                    }\n                } else {\n                    context = context._context;\n                }\n            }\n            var render = props.children;\n            {\n                if (typeof render !== \"function\") {\n                    error(\"A context consumer was rendered with multiple children, or a child \" + \"that isn't a function. A context consumer expects a single child \" + \"that is a function. If you did pass a function, make sure there \" + \"is no trailing or leading whitespace around it.\");\n                }\n            }\n            var newValue = readContext$1(context);\n            var newChildren = render(newValue);\n            renderNodeDestructive(request, task, null, newChildren);\n        }\n        function renderContextProvider(request, task, type, props) {\n            var context = type._context;\n            var value = props.value;\n            var children = props.children;\n            var prevSnapshot;\n            {\n                prevSnapshot = task.context;\n            }\n            task.context = pushProvider(context, value);\n            renderNodeDestructive(request, task, null, children);\n            task.context = popProvider(context);\n            {\n                if (prevSnapshot !== task.context) {\n                    error(\"Popping the context provider did not return back to the original snapshot. This is a bug in React.\");\n                }\n            }\n        }\n        function renderLazyComponent(request, task, prevThenableState, lazyComponent, props, ref) {\n            pushBuiltInComponentStackInDEV(task, \"Lazy\");\n            var payload = lazyComponent._payload;\n            var init = lazyComponent._init;\n            var Component = init(payload);\n            var resolvedProps = resolveDefaultProps(Component, props);\n            renderElement(request, task, prevThenableState, Component, resolvedProps, ref);\n            popComponentStackInDEV(task);\n        }\n        function renderOffscreen(request, task, props) {\n            var mode = props.mode;\n            if (mode === \"hidden\") ;\n            else {\n                // A visible Offscreen boundary is treated exactly like a fragment: a\n                // pure indirection.\n                renderNodeDestructive(request, task, null, props.children);\n            }\n        }\n        function renderElement(request, task, prevThenableState, type, props, ref) {\n            if (typeof type === \"function\") {\n                if (shouldConstruct(type)) {\n                    renderClassComponent(request, task, type, props);\n                    return;\n                } else {\n                    renderIndeterminateComponent(request, task, prevThenableState, type, props);\n                    return;\n                }\n            }\n            if (typeof type === \"string\") {\n                renderHostElement(request, task, type, props);\n                return;\n            }\n            switch(type){\n                // LegacyHidden acts the same as a fragment. This only works because we\n                // currently assume that every instance of LegacyHidden is accompanied by a\n                // host component wrapper. In the hidden mode, the host component is given a\n                // `hidden` attribute, which ensures that the initial HTML is not visible.\n                // To support the use of LegacyHidden as a true fragment, without an extra\n                // DOM node, we would have to hide the initial HTML in some other way.\n                // TODO: Delete in LegacyHidden. It's an unstable API only used in the\n                // www build. As a migration step, we could add a special prop to Offscreen\n                // that simulates the old behavior (no hiding, no change to effects).\n                case REACT_LEGACY_HIDDEN_TYPE:\n                case REACT_DEBUG_TRACING_MODE_TYPE:\n                case REACT_STRICT_MODE_TYPE:\n                case REACT_PROFILER_TYPE:\n                case REACT_FRAGMENT_TYPE:\n                    {\n                        renderNodeDestructive(request, task, null, props.children);\n                        return;\n                    }\n                case REACT_OFFSCREEN_TYPE:\n                    {\n                        renderOffscreen(request, task, props);\n                        return;\n                    }\n                case REACT_SUSPENSE_LIST_TYPE:\n                    {\n                        pushBuiltInComponentStackInDEV(task, \"SuspenseList\"); // TODO: SuspenseList should control the boundaries.\n                        renderNodeDestructive(request, task, null, props.children);\n                        popComponentStackInDEV(task);\n                        return;\n                    }\n                case REACT_SCOPE_TYPE:\n                    {\n                        throw new Error(\"ReactDOMServer does not yet support scope components.\");\n                    }\n                case REACT_SUSPENSE_TYPE:\n                    {\n                        {\n                            renderSuspenseBoundary(request, task, props);\n                        }\n                        return;\n                    }\n            }\n            if (typeof type === \"object\" && type !== null) {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        {\n                            renderForwardRef(request, task, prevThenableState, type, props, ref);\n                            return;\n                        }\n                    case REACT_MEMO_TYPE:\n                        {\n                            renderMemo(request, task, prevThenableState, type, props, ref);\n                            return;\n                        }\n                    case REACT_PROVIDER_TYPE:\n                        {\n                            renderContextProvider(request, task, type, props);\n                            return;\n                        }\n                    case REACT_CONTEXT_TYPE:\n                        {\n                            renderContextConsumer(request, task, type, props);\n                            return;\n                        }\n                    case REACT_LAZY_TYPE:\n                        {\n                            renderLazyComponent(request, task, prevThenableState, type, props);\n                            return;\n                        }\n                }\n            }\n            var info = \"\";\n            {\n                if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                    info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and \" + \"named imports.\";\n                }\n            }\n            throw new Error(\"Element type is invalid: expected a string (for built-in \" + \"components) or a class/function (for composite components) \" + (\"but got: \" + (type == null ? type : typeof type) + \".\" + info));\n        } // $FlowFixMe[missing-local-annot]\n        function validateIterable(iterable, iteratorFn) {\n            {\n                // We don't support rendering Generators because it's a mutation.\n                // See https://github.com/facebook/react/issues/12995\n                if (typeof Symbol === \"function\" && iterable[Symbol.toStringTag] === \"Generator\") {\n                    if (!didWarnAboutGenerators) {\n                        error(\"Using Generators as children is unsupported and will likely yield \" + \"unexpected results because enumerating a generator mutates it. \" + \"You may convert it to an array with `Array.from()` or the \" + \"`[...spread]` operator before rendering. Keep in mind \" + \"you might need to polyfill these features for older browsers.\");\n                    }\n                    didWarnAboutGenerators = true;\n                } // Warn about using Maps as children\n                if (iterable.entries === iteratorFn) {\n                    if (!didWarnAboutMaps) {\n                        error(\"Using Maps as children is not supported. \" + \"Use an array of keyed ReactElements instead.\");\n                    }\n                    didWarnAboutMaps = true;\n                }\n            }\n        }\n        function renderNodeDestructive(request, task, // always null, except when called by retryTask.\n        prevThenableState, node) {\n            {\n                // In Dev we wrap renderNodeDestructiveImpl in a try / catch so we can capture\n                // a component stack at the right place in the tree. We don't do this in renderNode\n                // becuase it is not called at every layer of the tree and we may lose frames\n                try {\n                    return renderNodeDestructiveImpl(request, task, prevThenableState, node);\n                } catch (x) {\n                    if (typeof x === \"object\" && x !== null && typeof x.then === \"function\") ;\n                    else {\n                        // This is an error, stash the component stack if it is null.\n                        lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV();\n                    } // rethrow so normal suspense logic can handle thrown value accordingly\n                    throw x;\n                }\n            }\n        } // This function by it self renders a node and consumes the task by mutating it\n        // to update the current execution state.\n        function renderNodeDestructiveImpl(request, task, prevThenableState, node) {\n            // Stash the node we're working on. We'll pick up from this task in case\n            // something suspends.\n            task.node = node; // Handle object types\n            if (typeof node === \"object\" && node !== null) {\n                switch(node.$$typeof){\n                    case REACT_ELEMENT_TYPE:\n                        {\n                            var element = node;\n                            var type = element.type;\n                            var props = element.props;\n                            var ref = element.ref;\n                            renderElement(request, task, prevThenableState, type, props, ref);\n                            return;\n                        }\n                    case REACT_PORTAL_TYPE:\n                        throw new Error(\"Portals are not currently supported by the server renderer. \" + \"Render them conditionally so that they only appear on the client render.\");\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyNode = node;\n                            var payload = lazyNode._payload;\n                            var init = lazyNode._init;\n                            var resolvedNode;\n                            {\n                                try {\n                                    resolvedNode = init(payload);\n                                } catch (x) {\n                                    if (typeof x === \"object\" && x !== null && typeof x.then === \"function\") {\n                                        // this Lazy initializer is suspending. push a temporary frame onto the stack so it can be\n                                        // popped off in spawnNewSuspendedTask. This aligns stack behavior between Lazy in element position\n                                        // vs Component position. We do not want the frame for Errors so we exclusively do this in\n                                        // the wakeable branch\n                                        pushBuiltInComponentStackInDEV(task, \"Lazy\");\n                                    }\n                                    throw x;\n                                }\n                            }\n                            renderNodeDestructive(request, task, null, resolvedNode);\n                            return;\n                        }\n                }\n                if (isArray(node)) {\n                    renderChildrenArray(request, task, node);\n                    return;\n                }\n                var iteratorFn = getIteratorFn(node);\n                if (iteratorFn) {\n                    {\n                        validateIterable(node, iteratorFn);\n                    }\n                    var iterator = iteratorFn.call(node);\n                    if (iterator) {\n                        // We need to know how many total children are in this set, so that we\n                        // can allocate enough id slots to acommodate them. So we must exhaust\n                        // the iterator before we start recursively rendering the children.\n                        // TODO: This is not great but I think it's inherent to the id\n                        // generation algorithm.\n                        var step = iterator.next(); // If there are not entries, we need to push an empty so we start by checking that.\n                        if (!step.done) {\n                            var children = [];\n                            do {\n                                children.push(step.value);\n                                step = iterator.next();\n                            }while (!step.done);\n                            renderChildrenArray(request, task, children);\n                            return;\n                        }\n                        return;\n                    }\n                } // Usables are a valid React node type. When React encounters a Usable in\n                // a child position, it unwraps it using the same algorithm as `use`. For\n                // example, for promises, React will throw an exception to unwind the\n                // stack, then replay the component once the promise resolves.\n                //\n                // A difference from `use` is that React will keep unwrapping the value\n                // until it reaches a non-Usable type.\n                //\n                // e.g. Usable<Usable<Usable<T>>> should resolve to T\n                var maybeUsable = node;\n                if (typeof maybeUsable.then === \"function\") {\n                    var thenable = maybeUsable;\n                    return renderNodeDestructiveImpl(request, task, null, unwrapThenable(thenable));\n                }\n                if (maybeUsable.$$typeof === REACT_CONTEXT_TYPE || maybeUsable.$$typeof === REACT_SERVER_CONTEXT_TYPE) {\n                    var context = maybeUsable;\n                    return renderNodeDestructiveImpl(request, task, null, readContext$1(context));\n                } // $FlowFixMe[method-unbinding]\n                var childString = Object.prototype.toString.call(node);\n                throw new Error(\"Objects are not valid as a React child (found: \" + (childString === \"[object Object]\" ? \"object with keys {\" + Object.keys(node).join(\", \") + \"}\" : childString) + \"). \" + \"If you meant to render a collection of children, use an array \" + \"instead.\");\n            }\n            if (typeof node === \"string\") {\n                var segment = task.blockedSegment;\n                segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);\n                return;\n            }\n            if (typeof node === \"number\") {\n                var _segment = task.blockedSegment;\n                _segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, \"\" + node, request.responseState, _segment.lastPushedText);\n                return;\n            }\n            {\n                if (typeof node === \"function\") {\n                    error(\"Functions are not valid as a React child. This may happen if \" + \"you return a Component instead of <Component /> from render. \" + \"Or maybe you meant to call this function rather than return it.\");\n                }\n            }\n        }\n        function renderChildrenArray(request, task, children) {\n            var totalChildren = children.length;\n            for(var i = 0; i < totalChildren; i++){\n                var prevTreeContext = task.treeContext;\n                task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i);\n                try {\n                    // We need to use the non-destructive form so that we can safely pop back\n                    // up and render the sibling if something suspends.\n                    renderNode(request, task, children[i]);\n                } finally{\n                    task.treeContext = prevTreeContext;\n                }\n            }\n        }\n        function spawnNewSuspendedTask(request, task, thenableState, x) {\n            // Something suspended, we'll need to create a new segment and resolve it later.\n            var segment = task.blockedSegment;\n            var insertionIndex = segment.chunks.length;\n            var newSegment = createPendingSegment(request, insertionIndex, null, segment.formatContext, segment.lastPushedText, true);\n            segment.children.push(newSegment); // Reset lastPushedText for current Segment since the new Segment \"consumed\" it\n            segment.lastPushedText = false;\n            var newTask = createTask(request, thenableState, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);\n            {\n                if (task.componentStack !== null) {\n                    // We pop one task off the stack because the node that suspended will be tried again,\n                    // which will add it back onto the stack.\n                    newTask.componentStack = task.componentStack.parent;\n                }\n            }\n            var ping = newTask.ping;\n            x.then(ping, ping);\n        } // This is a non-destructive form of rendering a node. If it suspends it spawns\n        // a new task and restores the context of this task to what it was before.\n        function renderNode(request, task, node) {\n            // Store how much we've pushed at this point so we can reset it in case something\n            // suspended partially through writing something.\n            var segment = task.blockedSegment;\n            var childrenLength = segment.children.length;\n            var chunkLength = segment.chunks.length; // Snapshot the current context in case something throws to interrupt the\n            // process.\n            var previousFormatContext = task.blockedSegment.formatContext;\n            var previousLegacyContext = task.legacyContext;\n            var previousContext = task.context;\n            var previousComponentStack = null;\n            {\n                previousComponentStack = task.componentStack;\n            }\n            try {\n                return renderNodeDestructive(request, task, null, node);\n            } catch (thrownValue) {\n                resetHooksState(); // Reset the write pointers to where we started.\n                segment.children.length = childrenLength;\n                segment.chunks.length = chunkLength;\n                var x = thrownValue === SuspenseException ? // reasons, the rest of the Suspense implementation expects the thrown\n                // value to be a thenable, because before `use` existed that was the\n                // (unstable) API for suspending. This implementation detail can change\n                // later, once we deprecate the old API in favor of `use`.\n                getSuspendedThenable() : thrownValue; // $FlowFixMe[method-unbinding]\n                if (typeof x === \"object\" && x !== null && typeof x.then === \"function\") {\n                    var wakeable = x;\n                    var thenableState = getThenableStateAfterSuspending();\n                    spawnNewSuspendedTask(request, task, thenableState, wakeable); // Restore the context. We assume that this will be restored by the inner\n                    // functions in case nothing throws so we don't use \"finally\" here.\n                    task.blockedSegment.formatContext = previousFormatContext;\n                    task.legacyContext = previousLegacyContext;\n                    task.context = previousContext; // Restore all active ReactContexts to what they were before.\n                    switchContext(previousContext);\n                    {\n                        task.componentStack = previousComponentStack;\n                    }\n                    return;\n                } else {\n                    // Restore the context. We assume that this will be restored by the inner\n                    // functions in case nothing throws so we don't use \"finally\" here.\n                    task.blockedSegment.formatContext = previousFormatContext;\n                    task.legacyContext = previousLegacyContext;\n                    task.context = previousContext; // Restore all active ReactContexts to what they were before.\n                    switchContext(previousContext);\n                    {\n                        task.componentStack = previousComponentStack;\n                    }\n                    // Let's terminate the rest of the tree and don't render any siblings.\n                    throw x;\n                }\n            }\n        }\n        function erroredTask(request, boundary, segment, error) {\n            // Report the error to a global handler.\n            var errorDigest = logRecoverableError(request, error);\n            if (boundary === null) {\n                fatalError(request, error);\n            } else {\n                boundary.pendingTasks--;\n                if (!boundary.forceClientRender) {\n                    boundary.forceClientRender = true;\n                    boundary.errorDigest = errorDigest;\n                    {\n                        captureBoundaryErrorDetailsDev(boundary, error);\n                    }\n                    // so we can flush it, if the parent already flushed.\n                    if (boundary.parentFlushed) {\n                        // We don't have a preference where in the queue this goes since it's likely\n                        // to error on the client anyway. However, intentionally client-rendered\n                        // boundaries should be flushed earlier so that they can start on the client.\n                        // We reuse the same queue for errors.\n                        request.clientRenderedBoundaries.push(boundary);\n                    }\n                }\n            }\n            request.allPendingTasks--;\n            if (request.allPendingTasks === 0) {\n                var onAllReady = request.onAllReady;\n                onAllReady();\n            }\n        }\n        function abortTaskSoft(task) {\n            // This aborts task without aborting the parent boundary that it blocks.\n            // It's used for when we didn't need this task to complete the tree.\n            // If task was needed, then it should use abortTask instead.\n            var request = this;\n            var boundary = task.blockedBoundary;\n            var segment = task.blockedSegment;\n            segment.status = ABORTED;\n            finishedTask(request, boundary, segment);\n        }\n        function abortTask(task, request, error) {\n            // This aborts the task and aborts the parent that it blocks, putting it into\n            // client rendered mode.\n            var boundary = task.blockedBoundary;\n            var segment = task.blockedSegment;\n            segment.status = ABORTED;\n            if (boundary === null) {\n                request.allPendingTasks--; // We didn't complete the root so we have nothing to show. We can close\n                // the request;\n                if (request.status !== CLOSING && request.status !== CLOSED) {\n                    logRecoverableError(request, error);\n                    fatalError(request, error);\n                }\n            } else {\n                boundary.pendingTasks--;\n                if (!boundary.forceClientRender) {\n                    boundary.forceClientRender = true;\n                    boundary.errorDigest = request.onError(error);\n                    {\n                        var errorPrefix = \"The server did not finish this Suspense boundary: \";\n                        var errorMessage;\n                        if (error && typeof error.message === \"string\") {\n                            errorMessage = errorPrefix + error.message;\n                        } else {\n                            // eslint-disable-next-line react-internal/safe-string-coercion\n                            errorMessage = errorPrefix + String(error);\n                        }\n                        var previousTaskInDev = currentTaskInDEV;\n                        currentTaskInDEV = task;\n                        try {\n                            captureBoundaryErrorDetailsDev(boundary, errorMessage);\n                        } finally{\n                            currentTaskInDEV = previousTaskInDev;\n                        }\n                    }\n                    if (boundary.parentFlushed) {\n                        request.clientRenderedBoundaries.push(boundary);\n                    }\n                } // If this boundary was still pending then we haven't already cancelled its fallbacks.\n                // We'll need to abort the fallbacks, which will also error that parent boundary.\n                boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {\n                    return abortTask(fallbackTask, request, error);\n                });\n                boundary.fallbackAbortableTasks.clear();\n                request.allPendingTasks--;\n                if (request.allPendingTasks === 0) {\n                    var onAllReady = request.onAllReady;\n                    onAllReady();\n                }\n            }\n        }\n        function queueCompletedSegment(boundary, segment) {\n            if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {\n                // This is an empty segment. There's nothing to write, so we can instead transfer the ID\n                // to the child. That way any existing references point to the child.\n                var childSegment = segment.children[0];\n                childSegment.id = segment.id;\n                childSegment.parentFlushed = true;\n                if (childSegment.status === COMPLETED) {\n                    queueCompletedSegment(boundary, childSegment);\n                }\n            } else {\n                var completedSegments = boundary.completedSegments;\n                completedSegments.push(segment);\n            }\n        }\n        function finishedTask(request, boundary, segment) {\n            if (boundary === null) {\n                if (segment.parentFlushed) {\n                    if (request.completedRootSegment !== null) {\n                        throw new Error(\"There can only be one root segment. This is a bug in React.\");\n                    }\n                    request.completedRootSegment = segment;\n                }\n                request.pendingRootTasks--;\n                if (request.pendingRootTasks === 0) {\n                    // We have completed the shell so the shell can't error anymore.\n                    request.onShellError = noop;\n                    var onShellReady = request.onShellReady;\n                    onShellReady();\n                }\n            } else {\n                boundary.pendingTasks--;\n                if (boundary.forceClientRender) ;\n                else if (boundary.pendingTasks === 0) {\n                    // This must have been the last segment we were waiting on. This boundary is now complete.\n                    if (segment.parentFlushed) {\n                        // Our parent segment already flushed, so we need to schedule this segment to be emitted.\n                        // If it is a segment that was aborted, we'll write other content instead so we don't need\n                        // to emit it.\n                        if (segment.status === COMPLETED) {\n                            queueCompletedSegment(boundary, segment);\n                        }\n                    }\n                    if (boundary.parentFlushed) {\n                        // The segment might be part of a segment that didn't flush yet, but if the boundary's\n                        // parent flushed, we need to schedule the boundary to be emitted.\n                        request.completedBoundaries.push(boundary);\n                    } // We can now cancel any pending task on the fallback since we won't need to show it anymore.\n                    // This needs to happen after we read the parentFlushed flags because aborting can finish\n                    // work which can trigger user code, which can start flushing, which can change those flags.\n                    boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);\n                    boundary.fallbackAbortableTasks.clear();\n                } else {\n                    if (segment.parentFlushed) {\n                        // Our parent already flushed, so we need to schedule this segment to be emitted.\n                        // If it is a segment that was aborted, we'll write other content instead so we don't need\n                        // to emit it.\n                        if (segment.status === COMPLETED) {\n                            queueCompletedSegment(boundary, segment);\n                            var completedSegments = boundary.completedSegments;\n                            if (completedSegments.length === 1) {\n                                // This is the first time since we last flushed that we completed anything.\n                                // We can schedule this boundary to emit its partially completed segments early\n                                // in case the parent has already been flushed.\n                                if (boundary.parentFlushed) {\n                                    request.partialBoundaries.push(boundary);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            request.allPendingTasks--;\n            if (request.allPendingTasks === 0) {\n                // This needs to be called at the very end so that we can synchronously write the result\n                // in the callback if needed.\n                var onAllReady = request.onAllReady;\n                onAllReady();\n            }\n        }\n        function retryTask(request, task) {\n            {\n                var blockedBoundary = task.blockedBoundary;\n                setCurrentlyRenderingBoundaryResourcesTarget(request.resources, blockedBoundary ? blockedBoundary.resources : null);\n            }\n            var segment = task.blockedSegment;\n            if (segment.status !== PENDING) {\n                // We completed this by other means before we had a chance to retry it.\n                return;\n            } // We restore the context to what it was when we suspended.\n            // We don't restore it after we leave because it's likely that we'll end up\n            // needing a very similar context soon again.\n            switchContext(task.context);\n            var prevTaskInDEV = null;\n            {\n                prevTaskInDEV = currentTaskInDEV;\n                currentTaskInDEV = task;\n            }\n            var childrenLength = segment.children.length;\n            var chunkLength = segment.chunks.length;\n            try {\n                // We call the destructive form that mutates this task. That way if something\n                // suspends again, we can reuse the same task instead of spawning a new one.\n                // Reset the task's thenable state before continuing, so that if a later\n                // component suspends we can reuse the same task object. If the same\n                // component suspends again, the thenable state will be restored.\n                var prevThenableState = task.thenableState;\n                task.thenableState = null;\n                renderNodeDestructive(request, task, prevThenableState, task.node);\n                pushSegmentFinale(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded);\n                task.abortSet.delete(task);\n                segment.status = COMPLETED;\n                finishedTask(request, task.blockedBoundary, segment);\n            } catch (thrownValue) {\n                resetHooksState(); // Reset the write pointers to where we started.\n                segment.children.length = childrenLength;\n                segment.chunks.length = chunkLength;\n                var x = thrownValue === SuspenseException ? // reasons, the rest of the Suspense implementation expects the thrown\n                // value to be a thenable, because before `use` existed that was the\n                // (unstable) API for suspending. This implementation detail can change\n                // later, once we deprecate the old API in favor of `use`.\n                getSuspendedThenable() : thrownValue; // $FlowFixMe[method-unbinding]\n                if (typeof x === \"object\" && x !== null && typeof x.then === \"function\") {\n                    // Something suspended again, let's pick it back up later.\n                    var ping = task.ping;\n                    x.then(ping, ping);\n                    task.thenableState = getThenableStateAfterSuspending();\n                } else {\n                    task.abortSet.delete(task);\n                    segment.status = ERRORED;\n                    erroredTask(request, task.blockedBoundary, segment, x);\n                }\n            } finally{\n                {\n                    setCurrentlyRenderingBoundaryResourcesTarget(request.resources, null);\n                }\n                {\n                    currentTaskInDEV = prevTaskInDEV;\n                }\n            }\n        }\n        function performWork(request) {\n            if (request.status === CLOSED) {\n                return;\n            }\n            var prevContext = getActiveContext();\n            var prevDispatcher = ReactCurrentDispatcher.current;\n            ReactCurrentDispatcher.current = HooksDispatcher;\n            var prevCacheDispatcher;\n            {\n                prevCacheDispatcher = ReactCurrentCache.current;\n                ReactCurrentCache.current = DefaultCacheDispatcher;\n            }\n            var prevRequest = currentRequest;\n            currentRequest = request;\n            var prevGetCurrentStackImpl;\n            {\n                prevGetCurrentStackImpl = ReactDebugCurrentFrame.getCurrentStack;\n                ReactDebugCurrentFrame.getCurrentStack = getCurrentStackInDEV;\n            }\n            var prevResponseState = currentResponseState;\n            setCurrentResponseState(request.responseState);\n            try {\n                var pingedTasks = request.pingedTasks;\n                var i;\n                for(i = 0; i < pingedTasks.length; i++){\n                    var task = pingedTasks[i];\n                    retryTask(request, task);\n                }\n                pingedTasks.splice(0, i);\n                if (request.destination !== null) {\n                    flushCompletedQueues(request, request.destination);\n                }\n            } catch (error) {\n                logRecoverableError(request, error);\n                fatalError(request, error);\n            } finally{\n                setCurrentResponseState(prevResponseState);\n                ReactCurrentDispatcher.current = prevDispatcher;\n                {\n                    ReactCurrentCache.current = prevCacheDispatcher;\n                }\n                {\n                    ReactDebugCurrentFrame.getCurrentStack = prevGetCurrentStackImpl;\n                }\n                if (prevDispatcher === HooksDispatcher) {\n                    // This means that we were in a reentrant work loop. This could happen\n                    // in a renderer that supports synchronous work like renderToString,\n                    // when it's called from within another renderer.\n                    // Normally we don't bother switching the contexts to their root/default\n                    // values when leaving because we'll likely need the same or similar\n                    // context again. However, when we're inside a synchronous loop like this\n                    // we'll to restore the context to what it was before returning.\n                    switchContext(prevContext);\n                }\n                currentRequest = prevRequest;\n            }\n        }\n        function flushSubtree(request, destination, segment) {\n            segment.parentFlushed = true;\n            switch(segment.status){\n                case PENDING:\n                    {\n                        // We're emitting a placeholder for this segment to be filled in later.\n                        // Therefore we'll need to assign it an ID - to refer to it by.\n                        var segmentID = segment.id = request.nextSegmentId++; // When this segment finally completes it won't be embedded in text since it will flush separately\n                        segment.lastPushedText = false;\n                        segment.textEmbedded = false;\n                        return writePlaceholder(destination, request.responseState, segmentID);\n                    }\n                case COMPLETED:\n                    {\n                        segment.status = FLUSHED;\n                        var r = true;\n                        var chunks = segment.chunks;\n                        var chunkIdx = 0;\n                        var children = segment.children;\n                        for(var childIdx = 0; childIdx < children.length; childIdx++){\n                            var nextChild = children[childIdx]; // Write all the chunks up until the next child.\n                            for(; chunkIdx < nextChild.index; chunkIdx++){\n                                writeChunk(destination, chunks[chunkIdx]);\n                            }\n                            r = flushSegment(request, destination, nextChild);\n                        } // Finally just write all the remaining chunks\n                        for(; chunkIdx < chunks.length - 1; chunkIdx++){\n                            writeChunk(destination, chunks[chunkIdx]);\n                        }\n                        if (chunkIdx < chunks.length) {\n                            r = writeChunkAndReturn(destination, chunks[chunkIdx]);\n                        }\n                        return r;\n                    }\n                default:\n                    {\n                        throw new Error(\"Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.\");\n                    }\n            }\n        }\n        function flushSegment(request, destination, segment) {\n            var boundary = segment.boundary;\n            if (boundary === null) {\n                // Not a suspense boundary.\n                return flushSubtree(request, destination, segment);\n            }\n            boundary.parentFlushed = true; // This segment is a Suspense boundary. We need to decide whether to\n            // emit the content or the fallback now.\n            if (boundary.forceClientRender) {\n                // Emit a client rendered suspense boundary wrapper.\n                // We never queue the inner boundary so we'll never emit its content or partial segments.\n                writeStartClientRenderedSuspenseBoundary(destination, request.responseState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack); // Flush the fallback.\n                flushSubtree(request, destination, segment);\n                return writeEndClientRenderedSuspenseBoundary(destination);\n            } else if (boundary.pendingTasks > 0) {\n                // This boundary is still loading. Emit a pending suspense boundary wrapper.\n                // Assign an ID to refer to the future content by.\n                boundary.rootSegmentID = request.nextSegmentId++;\n                if (boundary.completedSegments.length > 0) {\n                    // If this is at least partially complete, we can queue it to be partially emitted early.\n                    request.partialBoundaries.push(boundary);\n                } /// This is the first time we should have referenced this ID.\n                var id = boundary.id = assignSuspenseBoundaryID(request.responseState);\n                writeStartPendingSuspenseBoundary(destination, request.responseState, id); // Flush the fallback.\n                flushSubtree(request, destination, segment);\n                return writeEndPendingSuspenseBoundary(destination);\n            } else if (boundary.byteSize > request.progressiveChunkSize) {\n                // This boundary is large and will be emitted separately so that we can progressively show\n                // other content. We add it to the queue during the flush because we have to ensure that\n                // the parent flushes first so that there's something to inject it into.\n                // We also have to make sure that it's emitted into the queue in a deterministic slot.\n                // I.e. we can't insert it here when it completes.\n                // Assign an ID to refer to the future content by.\n                boundary.rootSegmentID = request.nextSegmentId++;\n                request.completedBoundaries.push(boundary); // Emit a pending rendered suspense boundary wrapper.\n                writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id); // Flush the fallback.\n                flushSubtree(request, destination, segment);\n                return writeEndPendingSuspenseBoundary(destination);\n            } else {\n                {\n                    hoistResources(request.resources, boundary.resources);\n                }\n                writeStartCompletedSuspenseBoundary(destination);\n                var completedSegments = boundary.completedSegments;\n                if (completedSegments.length !== 1) {\n                    throw new Error(\"A previously unvisited boundary must have exactly one root segment. This is a bug in React.\");\n                }\n                var contentSegment = completedSegments[0];\n                flushSegment(request, destination, contentSegment);\n                return writeEndCompletedSuspenseBoundary(destination);\n            }\n        }\n        function flushClientRenderedBoundary(request, destination, boundary) {\n            return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);\n        }\n        function flushSegmentContainer(request, destination, segment) {\n            writeStartSegment(destination, request.responseState, segment.formatContext, segment.id);\n            flushSegment(request, destination, segment);\n            return writeEndSegment(destination, segment.formatContext);\n        }\n        function flushCompletedBoundary(request, destination, boundary) {\n            {\n                setCurrentlyRenderingBoundaryResourcesTarget(request.resources, boundary.resources);\n            }\n            var completedSegments = boundary.completedSegments;\n            var i = 0;\n            for(; i < completedSegments.length; i++){\n                var segment = completedSegments[i];\n                flushPartiallyCompletedSegment(request, destination, boundary, segment);\n            }\n            completedSegments.length = 0;\n            {\n                writeResourcesForBoundary(destination, boundary.resources, request.responseState);\n            }\n            return writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID, boundary.resources);\n        }\n        function flushPartialBoundary(request, destination, boundary) {\n            {\n                setCurrentlyRenderingBoundaryResourcesTarget(request.resources, boundary.resources);\n            }\n            var completedSegments = boundary.completedSegments;\n            var i = 0;\n            for(; i < completedSegments.length; i++){\n                var segment = completedSegments[i];\n                if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {\n                    i++;\n                    completedSegments.splice(0, i); // Only write as much as the buffer wants. Something higher priority\n                    // might want to write later.\n                    return false;\n                }\n            }\n            completedSegments.splice(0, i);\n            {\n                // The way this is structured we only write resources for partial boundaries\n                // if there is no backpressure. Later before we complete the boundary we\n                // will write resources regardless of backpressure before we emit the\n                // completion instruction\n                return writeResourcesForBoundary(destination, boundary.resources, request.responseState);\n            }\n        }\n        function flushPartiallyCompletedSegment(request, destination, boundary, segment) {\n            if (segment.status === FLUSHED) {\n                // We've already flushed this inline.\n                return true;\n            }\n            var segmentID = segment.id;\n            if (segmentID === -1) {\n                // This segment wasn't previously referred to. This happens at the root of\n                // a boundary. We make kind of a leap here and assume this is the root.\n                var rootSegmentID = segment.id = boundary.rootSegmentID;\n                if (rootSegmentID === -1) {\n                    throw new Error(\"A root segment ID must have been assigned by now. This is a bug in React.\");\n                }\n                return flushSegmentContainer(request, destination, segment);\n            } else {\n                flushSegmentContainer(request, destination, segment);\n                return writeCompletedSegmentInstruction(destination, request.responseState, segmentID);\n            }\n        }\n        function flushCompletedQueues(request, destination) {\n            beginWriting();\n            try {\n                // The structure of this is to go through each queue one by one and write\n                // until the sink tells us to stop. When we should stop, we still finish writing\n                // that item fully and then yield. At that point we remove the already completed\n                // items up until the point we completed them.\n                var i;\n                var completedRootSegment = request.completedRootSegment;\n                if (completedRootSegment !== null) {\n                    if (request.pendingRootTasks === 0) {\n                        if (enableFloat) {\n                            writePreamble(destination, request.resources, request.responseState, request.allPendingTasks === 0);\n                        }\n                        flushSegment(request, destination, completedRootSegment);\n                        request.completedRootSegment = null;\n                        writeCompletedRoot(destination, request.responseState);\n                    } else {\n                        // We haven't flushed the root yet so we don't need to check any other branches further down\n                        return;\n                    }\n                } else if (request.pendingRootTasks > 0) {\n                    // We have not yet flushed the root segment so we early return\n                    return;\n                }\n                if (enableFloat) {\n                    writeHoistables(destination, request.resources, request.responseState);\n                } // We emit client rendering instructions for already emitted boundaries first.\n                // This is so that we can signal to the client to start client rendering them as\n                // soon as possible.\n                var clientRenderedBoundaries = request.clientRenderedBoundaries;\n                for(i = 0; i < clientRenderedBoundaries.length; i++){\n                    var boundary = clientRenderedBoundaries[i];\n                    if (!flushClientRenderedBoundary(request, destination, boundary)) {\n                        request.destination = null;\n                        i++;\n                        clientRenderedBoundaries.splice(0, i);\n                        return;\n                    }\n                }\n                clientRenderedBoundaries.splice(0, i); // Next we emit any complete boundaries. It's better to favor boundaries\n                // that are completely done since we can actually show them, than it is to emit\n                // any individual segments from a partially complete boundary.\n                var completedBoundaries = request.completedBoundaries;\n                for(i = 0; i < completedBoundaries.length; i++){\n                    var _boundary = completedBoundaries[i];\n                    if (!flushCompletedBoundary(request, destination, _boundary)) {\n                        request.destination = null;\n                        i++;\n                        completedBoundaries.splice(0, i);\n                        return;\n                    }\n                }\n                completedBoundaries.splice(0, i); // Allow anything written so far to flush to the underlying sink before\n                // we continue with lower priorities.\n                completeWriting(destination);\n                beginWriting(destination); // TODO: Here we'll emit data used by hydration.\n                // Next we emit any segments of any boundaries that are partially complete\n                // but not deeply complete.\n                var partialBoundaries = request.partialBoundaries;\n                for(i = 0; i < partialBoundaries.length; i++){\n                    var _boundary2 = partialBoundaries[i];\n                    if (!flushPartialBoundary(request, destination, _boundary2)) {\n                        request.destination = null;\n                        i++;\n                        partialBoundaries.splice(0, i);\n                        return;\n                    }\n                }\n                partialBoundaries.splice(0, i); // Next we check the completed boundaries again. This may have had\n                // boundaries added to it in case they were too larged to be inlined.\n                // New ones might be added in this loop.\n                var largeBoundaries = request.completedBoundaries;\n                for(i = 0; i < largeBoundaries.length; i++){\n                    var _boundary3 = largeBoundaries[i];\n                    if (!flushCompletedBoundary(request, destination, _boundary3)) {\n                        request.destination = null;\n                        i++;\n                        largeBoundaries.splice(0, i);\n                        return;\n                    }\n                }\n                largeBoundaries.splice(0, i);\n            } finally{\n                if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0 // We don't need to check any partially completed segments because\n                ) {\n                    request.flushScheduled = false;\n                    {\n                        writePostamble(destination, request.responseState);\n                    }\n                    completeWriting(destination);\n                    flushBuffered(destination);\n                    {\n                        if (request.abortableTasks.size !== 0) {\n                            error(\"There was still abortable task at the root when we closed. This is a bug in React.\");\n                        }\n                    }\n                    close(destination);\n                } else {\n                    completeWriting(destination);\n                    flushBuffered(destination);\n                }\n            }\n        }\n        function startWork(request) {\n            request.flushScheduled = request.destination !== null;\n            {\n                scheduleWork(function() {\n                    return requestStorage.run(request, performWork, request);\n                });\n            }\n        }\n        function enqueueFlush(request) {\n            if (request.flushScheduled === false && // If there are pinged tasks we are going to flush anyway after work completes\n            request.pingedTasks.length === 0 && // If there is no destination there is nothing we can flush to. A flush will\n            // happen when we start flowing again\n            request.destination !== null) {\n                var destination = request.destination;\n                request.flushScheduled = true;\n                scheduleWork(function() {\n                    return flushCompletedQueues(request, destination);\n                });\n            }\n        }\n        function startFlowing(request, destination) {\n            if (request.status === CLOSING) {\n                request.status = CLOSED;\n                closeWithError(destination, request.fatalError);\n                return;\n            }\n            if (request.status === CLOSED) {\n                return;\n            }\n            if (request.destination !== null) {\n                // We're already flowing.\n                return;\n            }\n            request.destination = destination;\n            try {\n                flushCompletedQueues(request, destination);\n            } catch (error) {\n                logRecoverableError(request, error);\n                fatalError(request, error);\n            }\n        } // This is called to early terminate a request. It puts all pending boundaries in client rendered state.\n        function abort(request, reason) {\n            try {\n                var abortableTasks = request.abortableTasks;\n                if (abortableTasks.size > 0) {\n                    var error = reason === undefined ? new Error(\"The render was aborted by the server without a reason.\") : reason;\n                    abortableTasks.forEach(function(task) {\n                        return abortTask(task, request, error);\n                    });\n                    abortableTasks.clear();\n                }\n                if (request.destination !== null) {\n                    flushCompletedQueues(request, request.destination);\n                }\n            } catch (error) {\n                logRecoverableError(request, error);\n                fatalError(request, error);\n            }\n        }\n        function flushResources(request) {\n            enqueueFlush(request);\n        }\n        function getResources(request) {\n            return request.resources;\n        }\n        function createDrainHandler(destination, request) {\n            return function() {\n                return startFlowing(request, destination);\n            };\n        }\n        function createAbortHandler(request, reason) {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            return function() {\n                return abort(request, new Error(reason));\n            };\n        }\n        function createRequestImpl(children, options) {\n            var resources = createResources();\n            return createRequest(children, resources, createResponseState(resources, options ? options.identifierPrefix : undefined, options ? options.nonce : undefined, options ? options.bootstrapScriptContent : undefined, options ? options.bootstrapScripts : undefined, options ? options.bootstrapModules : undefined, options ? options.unstable_externalRuntimeSrc : undefined), createRootFormatContext(options ? options.namespaceURI : undefined), options ? options.progressiveChunkSize : undefined, options ? options.onError : undefined, options ? options.onAllReady : undefined, options ? options.onShellReady : undefined, options ? options.onShellError : undefined, undefined);\n        }\n        function renderToPipeableStream(children, options) {\n            var request = createRequestImpl(children, options);\n            var hasStartedFlowing = false;\n            startWork(request);\n            return {\n                pipe: function(destination) {\n                    if (hasStartedFlowing) {\n                        throw new Error(\"React currently only supports piping to one writable stream.\");\n                    }\n                    hasStartedFlowing = true;\n                    startFlowing(request, destination);\n                    destination.on(\"drain\", createDrainHandler(destination, request));\n                    destination.on(\"error\", createAbortHandler(request, \"The destination stream errored while writing data.\"));\n                    destination.on(\"close\", createAbortHandler(request, \"The destination stream closed early.\"));\n                    return destination;\n                },\n                abort: function(reason) {\n                    abort(request, reason);\n                }\n            };\n        }\n        exports.renderToPipeableStream = renderToPipeableStream;\n        exports.version = ReactVersion;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server.node.development.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react-dom/server-rendering-stub.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-dom/server-rendering-stub.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-dom-server-rendering-stub.development.js */ \"(rsc)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server-rendering-stub.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0LWRvbS9zZXJ2ZXItcmVuZGVyaW5nLXN0dWIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxLQUF5QixFQUFjLEVBRTFDLE1BQU07SUFDTEMsd01BQXlCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FoZWd1cnUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QtZG9tL3NlcnZlci1yZW5kZXJpbmctc3R1Yi5qcz9kZmFhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20tc2VydmVyLXJlbmRlcmluZy1zdHViLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS1zZXJ2ZXItcmVuZGVyaW5nLXN0dWIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6WyJwcm9jZXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react-dom/server-rendering-stub.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react-dom/server.js":
/*!*************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-dom/server.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = __webpack_require__(/*! ./server.node */ \"(rsc)/./node_modules/next/dist/compiled/react-dom/server.node.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0LWRvbS9zZXJ2ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsNkhBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FoZWd1cnUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QtZG9tL3NlcnZlci5qcz8xMWEzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3NlcnZlci5ub2RlJyk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react-dom/server.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react-dom/server.node.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-dom/server.node.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar l, s;\nif (false) {} else {\n    l = __webpack_require__(/*! ./cjs/react-dom-server-legacy.node.development.js */ \"(rsc)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server-legacy.node.development.js\");\n    s = __webpack_require__(/*! ./cjs/react-dom-server.node.development.js */ \"(rsc)/./node_modules/next/dist/compiled/react-dom/cjs/react-dom-server.node.development.js\");\n}\nexports.version = l.version;\nexports.renderToString = l.renderToString;\nexports.renderToStaticMarkup = l.renderToStaticMarkup;\nexports.renderToNodeStream = l.renderToNodeStream;\nexports.renderToStaticNodeStream = l.renderToStaticNodeStream;\nexports.renderToPipeableStream = s.renderToPipeableStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0LWRvbS9zZXJ2ZXIubm9kZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLEdBQUdDO0FBQ1AsSUFBSUMsS0FBeUIsRUFBYyxFQUcxQyxNQUFNO0lBQ0xGLElBQUlHLG1CQUFPQSxDQUFDO0lBQ1pGLElBQUlFLG1CQUFPQSxDQUFDO0FBQ2Q7QUFFQUMsZUFBZSxHQUFHSixFQUFFSyxPQUFPO0FBQzNCRCxzQkFBc0IsR0FBR0osRUFBRU0sY0FBYztBQUN6Q0YsNEJBQTRCLEdBQUdKLEVBQUVPLG9CQUFvQjtBQUNyREgsMEJBQTBCLEdBQUdKLEVBQUVRLGtCQUFrQjtBQUNqREosZ0NBQWdDLEdBQUdKLEVBQUVTLHdCQUF3QjtBQUM3REwsOEJBQThCLEdBQUdILEVBQUVTLHNCQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dhaGVndXJ1LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0LWRvbS9zZXJ2ZXIubm9kZS5qcz80MDQ1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGwsIHM7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBsID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLXNlcnZlci1sZWdhY3kubm9kZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xuICBzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLXNlcnZlci5ub2RlLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBsID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLXNlcnZlci1sZWdhY3kubm9kZS5kZXZlbG9wbWVudC5qcycpO1xuICBzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLXNlcnZlci5ub2RlLmRldmVsb3BtZW50LmpzJyk7XG59XG5cbmV4cG9ydHMudmVyc2lvbiA9IGwudmVyc2lvbjtcbmV4cG9ydHMucmVuZGVyVG9TdHJpbmcgPSBsLnJlbmRlclRvU3RyaW5nO1xuZXhwb3J0cy5yZW5kZXJUb1N0YXRpY01hcmt1cCA9IGwucmVuZGVyVG9TdGF0aWNNYXJrdXA7XG5leHBvcnRzLnJlbmRlclRvTm9kZVN0cmVhbSA9IGwucmVuZGVyVG9Ob2RlU3RyZWFtO1xuZXhwb3J0cy5yZW5kZXJUb1N0YXRpY05vZGVTdHJlYW0gPSBsLnJlbmRlclRvU3RhdGljTm9kZVN0cmVhbTtcbmV4cG9ydHMucmVuZGVyVG9QaXBlYWJsZVN0cmVhbSA9IHMucmVuZGVyVG9QaXBlYWJsZVN0cmVhbTtcbiJdLCJuYW1lcyI6WyJsIiwicyIsInByb2Nlc3MiLCJyZXF1aXJlIiwiZXhwb3J0cyIsInZlcnNpb24iLCJyZW5kZXJUb1N0cmluZyIsInJlbmRlclRvU3RhdGljTWFya3VwIiwicmVuZGVyVG9Ob2RlU3RyZWFtIiwicmVuZGVyVG9TdGF0aWNOb2RlU3RyZWFtIiwicmVuZGVyVG9QaXBlYWJsZVN0cmVhbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react-dom/server.node.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react/cjs/react.development.js":
/*!************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react.development.js ***!
  \************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n/**\n * @license React\n * react.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === \"function\") {\n            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n        }\n        var ReactVersion = \"18.3.0-canary-1a001dac6-20230812\";\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_SERVER_CONTEXT_TYPE = Symbol.for(\"react.server_context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for(\"react.default_value\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        /**\n * Keeps track of the current dispatcher.\n */ var ReactCurrentDispatcher$1 = {\n            current: null\n        };\n        /**\n * Keeps track of the current Cache dispatcher.\n */ var ReactCurrentCache = {\n            current: null\n        };\n        /**\n * Keeps track of the current batch's configuration such as how long an update\n * should suspend for if it needs to.\n */ var ReactCurrentBatchConfig = {\n            transition: null\n        };\n        var ReactCurrentActQueue = {\n            current: null,\n            // Used to reproduce behavior of `batchedUpdates` in legacy mode.\n            isBatchingLegacy: false,\n            didScheduleLegacyUpdate: false,\n            // Tracks whether something called `use` during the current batch of work.\n            // Determines whether we should yield to microtasks to unwrap already resolved\n            // promises without suspending.\n            didUsePromise: false\n        };\n        /**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */ var ReactCurrentOwner = {\n            /**\n   * @internal\n   * @type {ReactComponent}\n   */ current: null\n        };\n        var ReactDebugCurrentFrame$1 = {};\n        var currentExtraStackFrame = null;\n        function setExtraStackFrame(stack) {\n            {\n                currentExtraStackFrame = stack;\n            }\n        }\n        {\n            ReactDebugCurrentFrame$1.setExtraStackFrame = function(stack) {\n                {\n                    currentExtraStackFrame = stack;\n                }\n            }; // Stack implementation injected by the current renderer.\n            ReactDebugCurrentFrame$1.getCurrentStack = null;\n            ReactDebugCurrentFrame$1.getStackAddendum = function() {\n                var stack = \"\"; // Add an extra top frame while an element is being validated\n                if (currentExtraStackFrame) {\n                    stack += currentExtraStackFrame;\n                } // Delegate to the injected renderer-specific implementation\n                var impl = ReactDebugCurrentFrame$1.getCurrentStack;\n                if (impl) {\n                    stack += impl() || \"\";\n                }\n                return stack;\n            };\n        }\n        // -----------------------------------------------------------------------------\n        var enableScopeAPI = false; // Experimental Create Event Handle API.\n        var enableCacheElement = false;\n        var enableTransitionTracing = false; // No known bugs, but needs performance testing\n        var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n        // stuff. Intended to enable React core members to more easily debug scheduling\n        // issues in DEV builds.\n        var enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n        var ContextRegistry$1 = {};\n        var ReactSharedInternals = {\n            ReactCurrentDispatcher: ReactCurrentDispatcher$1,\n            ReactCurrentCache: ReactCurrentCache,\n            ReactCurrentBatchConfig: ReactCurrentBatchConfig,\n            ReactCurrentOwner: ReactCurrentOwner\n        };\n        {\n            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame$1;\n            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;\n        }\n        {\n            ReactSharedInternals.ContextRegistry = ContextRegistry$1;\n        }\n        // by calls to these methods by a Babel plugin.\n        //\n        // In PROD (or in packages without access to React internals),\n        // they are left as they are instead.\n        function warn(format) {\n            {\n                {\n                    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                        args[_key - 1] = arguments[_key];\n                    }\n                    printWarning(\"warn\", format, args);\n                }\n            }\n        }\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        var didWarnStateUpdateForUnmountedComponent = {};\n        function warnNoop(publicInstance, callerName) {\n            {\n                var _constructor = publicInstance.constructor;\n                var componentName = _constructor && (_constructor.displayName || _constructor.name) || \"ReactClass\";\n                var warningKey = componentName + \".\" + callerName;\n                if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n                    return;\n                }\n                error(\"Can't call %s on a component that is not yet mounted. \" + \"This is a no-op, but it might indicate a bug in your application. \" + \"Instead, assign to `this.state` directly or define a `state = {};` \" + \"class property with the desired state in the %s component.\", callerName, componentName);\n                didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n            }\n        }\n        /**\n * This is the abstract API for an update queue.\n */ var ReactNoopUpdateQueue = {\n            /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */ isMounted: function(publicInstance) {\n                return false;\n            },\n            /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */ enqueueForceUpdate: function(publicInstance, callback, callerName) {\n                warnNoop(publicInstance, \"forceUpdate\");\n            },\n            /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */ enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {\n                warnNoop(publicInstance, \"replaceState\");\n            },\n            /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */ enqueueSetState: function(publicInstance, partialState, callback, callerName) {\n                warnNoop(publicInstance, \"setState\");\n            }\n        };\n        var assign = Object.assign;\n        var emptyObject = {};\n        {\n            Object.freeze(emptyObject);\n        }\n        /**\n * Base class helpers for the updating state of a component.\n */ function Component(props, context, updater) {\n            this.props = props;\n            this.context = context; // If a component has string refs, we will assign a different object later.\n            this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n            // renderer.\n            this.updater = updater || ReactNoopUpdateQueue;\n        }\n        Component.prototype.isReactComponent = {};\n        /**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */ Component.prototype.setState = function(partialState, callback) {\n            if (typeof partialState !== \"object\" && typeof partialState !== \"function\" && partialState != null) {\n                throw new Error(\"setState(...): takes an object of state variables to update or a \" + \"function which returns an object of state variables.\");\n            }\n            this.updater.enqueueSetState(this, partialState, callback, \"setState\");\n        };\n        /**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */ Component.prototype.forceUpdate = function(callback) {\n            this.updater.enqueueForceUpdate(this, callback, \"forceUpdate\");\n        };\n        /**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */ {\n            var deprecatedAPIs = {\n                isMounted: [\n                    \"isMounted\",\n                    \"Instead, make sure to clean up subscriptions and pending requests in \" + \"componentWillUnmount to prevent memory leaks.\"\n                ],\n                replaceState: [\n                    \"replaceState\",\n                    \"Refactor your code to use setState instead (see \" + \"https://github.com/facebook/react/issues/3236).\"\n                ]\n            };\n            var defineDeprecationWarning = function(methodName, info) {\n                Object.defineProperty(Component.prototype, methodName, {\n                    get: function() {\n                        warn(\"%s(...) is deprecated in plain JavaScript React classes. %s\", info[0], info[1]);\n                        return undefined;\n                    }\n                });\n            };\n            for(var fnName in deprecatedAPIs){\n                if (deprecatedAPIs.hasOwnProperty(fnName)) {\n                    defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n                }\n            }\n        }\n        function ComponentDummy() {}\n        ComponentDummy.prototype = Component.prototype;\n        /**\n * Convenience component with default shallow equality check for sCU.\n */ function PureComponent(props, context, updater) {\n            this.props = props;\n            this.context = context; // If a component has string refs, we will assign a different object later.\n            this.refs = emptyObject;\n            this.updater = updater || ReactNoopUpdateQueue;\n        }\n        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\n        pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n        assign(pureComponentPrototype, Component.prototype);\n        pureComponentPrototype.isPureReactComponent = true;\n        // an immutable object with a single mutable value\n        function createRef() {\n            var refObject = {\n                current: null\n            };\n            {\n                Object.seal(refObject);\n            }\n            return refObject;\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkKeyStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided key is an unsupported type %s.\" + \" This value must be coerced to a string before before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            {\n                if (typeof type.tag === \"number\") {\n                    error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                }\n            }\n            if (typeof type === \"function\") {\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                    case REACT_SERVER_CONTEXT_TYPE:\n                        {\n                            var context2 = type;\n                            return (context2.displayName || context2._globalName) + \".Provider\";\n                        }\n                }\n            }\n            return null;\n        }\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var RESERVED_PROPS = {\n            key: true,\n            ref: true,\n            __self: true,\n            __source: true\n        };\n        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;\n        {\n            didWarnAboutStringRefs = {};\n        }\n        function hasValidRef(config) {\n            {\n                if (hasOwnProperty.call(config, \"ref\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"ref\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.ref !== undefined;\n        }\n        function hasValidKey(config) {\n            {\n                if (hasOwnProperty.call(config, \"key\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.key !== undefined;\n        }\n        function defineKeyPropWarningGetter(props, displayName) {\n            var warnAboutAccessingKey = function() {\n                {\n                    if (!specialPropKeyWarningShown) {\n                        specialPropKeyWarningShown = true;\n                        error(\"%s: `key` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                }\n            };\n            warnAboutAccessingKey.isReactWarning = true;\n            Object.defineProperty(props, \"key\", {\n                get: warnAboutAccessingKey,\n                configurable: true\n            });\n        }\n        function defineRefPropWarningGetter(props, displayName) {\n            var warnAboutAccessingRef = function() {\n                {\n                    if (!specialPropRefWarningShown) {\n                        specialPropRefWarningShown = true;\n                        error(\"%s: `ref` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                }\n            };\n            warnAboutAccessingRef.isReactWarning = true;\n            Object.defineProperty(props, \"ref\", {\n                get: warnAboutAccessingRef,\n                configurable: true\n            });\n        }\n        function warnIfStringRefCannotBeAutoConverted(config) {\n            {\n                if (typeof config.ref === \"string\" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {\n                    var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n                    if (!didWarnAboutStringRefs[componentName]) {\n                        error('Component \"%s\" contains the string ref \"%s\". ' + \"Support for string refs will be removed in a future major release. \" + \"This case cannot be automatically converted to an arrow function. \" + \"We ask you to manually fix this case by using useRef() or createRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\", componentName, config.ref);\n                        didWarnAboutStringRefs[componentName] = true;\n                    }\n                }\n            }\n        }\n        /**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */ function ReactElement(type, key, ref, self, source, owner, props) {\n            var element = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: REACT_ELEMENT_TYPE,\n                // Built-in properties that belong on the element\n                type: type,\n                key: key,\n                ref: ref,\n                props: props,\n                // Record the component responsible for creating this element.\n                _owner: owner\n            };\n            {\n                // The validation flag is currently mutative. We put it on\n                // an external backing store so that we can freeze the whole object.\n                // This can be replaced with a WeakMap once they are implemented in\n                // commonly used development environments.\n                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n                // the validation flag non-enumerable (where possible, which should\n                // include every environment we run tests in), so the test framework\n                // ignores it.\n                Object.defineProperty(element._store, \"validated\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: true,\n                    value: false\n                }); // self and source are DEV only properties.\n                Object.defineProperty(element, \"_self\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: self\n                }); // Two elements created in two different places should be considered\n                // equal for testing purposes and therefore we hide it from enumeration.\n                Object.defineProperty(element, \"_source\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: source\n                });\n                if (Object.freeze) {\n                    Object.freeze(element.props);\n                    Object.freeze(element);\n                }\n            }\n            return element;\n        }\n        /**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */ function createElement$1(type, config, children) {\n            var propName; // Reserved names are extracted\n            var props = {};\n            var key = null;\n            var ref = null;\n            var self = null;\n            var source = null;\n            if (config != null) {\n                if (hasValidRef(config)) {\n                    ref = config.ref;\n                    {\n                        warnIfStringRefCannotBeAutoConverted(config);\n                    }\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                }\n                self = config.__self === undefined ? null : config.__self;\n                source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        props[propName] = config[propName];\n                    }\n                }\n            } // Children can be more than one argument, and those are transferred onto\n            // the newly allocated props object.\n            var childrenLength = arguments.length - 2;\n            if (childrenLength === 1) {\n                props.children = children;\n            } else if (childrenLength > 1) {\n                var childArray = Array(childrenLength);\n                for(var i = 0; i < childrenLength; i++){\n                    childArray[i] = arguments[i + 2];\n                }\n                {\n                    if (Object.freeze) {\n                        Object.freeze(childArray);\n                    }\n                }\n                props.children = childArray;\n            } // Resolve default props\n            if (type && type.defaultProps) {\n                var defaultProps = type.defaultProps;\n                for(propName in defaultProps){\n                    if (props[propName] === undefined) {\n                        props[propName] = defaultProps[propName];\n                    }\n                }\n            }\n            {\n                if (key || ref) {\n                    var displayName = typeof type === \"function\" ? type.displayName || type.name || \"Unknown\" : type;\n                    if (key) {\n                        defineKeyPropWarningGetter(props, displayName);\n                    }\n                    if (ref) {\n                        defineRefPropWarningGetter(props, displayName);\n                    }\n                }\n            }\n            return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n        }\n        function cloneAndReplaceKey(oldElement, newKey) {\n            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n            return newElement;\n        }\n        /**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */ function cloneElement$1(element, config, children) {\n            if (element === null || element === undefined) {\n                throw new Error(\"React.cloneElement(...): The argument must be a React element, but you passed \" + element + \".\");\n            }\n            var propName; // Original props are copied\n            var props = assign({}, element.props); // Reserved names are extracted\n            var key = element.key;\n            var ref = element.ref; // Self is preserved since the owner is preserved.\n            var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n            // transpiler, and the original source is probably a better indicator of the\n            // true owner.\n            var source = element._source; // Owner will be preserved, unless ref is overridden\n            var owner = element._owner;\n            if (config != null) {\n                if (hasValidRef(config)) {\n                    // Silently steal the ref from the parent.\n                    ref = config.ref;\n                    owner = ReactCurrentOwner.current;\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                } // Remaining properties override existing props\n                var defaultProps;\n                if (element.type && element.type.defaultProps) {\n                    defaultProps = element.type.defaultProps;\n                }\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        if (config[propName] === undefined && defaultProps !== undefined) {\n                            // Resolve default props\n                            props[propName] = defaultProps[propName];\n                        } else {\n                            props[propName] = config[propName];\n                        }\n                    }\n                }\n            } // Children can be more than one argument, and those are transferred onto\n            // the newly allocated props object.\n            var childrenLength = arguments.length - 2;\n            if (childrenLength === 1) {\n                props.children = children;\n            } else if (childrenLength > 1) {\n                var childArray = Array(childrenLength);\n                for(var i = 0; i < childrenLength; i++){\n                    childArray[i] = arguments[i + 2];\n                }\n                props.children = childArray;\n            }\n            return ReactElement(element.type, key, ref, self, source, owner, props);\n        }\n        /**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */ function isValidElement(object) {\n            return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n        }\n        var SEPARATOR = \".\";\n        var SUBSEPARATOR = \":\";\n        /**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */ function escape(key) {\n            var escapeRegex = /[=:]/g;\n            var escaperLookup = {\n                \"=\": \"=0\",\n                \":\": \"=2\"\n            };\n            var escapedString = key.replace(escapeRegex, function(match) {\n                return escaperLookup[match];\n            });\n            return \"$\" + escapedString;\n        }\n        /**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */ var didWarnAboutMaps = false;\n        var userProvidedKeyEscapeRegex = /\\/+/g;\n        function escapeUserProvidedKey(text) {\n            return text.replace(userProvidedKeyEscapeRegex, \"$&/\");\n        }\n        /**\n * Generate a key string that identifies a element within a set.\n *\n * @param {*} element A element that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */ function getElementKey(element, index) {\n            // Do some typechecking here since we call this blindly. We want to ensure\n            // that we don't block potential future ES APIs.\n            if (typeof element === \"object\" && element !== null && element.key != null) {\n                // Explicit key\n                {\n                    checkKeyStringCoercion(element.key);\n                }\n                return escape(\"\" + element.key);\n            } // Implicit key determined by the index in the set\n            return index.toString(36);\n        }\n        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {\n            var type = typeof children;\n            if (type === \"undefined\" || type === \"boolean\") {\n                // All of the above are perceived as null.\n                children = null;\n            }\n            var invokeCallback = false;\n            if (children === null) {\n                invokeCallback = true;\n            } else {\n                switch(type){\n                    case \"string\":\n                    case \"number\":\n                        invokeCallback = true;\n                        break;\n                    case \"object\":\n                        switch(children.$$typeof){\n                            case REACT_ELEMENT_TYPE:\n                            case REACT_PORTAL_TYPE:\n                                invokeCallback = true;\n                        }\n                }\n            }\n            if (invokeCallback) {\n                var _child = children;\n                var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array\n                // so that it's consistent if the number of children grows:\n                var childKey = nameSoFar === \"\" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;\n                if (isArray(mappedChild)) {\n                    var escapedChildKey = \"\";\n                    if (childKey != null) {\n                        escapedChildKey = escapeUserProvidedKey(childKey) + \"/\";\n                    }\n                    mapIntoArray(mappedChild, array, escapedChildKey, \"\", function(c) {\n                        return c;\n                    });\n                } else if (mappedChild != null) {\n                    if (isValidElement(mappedChild)) {\n                        {\n                            // The `if` statement here prevents auto-disabling of the safe\n                            // coercion ESLint rule, so we must manually disable it below.\n                            // $FlowFixMe[incompatible-type] Flow incorrectly thinks React.Portal doesn't have a key\n                            if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {\n                                checkKeyStringCoercion(mappedChild.key);\n                            }\n                        }\n                        mappedChild = cloneAndReplaceKey(mappedChild, // traverseAllChildren used to do for objects as children\n                        escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey(\"\" + mappedChild.key // eslint-disable-line react-internal/safe-string-coercion\n                        ) + \"/\" : \"\") + childKey);\n                    }\n                    array.push(mappedChild);\n                }\n                return 1;\n            }\n            var child;\n            var nextName;\n            var subtreeCount = 0; // Count of children found in the current subtree.\n            var nextNamePrefix = nameSoFar === \"\" ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n            if (isArray(children)) {\n                for(var i = 0; i < children.length; i++){\n                    child = children[i];\n                    nextName = nextNamePrefix + getElementKey(child, i);\n                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n                }\n            } else {\n                var iteratorFn = getIteratorFn(children);\n                if (typeof iteratorFn === \"function\") {\n                    var iterableChildren = children;\n                    {\n                        // Warn about using Maps as children\n                        if (iteratorFn === iterableChildren.entries) {\n                            if (!didWarnAboutMaps) {\n                                warn(\"Using Maps as children is not supported. \" + \"Use an array of keyed ReactElements instead.\");\n                            }\n                            didWarnAboutMaps = true;\n                        }\n                    }\n                    var iterator = iteratorFn.call(iterableChildren);\n                    var step;\n                    var ii = 0; // $FlowFixMe[incompatible-use] `iteratorFn` might return null according to typing.\n                    while(!(step = iterator.next()).done){\n                        child = step.value;\n                        nextName = nextNamePrefix + getElementKey(child, ii++);\n                        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n                    }\n                } else if (type === \"object\") {\n                    // eslint-disable-next-line react-internal/safe-string-coercion\n                    var childrenString = String(children);\n                    throw new Error(\"Objects are not valid as a React child (found: \" + (childrenString === \"[object Object]\" ? \"object with keys {\" + Object.keys(children).join(\", \") + \"}\" : childrenString) + \"). \" + \"If you meant to render a collection of children, use an array \" + \"instead.\");\n                }\n            }\n            return subtreeCount;\n        }\n        /**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n *\n * The provided mapFunction(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */ function mapChildren(children, func, context) {\n            if (children == null) {\n                return children;\n            }\n            var result = [];\n            var count = 0;\n            mapIntoArray(children, result, \"\", \"\", function(child) {\n                return func.call(context, child, count++);\n            });\n            return result;\n        }\n        /**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrencount\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */ function countChildren(children) {\n            var n = 0;\n            mapChildren(children, function() {\n                n++; // Don't return anything\n            });\n            return n;\n        }\n        /**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */ function forEachChildren(children, forEachFunc, forEachContext) {\n            mapChildren(children, function() {\n                forEachFunc.apply(this, arguments); // Don't return anything.\n            }, forEachContext);\n        }\n        /**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n */ function toArray(children) {\n            return mapChildren(children, function(child) {\n                return child;\n            }) || [];\n        }\n        /**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */ function onlyChild(children) {\n            if (!isValidElement(children)) {\n                throw new Error(\"React.Children.only expected to receive a single React element child.\");\n            }\n            return children;\n        }\n        function createContext(defaultValue) {\n            // TODO: Second argument used to be an optional `calculateChangedBits`\n            // function. Warn to reserve for future use?\n            var context = {\n                $$typeof: REACT_CONTEXT_TYPE,\n                // As a workaround to support multiple concurrent renderers, we categorize\n                // some renderers as primary and others as secondary. We only expect\n                // there to be two concurrent renderers at most: React Native (primary) and\n                // Fabric (secondary); React DOM (primary) and React ART (secondary).\n                // Secondary renderers store their context values on separate fields.\n                _currentValue: defaultValue,\n                _currentValue2: defaultValue,\n                // Used to track how many concurrent renderers this context currently\n                // supports within in a single renderer. Such as parallel server rendering.\n                _threadCount: 0,\n                // These are circular\n                Provider: null,\n                Consumer: null,\n                // Add these to use same hidden class in VM as ServerContext\n                _defaultValue: null,\n                _globalName: null\n            };\n            context.Provider = {\n                $$typeof: REACT_PROVIDER_TYPE,\n                _context: context\n            };\n            var hasWarnedAboutUsingNestedContextConsumers = false;\n            var hasWarnedAboutUsingConsumerProvider = false;\n            var hasWarnedAboutDisplayNameOnConsumer = false;\n            {\n                // A separate object, but proxies back to the original context object for\n                // backwards compatibility. It has a different $$typeof, so we can properly\n                // warn for the incorrect usage of Context as a Consumer.\n                var Consumer = {\n                    $$typeof: REACT_CONTEXT_TYPE,\n                    _context: context\n                }; // $FlowFixMe[prop-missing]: Flow complains about not setting a value, which is intentional here\n                Object.defineProperties(Consumer, {\n                    Provider: {\n                        get: function() {\n                            if (!hasWarnedAboutUsingConsumerProvider) {\n                                hasWarnedAboutUsingConsumerProvider = true;\n                                error(\"Rendering <Context.Consumer.Provider> is not supported and will be removed in \" + \"a future major release. Did you mean to render <Context.Provider> instead?\");\n                            }\n                            return context.Provider;\n                        },\n                        set: function(_Provider) {\n                            context.Provider = _Provider;\n                        }\n                    },\n                    _currentValue: {\n                        get: function() {\n                            return context._currentValue;\n                        },\n                        set: function(_currentValue) {\n                            context._currentValue = _currentValue;\n                        }\n                    },\n                    _currentValue2: {\n                        get: function() {\n                            return context._currentValue2;\n                        },\n                        set: function(_currentValue2) {\n                            context._currentValue2 = _currentValue2;\n                        }\n                    },\n                    _threadCount: {\n                        get: function() {\n                            return context._threadCount;\n                        },\n                        set: function(_threadCount) {\n                            context._threadCount = _threadCount;\n                        }\n                    },\n                    Consumer: {\n                        get: function() {\n                            if (!hasWarnedAboutUsingNestedContextConsumers) {\n                                hasWarnedAboutUsingNestedContextConsumers = true;\n                                error(\"Rendering <Context.Consumer.Consumer> is not supported and will be removed in \" + \"a future major release. Did you mean to render <Context.Consumer> instead?\");\n                            }\n                            return context.Consumer;\n                        }\n                    },\n                    displayName: {\n                        get: function() {\n                            return context.displayName;\n                        },\n                        set: function(displayName) {\n                            if (!hasWarnedAboutDisplayNameOnConsumer) {\n                                warn(\"Setting `displayName` on Context.Consumer has no effect. \" + \"You should set it directly on the context with Context.displayName = '%s'.\", displayName);\n                                hasWarnedAboutDisplayNameOnConsumer = true;\n                            }\n                        }\n                    }\n                }); // $FlowFixMe[prop-missing]: Flow complains about missing properties because it doesn't understand defineProperty\n                context.Consumer = Consumer;\n            }\n            {\n                context._currentRenderer = null;\n                context._currentRenderer2 = null;\n            }\n            return context;\n        }\n        var Uninitialized = -1;\n        var Pending = 0;\n        var Resolved = 1;\n        var Rejected = 2;\n        function lazyInitializer(payload) {\n            if (payload._status === Uninitialized) {\n                var ctor = payload._result;\n                var thenable = ctor(); // Transition to the next state.\n                // This might throw either because it's missing or throws. If so, we treat it\n                // as still uninitialized and try again next time. Which is the same as what\n                // happens if the ctor or any wrappers processing the ctor throws. This might\n                // end up fixing it if the resolution was a concurrency bug.\n                thenable.then(function(moduleObject) {\n                    if (payload._status === Pending || payload._status === Uninitialized) {\n                        // Transition to the next state.\n                        var resolved = payload;\n                        resolved._status = Resolved;\n                        resolved._result = moduleObject;\n                    }\n                }, function(error) {\n                    if (payload._status === Pending || payload._status === Uninitialized) {\n                        // Transition to the next state.\n                        var rejected = payload;\n                        rejected._status = Rejected;\n                        rejected._result = error;\n                    }\n                });\n                if (payload._status === Uninitialized) {\n                    // In case, we're still uninitialized, then we're waiting for the thenable\n                    // to resolve. Set it as pending in the meantime.\n                    var pending = payload;\n                    pending._status = Pending;\n                    pending._result = thenable;\n                }\n            }\n            if (payload._status === Resolved) {\n                var moduleObject = payload._result;\n                {\n                    if (moduleObject === undefined) {\n                        error(\"lazy: Expected the result of a dynamic imp\" + \"ort() call. \" + \"Instead received: %s\\n\\nYour code should look like: \\n  \" + // Break up imports to avoid accidentally parsing them as dependencies.\n                        \"const MyComponent = lazy(() => imp\" + \"ort('./MyComponent'))\\n\\n\" + \"Did you accidentally put curly braces around the import?\", moduleObject);\n                    }\n                }\n                {\n                    if (!(\"default\" in moduleObject)) {\n                        error(\"lazy: Expected the result of a dynamic imp\" + \"ort() call. \" + \"Instead received: %s\\n\\nYour code should look like: \\n  \" + // Break up imports to avoid accidentally parsing them as dependencies.\n                        \"const MyComponent = lazy(() => imp\" + \"ort('./MyComponent'))\", moduleObject);\n                    }\n                }\n                return moduleObject.default;\n            } else {\n                throw payload._result;\n            }\n        }\n        function lazy(ctor) {\n            var payload = {\n                // We use these fields to store the result.\n                _status: Uninitialized,\n                _result: ctor\n            };\n            var lazyType = {\n                $$typeof: REACT_LAZY_TYPE,\n                _payload: payload,\n                _init: lazyInitializer\n            };\n            {\n                // In production, this would just set it on the object.\n                var defaultProps;\n                var propTypes; // $FlowFixMe[prop-missing]\n                Object.defineProperties(lazyType, {\n                    defaultProps: {\n                        configurable: true,\n                        get: function() {\n                            return defaultProps;\n                        },\n                        // $FlowFixMe[missing-local-annot]\n                        set: function(newDefaultProps) {\n                            error(\"React.lazy(...): It is not supported to assign `defaultProps` to \" + \"a lazy component import. Either specify them where the component \" + \"is defined, or create a wrapping component around it.\");\n                            defaultProps = newDefaultProps; // Match production behavior more closely:\n                            // $FlowFixMe[prop-missing]\n                            Object.defineProperty(lazyType, \"defaultProps\", {\n                                enumerable: true\n                            });\n                        }\n                    },\n                    propTypes: {\n                        configurable: true,\n                        get: function() {\n                            return propTypes;\n                        },\n                        // $FlowFixMe[missing-local-annot]\n                        set: function(newPropTypes) {\n                            error(\"React.lazy(...): It is not supported to assign `propTypes` to \" + \"a lazy component import. Either specify them where the component \" + \"is defined, or create a wrapping component around it.\");\n                            propTypes = newPropTypes; // Match production behavior more closely:\n                            // $FlowFixMe[prop-missing]\n                            Object.defineProperty(lazyType, \"propTypes\", {\n                                enumerable: true\n                            });\n                        }\n                    }\n                });\n            }\n            return lazyType;\n        }\n        function forwardRef(render) {\n            {\n                if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n                    error(\"forwardRef requires a render function but received a `memo` \" + \"component. Instead of forwardRef(memo(...)), use \" + \"memo(forwardRef(...)).\");\n                } else if (typeof render !== \"function\") {\n                    error(\"forwardRef requires a render function but was given %s.\", render === null ? \"null\" : typeof render);\n                } else {\n                    if (render.length !== 0 && render.length !== 2) {\n                        error(\"forwardRef render functions accept exactly two parameters: props and ref. %s\", render.length === 1 ? \"Did you forget to use the ref parameter?\" : \"Any additional parameter will be undefined.\");\n                    }\n                }\n                if (render != null) {\n                    if (render.defaultProps != null || render.propTypes != null) {\n                        error(\"forwardRef render functions do not support propTypes or defaultProps. \" + \"Did you accidentally pass a React component?\");\n                    }\n                }\n            }\n            var elementType = {\n                $$typeof: REACT_FORWARD_REF_TYPE,\n                render: render\n            };\n            {\n                var ownName;\n                Object.defineProperty(elementType, \"displayName\", {\n                    enumerable: false,\n                    configurable: true,\n                    get: function() {\n                        return ownName;\n                    },\n                    set: function(name) {\n                        ownName = name; // The inner component shouldn't inherit this display name in most cases,\n                        // because the component may be used elsewhere.\n                        // But it's nice for anonymous functions to inherit the name,\n                        // so that our component-stack generation logic will display their frames.\n                        // An anonymous function generally suggests a pattern like:\n                        //   React.forwardRef((props, ref) => {...});\n                        // This kind of inner function is not used elsewhere so the side effect is okay.\n                        if (!render.name && !render.displayName) {\n                            render.displayName = name;\n                        }\n                    }\n                });\n            }\n            return elementType;\n        }\n        var REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\");\n        function isValidElementType(type) {\n            if (typeof type === \"string\" || typeof type === \"function\") {\n                return true;\n            } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {\n                return true;\n            }\n            if (typeof type === \"object\" && type !== null) {\n                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n                // types supported by any Flight configuration anywhere since\n                // we don't know which Flight build this will end up being used\n                // with.\n                type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function memo(type, compare) {\n            {\n                if (!isValidElementType(type)) {\n                    error(\"memo: The first argument must be a component. Instead \" + \"received: %s\", type === null ? \"null\" : typeof type);\n                }\n            }\n            var elementType = {\n                $$typeof: REACT_MEMO_TYPE,\n                type: type,\n                compare: compare === undefined ? null : compare\n            };\n            {\n                var ownName;\n                Object.defineProperty(elementType, \"displayName\", {\n                    enumerable: false,\n                    configurable: true,\n                    get: function() {\n                        return ownName;\n                    },\n                    set: function(name) {\n                        ownName = name; // The inner component shouldn't inherit this display name in most cases,\n                        // because the component may be used elsewhere.\n                        // But it's nice for anonymous functions to inherit the name,\n                        // so that our component-stack generation logic will display their frames.\n                        // An anonymous function generally suggests a pattern like:\n                        //   React.memo((props) => {...});\n                        // This kind of inner function is not used elsewhere so the side effect is okay.\n                        if (!type.name && !type.displayName) {\n                            type.displayName = name;\n                        }\n                    }\n                });\n            }\n            return elementType;\n        }\n        var UNTERMINATED = 0;\n        var TERMINATED = 1;\n        var ERRORED = 2;\n        function createCacheRoot() {\n            return new WeakMap();\n        }\n        function createCacheNode() {\n            return {\n                s: UNTERMINATED,\n                // status, represents whether the cached computation returned a value or threw an error\n                v: undefined,\n                // value, either the cached result or an error, depending on s\n                o: null,\n                // object cache, a WeakMap where non-primitive arguments are stored\n                p: null // primitive cache, a regular Map where primitive arguments are stored.\n            };\n        }\n        function cache(fn) {\n            return function() {\n                var dispatcher = ReactCurrentCache.current;\n                if (!dispatcher) {\n                    // If there is no dispatcher, then we treat this as not being cached.\n                    // $FlowFixMe[incompatible-call]: We don't want to use rest arguments since we transpile the code.\n                    return fn.apply(null, arguments);\n                }\n                var fnMap = dispatcher.getCacheForType(createCacheRoot);\n                var fnNode = fnMap.get(fn);\n                var cacheNode;\n                if (fnNode === undefined) {\n                    cacheNode = createCacheNode();\n                    fnMap.set(fn, cacheNode);\n                } else {\n                    cacheNode = fnNode;\n                }\n                for(var i = 0, l = arguments.length; i < l; i++){\n                    var arg = arguments[i];\n                    if (typeof arg === \"function\" || typeof arg === \"object\" && arg !== null) {\n                        // Objects go into a WeakMap\n                        var objectCache = cacheNode.o;\n                        if (objectCache === null) {\n                            cacheNode.o = objectCache = new WeakMap();\n                        }\n                        var objectNode = objectCache.get(arg);\n                        if (objectNode === undefined) {\n                            cacheNode = createCacheNode();\n                            objectCache.set(arg, cacheNode);\n                        } else {\n                            cacheNode = objectNode;\n                        }\n                    } else {\n                        // Primitives go into a regular Map\n                        var primitiveCache = cacheNode.p;\n                        if (primitiveCache === null) {\n                            cacheNode.p = primitiveCache = new Map();\n                        }\n                        var primitiveNode = primitiveCache.get(arg);\n                        if (primitiveNode === undefined) {\n                            cacheNode = createCacheNode();\n                            primitiveCache.set(arg, cacheNode);\n                        } else {\n                            cacheNode = primitiveNode;\n                        }\n                    }\n                }\n                if (cacheNode.s === TERMINATED) {\n                    return cacheNode.v;\n                }\n                if (cacheNode.s === ERRORED) {\n                    throw cacheNode.v;\n                }\n                try {\n                    // $FlowFixMe[incompatible-call]: We don't want to use rest arguments since we transpile the code.\n                    var result = fn.apply(null, arguments);\n                    var terminatedNode = cacheNode;\n                    terminatedNode.s = TERMINATED;\n                    terminatedNode.v = result;\n                    return result;\n                } catch (error) {\n                    // We store the first error that's thrown and rethrow it.\n                    var erroredNode = cacheNode;\n                    erroredNode.s = ERRORED;\n                    erroredNode.v = error;\n                    throw error;\n                }\n            };\n        }\n        function resolveDispatcher() {\n            var dispatcher = ReactCurrentDispatcher$1.current;\n            {\n                if (dispatcher === null) {\n                    error(\"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for\" + \" one of the following reasons:\\n\" + \"1. You might have mismatching versions of React and the renderer (such as React DOM)\\n\" + \"2. You might be breaking the Rules of Hooks\\n\" + \"3. You might have more than one copy of React in the same app\\n\" + \"See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\");\n                }\n            }\n            // intentionally don't throw our own error because this is in a hot path.\n            // Also helps ensure this is inlined.\n            return dispatcher;\n        }\n        function useContext(Context) {\n            var dispatcher = resolveDispatcher();\n            {\n                // TODO: add a more generic warning for invalid values.\n                if (Context._context !== undefined) {\n                    var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs\n                    // and nobody should be using this in existing code.\n                    if (realContext.Consumer === Context) {\n                        error(\"Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be \" + \"removed in a future major release. Did you mean to call useContext(Context) instead?\");\n                    } else if (realContext.Provider === Context) {\n                        error(\"Calling useContext(Context.Provider) is not supported. \" + \"Did you mean to call useContext(Context) instead?\");\n                    }\n                }\n            }\n            return dispatcher.useContext(Context);\n        }\n        function useState(initialState) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useState(initialState);\n        }\n        function useReducer(reducer, initialArg, init) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useReducer(reducer, initialArg, init);\n        }\n        function useRef(initialValue) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useRef(initialValue);\n        }\n        function useEffect(create, deps) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useEffect(create, deps);\n        }\n        function useInsertionEffect(create, deps) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useInsertionEffect(create, deps);\n        }\n        function useLayoutEffect(create, deps) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useLayoutEffect(create, deps);\n        }\n        function useCallback(callback, deps) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useCallback(callback, deps);\n        }\n        function useMemo(create, deps) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useMemo(create, deps);\n        }\n        function useImperativeHandle(ref, create, deps) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useImperativeHandle(ref, create, deps);\n        }\n        function useDebugValue(value, formatterFn) {\n            {\n                var dispatcher = resolveDispatcher();\n                return dispatcher.useDebugValue(value, formatterFn);\n            }\n        }\n        function useTransition() {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useTransition();\n        }\n        function useDeferredValue(value) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useDeferredValue(value);\n        }\n        function useId() {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useId();\n        }\n        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n        }\n        function useCacheRefresh() {\n            var dispatcher = resolveDispatcher(); // $FlowFixMe[not-a-function] This is unstable, thus optional\n            return dispatcher.useCacheRefresh();\n        }\n        function use(usable) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.use(usable);\n        }\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            var control;\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher.current = null;\n                disableLogs();\n            }\n            try {\n                // This should throw.\n                if (construct) {\n                    // Something should be setting the props in the constructor.\n                    var Fake = function() {\n                        throw Error();\n                    }; // $FlowFixMe[prop-missing]\n                    Object.defineProperty(Fake.prototype, \"props\", {\n                        set: function() {\n                            // We use a throwing setter instead of frozen or non-writable props\n                            // because that won't throw in a non-strict mode function.\n                            throw Error();\n                        }\n                    });\n                    if (typeof Reflect === \"object\" && Reflect.construct) {\n                        // We construct a different control for this case to include any extra\n                        // frames added by the construct call.\n                        try {\n                            Reflect.construct(Fake, []);\n                        } catch (x) {\n                            control = x;\n                        }\n                        Reflect.construct(fn, [], Fake);\n                    } else {\n                        try {\n                            Fake.call();\n                        } catch (x) {\n                            control = x;\n                        } // $FlowFixMe[prop-missing] found when upgrading Flow\n                        fn.call(Fake.prototype);\n                    }\n                } else {\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        control = x;\n                    } // TODO(luna): This will currently only throw if the function component\n                    // tries to access React/ReactDOM/props. We should probably make this throw\n                    // in simple components too\n                    var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                    // component, which we don't yet support. Attach a noop catch handler to\n                    // silence the error.\n                    // TODO: Implement component stacks for async client components?\n                    if (maybePromise && typeof maybePromise.catch === \"function\") {\n                        maybePromise.catch(function() {});\n                    }\n                }\n            } catch (sample) {\n                // This is inlined manually because closure doesn't do it for us.\n                if (sample && control && typeof sample.stack === \"string\") {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sample.stack.split(\"\\n\");\n                    var controlLines = control.stack.split(\"\\n\");\n                    var s = sampleLines.length - 1;\n                    var c = controlLines.length - 1;\n                    while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                        // We expect at least one stack frame to be shared.\n                        // Typically this will be the root most one. However, stack frames may be\n                        // cut off due to maximum stack limits. In this case, one maybe cut off\n                        // earlier than the other. We assume that the sample is longer or the same\n                        // and there for cut off earlier. So we should find the root most frame in\n                        // the sample somewhere in the control.\n                        c--;\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        }\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement$1(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                    }\n                }\n            }\n        }\n        var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    setExtraStackFrame(stack);\n                } else {\n                    setExtraStackFrame(null);\n                }\n            }\n        }\n        var propTypesMisspellWarningShown;\n        {\n            propTypesMisspellWarningShown = false;\n        }\n        function getDeclarationErrorAddendum() {\n            if (ReactCurrentOwner.current) {\n                var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n                if (name) {\n                    return \"\\n\\nCheck the render method of `\" + name + \"`.\";\n                }\n            }\n            return \"\";\n        }\n        function getSourceInfoErrorAddendum(source) {\n            if (source !== undefined) {\n                var fileName = source.fileName.replace(/^.*[\\\\\\/]/, \"\");\n                var lineNumber = source.lineNumber;\n                return \"\\n\\nCheck your code at \" + fileName + \":\" + lineNumber + \".\";\n            }\n            return \"\";\n        }\n        function getSourceInfoErrorAddendumForProps(elementProps) {\n            if (elementProps !== null && elementProps !== undefined) {\n                return getSourceInfoErrorAddendum(elementProps.__source);\n            }\n            return \"\";\n        }\n        /**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */ var ownerHasKeyUseWarning = {};\n        function getCurrentComponentErrorInfo(parentType) {\n            var info = getDeclarationErrorAddendum();\n            if (!info) {\n                var parentName = typeof parentType === \"string\" ? parentType : parentType.displayName || parentType.name;\n                if (parentName) {\n                    info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n                }\n            }\n            return info;\n        }\n        /**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */ function validateExplicitKey(element, parentType) {\n            if (!element._store || element._store.validated || element.key != null) {\n                return;\n            }\n            element._store.validated = true;\n            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n                return;\n            }\n            ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n            // property, it may be the creator of the child that's responsible for\n            // assigning it a key.\n            var childOwner = \"\";\n            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n                // Give the component that originally created this child.\n                childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n            }\n            {\n                setCurrentlyValidatingElement(element);\n                error('Each child in a list should have a unique \"key\" prop.' + \"%s%s See https://reactjs.org/link/warning-keys for more information.\", currentComponentErrorInfo, childOwner);\n                setCurrentlyValidatingElement(null);\n            }\n        }\n        /**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */ function validateChildKeys(node, parentType) {\n            if (typeof node !== \"object\" || !node) {\n                return;\n            }\n            if (node.$$typeof === REACT_CLIENT_REFERENCE) ;\n            else if (isArray(node)) {\n                for(var i = 0; i < node.length; i++){\n                    var child = node[i];\n                    if (isValidElement(child)) {\n                        validateExplicitKey(child, parentType);\n                    }\n                }\n            } else if (isValidElement(node)) {\n                // This element was passed in a valid location.\n                if (node._store) {\n                    node._store.validated = true;\n                }\n            } else {\n                var iteratorFn = getIteratorFn(node);\n                if (typeof iteratorFn === \"function\") {\n                    // Entry iterators used to provide implicit keys,\n                    // but now we print a separate warning for them later.\n                    if (iteratorFn !== node.entries) {\n                        var iterator = iteratorFn.call(node);\n                        var step;\n                        while(!(step = iterator.next()).done){\n                            if (isValidElement(step.value)) {\n                                validateExplicitKey(step.value, parentType);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */ function validatePropTypes(element) {\n            {\n                var type = element.type;\n                if (type === null || type === undefined || typeof type === \"string\") {\n                    return;\n                }\n                if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n                    return;\n                }\n                var propTypes;\n                if (typeof type === \"function\") {\n                    propTypes = type.propTypes;\n                } else if (typeof type === \"object\" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                type.$$typeof === REACT_MEMO_TYPE)) {\n                    propTypes = type.propTypes;\n                } else {\n                    return;\n                }\n                if (propTypes) {\n                    // Intentionally inside to avoid triggering lazy initializers:\n                    var name = getComponentNameFromType(type);\n                    checkPropTypes(propTypes, element.props, \"prop\", name, element);\n                } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n                    propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n                    var _name = getComponentNameFromType(type);\n                    error(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", _name || \"Unknown\");\n                }\n                if (typeof type.getDefaultProps === \"function\" && !type.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps is only used on classic React.createClass \" + \"definitions. Use a static property named `defaultProps` instead.\");\n                }\n            }\n        }\n        /**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */ function validateFragmentProps(fragment) {\n            {\n                var keys = Object.keys(fragment.props);\n                for(var i = 0; i < keys.length; i++){\n                    var key = keys[i];\n                    if (key !== \"children\" && key !== \"key\") {\n                        setCurrentlyValidatingElement(fragment);\n                        error(\"Invalid prop `%s` supplied to `React.Fragment`. \" + \"React.Fragment can only have `key` and `children` props.\", key);\n                        setCurrentlyValidatingElement(null);\n                        break;\n                    }\n                }\n                if (fragment.ref !== null) {\n                    setCurrentlyValidatingElement(fragment);\n                    error(\"Invalid attribute `ref` supplied to `React.Fragment`.\");\n                    setCurrentlyValidatingElement(null);\n                }\n            }\n        }\n        function createElementWithValidation(type, props, children) {\n            var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n            // succeed and there will likely be errors in render.\n            if (!validType) {\n                var info = \"\";\n                if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                    info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and named imports.\";\n                }\n                var sourceInfo = getSourceInfoErrorAddendumForProps(props);\n                if (sourceInfo) {\n                    info += sourceInfo;\n                } else {\n                    info += getDeclarationErrorAddendum();\n                }\n                var typeString;\n                if (type === null) {\n                    typeString = \"null\";\n                } else if (isArray(type)) {\n                    typeString = \"array\";\n                } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n                    typeString = \"<\" + (getComponentNameFromType(type.type) || \"Unknown\") + \" />\";\n                    info = \" Did you accidentally export a JSX literal instead of a component?\";\n                } else {\n                    typeString = typeof type;\n                }\n                {\n                    error(\"React.createElement: type is invalid -- expected a string (for \" + \"built-in components) or a class/function (for composite \" + \"components) but got: %s.%s\", typeString, info);\n                }\n            }\n            var element = createElement$1.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n            // TODO: Drop this when these are no longer allowed as the type argument.\n            if (element == null) {\n                return element;\n            } // Skip key warning if the type isn't valid since our key validation logic\n            // doesn't expect a non-string/function type and can throw confusing errors.\n            // We don't want exception behavior to differ between dev and prod.\n            // (Rendering will throw with a helpful message and as soon as the type is\n            // fixed, the key warnings will appear.)\n            if (validType) {\n                for(var i = 2; i < arguments.length; i++){\n                    validateChildKeys(arguments[i], type);\n                }\n            }\n            if (type === REACT_FRAGMENT_TYPE) {\n                validateFragmentProps(element);\n            } else {\n                validatePropTypes(element);\n            }\n            return element;\n        }\n        var didWarnAboutDeprecatedCreateFactory = false;\n        function createFactoryWithValidation(type) {\n            var validatedFactory = createElementWithValidation.bind(null, type);\n            validatedFactory.type = type;\n            {\n                if (!didWarnAboutDeprecatedCreateFactory) {\n                    didWarnAboutDeprecatedCreateFactory = true;\n                    warn(\"React.createFactory() is deprecated and will be removed in \" + \"a future major release. Consider using JSX \" + \"or use React.createElement() directly instead.\");\n                } // Legacy hook: remove it\n                Object.defineProperty(validatedFactory, \"type\", {\n                    enumerable: false,\n                    get: function() {\n                        warn(\"Factory.type is deprecated. Access the class directly \" + \"before passing it to createFactory.\");\n                        Object.defineProperty(this, \"type\", {\n                            value: type\n                        });\n                        return type;\n                    }\n                });\n            }\n            return validatedFactory;\n        }\n        function cloneElementWithValidation(element, props, children) {\n            var newElement = cloneElement$1.apply(this, arguments);\n            for(var i = 2; i < arguments.length; i++){\n                validateChildKeys(arguments[i], newElement.type);\n            }\n            validatePropTypes(newElement);\n            return newElement;\n        }\n        var ContextRegistry = ReactSharedInternals.ContextRegistry;\n        function createServerContext(globalName, defaultValue) {\n            var wasDefined = true;\n            if (!ContextRegistry[globalName]) {\n                wasDefined = false;\n                var _context = {\n                    $$typeof: REACT_SERVER_CONTEXT_TYPE,\n                    // As a workaround to support multiple concurrent renderers, we categorize\n                    // some renderers as primary and others as secondary. We only expect\n                    // there to be two concurrent renderers at most: React Native (primary) and\n                    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n                    // Secondary renderers store their context values on separate fields.\n                    _currentValue: defaultValue,\n                    _currentValue2: defaultValue,\n                    _defaultValue: defaultValue,\n                    // Used to track how many concurrent renderers this context currently\n                    // supports within in a single renderer. Such as parallel server rendering.\n                    _threadCount: 0,\n                    // These are circular\n                    Provider: null,\n                    Consumer: null,\n                    _globalName: globalName\n                };\n                _context.Provider = {\n                    $$typeof: REACT_PROVIDER_TYPE,\n                    _context: _context\n                };\n                {\n                    var hasWarnedAboutUsingConsumer;\n                    _context._currentRenderer = null;\n                    _context._currentRenderer2 = null;\n                    Object.defineProperties(_context, {\n                        Consumer: {\n                            get: function() {\n                                if (!hasWarnedAboutUsingConsumer) {\n                                    error(\"Consumer pattern is not supported by ReactServerContext\");\n                                    hasWarnedAboutUsingConsumer = true;\n                                }\n                                return null;\n                            }\n                        }\n                    });\n                }\n                ContextRegistry[globalName] = _context;\n            }\n            var context = ContextRegistry[globalName];\n            if (context._defaultValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {\n                context._defaultValue = defaultValue;\n                if (context._currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {\n                    context._currentValue = defaultValue;\n                }\n                if (context._currentValue2 === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {\n                    context._currentValue2 = defaultValue;\n                }\n            } else if (wasDefined) {\n                throw new Error(\"ServerContext: \" + globalName + \" already defined\");\n            }\n            return context;\n        }\n        function startTransition(scope, options) {\n            var prevTransition = ReactCurrentBatchConfig.transition;\n            ReactCurrentBatchConfig.transition = {};\n            var currentTransition = ReactCurrentBatchConfig.transition;\n            {\n                ReactCurrentBatchConfig.transition._updatedFibers = new Set();\n            }\n            try {\n                scope();\n            } finally{\n                ReactCurrentBatchConfig.transition = prevTransition;\n                {\n                    if (prevTransition === null && currentTransition._updatedFibers) {\n                        var updatedFibersCount = currentTransition._updatedFibers.size;\n                        currentTransition._updatedFibers.clear();\n                        if (updatedFibersCount > 10) {\n                            warn(\"Detected a large number of updates inside startTransition. \" + \"If this is due to a subscription please re-write it to use React provided hooks. \" + \"Otherwise concurrent mode guarantees are off the table.\");\n                        }\n                    }\n                }\n            }\n        }\n        var didWarnAboutMessageChannel = false;\n        var enqueueTaskImpl = null;\n        function enqueueTask(task) {\n            if (enqueueTaskImpl === null) {\n                try {\n                    // read require off the module object to get around the bundlers.\n                    // we don't want them to detect a require and bundle a Node polyfill.\n                    var requireString = (\"require\" + Math.random()).slice(0, 7);\n                    var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's\n                    // version of setImmediate, bypassing fake timers if any.\n                    enqueueTaskImpl = nodeRequire.call(module, \"timers\").setImmediate;\n                } catch (_err) {\n                    // we're in a browser\n                    // we can't use regular timers because they may still be faked\n                    // so we try MessageChannel+postMessage instead\n                    enqueueTaskImpl = function(callback) {\n                        {\n                            if (didWarnAboutMessageChannel === false) {\n                                didWarnAboutMessageChannel = true;\n                                if (typeof MessageChannel === \"undefined\") {\n                                    error(\"This browser does not have a MessageChannel implementation, \" + \"so enqueuing tasks via await act(async () => ...) will fail. \" + \"Please file an issue at https://github.com/facebook/react/issues \" + \"if you encounter this warning.\");\n                                }\n                            }\n                        }\n                        var channel = new MessageChannel();\n                        channel.port1.onmessage = callback;\n                        channel.port2.postMessage(undefined);\n                    };\n                }\n            }\n            return enqueueTaskImpl(task);\n        }\n        // number of `act` scopes on the stack.\n        var actScopeDepth = 0; // We only warn the first time you neglect to await an async `act` scope.\n        var didWarnNoAwaitAct = false;\n        function act(callback) {\n            {\n                // When ReactCurrentActQueue.current is not null, it signals to React that\n                // we're currently inside an `act` scope. React will push all its tasks to\n                // this queue instead of scheduling them with platform APIs.\n                //\n                // We set this to an empty array when we first enter an `act` scope, and\n                // only unset it once we've left the outermost `act` scope — remember that\n                // `act` calls can be nested.\n                //\n                // If we're already inside an `act` scope, reuse the existing queue.\n                var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;\n                var prevActQueue = ReactCurrentActQueue.current;\n                var prevActScopeDepth = actScopeDepth;\n                actScopeDepth++;\n                var queue = ReactCurrentActQueue.current = prevActQueue !== null ? prevActQueue : []; // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only\n                // set to `true` while the given callback is executed, not for updates\n                // triggered during an async event, because this is how the legacy\n                // implementation of `act` behaved.\n                ReactCurrentActQueue.isBatchingLegacy = true;\n                var result; // This tracks whether the `act` call is awaited. In certain cases, not\n                // awaiting it is a mistake, so we will detect that and warn.\n                var didAwaitActCall = false;\n                try {\n                    // Reset this to `false` right before entering the React work loop. The\n                    // only place we ever read this fields is just below, right after running\n                    // the callback. So we don't need to reset after the callback runs.\n                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;\n                    result = callback();\n                    var didScheduleLegacyUpdate = ReactCurrentActQueue.didScheduleLegacyUpdate; // Replicate behavior of original `act` implementation in legacy mode,\n                    // which flushed updates immediately after the scope function exits, even\n                    // if it's an async function.\n                    if (!prevIsBatchingLegacy && didScheduleLegacyUpdate) {\n                        flushActQueue(queue);\n                    } // `isBatchingLegacy` gets reset using the regular stack, not the async\n                    // one used to track `act` scopes. Why, you may be wondering? Because\n                    // that's how it worked before version 18. Yes, it's confusing! We should\n                    // delete legacy mode!!\n                    ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;\n                } catch (error) {\n                    // `isBatchingLegacy` gets reset using the regular stack, not the async\n                    // one used to track `act` scopes. Why, you may be wondering? Because\n                    // that's how it worked before version 18. Yes, it's confusing! We should\n                    // delete legacy mode!!\n                    ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;\n                    popActScope(prevActQueue, prevActScopeDepth);\n                    throw error;\n                }\n                if (result !== null && typeof result === \"object\" && // $FlowFixMe[method-unbinding]\n                typeof result.then === \"function\") {\n                    // A promise/thenable was returned from the callback. Wait for it to\n                    // resolve before flushing the queue.\n                    //\n                    // If `act` were implemented as an async function, this whole block could\n                    // be a single `await` call. That's really the only difference between\n                    // this branch and the next one.\n                    var thenable = result; // Warn if the an `act` call with an async scope is not awaited. In a\n                    // future release, consider making this an error.\n                    queueSeveralMicrotasks(function() {\n                        if (!didAwaitActCall && !didWarnNoAwaitAct) {\n                            didWarnNoAwaitAct = true;\n                            error(\"You called act(async () => ...) without await. \" + \"This could lead to unexpected testing behaviour, \" + \"interleaving multiple act calls and mixing their \" + \"scopes. \" + \"You should - await act(async () => ...);\");\n                        }\n                    });\n                    return {\n                        then: function(resolve, reject) {\n                            didAwaitActCall = true;\n                            thenable.then(function(returnValue) {\n                                popActScope(prevActQueue, prevActScopeDepth);\n                                if (prevActScopeDepth === 0) {\n                                    // We're exiting the outermost `act` scope. Flush the queue.\n                                    try {\n                                        flushActQueue(queue);\n                                        enqueueTask(function() {\n                                            return recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n                                        });\n                                    } catch (error) {\n                                        // `thenable` might not be a real promise, and `flushActQueue`\n                                        // might throw, so we need to wrap `flushActQueue` in a\n                                        // try/catch.\n                                        reject(error);\n                                    }\n                                } else {\n                                    resolve(returnValue);\n                                }\n                            }, function(error) {\n                                popActScope(prevActQueue, prevActScopeDepth);\n                                reject(error);\n                            });\n                        }\n                    };\n                } else {\n                    var returnValue = result; // The callback is not an async function. Exit the current\n                    // scope immediately.\n                    popActScope(prevActQueue, prevActScopeDepth);\n                    if (prevActScopeDepth === 0) {\n                        // We're exiting the outermost `act` scope. Flush the queue.\n                        flushActQueue(queue); // If the queue is not empty, it implies that we intentionally yielded\n                        // to the main thread, because something suspended. We will continue\n                        // in an asynchronous task.\n                        //\n                        // Warn if something suspends but the `act` call is not awaited.\n                        // In a future release, consider making this an error.\n                        if (queue.length !== 0) {\n                            queueSeveralMicrotasks(function() {\n                                if (!didAwaitActCall && !didWarnNoAwaitAct) {\n                                    didWarnNoAwaitAct = true;\n                                    error(\"A component suspended inside an `act` scope, but the \" + \"`act` call was not awaited. When testing React \" + \"components that depend on asynchronous data, you must \" + \"await the result:\\n\\n\" + \"await act(() => ...)\");\n                                }\n                            });\n                        } // Like many things in this module, this is next part is confusing.\n                        //\n                        // We do not currently require every `act` call that is passed a\n                        // callback to be awaited, through arguably we should. Since this\n                        // callback was synchronous, we need to exit the current scope before\n                        // returning.\n                        //\n                        // However, if thenable we're about to return *is* awaited, we'll\n                        // immediately restore the current scope. So it shouldn't observable.\n                        //\n                        // This doesn't affect the case where the scope callback is async,\n                        // because we always require those calls to be awaited.\n                        //\n                        // TODO: In a future version, consider always requiring all `act` calls\n                        // to be awaited, regardless of whether the callback is sync or async.\n                        ReactCurrentActQueue.current = null;\n                    }\n                    return {\n                        then: function(resolve, reject) {\n                            didAwaitActCall = true;\n                            if (prevActScopeDepth === 0) {\n                                // If the `act` call is awaited, restore the queue we were\n                                // using before (see long comment above) so we can flush it.\n                                ReactCurrentActQueue.current = queue;\n                                enqueueTask(function() {\n                                    return recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n                                });\n                            } else {\n                                resolve(returnValue);\n                            }\n                        }\n                    };\n                }\n            }\n        }\n        function popActScope(prevActQueue, prevActScopeDepth) {\n            {\n                if (prevActScopeDepth !== actScopeDepth - 1) {\n                    error(\"You seem to have overlapping act() calls, this is not supported. \" + \"Be sure to await previous act() calls before making a new one. \");\n                }\n                actScopeDepth = prevActScopeDepth;\n            }\n        }\n        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {\n            {\n                // Check if any tasks were scheduled asynchronously.\n                var queue = ReactCurrentActQueue.current;\n                if (queue !== null) {\n                    if (queue.length !== 0) {\n                        // Async tasks were scheduled, mostly likely in a microtask.\n                        // Keep flushing until there are no more.\n                        try {\n                            flushActQueue(queue); // The work we just performed may have schedule additional async\n                            // tasks. Wait a macrotask and check again.\n                            enqueueTask(function() {\n                                return recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n                            });\n                        } catch (error) {\n                            // Leave remaining tasks on the queue if something throws.\n                            reject(error);\n                        }\n                    } else {\n                        // The queue is empty. We can finish.\n                        ReactCurrentActQueue.current = null;\n                        resolve(returnValue);\n                    }\n                } else {\n                    resolve(returnValue);\n                }\n            }\n        }\n        var isFlushing = false;\n        function flushActQueue(queue) {\n            {\n                if (!isFlushing) {\n                    // Prevent re-entrance.\n                    isFlushing = true;\n                    var i = 0;\n                    try {\n                        for(; i < queue.length; i++){\n                            var callback = queue[i];\n                            do {\n                                ReactCurrentActQueue.didUsePromise = false;\n                                var continuation = callback(false);\n                                if (continuation !== null) {\n                                    if (ReactCurrentActQueue.didUsePromise) {\n                                        // The component just suspended. Yield to the main thread in\n                                        // case the promise is already resolved. If so, it will ping in\n                                        // a microtask and we can resume without unwinding the stack.\n                                        queue[i] = callback;\n                                        queue.splice(0, i);\n                                        return;\n                                    }\n                                    callback = continuation;\n                                } else {\n                                    break;\n                                }\n                            }while (true);\n                        } // We flushed the entire queue.\n                        queue.length = 0;\n                    } catch (error) {\n                        // If something throws, leave the remaining callbacks on the queue.\n                        queue.splice(0, i + 1);\n                        throw error;\n                    } finally{\n                        isFlushing = false;\n                    }\n                }\n            }\n        } // Some of our warnings attempt to detect if the `act` call is awaited by\n        // checking in an asynchronous task. Wait a few microtasks before checking. The\n        // only reason one isn't sufficient is we want to accommodate the case where an\n        // `act` call is returned from an async function without first being awaited,\n        // since that's a somewhat common pattern. If you do this too many times in a\n        // nested sequence, you might get a warning, but you can always fix by awaiting\n        // the call.\n        //\n        // A macrotask would also work (and is the fallback) but depending on the test\n        // environment it may cause the warning to fire too late.\n        var queueSeveralMicrotasks = typeof queueMicrotask === \"function\" ? function(callback) {\n            queueMicrotask(function() {\n                return queueMicrotask(callback);\n            });\n        } : enqueueTask;\n        var createElement = createElementWithValidation;\n        var cloneElement = cloneElementWithValidation;\n        var createFactory = createFactoryWithValidation;\n        var Children = {\n            map: mapChildren,\n            forEach: forEachChildren,\n            count: countChildren,\n            toArray: toArray,\n            only: onlyChild\n        };\n        exports.Children = Children;\n        exports.Component = Component;\n        exports.Fragment = REACT_FRAGMENT_TYPE;\n        exports.Profiler = REACT_PROFILER_TYPE;\n        exports.PureComponent = PureComponent;\n        exports.StrictMode = REACT_STRICT_MODE_TYPE;\n        exports.Suspense = REACT_SUSPENSE_TYPE;\n        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;\n        exports.cache = cache;\n        exports.cloneElement = cloneElement;\n        exports.createContext = createContext;\n        exports.createElement = createElement;\n        exports.createFactory = createFactory;\n        exports.createRef = createRef;\n        exports.createServerContext = createServerContext;\n        exports.forwardRef = forwardRef;\n        exports.isValidElement = isValidElement;\n        exports.lazy = lazy;\n        exports.memo = memo;\n        exports.startTransition = startTransition;\n        exports.unstable_act = act;\n        exports.unstable_useCacheRefresh = useCacheRefresh;\n        exports.use = use;\n        exports.useCallback = useCallback;\n        exports.useContext = useContext;\n        exports.useDebugValue = useDebugValue;\n        exports.useDeferredValue = useDeferredValue;\n        exports.useEffect = useEffect;\n        exports.useId = useId;\n        exports.useImperativeHandle = useImperativeHandle;\n        exports.useInsertionEffect = useInsertionEffect;\n        exports.useLayoutEffect = useLayoutEffect;\n        exports.useMemo = useMemo;\n        exports.useReducer = useReducer;\n        exports.useRef = useRef;\n        exports.useState = useState;\n        exports.useSyncExternalStore = useSyncExternalStore;\n        exports.useTransition = useTransition;\n        exports.version = ReactVersion;\n        /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === \"function\") {\n            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n        }\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react/cjs/react.development.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react/index.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react.development.js */ \"(rsc)/./node_modules/next/dist/compiled/react/cjs/react.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLGdKQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dhaGVndXJ1LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2luZGV4LmpzP2RlMzciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react/index.js\n");

/***/ })

};
;
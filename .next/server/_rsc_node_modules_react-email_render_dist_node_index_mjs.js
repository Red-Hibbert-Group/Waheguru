"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_node_modules_react-email_render_dist_node_index_mjs";
exports.ids = ["_rsc_node_modules_react-email_render_dist_node_index_mjs"];
exports.modules = {

/***/ "(rsc)/./node_modules/deepmerge/dist/cjs.js":
/*!********************************************!*\
  !*** ./node_modules/deepmerge/dist/cjs.js ***!
  \********************************************/
/***/ ((module) => {

eval("\nvar isMergeableObject = function isMergeableObject(value) {\n    return isNonNullObject(value) && !isSpecial(value);\n};\nfunction isNonNullObject(value) {\n    return !!value && typeof value === \"object\";\n}\nfunction isSpecial(value) {\n    var stringValue = Object.prototype.toString.call(value);\n    return stringValue === \"[object RegExp]\" || stringValue === \"[object Date]\" || isReactElement(value);\n}\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === \"function\" && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for(\"react.element\") : 0xeac7;\nfunction isReactElement(value) {\n    return value.$$typeof === REACT_ELEMENT_TYPE;\n}\nfunction emptyTarget(val) {\n    return Array.isArray(val) ? [] : {};\n}\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n    return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;\n}\nfunction defaultArrayMerge(target, source, options) {\n    return target.concat(source).map(function(element) {\n        return cloneUnlessOtherwiseSpecified(element, options);\n    });\n}\nfunction getMergeFunction(key, options) {\n    if (!options.customMerge) {\n        return deepmerge;\n    }\n    var customMerge = options.customMerge(key);\n    return typeof customMerge === \"function\" ? customMerge : deepmerge;\n}\nfunction getEnumerableOwnPropertySymbols(target) {\n    return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n        return Object.propertyIsEnumerable.call(target, symbol);\n    }) : [];\n}\nfunction getKeys(target) {\n    return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));\n}\nfunction propertyIsOnObject(object, property) {\n    try {\n        return property in object;\n    } catch (_) {\n        return false;\n    }\n}\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n    return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n     && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n     && Object.propertyIsEnumerable.call(target, key) // and also unsafe if they're nonenumerable.\n    );\n}\nfunction mergeObject(target, source, options) {\n    var destination = {};\n    if (options.isMergeableObject(target)) {\n        getKeys(target).forEach(function(key) {\n            destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n        });\n    }\n    getKeys(source).forEach(function(key) {\n        if (propertyIsUnsafe(target, key)) {\n            return;\n        }\n        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n            destination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n        } else {\n            destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n        }\n    });\n    return destination;\n}\nfunction deepmerge(target, source, options) {\n    options = options || {};\n    options.arrayMerge = options.arrayMerge || defaultArrayMerge;\n    options.isMergeableObject = options.isMergeableObject || isMergeableObject;\n    // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n    // implementations can use it. The caller may not replace it.\n    options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n    var sourceIsArray = Array.isArray(source);\n    var targetIsArray = Array.isArray(target);\n    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n    if (!sourceAndTargetTypesMatch) {\n        return cloneUnlessOtherwiseSpecified(source, options);\n    } else if (sourceIsArray) {\n        return options.arrayMerge(target, source, options);\n    } else {\n        return mergeObject(target, source, options);\n    }\n}\ndeepmerge.all = function deepmergeAll(array, options) {\n    if (!Array.isArray(array)) {\n        throw new Error(\"first argument should be an array\");\n    }\n    return array.reduce(function(prev, next) {\n        return deepmerge(prev, next, options);\n    }, {});\n};\nvar deepmerge_1 = deepmerge;\nmodule.exports = deepmerge_1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/deepmerge/dist/cjs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react/cjs/react.shared-subset.development.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react.shared-subset.development.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * @license React\n * react.shared-subset.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        /**\n * Keeps track of the current dispatcher.\n */ var ReactCurrentDispatcher$1 = {\n            current: null\n        };\n        /**\n * Keeps track of the current Cache dispatcher.\n */ var ReactCurrentCache = {\n            current: null\n        };\n        /**\n * Keeps track of the current batch's configuration such as how long an update\n * should suspend for if it needs to.\n */ var ReactCurrentBatchConfig = {\n            transition: null\n        };\n        var ReactCurrentActQueue = {\n            current: null,\n            // Used to reproduce behavior of `batchedUpdates` in legacy mode.\n            isBatchingLegacy: false,\n            didScheduleLegacyUpdate: false,\n            // Tracks whether something called `use` during the current batch of work.\n            // Determines whether we should yield to microtasks to unwrap already resolved\n            // promises without suspending.\n            didUsePromise: false\n        };\n        /**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */ var ReactCurrentOwner = {\n            /**\n   * @internal\n   * @type {ReactComponent}\n   */ current: null\n        };\n        var ReactDebugCurrentFrame$1 = {};\n        var currentExtraStackFrame = null;\n        function setExtraStackFrame(stack) {\n            {\n                currentExtraStackFrame = stack;\n            }\n        }\n        {\n            ReactDebugCurrentFrame$1.setExtraStackFrame = function(stack) {\n                {\n                    currentExtraStackFrame = stack;\n                }\n            }; // Stack implementation injected by the current renderer.\n            ReactDebugCurrentFrame$1.getCurrentStack = null;\n            ReactDebugCurrentFrame$1.getStackAddendum = function() {\n                var stack = \"\"; // Add an extra top frame while an element is being validated\n                if (currentExtraStackFrame) {\n                    stack += currentExtraStackFrame;\n                } // Delegate to the injected renderer-specific implementation\n                var impl = ReactDebugCurrentFrame$1.getCurrentStack;\n                if (impl) {\n                    stack += impl() || \"\";\n                }\n                return stack;\n            };\n        }\n        // -----------------------------------------------------------------------------\n        var enableScopeAPI = false; // Experimental Create Event Handle API.\n        var enableCacheElement = false;\n        var enableTransitionTracing = false; // No known bugs, but needs performance testing\n        var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n        // stuff. Intended to enable React core members to more easily debug scheduling\n        // issues in DEV builds.\n        var enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n        var ContextRegistry$1 = {};\n        var ReactSharedInternals = {\n            ReactCurrentDispatcher: ReactCurrentDispatcher$1,\n            ReactCurrentCache: ReactCurrentCache,\n            ReactCurrentBatchConfig: ReactCurrentBatchConfig,\n            ReactCurrentOwner: ReactCurrentOwner\n        };\n        {\n            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame$1;\n            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;\n        }\n        {\n            ReactSharedInternals.ContextRegistry = ContextRegistry$1;\n        }\n        // by calls to these methods by a Babel plugin.\n        //\n        // In PROD (or in packages without access to React internals),\n        // they are left as they are instead.\n        function warn(format) {\n            {\n                {\n                    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                        args[_key - 1] = arguments[_key];\n                    }\n                    printWarning(\"warn\", format, args);\n                }\n            }\n        }\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        var assign = Object.assign;\n        function createFetchCache() {\n            return new Map();\n        }\n        var simpleCacheKey = '[\"GET\",[],null,\"follow\",null,null,null,null]'; // generateCacheKey(new Request('https://blank'));\n        function generateCacheKey(request) {\n            // We pick the fields that goes into the key used to dedupe requests.\n            // We don't include the `cache` field, because we end up using whatever\n            // caching resulted from the first request.\n            // Notably we currently don't consider non-standard (or future) options.\n            // This might not be safe. TODO: warn for non-standard extensions differing.\n            // IF YOU CHANGE THIS UPDATE THE simpleCacheKey ABOVE.\n            return JSON.stringify([\n                request.method,\n                Array.from(request.headers.entries()),\n                request.mode,\n                request.redirect,\n                request.credentials,\n                request.referrer,\n                request.referrerPolicy,\n                request.integrity\n            ]);\n        }\n        {\n            if (typeof fetch === \"function\") {\n                var originalFetch = fetch;\n                var cachedFetch = function fetch1(resource, options) {\n                    var dispatcher = ReactCurrentCache.current;\n                    if (!dispatcher) {\n                        // We're outside a cached scope.\n                        return originalFetch(resource, options);\n                    }\n                    if (options && options.signal && options.signal !== dispatcher.getCacheSignal()) {\n                        // If we're passed a signal that is not ours, then we assume that\n                        // someone else controls the lifetime of this object and opts out of\n                        // caching. It's effectively the opt-out mechanism.\n                        // Ideally we should be able to check this on the Request but\n                        // it always gets initialized with its own signal so we don't\n                        // know if it's supposed to override - unless we also override the\n                        // Request constructor.\n                        return originalFetch(resource, options);\n                    } // Normalize the Request\n                    var url;\n                    var cacheKey;\n                    if (typeof resource === \"string\" && !options) {\n                        // Fast path.\n                        cacheKey = simpleCacheKey;\n                        url = resource;\n                    } else {\n                        // Normalize the request.\n                        // if resource is not a string or a URL (its an instance of Request)\n                        // then do not instantiate a new Request but instead\n                        // reuse the request as to not disturb the body in the event it's a ReadableStream.\n                        var request = typeof resource === \"string\" || resource instanceof URL ? new Request(resource, options) : resource;\n                        if (request.method !== \"GET\" && request.method !== \"HEAD\" || // $FlowFixMe[prop-missing]: keepalive is real\n                        request.keepalive) {\n                            // We currently don't dedupe requests that might have side-effects. Those\n                            // have to be explicitly cached. We assume that the request doesn't have a\n                            // body if it's GET or HEAD.\n                            // keepalive gets treated the same as if you passed a custom cache signal.\n                            return originalFetch(resource, options);\n                        }\n                        cacheKey = generateCacheKey(request);\n                        url = request.url;\n                    }\n                    var cache = dispatcher.getCacheForType(createFetchCache);\n                    var cacheEntries = cache.get(url);\n                    var match;\n                    if (cacheEntries === undefined) {\n                        // We pass the original arguments here in case normalizing the Request\n                        // doesn't include all the options in this environment.\n                        match = originalFetch(resource, options);\n                        cache.set(url, [\n                            cacheKey,\n                            match\n                        ]);\n                    } else {\n                        // We use an array as the inner data structure since it's lighter and\n                        // we typically only expect to see one or two entries here.\n                        for(var i = 0, l = cacheEntries.length; i < l; i += 2){\n                            var key = cacheEntries[i];\n                            var value = cacheEntries[i + 1];\n                            if (key === cacheKey) {\n                                match = value; // I would've preferred a labelled break but lint says no.\n                                return match.then(function(response) {\n                                    return response.clone();\n                                });\n                            }\n                        }\n                        match = originalFetch(resource, options);\n                        cacheEntries.push(cacheKey, match);\n                    } // We clone the response so that each time you call this you get a new read\n                    // of the body so that it can be read multiple times.\n                    return match.then(function(response) {\n                        return response.clone();\n                    });\n                }; // We don't expect to see any extra properties on fetch but if there are any,\n                // copy them over. Useful for extended fetch environments or mocks.\n                assign(cachedFetch, originalFetch);\n                try {\n                    // eslint-disable-next-line no-native-reassign\n                    fetch = cachedFetch;\n                } catch (error1) {\n                    try {\n                        // In case assigning it globally fails, try globalThis instead just in case it exists.\n                        globalThis.fetch = cachedFetch;\n                    } catch (error2) {\n                        // Log even in production just to make sure this is seen if only prod is frozen.\n                        // eslint-disable-next-line react-internal/no-production-logging\n                        warn(\"React was unable to patch the fetch() function in this environment. \" + \"Suspensey APIs might not work correctly as a result.\");\n                    }\n                }\n            }\n        }\n        var ReactVersion = \"18.3.0-canary-1a001dac6-20230812\";\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_SERVER_CONTEXT_TYPE = Symbol.for(\"react.server_context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for(\"react.default_value\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        var didWarnStateUpdateForUnmountedComponent = {};\n        function warnNoop(publicInstance, callerName) {\n            {\n                var _constructor = publicInstance.constructor;\n                var componentName = _constructor && (_constructor.displayName || _constructor.name) || \"ReactClass\";\n                var warningKey = componentName + \".\" + callerName;\n                if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n                    return;\n                }\n                error(\"Can't call %s on a component that is not yet mounted. \" + \"This is a no-op, but it might indicate a bug in your application. \" + \"Instead, assign to `this.state` directly or define a `state = {};` \" + \"class property with the desired state in the %s component.\", callerName, componentName);\n                didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n            }\n        }\n        /**\n * This is the abstract API for an update queue.\n */ var ReactNoopUpdateQueue = {\n            /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */ isMounted: function(publicInstance) {\n                return false;\n            },\n            /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */ enqueueForceUpdate: function(publicInstance, callback, callerName) {\n                warnNoop(publicInstance, \"forceUpdate\");\n            },\n            /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */ enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {\n                warnNoop(publicInstance, \"replaceState\");\n            },\n            /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */ enqueueSetState: function(publicInstance, partialState, callback, callerName) {\n                warnNoop(publicInstance, \"setState\");\n            }\n        };\n        var emptyObject = {};\n        {\n            Object.freeze(emptyObject);\n        }\n        /**\n * Base class helpers for the updating state of a component.\n */ function Component(props, context, updater) {\n            this.props = props;\n            this.context = context; // If a component has string refs, we will assign a different object later.\n            this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n            // renderer.\n            this.updater = updater || ReactNoopUpdateQueue;\n        }\n        Component.prototype.isReactComponent = {};\n        /**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */ Component.prototype.setState = function(partialState, callback) {\n            if (typeof partialState !== \"object\" && typeof partialState !== \"function\" && partialState != null) {\n                throw new Error(\"setState(...): takes an object of state variables to update or a \" + \"function which returns an object of state variables.\");\n            }\n            this.updater.enqueueSetState(this, partialState, callback, \"setState\");\n        };\n        /**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */ Component.prototype.forceUpdate = function(callback) {\n            this.updater.enqueueForceUpdate(this, callback, \"forceUpdate\");\n        };\n        /**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */ {\n            var deprecatedAPIs = {\n                isMounted: [\n                    \"isMounted\",\n                    \"Instead, make sure to clean up subscriptions and pending requests in \" + \"componentWillUnmount to prevent memory leaks.\"\n                ],\n                replaceState: [\n                    \"replaceState\",\n                    \"Refactor your code to use setState instead (see \" + \"https://github.com/facebook/react/issues/3236).\"\n                ]\n            };\n            var defineDeprecationWarning = function(methodName, info) {\n                Object.defineProperty(Component.prototype, methodName, {\n                    get: function() {\n                        warn(\"%s(...) is deprecated in plain JavaScript React classes. %s\", info[0], info[1]);\n                        return undefined;\n                    }\n                });\n            };\n            for(var fnName in deprecatedAPIs){\n                if (deprecatedAPIs.hasOwnProperty(fnName)) {\n                    defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n                }\n            }\n        }\n        function ComponentDummy() {}\n        ComponentDummy.prototype = Component.prototype;\n        /**\n * Convenience component with default shallow equality check for sCU.\n */ function PureComponent(props, context, updater) {\n            this.props = props;\n            this.context = context; // If a component has string refs, we will assign a different object later.\n            this.refs = emptyObject;\n            this.updater = updater || ReactNoopUpdateQueue;\n        }\n        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\n        pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n        assign(pureComponentPrototype, Component.prototype);\n        pureComponentPrototype.isPureReactComponent = true;\n        // an immutable object with a single mutable value\n        function createRef() {\n            var refObject = {\n                current: null\n            };\n            {\n                Object.seal(refObject);\n            }\n            return refObject;\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkKeyStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided key is an unsupported type %s.\" + \" This value must be coerced to a string before before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            {\n                if (typeof type.tag === \"number\") {\n                    error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                }\n            }\n            if (typeof type === \"function\") {\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                    case REACT_SERVER_CONTEXT_TYPE:\n                        {\n                            var context2 = type;\n                            return (context2.displayName || context2._globalName) + \".Provider\";\n                        }\n                }\n            }\n            return null;\n        }\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var RESERVED_PROPS = {\n            key: true,\n            ref: true,\n            __self: true,\n            __source: true\n        };\n        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;\n        {\n            didWarnAboutStringRefs = {};\n        }\n        function hasValidRef(config) {\n            {\n                if (hasOwnProperty.call(config, \"ref\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"ref\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.ref !== undefined;\n        }\n        function hasValidKey(config) {\n            {\n                if (hasOwnProperty.call(config, \"key\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.key !== undefined;\n        }\n        function defineKeyPropWarningGetter(props, displayName) {\n            var warnAboutAccessingKey = function() {\n                {\n                    if (!specialPropKeyWarningShown) {\n                        specialPropKeyWarningShown = true;\n                        error(\"%s: `key` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                }\n            };\n            warnAboutAccessingKey.isReactWarning = true;\n            Object.defineProperty(props, \"key\", {\n                get: warnAboutAccessingKey,\n                configurable: true\n            });\n        }\n        function defineRefPropWarningGetter(props, displayName) {\n            var warnAboutAccessingRef = function() {\n                {\n                    if (!specialPropRefWarningShown) {\n                        specialPropRefWarningShown = true;\n                        error(\"%s: `ref` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                }\n            };\n            warnAboutAccessingRef.isReactWarning = true;\n            Object.defineProperty(props, \"ref\", {\n                get: warnAboutAccessingRef,\n                configurable: true\n            });\n        }\n        function warnIfStringRefCannotBeAutoConverted(config) {\n            {\n                if (typeof config.ref === \"string\" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {\n                    var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n                    if (!didWarnAboutStringRefs[componentName]) {\n                        error('Component \"%s\" contains the string ref \"%s\". ' + \"Support for string refs will be removed in a future major release. \" + \"This case cannot be automatically converted to an arrow function. \" + \"We ask you to manually fix this case by using useRef() or createRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\", componentName, config.ref);\n                        didWarnAboutStringRefs[componentName] = true;\n                    }\n                }\n            }\n        }\n        /**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */ function ReactElement(type, key, ref, self, source, owner, props) {\n            var element = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: REACT_ELEMENT_TYPE,\n                // Built-in properties that belong on the element\n                type: type,\n                key: key,\n                ref: ref,\n                props: props,\n                // Record the component responsible for creating this element.\n                _owner: owner\n            };\n            {\n                // The validation flag is currently mutative. We put it on\n                // an external backing store so that we can freeze the whole object.\n                // This can be replaced with a WeakMap once they are implemented in\n                // commonly used development environments.\n                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n                // the validation flag non-enumerable (where possible, which should\n                // include every environment we run tests in), so the test framework\n                // ignores it.\n                Object.defineProperty(element._store, \"validated\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: true,\n                    value: false\n                }); // self and source are DEV only properties.\n                Object.defineProperty(element, \"_self\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: self\n                }); // Two elements created in two different places should be considered\n                // equal for testing purposes and therefore we hide it from enumeration.\n                Object.defineProperty(element, \"_source\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: source\n                });\n                if (Object.freeze) {\n                    Object.freeze(element.props);\n                    Object.freeze(element);\n                }\n            }\n            return element;\n        }\n        /**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */ function createElement$1(type, config, children) {\n            var propName; // Reserved names are extracted\n            var props = {};\n            var key = null;\n            var ref = null;\n            var self = null;\n            var source = null;\n            if (config != null) {\n                if (hasValidRef(config)) {\n                    ref = config.ref;\n                    {\n                        warnIfStringRefCannotBeAutoConverted(config);\n                    }\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                }\n                self = config.__self === undefined ? null : config.__self;\n                source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        props[propName] = config[propName];\n                    }\n                }\n            } // Children can be more than one argument, and those are transferred onto\n            // the newly allocated props object.\n            var childrenLength = arguments.length - 2;\n            if (childrenLength === 1) {\n                props.children = children;\n            } else if (childrenLength > 1) {\n                var childArray = Array(childrenLength);\n                for(var i = 0; i < childrenLength; i++){\n                    childArray[i] = arguments[i + 2];\n                }\n                {\n                    if (Object.freeze) {\n                        Object.freeze(childArray);\n                    }\n                }\n                props.children = childArray;\n            } // Resolve default props\n            if (type && type.defaultProps) {\n                var defaultProps = type.defaultProps;\n                for(propName in defaultProps){\n                    if (props[propName] === undefined) {\n                        props[propName] = defaultProps[propName];\n                    }\n                }\n            }\n            {\n                if (key || ref) {\n                    var displayName = typeof type === \"function\" ? type.displayName || type.name || \"Unknown\" : type;\n                    if (key) {\n                        defineKeyPropWarningGetter(props, displayName);\n                    }\n                    if (ref) {\n                        defineRefPropWarningGetter(props, displayName);\n                    }\n                }\n            }\n            return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n        }\n        function cloneAndReplaceKey(oldElement, newKey) {\n            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n            return newElement;\n        }\n        /**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */ function cloneElement$1(element, config, children) {\n            if (element === null || element === undefined) {\n                throw new Error(\"React.cloneElement(...): The argument must be a React element, but you passed \" + element + \".\");\n            }\n            var propName; // Original props are copied\n            var props = assign({}, element.props); // Reserved names are extracted\n            var key = element.key;\n            var ref = element.ref; // Self is preserved since the owner is preserved.\n            var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n            // transpiler, and the original source is probably a better indicator of the\n            // true owner.\n            var source = element._source; // Owner will be preserved, unless ref is overridden\n            var owner = element._owner;\n            if (config != null) {\n                if (hasValidRef(config)) {\n                    // Silently steal the ref from the parent.\n                    ref = config.ref;\n                    owner = ReactCurrentOwner.current;\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                } // Remaining properties override existing props\n                var defaultProps;\n                if (element.type && element.type.defaultProps) {\n                    defaultProps = element.type.defaultProps;\n                }\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        if (config[propName] === undefined && defaultProps !== undefined) {\n                            // Resolve default props\n                            props[propName] = defaultProps[propName];\n                        } else {\n                            props[propName] = config[propName];\n                        }\n                    }\n                }\n            } // Children can be more than one argument, and those are transferred onto\n            // the newly allocated props object.\n            var childrenLength = arguments.length - 2;\n            if (childrenLength === 1) {\n                props.children = children;\n            } else if (childrenLength > 1) {\n                var childArray = Array(childrenLength);\n                for(var i = 0; i < childrenLength; i++){\n                    childArray[i] = arguments[i + 2];\n                }\n                props.children = childArray;\n            }\n            return ReactElement(element.type, key, ref, self, source, owner, props);\n        }\n        /**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */ function isValidElement(object) {\n            return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n        }\n        var SEPARATOR = \".\";\n        var SUBSEPARATOR = \":\";\n        /**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */ function escape(key) {\n            var escapeRegex = /[=:]/g;\n            var escaperLookup = {\n                \"=\": \"=0\",\n                \":\": \"=2\"\n            };\n            var escapedString = key.replace(escapeRegex, function(match) {\n                return escaperLookup[match];\n            });\n            return \"$\" + escapedString;\n        }\n        /**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */ var didWarnAboutMaps = false;\n        var userProvidedKeyEscapeRegex = /\\/+/g;\n        function escapeUserProvidedKey(text) {\n            return text.replace(userProvidedKeyEscapeRegex, \"$&/\");\n        }\n        /**\n * Generate a key string that identifies a element within a set.\n *\n * @param {*} element A element that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */ function getElementKey(element, index) {\n            // Do some typechecking here since we call this blindly. We want to ensure\n            // that we don't block potential future ES APIs.\n            if (typeof element === \"object\" && element !== null && element.key != null) {\n                // Explicit key\n                {\n                    checkKeyStringCoercion(element.key);\n                }\n                return escape(\"\" + element.key);\n            } // Implicit key determined by the index in the set\n            return index.toString(36);\n        }\n        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {\n            var type = typeof children;\n            if (type === \"undefined\" || type === \"boolean\") {\n                // All of the above are perceived as null.\n                children = null;\n            }\n            var invokeCallback = false;\n            if (children === null) {\n                invokeCallback = true;\n            } else {\n                switch(type){\n                    case \"string\":\n                    case \"number\":\n                        invokeCallback = true;\n                        break;\n                    case \"object\":\n                        switch(children.$$typeof){\n                            case REACT_ELEMENT_TYPE:\n                            case REACT_PORTAL_TYPE:\n                                invokeCallback = true;\n                        }\n                }\n            }\n            if (invokeCallback) {\n                var _child = children;\n                var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array\n                // so that it's consistent if the number of children grows:\n                var childKey = nameSoFar === \"\" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;\n                if (isArray(mappedChild)) {\n                    var escapedChildKey = \"\";\n                    if (childKey != null) {\n                        escapedChildKey = escapeUserProvidedKey(childKey) + \"/\";\n                    }\n                    mapIntoArray(mappedChild, array, escapedChildKey, \"\", function(c) {\n                        return c;\n                    });\n                } else if (mappedChild != null) {\n                    if (isValidElement(mappedChild)) {\n                        {\n                            // The `if` statement here prevents auto-disabling of the safe\n                            // coercion ESLint rule, so we must manually disable it below.\n                            // $FlowFixMe[incompatible-type] Flow incorrectly thinks React.Portal doesn't have a key\n                            if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {\n                                checkKeyStringCoercion(mappedChild.key);\n                            }\n                        }\n                        mappedChild = cloneAndReplaceKey(mappedChild, // traverseAllChildren used to do for objects as children\n                        escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey(\"\" + mappedChild.key // eslint-disable-line react-internal/safe-string-coercion\n                        ) + \"/\" : \"\") + childKey);\n                    }\n                    array.push(mappedChild);\n                }\n                return 1;\n            }\n            var child;\n            var nextName;\n            var subtreeCount = 0; // Count of children found in the current subtree.\n            var nextNamePrefix = nameSoFar === \"\" ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n            if (isArray(children)) {\n                for(var i = 0; i < children.length; i++){\n                    child = children[i];\n                    nextName = nextNamePrefix + getElementKey(child, i);\n                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n                }\n            } else {\n                var iteratorFn = getIteratorFn(children);\n                if (typeof iteratorFn === \"function\") {\n                    var iterableChildren = children;\n                    {\n                        // Warn about using Maps as children\n                        if (iteratorFn === iterableChildren.entries) {\n                            if (!didWarnAboutMaps) {\n                                warn(\"Using Maps as children is not supported. \" + \"Use an array of keyed ReactElements instead.\");\n                            }\n                            didWarnAboutMaps = true;\n                        }\n                    }\n                    var iterator = iteratorFn.call(iterableChildren);\n                    var step;\n                    var ii = 0; // $FlowFixMe[incompatible-use] `iteratorFn` might return null according to typing.\n                    while(!(step = iterator.next()).done){\n                        child = step.value;\n                        nextName = nextNamePrefix + getElementKey(child, ii++);\n                        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n                    }\n                } else if (type === \"object\") {\n                    // eslint-disable-next-line react-internal/safe-string-coercion\n                    var childrenString = String(children);\n                    throw new Error(\"Objects are not valid as a React child (found: \" + (childrenString === \"[object Object]\" ? \"object with keys {\" + Object.keys(children).join(\", \") + \"}\" : childrenString) + \"). \" + \"If you meant to render a collection of children, use an array \" + \"instead.\");\n                }\n            }\n            return subtreeCount;\n        }\n        /**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n *\n * The provided mapFunction(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */ function mapChildren(children, func, context) {\n            if (children == null) {\n                return children;\n            }\n            var result = [];\n            var count = 0;\n            mapIntoArray(children, result, \"\", \"\", function(child) {\n                return func.call(context, child, count++);\n            });\n            return result;\n        }\n        /**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrencount\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */ function countChildren(children) {\n            var n = 0;\n            mapChildren(children, function() {\n                n++; // Don't return anything\n            });\n            return n;\n        }\n        /**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */ function forEachChildren(children, forEachFunc, forEachContext) {\n            mapChildren(children, function() {\n                forEachFunc.apply(this, arguments); // Don't return anything.\n            }, forEachContext);\n        }\n        /**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n */ function toArray(children) {\n            return mapChildren(children, function(child) {\n                return child;\n            }) || [];\n        }\n        /**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */ function onlyChild(children) {\n            if (!isValidElement(children)) {\n                throw new Error(\"React.Children.only expected to receive a single React element child.\");\n            }\n            return children;\n        }\n        var Uninitialized = -1;\n        var Pending = 0;\n        var Resolved = 1;\n        var Rejected = 2;\n        function lazyInitializer(payload) {\n            if (payload._status === Uninitialized) {\n                var ctor = payload._result;\n                var thenable = ctor(); // Transition to the next state.\n                // This might throw either because it's missing or throws. If so, we treat it\n                // as still uninitialized and try again next time. Which is the same as what\n                // happens if the ctor or any wrappers processing the ctor throws. This might\n                // end up fixing it if the resolution was a concurrency bug.\n                thenable.then(function(moduleObject) {\n                    if (payload._status === Pending || payload._status === Uninitialized) {\n                        // Transition to the next state.\n                        var resolved = payload;\n                        resolved._status = Resolved;\n                        resolved._result = moduleObject;\n                    }\n                }, function(error) {\n                    if (payload._status === Pending || payload._status === Uninitialized) {\n                        // Transition to the next state.\n                        var rejected = payload;\n                        rejected._status = Rejected;\n                        rejected._result = error;\n                    }\n                });\n                if (payload._status === Uninitialized) {\n                    // In case, we're still uninitialized, then we're waiting for the thenable\n                    // to resolve. Set it as pending in the meantime.\n                    var pending = payload;\n                    pending._status = Pending;\n                    pending._result = thenable;\n                }\n            }\n            if (payload._status === Resolved) {\n                var moduleObject = payload._result;\n                {\n                    if (moduleObject === undefined) {\n                        error(\"lazy: Expected the result of a dynamic imp\" + \"ort() call. \" + \"Instead received: %s\\n\\nYour code should look like: \\n  \" + // Break up imports to avoid accidentally parsing them as dependencies.\n                        \"const MyComponent = lazy(() => imp\" + \"ort('./MyComponent'))\\n\\n\" + \"Did you accidentally put curly braces around the import?\", moduleObject);\n                    }\n                }\n                {\n                    if (!(\"default\" in moduleObject)) {\n                        error(\"lazy: Expected the result of a dynamic imp\" + \"ort() call. \" + \"Instead received: %s\\n\\nYour code should look like: \\n  \" + // Break up imports to avoid accidentally parsing them as dependencies.\n                        \"const MyComponent = lazy(() => imp\" + \"ort('./MyComponent'))\", moduleObject);\n                    }\n                }\n                return moduleObject.default;\n            } else {\n                throw payload._result;\n            }\n        }\n        function lazy(ctor) {\n            var payload = {\n                // We use these fields to store the result.\n                _status: Uninitialized,\n                _result: ctor\n            };\n            var lazyType = {\n                $$typeof: REACT_LAZY_TYPE,\n                _payload: payload,\n                _init: lazyInitializer\n            };\n            {\n                // In production, this would just set it on the object.\n                var defaultProps;\n                var propTypes; // $FlowFixMe[prop-missing]\n                Object.defineProperties(lazyType, {\n                    defaultProps: {\n                        configurable: true,\n                        get: function() {\n                            return defaultProps;\n                        },\n                        // $FlowFixMe[missing-local-annot]\n                        set: function(newDefaultProps) {\n                            error(\"React.lazy(...): It is not supported to assign `defaultProps` to \" + \"a lazy component import. Either specify them where the component \" + \"is defined, or create a wrapping component around it.\");\n                            defaultProps = newDefaultProps; // Match production behavior more closely:\n                            // $FlowFixMe[prop-missing]\n                            Object.defineProperty(lazyType, \"defaultProps\", {\n                                enumerable: true\n                            });\n                        }\n                    },\n                    propTypes: {\n                        configurable: true,\n                        get: function() {\n                            return propTypes;\n                        },\n                        // $FlowFixMe[missing-local-annot]\n                        set: function(newPropTypes) {\n                            error(\"React.lazy(...): It is not supported to assign `propTypes` to \" + \"a lazy component import. Either specify them where the component \" + \"is defined, or create a wrapping component around it.\");\n                            propTypes = newPropTypes; // Match production behavior more closely:\n                            // $FlowFixMe[prop-missing]\n                            Object.defineProperty(lazyType, \"propTypes\", {\n                                enumerable: true\n                            });\n                        }\n                    }\n                });\n            }\n            return lazyType;\n        }\n        function forwardRef(render) {\n            {\n                if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n                    error(\"forwardRef requires a render function but received a `memo` \" + \"component. Instead of forwardRef(memo(...)), use \" + \"memo(forwardRef(...)).\");\n                } else if (typeof render !== \"function\") {\n                    error(\"forwardRef requires a render function but was given %s.\", render === null ? \"null\" : typeof render);\n                } else {\n                    if (render.length !== 0 && render.length !== 2) {\n                        error(\"forwardRef render functions accept exactly two parameters: props and ref. %s\", render.length === 1 ? \"Did you forget to use the ref parameter?\" : \"Any additional parameter will be undefined.\");\n                    }\n                }\n                if (render != null) {\n                    if (render.defaultProps != null || render.propTypes != null) {\n                        error(\"forwardRef render functions do not support propTypes or defaultProps. \" + \"Did you accidentally pass a React component?\");\n                    }\n                }\n            }\n            var elementType = {\n                $$typeof: REACT_FORWARD_REF_TYPE,\n                render: render\n            };\n            {\n                var ownName;\n                Object.defineProperty(elementType, \"displayName\", {\n                    enumerable: false,\n                    configurable: true,\n                    get: function() {\n                        return ownName;\n                    },\n                    set: function(name) {\n                        ownName = name; // The inner component shouldn't inherit this display name in most cases,\n                        // because the component may be used elsewhere.\n                        // But it's nice for anonymous functions to inherit the name,\n                        // so that our component-stack generation logic will display their frames.\n                        // An anonymous function generally suggests a pattern like:\n                        //   React.forwardRef((props, ref) => {...});\n                        // This kind of inner function is not used elsewhere so the side effect is okay.\n                        if (!render.name && !render.displayName) {\n                            render.displayName = name;\n                        }\n                    }\n                });\n            }\n            return elementType;\n        }\n        var REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\");\n        function isValidElementType(type) {\n            if (typeof type === \"string\" || typeof type === \"function\") {\n                return true;\n            } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {\n                return true;\n            }\n            if (typeof type === \"object\" && type !== null) {\n                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n                // types supported by any Flight configuration anywhere since\n                // we don't know which Flight build this will end up being used\n                // with.\n                type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function memo(type, compare) {\n            {\n                if (!isValidElementType(type)) {\n                    error(\"memo: The first argument must be a component. Instead \" + \"received: %s\", type === null ? \"null\" : typeof type);\n                }\n            }\n            var elementType = {\n                $$typeof: REACT_MEMO_TYPE,\n                type: type,\n                compare: compare === undefined ? null : compare\n            };\n            {\n                var ownName;\n                Object.defineProperty(elementType, \"displayName\", {\n                    enumerable: false,\n                    configurable: true,\n                    get: function() {\n                        return ownName;\n                    },\n                    set: function(name) {\n                        ownName = name; // The inner component shouldn't inherit this display name in most cases,\n                        // because the component may be used elsewhere.\n                        // But it's nice for anonymous functions to inherit the name,\n                        // so that our component-stack generation logic will display their frames.\n                        // An anonymous function generally suggests a pattern like:\n                        //   React.memo((props) => {...});\n                        // This kind of inner function is not used elsewhere so the side effect is okay.\n                        if (!type.name && !type.displayName) {\n                            type.displayName = name;\n                        }\n                    }\n                });\n            }\n            return elementType;\n        }\n        var UNTERMINATED = 0;\n        var TERMINATED = 1;\n        var ERRORED = 2;\n        function createCacheRoot() {\n            return new WeakMap();\n        }\n        function createCacheNode() {\n            return {\n                s: UNTERMINATED,\n                // status, represents whether the cached computation returned a value or threw an error\n                v: undefined,\n                // value, either the cached result or an error, depending on s\n                o: null,\n                // object cache, a WeakMap where non-primitive arguments are stored\n                p: null // primitive cache, a regular Map where primitive arguments are stored.\n            };\n        }\n        function cache(fn) {\n            return function() {\n                var dispatcher = ReactCurrentCache.current;\n                if (!dispatcher) {\n                    // If there is no dispatcher, then we treat this as not being cached.\n                    // $FlowFixMe[incompatible-call]: We don't want to use rest arguments since we transpile the code.\n                    return fn.apply(null, arguments);\n                }\n                var fnMap = dispatcher.getCacheForType(createCacheRoot);\n                var fnNode = fnMap.get(fn);\n                var cacheNode;\n                if (fnNode === undefined) {\n                    cacheNode = createCacheNode();\n                    fnMap.set(fn, cacheNode);\n                } else {\n                    cacheNode = fnNode;\n                }\n                for(var i = 0, l = arguments.length; i < l; i++){\n                    var arg = arguments[i];\n                    if (typeof arg === \"function\" || typeof arg === \"object\" && arg !== null) {\n                        // Objects go into a WeakMap\n                        var objectCache = cacheNode.o;\n                        if (objectCache === null) {\n                            cacheNode.o = objectCache = new WeakMap();\n                        }\n                        var objectNode = objectCache.get(arg);\n                        if (objectNode === undefined) {\n                            cacheNode = createCacheNode();\n                            objectCache.set(arg, cacheNode);\n                        } else {\n                            cacheNode = objectNode;\n                        }\n                    } else {\n                        // Primitives go into a regular Map\n                        var primitiveCache = cacheNode.p;\n                        if (primitiveCache === null) {\n                            cacheNode.p = primitiveCache = new Map();\n                        }\n                        var primitiveNode = primitiveCache.get(arg);\n                        if (primitiveNode === undefined) {\n                            cacheNode = createCacheNode();\n                            primitiveCache.set(arg, cacheNode);\n                        } else {\n                            cacheNode = primitiveNode;\n                        }\n                    }\n                }\n                if (cacheNode.s === TERMINATED) {\n                    return cacheNode.v;\n                }\n                if (cacheNode.s === ERRORED) {\n                    throw cacheNode.v;\n                }\n                try {\n                    // $FlowFixMe[incompatible-call]: We don't want to use rest arguments since we transpile the code.\n                    var result = fn.apply(null, arguments);\n                    var terminatedNode = cacheNode;\n                    terminatedNode.s = TERMINATED;\n                    terminatedNode.v = result;\n                    return result;\n                } catch (error) {\n                    // We store the first error that's thrown and rethrow it.\n                    var erroredNode = cacheNode;\n                    erroredNode.s = ERRORED;\n                    erroredNode.v = error;\n                    throw error;\n                }\n            };\n        }\n        function resolveDispatcher() {\n            var dispatcher = ReactCurrentDispatcher$1.current;\n            {\n                if (dispatcher === null) {\n                    error(\"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for\" + \" one of the following reasons:\\n\" + \"1. You might have mismatching versions of React and the renderer (such as React DOM)\\n\" + \"2. You might be breaking the Rules of Hooks\\n\" + \"3. You might have more than one copy of React in the same app\\n\" + \"See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\");\n                }\n            }\n            // intentionally don't throw our own error because this is in a hot path.\n            // Also helps ensure this is inlined.\n            return dispatcher;\n        }\n        function useContext(Context) {\n            var dispatcher = resolveDispatcher();\n            {\n                // TODO: add a more generic warning for invalid values.\n                if (Context._context !== undefined) {\n                    var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs\n                    // and nobody should be using this in existing code.\n                    if (realContext.Consumer === Context) {\n                        error(\"Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be \" + \"removed in a future major release. Did you mean to call useContext(Context) instead?\");\n                    } else if (realContext.Provider === Context) {\n                        error(\"Calling useContext(Context.Provider) is not supported. \" + \"Did you mean to call useContext(Context) instead?\");\n                    }\n                }\n            }\n            return dispatcher.useContext(Context);\n        }\n        function useCallback(callback, deps) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useCallback(callback, deps);\n        }\n        function useMemo(create, deps) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useMemo(create, deps);\n        }\n        function useDebugValue(value, formatterFn) {\n            {\n                var dispatcher = resolveDispatcher();\n                return dispatcher.useDebugValue(value, formatterFn);\n            }\n        }\n        function useId() {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useId();\n        }\n        function use(usable) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.use(usable);\n        }\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            var control;\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher.current = null;\n                disableLogs();\n            }\n            try {\n                // This should throw.\n                if (construct) {\n                    // Something should be setting the props in the constructor.\n                    var Fake = function() {\n                        throw Error();\n                    }; // $FlowFixMe[prop-missing]\n                    Object.defineProperty(Fake.prototype, \"props\", {\n                        set: function() {\n                            // We use a throwing setter instead of frozen or non-writable props\n                            // because that won't throw in a non-strict mode function.\n                            throw Error();\n                        }\n                    });\n                    if (typeof Reflect === \"object\" && Reflect.construct) {\n                        // We construct a different control for this case to include any extra\n                        // frames added by the construct call.\n                        try {\n                            Reflect.construct(Fake, []);\n                        } catch (x) {\n                            control = x;\n                        }\n                        Reflect.construct(fn, [], Fake);\n                    } else {\n                        try {\n                            Fake.call();\n                        } catch (x) {\n                            control = x;\n                        } // $FlowFixMe[prop-missing] found when upgrading Flow\n                        fn.call(Fake.prototype);\n                    }\n                } else {\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        control = x;\n                    } // TODO(luna): This will currently only throw if the function component\n                    // tries to access React/ReactDOM/props. We should probably make this throw\n                    // in simple components too\n                    var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                    // component, which we don't yet support. Attach a noop catch handler to\n                    // silence the error.\n                    // TODO: Implement component stacks for async client components?\n                    if (maybePromise && typeof maybePromise.catch === \"function\") {\n                        maybePromise.catch(function() {});\n                    }\n                }\n            } catch (sample) {\n                // This is inlined manually because closure doesn't do it for us.\n                if (sample && control && typeof sample.stack === \"string\") {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sample.stack.split(\"\\n\");\n                    var controlLines = control.stack.split(\"\\n\");\n                    var s = sampleLines.length - 1;\n                    var c = controlLines.length - 1;\n                    while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                        // We expect at least one stack frame to be shared.\n                        // Typically this will be the root most one. However, stack frames may be\n                        // cut off due to maximum stack limits. In this case, one maybe cut off\n                        // earlier than the other. We assume that the sample is longer or the same\n                        // and there for cut off earlier. So we should find the root most frame in\n                        // the sample somewhere in the control.\n                        c--;\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        }\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement$1(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                    }\n                }\n            }\n        }\n        var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    setExtraStackFrame(stack);\n                } else {\n                    setExtraStackFrame(null);\n                }\n            }\n        }\n        var propTypesMisspellWarningShown;\n        {\n            propTypesMisspellWarningShown = false;\n        }\n        function getDeclarationErrorAddendum() {\n            if (ReactCurrentOwner.current) {\n                var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n                if (name) {\n                    return \"\\n\\nCheck the render method of `\" + name + \"`.\";\n                }\n            }\n            return \"\";\n        }\n        function getSourceInfoErrorAddendum(source) {\n            if (source !== undefined) {\n                var fileName = source.fileName.replace(/^.*[\\\\\\/]/, \"\");\n                var lineNumber = source.lineNumber;\n                return \"\\n\\nCheck your code at \" + fileName + \":\" + lineNumber + \".\";\n            }\n            return \"\";\n        }\n        function getSourceInfoErrorAddendumForProps(elementProps) {\n            if (elementProps !== null && elementProps !== undefined) {\n                return getSourceInfoErrorAddendum(elementProps.__source);\n            }\n            return \"\";\n        }\n        /**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */ var ownerHasKeyUseWarning = {};\n        function getCurrentComponentErrorInfo(parentType) {\n            var info = getDeclarationErrorAddendum();\n            if (!info) {\n                var parentName = typeof parentType === \"string\" ? parentType : parentType.displayName || parentType.name;\n                if (parentName) {\n                    info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n                }\n            }\n            return info;\n        }\n        /**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */ function validateExplicitKey(element, parentType) {\n            if (!element._store || element._store.validated || element.key != null) {\n                return;\n            }\n            element._store.validated = true;\n            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n                return;\n            }\n            ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n            // property, it may be the creator of the child that's responsible for\n            // assigning it a key.\n            var childOwner = \"\";\n            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n                // Give the component that originally created this child.\n                childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n            }\n            {\n                setCurrentlyValidatingElement(element);\n                error('Each child in a list should have a unique \"key\" prop.' + \"%s%s See https://reactjs.org/link/warning-keys for more information.\", currentComponentErrorInfo, childOwner);\n                setCurrentlyValidatingElement(null);\n            }\n        }\n        /**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */ function validateChildKeys(node, parentType) {\n            if (typeof node !== \"object\" || !node) {\n                return;\n            }\n            if (node.$$typeof === REACT_CLIENT_REFERENCE) ;\n            else if (isArray(node)) {\n                for(var i = 0; i < node.length; i++){\n                    var child = node[i];\n                    if (isValidElement(child)) {\n                        validateExplicitKey(child, parentType);\n                    }\n                }\n            } else if (isValidElement(node)) {\n                // This element was passed in a valid location.\n                if (node._store) {\n                    node._store.validated = true;\n                }\n            } else {\n                var iteratorFn = getIteratorFn(node);\n                if (typeof iteratorFn === \"function\") {\n                    // Entry iterators used to provide implicit keys,\n                    // but now we print a separate warning for them later.\n                    if (iteratorFn !== node.entries) {\n                        var iterator = iteratorFn.call(node);\n                        var step;\n                        while(!(step = iterator.next()).done){\n                            if (isValidElement(step.value)) {\n                                validateExplicitKey(step.value, parentType);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */ function validatePropTypes(element) {\n            {\n                var type = element.type;\n                if (type === null || type === undefined || typeof type === \"string\") {\n                    return;\n                }\n                if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n                    return;\n                }\n                var propTypes;\n                if (typeof type === \"function\") {\n                    propTypes = type.propTypes;\n                } else if (typeof type === \"object\" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                type.$$typeof === REACT_MEMO_TYPE)) {\n                    propTypes = type.propTypes;\n                } else {\n                    return;\n                }\n                if (propTypes) {\n                    // Intentionally inside to avoid triggering lazy initializers:\n                    var name = getComponentNameFromType(type);\n                    checkPropTypes(propTypes, element.props, \"prop\", name, element);\n                } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n                    propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n                    var _name = getComponentNameFromType(type);\n                    error(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", _name || \"Unknown\");\n                }\n                if (typeof type.getDefaultProps === \"function\" && !type.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps is only used on classic React.createClass \" + \"definitions. Use a static property named `defaultProps` instead.\");\n                }\n            }\n        }\n        /**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */ function validateFragmentProps(fragment) {\n            {\n                var keys = Object.keys(fragment.props);\n                for(var i = 0; i < keys.length; i++){\n                    var key = keys[i];\n                    if (key !== \"children\" && key !== \"key\") {\n                        setCurrentlyValidatingElement(fragment);\n                        error(\"Invalid prop `%s` supplied to `React.Fragment`. \" + \"React.Fragment can only have `key` and `children` props.\", key);\n                        setCurrentlyValidatingElement(null);\n                        break;\n                    }\n                }\n                if (fragment.ref !== null) {\n                    setCurrentlyValidatingElement(fragment);\n                    error(\"Invalid attribute `ref` supplied to `React.Fragment`.\");\n                    setCurrentlyValidatingElement(null);\n                }\n            }\n        }\n        function createElementWithValidation(type, props, children) {\n            var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n            // succeed and there will likely be errors in render.\n            if (!validType) {\n                var info = \"\";\n                if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                    info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and named imports.\";\n                }\n                var sourceInfo = getSourceInfoErrorAddendumForProps(props);\n                if (sourceInfo) {\n                    info += sourceInfo;\n                } else {\n                    info += getDeclarationErrorAddendum();\n                }\n                var typeString;\n                if (type === null) {\n                    typeString = \"null\";\n                } else if (isArray(type)) {\n                    typeString = \"array\";\n                } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n                    typeString = \"<\" + (getComponentNameFromType(type.type) || \"Unknown\") + \" />\";\n                    info = \" Did you accidentally export a JSX literal instead of a component?\";\n                } else {\n                    typeString = typeof type;\n                }\n                {\n                    error(\"React.createElement: type is invalid -- expected a string (for \" + \"built-in components) or a class/function (for composite \" + \"components) but got: %s.%s\", typeString, info);\n                }\n            }\n            var element = createElement$1.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n            // TODO: Drop this when these are no longer allowed as the type argument.\n            if (element == null) {\n                return element;\n            } // Skip key warning if the type isn't valid since our key validation logic\n            // doesn't expect a non-string/function type and can throw confusing errors.\n            // We don't want exception behavior to differ between dev and prod.\n            // (Rendering will throw with a helpful message and as soon as the type is\n            // fixed, the key warnings will appear.)\n            if (validType) {\n                for(var i = 2; i < arguments.length; i++){\n                    validateChildKeys(arguments[i], type);\n                }\n            }\n            if (type === REACT_FRAGMENT_TYPE) {\n                validateFragmentProps(element);\n            } else {\n                validatePropTypes(element);\n            }\n            return element;\n        }\n        function cloneElementWithValidation(element, props, children) {\n            var newElement = cloneElement$1.apply(this, arguments);\n            for(var i = 2; i < arguments.length; i++){\n                validateChildKeys(arguments[i], newElement.type);\n            }\n            validatePropTypes(newElement);\n            return newElement;\n        }\n        var ContextRegistry = ReactSharedInternals.ContextRegistry;\n        function createServerContext(globalName, defaultValue) {\n            var wasDefined = true;\n            if (!ContextRegistry[globalName]) {\n                wasDefined = false;\n                var _context = {\n                    $$typeof: REACT_SERVER_CONTEXT_TYPE,\n                    // As a workaround to support multiple concurrent renderers, we categorize\n                    // some renderers as primary and others as secondary. We only expect\n                    // there to be two concurrent renderers at most: React Native (primary) and\n                    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n                    // Secondary renderers store their context values on separate fields.\n                    _currentValue: defaultValue,\n                    _currentValue2: defaultValue,\n                    _defaultValue: defaultValue,\n                    // Used to track how many concurrent renderers this context currently\n                    // supports within in a single renderer. Such as parallel server rendering.\n                    _threadCount: 0,\n                    // These are circular\n                    Provider: null,\n                    Consumer: null,\n                    _globalName: globalName\n                };\n                _context.Provider = {\n                    $$typeof: REACT_PROVIDER_TYPE,\n                    _context: _context\n                };\n                {\n                    var hasWarnedAboutUsingConsumer;\n                    _context._currentRenderer = null;\n                    _context._currentRenderer2 = null;\n                    Object.defineProperties(_context, {\n                        Consumer: {\n                            get: function() {\n                                if (!hasWarnedAboutUsingConsumer) {\n                                    error(\"Consumer pattern is not supported by ReactServerContext\");\n                                    hasWarnedAboutUsingConsumer = true;\n                                }\n                                return null;\n                            }\n                        }\n                    });\n                }\n                ContextRegistry[globalName] = _context;\n            }\n            var context = ContextRegistry[globalName];\n            if (context._defaultValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {\n                context._defaultValue = defaultValue;\n                if (context._currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {\n                    context._currentValue = defaultValue;\n                }\n                if (context._currentValue2 === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {\n                    context._currentValue2 = defaultValue;\n                }\n            } else if (wasDefined) {\n                throw new Error(\"ServerContext: \" + globalName + \" already defined\");\n            }\n            return context;\n        }\n        function startTransition(scope, options) {\n            var prevTransition = ReactCurrentBatchConfig.transition;\n            ReactCurrentBatchConfig.transition = {};\n            var currentTransition = ReactCurrentBatchConfig.transition;\n            {\n                ReactCurrentBatchConfig.transition._updatedFibers = new Set();\n            }\n            try {\n                scope();\n            } finally{\n                ReactCurrentBatchConfig.transition = prevTransition;\n                {\n                    if (prevTransition === null && currentTransition._updatedFibers) {\n                        var updatedFibersCount = currentTransition._updatedFibers.size;\n                        currentTransition._updatedFibers.clear();\n                        if (updatedFibersCount > 10) {\n                            warn(\"Detected a large number of updates inside startTransition. \" + \"If this is due to a subscription please re-write it to use React provided hooks. \" + \"Otherwise concurrent mode guarantees are off the table.\");\n                        }\n                    }\n                }\n            }\n        }\n        var createElement = createElementWithValidation;\n        var cloneElement = cloneElementWithValidation;\n        var Children = {\n            map: mapChildren,\n            forEach: forEachChildren,\n            count: countChildren,\n            toArray: toArray,\n            only: onlyChild\n        };\n        exports.Children = Children;\n        exports.Fragment = REACT_FRAGMENT_TYPE;\n        exports.Profiler = REACT_PROFILER_TYPE;\n        exports.StrictMode = REACT_STRICT_MODE_TYPE;\n        exports.Suspense = REACT_SUSPENSE_TYPE;\n        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;\n        exports.cache = cache;\n        exports.cloneElement = cloneElement;\n        exports.createElement = createElement;\n        exports.createRef = createRef;\n        exports.createServerContext = createServerContext;\n        exports.forwardRef = forwardRef;\n        exports.isValidElement = isValidElement;\n        exports.lazy = lazy;\n        exports.memo = memo;\n        exports.startTransition = startTransition;\n        exports.use = use;\n        exports.useCallback = useCallback;\n        exports.useContext = useContext;\n        exports.useDebugValue = useDebugValue;\n        exports.useId = useId;\n        exports.useMemo = useMemo;\n        exports.version = ReactVersion;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react/cjs/react.shared-subset.development.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/react/react.shared-subset.js":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/react.shared-subset.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react.shared-subset.development.js */ \"(rsc)/./node_modules/next/dist/compiled/react/cjs/react.shared-subset.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L3JlYWN0LnNoYXJlZC1zdWJzZXQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxLQUF5QixFQUFjLEVBRTFDLE1BQU07SUFDTEMsNEtBQXlCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FoZWd1cnUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvcmVhY3Quc2hhcmVkLXN1YnNldC5qcz9jNjIyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5zaGFyZWQtc3Vic2V0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnNoYXJlZC1zdWJzZXQuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6WyJwcm9jZXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/react/react.shared-subset.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@react-email/render/dist/node/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@react-email/render/dist/node/index.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   plainTextSelectors: () => (/* binding */ plainTextSelectors),\n/* harmony export */   render: () => (/* binding */ render),\n/* harmony export */   renderAsync: () => (/* binding */ renderAsync)\n/* harmony export */ });\n/* harmony import */ var html_to_text__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! html-to-text */ \"(rsc)/./node_modules/html-to-text/lib/html-to-text.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(rsc)/./node_modules/next/dist/compiled/react/react.shared-subset.js\");\n/* harmony import */ var prettier_plugins_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prettier/plugins/html */ \"prettier/plugins/html\");\n/* harmony import */ var prettier_standalone__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prettier/standalone */ \"prettier/standalone\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react/jsx-runtime */ \"react/jsx-runtime\");\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));\nvar __async = (__this, __arguments, generator)=>{\n    return new Promise((resolve, reject)=>{\n        var fulfilled = (value)=>{\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var rejected = (value)=>{\n            try {\n                step(generator.throw(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var step = (x)=>x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n        step((generator = generator.apply(__this, __arguments)).next());\n    });\n};\n// src/node/render.tsx\n\n\n// src/shared/plain-text-selectors.ts\nvar plainTextSelectors = [\n    {\n        selector: \"img\",\n        format: \"skip\"\n    },\n    {\n        selector: \"#__react-email-preview\",\n        format: \"skip\"\n    },\n    {\n        selector: \"a\",\n        options: {\n            linkBrackets: false\n        }\n    }\n];\n// src/shared/utils/pretty.ts\n\n\nfunction recursivelyMapDoc(doc, callback) {\n    if (Array.isArray(doc)) {\n        return doc.map((innerDoc)=>recursivelyMapDoc(innerDoc, callback));\n    }\n    if (typeof doc === \"object\") {\n        if (doc.type === \"group\") {\n            return __spreadProps(__spreadValues({}, doc), {\n                contents: recursivelyMapDoc(doc.contents, callback),\n                expandedStates: recursivelyMapDoc(doc.expandedStates, callback)\n            });\n        }\n        if (\"contents\" in doc) {\n            return __spreadProps(__spreadValues({}, doc), {\n                contents: recursivelyMapDoc(doc.contents, callback)\n            });\n        }\n        if (\"parts\" in doc) {\n            return __spreadProps(__spreadValues({}, doc), {\n                parts: recursivelyMapDoc(doc.parts, callback)\n            });\n        }\n        if (doc.type === \"if-break\") {\n            return __spreadProps(__spreadValues({}, doc), {\n                breakContents: recursivelyMapDoc(doc.breakContents, callback),\n                flatContents: recursivelyMapDoc(doc.flatContents, callback)\n            });\n        }\n    }\n    return callback(doc);\n}\nvar modifiedHtml = __spreadValues({}, prettier_plugins_html__WEBPACK_IMPORTED_MODULE_2__);\nif (modifiedHtml.printers) {\n    const previousPrint = modifiedHtml.printers.html.print;\n    modifiedHtml.printers.html.print = (path, options, print, args)=>{\n        const node = path.getNode();\n        const rawPrintingResult = previousPrint(path, options, print, args);\n        if (node.type === \"ieConditionalComment\") {\n            const printingResult = recursivelyMapDoc(rawPrintingResult, (doc)=>{\n                if (typeof doc === \"object\" && doc.type === \"line\") {\n                    return doc.soft ? \"\" : \" \";\n                }\n                return doc;\n            });\n            return printingResult;\n        }\n        return rawPrintingResult;\n    };\n}\nvar defaults = {\n    endOfLine: \"lf\",\n    tabWidth: 2,\n    plugins: [\n        modifiedHtml\n    ],\n    bracketSameLine: true,\n    parser: \"html\"\n};\nvar pretty = (str, options = {})=>{\n    return (0,prettier_standalone__WEBPACK_IMPORTED_MODULE_3__.format)(str.replaceAll(\"\\x00\", \"\"), __spreadValues(__spreadValues({}, defaults), options));\n};\n// src/node/read-stream.ts\n\nvar decoder = new TextDecoder(\"utf-8\");\nvar readStream = (stream)=>__async(void 0, null, function*() {\n        let result = \"\";\n        if (\"pipeTo\" in stream) {\n            const writableStream = new WritableStream({\n                write (chunk) {\n                    result += decoder.decode(chunk);\n                }\n            });\n            yield stream.pipeTo(writableStream);\n        } else {\n            const writable = new node_stream__WEBPACK_IMPORTED_MODULE_4__.Writable({\n                write (chunk, _encoding, callback) {\n                    result += decoder.decode(chunk);\n                    callback();\n                }\n            });\n            stream.pipe(writable);\n            yield new Promise((resolve, reject)=>{\n                writable.on(\"error\", reject);\n                writable.on(\"close\", ()=>{\n                    resolve();\n                });\n            });\n        }\n        return result;\n    });\n// src/node/render.tsx\n\nvar render = (element, options)=>__async(void 0, null, function*() {\n        const suspendedElement = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(react__WEBPACK_IMPORTED_MODULE_1__.Suspense, {\n            children: element\n        });\n        const reactDOMServer = yield __webpack_require__.e(/*! import() */ \"_rsc_node_modules_next_dist_compiled_react-dom_server_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! react-dom/server */ \"(rsc)/./node_modules/next/dist/compiled/react-dom/server.js\", 19));\n        let html2;\n        if (Object.hasOwn(reactDOMServer, \"renderToReadableStream\")) {\n            html2 = yield readStream((yield reactDOMServer.renderToReadableStream(suspendedElement)));\n        } else {\n            yield new Promise((resolve, reject)=>{\n                const stream = reactDOMServer.renderToPipeableStream(suspendedElement, {\n                    onAllReady () {\n                        return __async(this, null, function*() {\n                            html2 = yield readStream(stream);\n                            resolve();\n                        });\n                    },\n                    onError (error) {\n                        reject(error);\n                    }\n                });\n            });\n        }\n        if (options == null ? void 0 : options.plainText) {\n            return (0,html_to_text__WEBPACK_IMPORTED_MODULE_0__.convert)(html2, __spreadValues({\n                selectors: plainTextSelectors\n            }, options.htmlToTextOptions));\n        }\n        const doctype = '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">';\n        const document = `${doctype}${html2.replace(/<!DOCTYPE.*?>/, \"\")}`;\n        if (options == null ? void 0 : options.pretty) {\n            return pretty(document);\n        }\n        return document;\n    });\n// src/node/render-async.tsx\n\n\n\nvar renderAsync = (element, options)=>__async(void 0, null, function*() {\n        const suspendedElement = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(react__WEBPACK_IMPORTED_MODULE_1__.Suspense, {\n            children: element\n        });\n        const reactDOMServer = yield __webpack_require__.e(/*! import() */ \"_rsc_node_modules_next_dist_compiled_react-dom_server_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! react-dom/server */ \"(rsc)/./node_modules/next/dist/compiled/react-dom/server.js\", 19));\n        let html2;\n        if (Object.hasOwn(reactDOMServer, \"renderToReadableStream\")) {\n            html2 = yield readStream((yield reactDOMServer.renderToReadableStream(suspendedElement)));\n        } else {\n            yield new Promise((resolve, reject)=>{\n                const stream = reactDOMServer.renderToPipeableStream(suspendedElement, {\n                    onAllReady () {\n                        return __async(this, null, function*() {\n                            html2 = yield readStream(stream);\n                            resolve();\n                        });\n                    },\n                    onError (error) {\n                        reject(error);\n                    }\n                });\n            });\n        }\n        if (options == null ? void 0 : options.plainText) {\n            return (0,html_to_text__WEBPACK_IMPORTED_MODULE_0__.convert)(html2, __spreadValues({\n                selectors: plainTextSelectors\n            }, options.htmlToTextOptions));\n        }\n        const doctype = '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">';\n        const document = `${doctype}${html2.replace(/<!DOCTYPE.*?>/, \"\")}`;\n        if (options == null ? void 0 : options.pretty) {\n            return pretty(document);\n        }\n        return document;\n    });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@react-email/render/dist/node/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@selderee/plugin-htmlparser2/lib/hp2-builder.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@selderee/plugin-htmlparser2/lib/hp2-builder.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hp2Builder: () => (/* binding */ hp2Builder)\n/* harmony export */ });\n/* harmony import */ var domhandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domhandler */ \"(rsc)/./node_modules/domhandler/lib/esm/index.js\");\n/* harmony import */ var selderee__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! selderee */ \"(rsc)/./node_modules/selderee/lib/selderee.mjs\");\n\n\nfunction hp2Builder(nodes) {\n    return new selderee__WEBPACK_IMPORTED_MODULE_1__.Picker(handleArray(nodes));\n}\nfunction handleArray(nodes) {\n    const matchers = nodes.map(handleNode);\n    return (el, ...tail)=>matchers.flatMap((m)=>m(el, ...tail));\n}\nfunction handleNode(node) {\n    switch(node.type){\n        case \"terminal\":\n            {\n                const result = [\n                    node.valueContainer\n                ];\n                return (el, ...tail)=>result;\n            }\n        case \"tagName\":\n            return handleTagName(node);\n        case \"attrValue\":\n            return handleAttrValueName(node);\n        case \"attrPresence\":\n            return handleAttrPresenceName(node);\n        case \"pushElement\":\n            return handlePushElementNode(node);\n        case \"popElement\":\n            return handlePopElementNode(node);\n    }\n}\nfunction handleTagName(node) {\n    const variants = {};\n    for (const variant of node.variants){\n        variants[variant.value] = handleArray(variant.cont);\n    }\n    return (el, ...tail)=>{\n        const continuation = variants[el.name];\n        return continuation ? continuation(el, ...tail) : [];\n    };\n}\nfunction handleAttrPresenceName(node) {\n    const attrName = node.name;\n    const continuation = handleArray(node.cont);\n    return (el, ...tail)=>Object.prototype.hasOwnProperty.call(el.attribs, attrName) ? continuation(el, ...tail) : [];\n}\nfunction handleAttrValueName(node) {\n    const callbacks = [];\n    for (const matcher of node.matchers){\n        const predicate = matcher.predicate;\n        const continuation = handleArray(matcher.cont);\n        callbacks.push((attr, el, ...tail)=>predicate(attr) ? continuation(el, ...tail) : []);\n    }\n    const attrName = node.name;\n    return (el, ...tail)=>{\n        const attr = el.attribs[attrName];\n        return attr || attr === \"\" ? callbacks.flatMap((cb)=>cb(attr, el, ...tail)) : [];\n    };\n}\nfunction handlePushElementNode(node) {\n    const continuation = handleArray(node.cont);\n    const leftElementGetter = node.combinator === \"+\" ? getPrecedingElement : getParentElement;\n    return (el, ...tail)=>{\n        const next = leftElementGetter(el);\n        if (next === null) {\n            return [];\n        }\n        return continuation(next, el, ...tail);\n    };\n}\nconst getPrecedingElement = (el)=>{\n    const prev = el.prev;\n    if (prev === null) {\n        return null;\n    }\n    return (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag)(prev) ? prev : getPrecedingElement(prev);\n};\nconst getParentElement = (el)=>{\n    const parent = el.parent;\n    return parent && (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag)(parent) ? parent : null;\n};\nfunction handlePopElementNode(node) {\n    const continuation = handleArray(node.cont);\n    return (el, next, ...tail)=>continuation(next, ...tail);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbGRlcmVlL3BsdWdpbi1odG1scGFyc2VyMi9saWIvaHAyLWJ1aWxkZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFtQztBQUNEO0FBRWxDLFNBQVNFLFdBQVdDLEtBQUs7SUFDckIsT0FBTyxJQUFJRiw0Q0FBTUEsQ0FBQ0csWUFBWUQ7QUFDbEM7QUFDQSxTQUFTQyxZQUFZRCxLQUFLO0lBQ3RCLE1BQU1FLFdBQVdGLE1BQU1HLEdBQUcsQ0FBQ0M7SUFDM0IsT0FBTyxDQUFDQyxJQUFJLEdBQUdDLE9BQVNKLFNBQVNLLE9BQU8sQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRUgsT0FBT0M7QUFDM0Q7QUFDQSxTQUFTRixXQUFXSyxJQUFJO0lBQ3BCLE9BQVFBLEtBQUtDLElBQUk7UUFDYixLQUFLO1lBQVk7Z0JBQ2IsTUFBTUMsU0FBUztvQkFBQ0YsS0FBS0csY0FBYztpQkFBQztnQkFDcEMsT0FBTyxDQUFDUCxJQUFJLEdBQUdDLE9BQVNLO1lBQzVCO1FBQ0EsS0FBSztZQUNELE9BQU9FLGNBQWNKO1FBQ3pCLEtBQUs7WUFDRCxPQUFPSyxvQkFBb0JMO1FBQy9CLEtBQUs7WUFDRCxPQUFPTSx1QkFBdUJOO1FBQ2xDLEtBQUs7WUFDRCxPQUFPTyxzQkFBc0JQO1FBQ2pDLEtBQUs7WUFDRCxPQUFPUSxxQkFBcUJSO0lBQ3BDO0FBQ0o7QUFDQSxTQUFTSSxjQUFjSixJQUFJO0lBQ3ZCLE1BQU1TLFdBQVcsQ0FBQztJQUNsQixLQUFLLE1BQU1DLFdBQVdWLEtBQUtTLFFBQVEsQ0FBRTtRQUNqQ0EsUUFBUSxDQUFDQyxRQUFRQyxLQUFLLENBQUMsR0FBR25CLFlBQVlrQixRQUFRRSxJQUFJO0lBQ3REO0lBQ0EsT0FBTyxDQUFDaEIsSUFBSSxHQUFHQztRQUNYLE1BQU1nQixlQUFlSixRQUFRLENBQUNiLEdBQUdrQixJQUFJLENBQUM7UUFDdEMsT0FBTyxlQUFpQkQsYUFBYWpCLE9BQU9DLFFBQVEsRUFBRTtJQUMxRDtBQUNKO0FBQ0EsU0FBU1MsdUJBQXVCTixJQUFJO0lBQ2hDLE1BQU1lLFdBQVdmLEtBQUtjLElBQUk7SUFDMUIsTUFBTUQsZUFBZXJCLFlBQVlRLEtBQUtZLElBQUk7SUFDMUMsT0FBTyxDQUFDaEIsSUFBSSxHQUFHQyxPQUFTLE9BQVFvQixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDdkIsR0FBR3dCLE9BQU8sRUFBRUwsWUFDcEVGLGFBQWFqQixPQUFPQyxRQUNwQixFQUFFO0FBQ1o7QUFDQSxTQUFTUSxvQkFBb0JMLElBQUk7SUFDN0IsTUFBTXFCLFlBQVksRUFBRTtJQUNwQixLQUFLLE1BQU1DLFdBQVd0QixLQUFLUCxRQUFRLENBQUU7UUFDakMsTUFBTThCLFlBQVlELFFBQVFDLFNBQVM7UUFDbkMsTUFBTVYsZUFBZXJCLFlBQVk4QixRQUFRVixJQUFJO1FBQzdDUyxVQUFVRyxJQUFJLENBQUMsQ0FBQ0MsTUFBTTdCLElBQUksR0FBR0MsT0FBVTBCLFVBQVVFLFFBQVFaLGFBQWFqQixPQUFPQyxRQUFRLEVBQUU7SUFDM0Y7SUFDQSxNQUFNa0IsV0FBV2YsS0FBS2MsSUFBSTtJQUMxQixPQUFPLENBQUNsQixJQUFJLEdBQUdDO1FBQ1gsTUFBTTRCLE9BQU83QixHQUFHd0IsT0FBTyxDQUFDTCxTQUFTO1FBQ2pDLE9BQU8sUUFBU1UsU0FBUyxLQUNuQkosVUFBVXZCLE9BQU8sQ0FBQzRCLENBQUFBLEtBQU1BLEdBQUdELE1BQU03QixPQUFPQyxTQUN4QyxFQUFFO0lBQ1o7QUFDSjtBQUNBLFNBQVNVLHNCQUFzQlAsSUFBSTtJQUMvQixNQUFNYSxlQUFlckIsWUFBWVEsS0FBS1ksSUFBSTtJQUMxQyxNQUFNZSxvQkFBb0IsS0FBTUMsVUFBVSxLQUFLLE1BQ3pDQyxzQkFDQUM7SUFDTixPQUFPLENBQUNsQyxJQUFJLEdBQUdDO1FBQ1gsTUFBTWtDLE9BQU9KLGtCQUFrQi9CO1FBQy9CLElBQUltQyxTQUFTLE1BQU07WUFDZixPQUFPLEVBQUU7UUFDYjtRQUNBLE9BQU9sQixhQUFha0IsTUFBTW5DLE9BQU9DO0lBQ3JDO0FBQ0o7QUFDQSxNQUFNZ0Msc0JBQXNCLENBQUNqQztJQUN6QixNQUFNb0MsT0FBT3BDLEdBQUdvQyxJQUFJO0lBQ3BCLElBQUlBLFNBQVMsTUFBTTtRQUNmLE9BQU87SUFDWDtJQUNBLE9BQU8sa0RBQU9BLFFBQVNBLE9BQU9ILG9CQUFvQkc7QUFDdEQ7QUFDQSxNQUFNRixtQkFBbUIsQ0FBQ2xDO0lBQ3RCLE1BQU1xQyxTQUFTckMsR0FBR3FDLE1BQU07SUFDeEIsT0FBTyxVQUFXN0MsaURBQUtBLENBQUM2QyxVQUFXQSxTQUFTO0FBQ2hEO0FBQ0EsU0FBU3pCLHFCQUFxQlIsSUFBSTtJQUM5QixNQUFNYSxlQUFlckIsWUFBWVEsS0FBS1ksSUFBSTtJQUMxQyxPQUFPLENBQUNoQixJQUFJbUMsTUFBTSxHQUFHbEMsT0FBU2dCLGFBQWFrQixTQUFTbEM7QUFDeEQ7QUFFc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YWhlZ3VydS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0BzZWxkZXJlZS9wbHVnaW4taHRtbHBhcnNlcjIvbGliL2hwMi1idWlsZGVyLm1qcz84YzQyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzVGFnIH0gZnJvbSAnZG9taGFuZGxlcic7XG5pbXBvcnQgeyBQaWNrZXIgfSBmcm9tICdzZWxkZXJlZSc7XG5cbmZ1bmN0aW9uIGhwMkJ1aWxkZXIobm9kZXMpIHtcbiAgICByZXR1cm4gbmV3IFBpY2tlcihoYW5kbGVBcnJheShub2RlcykpO1xufVxuZnVuY3Rpb24gaGFuZGxlQXJyYXkobm9kZXMpIHtcbiAgICBjb25zdCBtYXRjaGVycyA9IG5vZGVzLm1hcChoYW5kbGVOb2RlKTtcbiAgICByZXR1cm4gKGVsLCAuLi50YWlsKSA9PiBtYXRjaGVycy5mbGF0TWFwKG0gPT4gbShlbCwgLi4udGFpbCkpO1xufVxuZnVuY3Rpb24gaGFuZGxlTm9kZShub2RlKSB7XG4gICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgY2FzZSAndGVybWluYWwnOiB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBbbm9kZS52YWx1ZUNvbnRhaW5lcl07XG4gICAgICAgICAgICByZXR1cm4gKGVsLCAuLi50YWlsKSA9PiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAndGFnTmFtZSc6XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlVGFnTmFtZShub2RlKTtcbiAgICAgICAgY2FzZSAnYXR0clZhbHVlJzpcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVBdHRyVmFsdWVOYW1lKG5vZGUpO1xuICAgICAgICBjYXNlICdhdHRyUHJlc2VuY2UnOlxuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZUF0dHJQcmVzZW5jZU5hbWUobm9kZSk7XG4gICAgICAgIGNhc2UgJ3B1c2hFbGVtZW50JzpcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVQdXNoRWxlbWVudE5vZGUobm9kZSk7XG4gICAgICAgIGNhc2UgJ3BvcEVsZW1lbnQnOlxuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVBvcEVsZW1lbnROb2RlKG5vZGUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGhhbmRsZVRhZ05hbWUobm9kZSkge1xuICAgIGNvbnN0IHZhcmlhbnRzID0ge307XG4gICAgZm9yIChjb25zdCB2YXJpYW50IG9mIG5vZGUudmFyaWFudHMpIHtcbiAgICAgICAgdmFyaWFudHNbdmFyaWFudC52YWx1ZV0gPSBoYW5kbGVBcnJheSh2YXJpYW50LmNvbnQpO1xuICAgIH1cbiAgICByZXR1cm4gKGVsLCAuLi50YWlsKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbnRpbnVhdGlvbiA9IHZhcmlhbnRzW2VsLm5hbWVdO1xuICAgICAgICByZXR1cm4gKGNvbnRpbnVhdGlvbikgPyBjb250aW51YXRpb24oZWwsIC4uLnRhaWwpIDogW107XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGhhbmRsZUF0dHJQcmVzZW5jZU5hbWUobm9kZSkge1xuICAgIGNvbnN0IGF0dHJOYW1lID0gbm9kZS5uYW1lO1xuICAgIGNvbnN0IGNvbnRpbnVhdGlvbiA9IGhhbmRsZUFycmF5KG5vZGUuY29udCk7XG4gICAgcmV0dXJuIChlbCwgLi4udGFpbCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlbC5hdHRyaWJzLCBhdHRyTmFtZSkpXG4gICAgICAgID8gY29udGludWF0aW9uKGVsLCAuLi50YWlsKVxuICAgICAgICA6IFtdO1xufVxuZnVuY3Rpb24gaGFuZGxlQXR0clZhbHVlTmFtZShub2RlKSB7XG4gICAgY29uc3QgY2FsbGJhY2tzID0gW107XG4gICAgZm9yIChjb25zdCBtYXRjaGVyIG9mIG5vZGUubWF0Y2hlcnMpIHtcbiAgICAgICAgY29uc3QgcHJlZGljYXRlID0gbWF0Y2hlci5wcmVkaWNhdGU7XG4gICAgICAgIGNvbnN0IGNvbnRpbnVhdGlvbiA9IGhhbmRsZUFycmF5KG1hdGNoZXIuY29udCk7XG4gICAgICAgIGNhbGxiYWNrcy5wdXNoKChhdHRyLCBlbCwgLi4udGFpbCkgPT4gKHByZWRpY2F0ZShhdHRyKSA/IGNvbnRpbnVhdGlvbihlbCwgLi4udGFpbCkgOiBbXSkpO1xuICAgIH1cbiAgICBjb25zdCBhdHRyTmFtZSA9IG5vZGUubmFtZTtcbiAgICByZXR1cm4gKGVsLCAuLi50YWlsKSA9PiB7XG4gICAgICAgIGNvbnN0IGF0dHIgPSBlbC5hdHRyaWJzW2F0dHJOYW1lXTtcbiAgICAgICAgcmV0dXJuIChhdHRyIHx8IGF0dHIgPT09ICcnKVxuICAgICAgICAgICAgPyBjYWxsYmFja3MuZmxhdE1hcChjYiA9PiBjYihhdHRyLCBlbCwgLi4udGFpbCkpXG4gICAgICAgICAgICA6IFtdO1xuICAgIH07XG59XG5mdW5jdGlvbiBoYW5kbGVQdXNoRWxlbWVudE5vZGUobm9kZSkge1xuICAgIGNvbnN0IGNvbnRpbnVhdGlvbiA9IGhhbmRsZUFycmF5KG5vZGUuY29udCk7XG4gICAgY29uc3QgbGVmdEVsZW1lbnRHZXR0ZXIgPSAobm9kZS5jb21iaW5hdG9yID09PSAnKycpXG4gICAgICAgID8gZ2V0UHJlY2VkaW5nRWxlbWVudFxuICAgICAgICA6IGdldFBhcmVudEVsZW1lbnQ7XG4gICAgcmV0dXJuIChlbCwgLi4udGFpbCkgPT4ge1xuICAgICAgICBjb25zdCBuZXh0ID0gbGVmdEVsZW1lbnRHZXR0ZXIoZWwpO1xuICAgICAgICBpZiAobmV4dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250aW51YXRpb24obmV4dCwgZWwsIC4uLnRhaWwpO1xuICAgIH07XG59XG5jb25zdCBnZXRQcmVjZWRpbmdFbGVtZW50ID0gKGVsKSA9PiB7XG4gICAgY29uc3QgcHJldiA9IGVsLnByZXY7XG4gICAgaWYgKHByZXYgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiAoaXNUYWcocHJldikpID8gcHJldiA6IGdldFByZWNlZGluZ0VsZW1lbnQocHJldik7XG59O1xuY29uc3QgZ2V0UGFyZW50RWxlbWVudCA9IChlbCkgPT4ge1xuICAgIGNvbnN0IHBhcmVudCA9IGVsLnBhcmVudDtcbiAgICByZXR1cm4gKHBhcmVudCAmJiBpc1RhZyhwYXJlbnQpKSA/IHBhcmVudCA6IG51bGw7XG59O1xuZnVuY3Rpb24gaGFuZGxlUG9wRWxlbWVudE5vZGUobm9kZSkge1xuICAgIGNvbnN0IGNvbnRpbnVhdGlvbiA9IGhhbmRsZUFycmF5KG5vZGUuY29udCk7XG4gICAgcmV0dXJuIChlbCwgbmV4dCwgLi4udGFpbCkgPT4gY29udGludWF0aW9uKG5leHQsIC4uLnRhaWwpO1xufVxuXG5leHBvcnQgeyBocDJCdWlsZGVyIH07XG4iXSwibmFtZXMiOlsiaXNUYWciLCJQaWNrZXIiLCJocDJCdWlsZGVyIiwibm9kZXMiLCJoYW5kbGVBcnJheSIsIm1hdGNoZXJzIiwibWFwIiwiaGFuZGxlTm9kZSIsImVsIiwidGFpbCIsImZsYXRNYXAiLCJtIiwibm9kZSIsInR5cGUiLCJyZXN1bHQiLCJ2YWx1ZUNvbnRhaW5lciIsImhhbmRsZVRhZ05hbWUiLCJoYW5kbGVBdHRyVmFsdWVOYW1lIiwiaGFuZGxlQXR0clByZXNlbmNlTmFtZSIsImhhbmRsZVB1c2hFbGVtZW50Tm9kZSIsImhhbmRsZVBvcEVsZW1lbnROb2RlIiwidmFyaWFudHMiLCJ2YXJpYW50IiwidmFsdWUiLCJjb250IiwiY29udGludWF0aW9uIiwibmFtZSIsImF0dHJOYW1lIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXR0cmlicyIsImNhbGxiYWNrcyIsIm1hdGNoZXIiLCJwcmVkaWNhdGUiLCJwdXNoIiwiYXR0ciIsImNiIiwibGVmdEVsZW1lbnRHZXR0ZXIiLCJjb21iaW5hdG9yIiwiZ2V0UHJlY2VkaW5nRWxlbWVudCIsImdldFBhcmVudEVsZW1lbnQiLCJuZXh0IiwicHJldiIsInBhcmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@selderee/plugin-htmlparser2/lib/hp2-builder.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/dom-serializer/lib/esm/foreignNames.js":
/*!*************************************************************!*\
  !*** ./node_modules/dom-serializer/lib/esm/foreignNames.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   attributeNames: () => (/* binding */ attributeNames),\n/* harmony export */   elementNames: () => (/* binding */ elementNames)\n/* harmony export */ });\nconst elementNames = new Map([\n    \"altGlyph\",\n    \"altGlyphDef\",\n    \"altGlyphItem\",\n    \"animateColor\",\n    \"animateMotion\",\n    \"animateTransform\",\n    \"clipPath\",\n    \"feBlend\",\n    \"feColorMatrix\",\n    \"feComponentTransfer\",\n    \"feComposite\",\n    \"feConvolveMatrix\",\n    \"feDiffuseLighting\",\n    \"feDisplacementMap\",\n    \"feDistantLight\",\n    \"feDropShadow\",\n    \"feFlood\",\n    \"feFuncA\",\n    \"feFuncB\",\n    \"feFuncG\",\n    \"feFuncR\",\n    \"feGaussianBlur\",\n    \"feImage\",\n    \"feMerge\",\n    \"feMergeNode\",\n    \"feMorphology\",\n    \"feOffset\",\n    \"fePointLight\",\n    \"feSpecularLighting\",\n    \"feSpotLight\",\n    \"feTile\",\n    \"feTurbulence\",\n    \"foreignObject\",\n    \"glyphRef\",\n    \"linearGradient\",\n    \"radialGradient\",\n    \"textPath\"\n].map((val)=>[\n        val.toLowerCase(),\n        val\n    ]));\nconst attributeNames = new Map([\n    \"definitionURL\",\n    \"attributeName\",\n    \"attributeType\",\n    \"baseFrequency\",\n    \"baseProfile\",\n    \"calcMode\",\n    \"clipPathUnits\",\n    \"diffuseConstant\",\n    \"edgeMode\",\n    \"filterUnits\",\n    \"glyphRef\",\n    \"gradientTransform\",\n    \"gradientUnits\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keyPoints\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"lengthAdjust\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerUnits\",\n    \"markerWidth\",\n    \"maskContentUnits\",\n    \"maskUnits\",\n    \"numOctaves\",\n    \"pathLength\",\n    \"patternContentUnits\",\n    \"patternTransform\",\n    \"patternUnits\",\n    \"pointsAtX\",\n    \"pointsAtY\",\n    \"pointsAtZ\",\n    \"preserveAlpha\",\n    \"preserveAspectRatio\",\n    \"primitiveUnits\",\n    \"refX\",\n    \"refY\",\n    \"repeatCount\",\n    \"repeatDur\",\n    \"requiredExtensions\",\n    \"requiredFeatures\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"spreadMethod\",\n    \"startOffset\",\n    \"stdDeviation\",\n    \"stitchTiles\",\n    \"surfaceScale\",\n    \"systemLanguage\",\n    \"tableValues\",\n    \"targetX\",\n    \"targetY\",\n    \"textLength\",\n    \"viewBox\",\n    \"viewTarget\",\n    \"xChannelSelector\",\n    \"yChannelSelector\",\n    \"zoomAndPan\"\n].map((val)=>[\n        val.toLowerCase(),\n        val\n    ]));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9tLXNlcmlhbGl6ZXIvbGliL2VzbS9mb3JlaWduTmFtZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxNQUFNQSxlQUFlLElBQUlDLElBQUk7SUFDaEM7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDSCxDQUFDQyxHQUFHLENBQUMsQ0FBQ0MsTUFBUTtRQUFDQSxJQUFJQyxXQUFXO1FBQUlEO0tBQUksR0FBRztBQUNuQyxNQUFNRSxpQkFBaUIsSUFBSUosSUFBSTtJQUNsQztJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0gsQ0FBQ0MsR0FBRyxDQUFDLENBQUNDLE1BQVE7UUFBQ0EsSUFBSUMsV0FBVztRQUFJRDtLQUFJLEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YWhlZ3VydS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2RvbS1zZXJpYWxpemVyL2xpYi9lc20vZm9yZWlnbk5hbWVzLmpzPzI5YzQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGVsZW1lbnROYW1lcyA9IG5ldyBNYXAoW1xuICAgIFwiYWx0R2x5cGhcIixcbiAgICBcImFsdEdseXBoRGVmXCIsXG4gICAgXCJhbHRHbHlwaEl0ZW1cIixcbiAgICBcImFuaW1hdGVDb2xvclwiLFxuICAgIFwiYW5pbWF0ZU1vdGlvblwiLFxuICAgIFwiYW5pbWF0ZVRyYW5zZm9ybVwiLFxuICAgIFwiY2xpcFBhdGhcIixcbiAgICBcImZlQmxlbmRcIixcbiAgICBcImZlQ29sb3JNYXRyaXhcIixcbiAgICBcImZlQ29tcG9uZW50VHJhbnNmZXJcIixcbiAgICBcImZlQ29tcG9zaXRlXCIsXG4gICAgXCJmZUNvbnZvbHZlTWF0cml4XCIsXG4gICAgXCJmZURpZmZ1c2VMaWdodGluZ1wiLFxuICAgIFwiZmVEaXNwbGFjZW1lbnRNYXBcIixcbiAgICBcImZlRGlzdGFudExpZ2h0XCIsXG4gICAgXCJmZURyb3BTaGFkb3dcIixcbiAgICBcImZlRmxvb2RcIixcbiAgICBcImZlRnVuY0FcIixcbiAgICBcImZlRnVuY0JcIixcbiAgICBcImZlRnVuY0dcIixcbiAgICBcImZlRnVuY1JcIixcbiAgICBcImZlR2F1c3NpYW5CbHVyXCIsXG4gICAgXCJmZUltYWdlXCIsXG4gICAgXCJmZU1lcmdlXCIsXG4gICAgXCJmZU1lcmdlTm9kZVwiLFxuICAgIFwiZmVNb3JwaG9sb2d5XCIsXG4gICAgXCJmZU9mZnNldFwiLFxuICAgIFwiZmVQb2ludExpZ2h0XCIsXG4gICAgXCJmZVNwZWN1bGFyTGlnaHRpbmdcIixcbiAgICBcImZlU3BvdExpZ2h0XCIsXG4gICAgXCJmZVRpbGVcIixcbiAgICBcImZlVHVyYnVsZW5jZVwiLFxuICAgIFwiZm9yZWlnbk9iamVjdFwiLFxuICAgIFwiZ2x5cGhSZWZcIixcbiAgICBcImxpbmVhckdyYWRpZW50XCIsXG4gICAgXCJyYWRpYWxHcmFkaWVudFwiLFxuICAgIFwidGV4dFBhdGhcIixcbl0ubWFwKCh2YWwpID0+IFt2YWwudG9Mb3dlckNhc2UoKSwgdmFsXSkpO1xuZXhwb3J0IGNvbnN0IGF0dHJpYnV0ZU5hbWVzID0gbmV3IE1hcChbXG4gICAgXCJkZWZpbml0aW9uVVJMXCIsXG4gICAgXCJhdHRyaWJ1dGVOYW1lXCIsXG4gICAgXCJhdHRyaWJ1dGVUeXBlXCIsXG4gICAgXCJiYXNlRnJlcXVlbmN5XCIsXG4gICAgXCJiYXNlUHJvZmlsZVwiLFxuICAgIFwiY2FsY01vZGVcIixcbiAgICBcImNsaXBQYXRoVW5pdHNcIixcbiAgICBcImRpZmZ1c2VDb25zdGFudFwiLFxuICAgIFwiZWRnZU1vZGVcIixcbiAgICBcImZpbHRlclVuaXRzXCIsXG4gICAgXCJnbHlwaFJlZlwiLFxuICAgIFwiZ3JhZGllbnRUcmFuc2Zvcm1cIixcbiAgICBcImdyYWRpZW50VW5pdHNcIixcbiAgICBcImtlcm5lbE1hdHJpeFwiLFxuICAgIFwia2VybmVsVW5pdExlbmd0aFwiLFxuICAgIFwia2V5UG9pbnRzXCIsXG4gICAgXCJrZXlTcGxpbmVzXCIsXG4gICAgXCJrZXlUaW1lc1wiLFxuICAgIFwibGVuZ3RoQWRqdXN0XCIsXG4gICAgXCJsaW1pdGluZ0NvbmVBbmdsZVwiLFxuICAgIFwibWFya2VySGVpZ2h0XCIsXG4gICAgXCJtYXJrZXJVbml0c1wiLFxuICAgIFwibWFya2VyV2lkdGhcIixcbiAgICBcIm1hc2tDb250ZW50VW5pdHNcIixcbiAgICBcIm1hc2tVbml0c1wiLFxuICAgIFwibnVtT2N0YXZlc1wiLFxuICAgIFwicGF0aExlbmd0aFwiLFxuICAgIFwicGF0dGVybkNvbnRlbnRVbml0c1wiLFxuICAgIFwicGF0dGVyblRyYW5zZm9ybVwiLFxuICAgIFwicGF0dGVyblVuaXRzXCIsXG4gICAgXCJwb2ludHNBdFhcIixcbiAgICBcInBvaW50c0F0WVwiLFxuICAgIFwicG9pbnRzQXRaXCIsXG4gICAgXCJwcmVzZXJ2ZUFscGhhXCIsXG4gICAgXCJwcmVzZXJ2ZUFzcGVjdFJhdGlvXCIsXG4gICAgXCJwcmltaXRpdmVVbml0c1wiLFxuICAgIFwicmVmWFwiLFxuICAgIFwicmVmWVwiLFxuICAgIFwicmVwZWF0Q291bnRcIixcbiAgICBcInJlcGVhdER1clwiLFxuICAgIFwicmVxdWlyZWRFeHRlbnNpb25zXCIsXG4gICAgXCJyZXF1aXJlZEZlYXR1cmVzXCIsXG4gICAgXCJzcGVjdWxhckNvbnN0YW50XCIsXG4gICAgXCJzcGVjdWxhckV4cG9uZW50XCIsXG4gICAgXCJzcHJlYWRNZXRob2RcIixcbiAgICBcInN0YXJ0T2Zmc2V0XCIsXG4gICAgXCJzdGREZXZpYXRpb25cIixcbiAgICBcInN0aXRjaFRpbGVzXCIsXG4gICAgXCJzdXJmYWNlU2NhbGVcIixcbiAgICBcInN5c3RlbUxhbmd1YWdlXCIsXG4gICAgXCJ0YWJsZVZhbHVlc1wiLFxuICAgIFwidGFyZ2V0WFwiLFxuICAgIFwidGFyZ2V0WVwiLFxuICAgIFwidGV4dExlbmd0aFwiLFxuICAgIFwidmlld0JveFwiLFxuICAgIFwidmlld1RhcmdldFwiLFxuICAgIFwieENoYW5uZWxTZWxlY3RvclwiLFxuICAgIFwieUNoYW5uZWxTZWxlY3RvclwiLFxuICAgIFwiem9vbUFuZFBhblwiLFxuXS5tYXAoKHZhbCkgPT4gW3ZhbC50b0xvd2VyQ2FzZSgpLCB2YWxdKSk7XG4iXSwibmFtZXMiOlsiZWxlbWVudE5hbWVzIiwiTWFwIiwibWFwIiwidmFsIiwidG9Mb3dlckNhc2UiLCJhdHRyaWJ1dGVOYW1lcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dom-serializer/lib/esm/foreignNames.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dom-serializer/lib/esm/index.js":
/*!******************************************************!*\
  !*** ./node_modules/dom-serializer/lib/esm/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   render: () => (/* binding */ render)\n/* harmony export */ });\n/* harmony import */ var domelementtype__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domelementtype */ \"(rsc)/./node_modules/domelementtype/lib/esm/index.js\");\n/* harmony import */ var entities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! entities */ \"(rsc)/./node_modules/entities/lib/esm/index.js\");\n/* harmony import */ var _foreignNames_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foreignNames.js */ \"(rsc)/./node_modules/dom-serializer/lib/esm/foreignNames.js\");\n/*\n * Module dependencies\n */ \n\n/**\n * Mixed-case SVG and MathML tags & attributes\n * recognized by the HTML parser.\n *\n * @see https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign\n */ \nconst unencodedElements = new Set([\n    \"style\",\n    \"script\",\n    \"xmp\",\n    \"iframe\",\n    \"noembed\",\n    \"noframes\",\n    \"plaintext\",\n    \"noscript\"\n]);\nfunction replaceQuotes(value) {\n    return value.replace(/\"/g, \"&quot;\");\n}\n/**\n * Format attributes\n */ function formatAttributes(attributes, opts) {\n    var _a;\n    if (!attributes) return;\n    const encode = ((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) === false ? replaceQuotes : opts.xmlMode || opts.encodeEntities !== \"utf8\" ? entities__WEBPACK_IMPORTED_MODULE_1__.encodeXML : entities__WEBPACK_IMPORTED_MODULE_1__.escapeAttribute;\n    return Object.keys(attributes).map((key)=>{\n        var _a, _b;\n        const value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : \"\";\n        if (opts.xmlMode === \"foreign\") {\n            /* Fix up mixed-case attribute names */ key = (_b = _foreignNames_js__WEBPACK_IMPORTED_MODULE_2__.attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;\n        }\n        if (!opts.emptyAttrs && !opts.xmlMode && value === \"\") {\n            return key;\n        }\n        return `${key}=\"${encode(value)}\"`;\n    }).join(\" \");\n}\n/**\n * Self-enclosing tags\n */ const singleTag = new Set([\n    \"area\",\n    \"base\",\n    \"basefont\",\n    \"br\",\n    \"col\",\n    \"command\",\n    \"embed\",\n    \"frame\",\n    \"hr\",\n    \"img\",\n    \"input\",\n    \"isindex\",\n    \"keygen\",\n    \"link\",\n    \"meta\",\n    \"param\",\n    \"source\",\n    \"track\",\n    \"wbr\"\n]);\n/**\n * Renders a DOM node or an array of DOM nodes to a string.\n *\n * Can be thought of as the equivalent of the `outerHTML` of the passed node(s).\n *\n * @param node Node to be rendered.\n * @param options Changes serialization behavior\n */ function render(node, options = {}) {\n    const nodes = \"length\" in node ? node : [\n        node\n    ];\n    let output = \"\";\n    for(let i = 0; i < nodes.length; i++){\n        output += renderNode(nodes[i], options);\n    }\n    return output;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (render);\nfunction renderNode(node, options) {\n    switch(node.type){\n        case domelementtype__WEBPACK_IMPORTED_MODULE_0__.Root:\n            return render(node.children, options);\n        // @ts-expect-error We don't use `Doctype` yet\n        case domelementtype__WEBPACK_IMPORTED_MODULE_0__.Doctype:\n        case domelementtype__WEBPACK_IMPORTED_MODULE_0__.Directive:\n            return renderDirective(node);\n        case domelementtype__WEBPACK_IMPORTED_MODULE_0__.Comment:\n            return renderComment(node);\n        case domelementtype__WEBPACK_IMPORTED_MODULE_0__.CDATA:\n            return renderCdata(node);\n        case domelementtype__WEBPACK_IMPORTED_MODULE_0__.Script:\n        case domelementtype__WEBPACK_IMPORTED_MODULE_0__.Style:\n        case domelementtype__WEBPACK_IMPORTED_MODULE_0__.Tag:\n            return renderTag(node, options);\n        case domelementtype__WEBPACK_IMPORTED_MODULE_0__.Text:\n            return renderText(node, options);\n    }\n}\nconst foreignModeIntegrationPoints = new Set([\n    \"mi\",\n    \"mo\",\n    \"mn\",\n    \"ms\",\n    \"mtext\",\n    \"annotation-xml\",\n    \"foreignObject\",\n    \"desc\",\n    \"title\"\n]);\nconst foreignElements = new Set([\n    \"svg\",\n    \"math\"\n]);\nfunction renderTag(elem, opts) {\n    var _a;\n    // Handle SVG / MathML in HTML\n    if (opts.xmlMode === \"foreign\") {\n        /* Fix up mixed-case element names */ elem.name = (_a = _foreignNames_js__WEBPACK_IMPORTED_MODULE_2__.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;\n        /* Exit foreign mode at integration points */ if (elem.parent && foreignModeIntegrationPoints.has(elem.parent.name)) {\n            opts = {\n                ...opts,\n                xmlMode: false\n            };\n        }\n    }\n    if (!opts.xmlMode && foreignElements.has(elem.name)) {\n        opts = {\n            ...opts,\n            xmlMode: \"foreign\"\n        };\n    }\n    let tag = `<${elem.name}`;\n    const attribs = formatAttributes(elem.attribs, opts);\n    if (attribs) {\n        tag += ` ${attribs}`;\n    }\n    if (elem.children.length === 0 && (opts.xmlMode ? opts.selfClosingTags !== false : opts.selfClosingTags && singleTag.has(elem.name))) {\n        if (!opts.xmlMode) tag += \" \";\n        tag += \"/>\";\n    } else {\n        tag += \">\";\n        if (elem.children.length > 0) {\n            tag += render(elem.children, opts);\n        }\n        if (opts.xmlMode || !singleTag.has(elem.name)) {\n            tag += `</${elem.name}>`;\n        }\n    }\n    return tag;\n}\nfunction renderDirective(elem) {\n    return `<${elem.data}>`;\n}\nfunction renderText(elem, opts) {\n    var _a;\n    let data = elem.data || \"\";\n    // If entities weren't decoded, no need to encode them back\n    if (((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) !== false && !(!opts.xmlMode && elem.parent && unencodedElements.has(elem.parent.name))) {\n        data = opts.xmlMode || opts.encodeEntities !== \"utf8\" ? (0,entities__WEBPACK_IMPORTED_MODULE_1__.encodeXML)(data) : (0,entities__WEBPACK_IMPORTED_MODULE_1__.escapeText)(data);\n    }\n    return data;\n}\nfunction renderCdata(elem) {\n    return `<![CDATA[${elem.children[0].data}]]>`;\n}\nfunction renderComment(elem) {\n    return `<!--${elem.data}-->`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dom-serializer/lib/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/domelementtype/lib/esm/index.js":
/*!******************************************************!*\
  !*** ./node_modules/domelementtype/lib/esm/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CDATA: () => (/* binding */ CDATA),\n/* harmony export */   Comment: () => (/* binding */ Comment),\n/* harmony export */   Directive: () => (/* binding */ Directive),\n/* harmony export */   Doctype: () => (/* binding */ Doctype),\n/* harmony export */   ElementType: () => (/* binding */ ElementType),\n/* harmony export */   Root: () => (/* binding */ Root),\n/* harmony export */   Script: () => (/* binding */ Script),\n/* harmony export */   Style: () => (/* binding */ Style),\n/* harmony export */   Tag: () => (/* binding */ Tag),\n/* harmony export */   Text: () => (/* binding */ Text),\n/* harmony export */   isTag: () => (/* binding */ isTag)\n/* harmony export */ });\n/** Types of elements found in htmlparser2's DOM */ var ElementType;\n(function(ElementType) {\n    /** Type for the root element of a document */ ElementType[\"Root\"] = \"root\";\n    /** Type for Text */ ElementType[\"Text\"] = \"text\";\n    /** Type for <? ... ?> */ ElementType[\"Directive\"] = \"directive\";\n    /** Type for <!-- ... --> */ ElementType[\"Comment\"] = \"comment\";\n    /** Type for <script> tags */ ElementType[\"Script\"] = \"script\";\n    /** Type for <style> tags */ ElementType[\"Style\"] = \"style\";\n    /** Type for Any tag */ ElementType[\"Tag\"] = \"tag\";\n    /** Type for <![CDATA[ ... ]]> */ ElementType[\"CDATA\"] = \"cdata\";\n    /** Type for <!doctype ...> */ ElementType[\"Doctype\"] = \"doctype\";\n})(ElementType || (ElementType = {}));\n/**\n * Tests whether an element is a tag or not.\n *\n * @param elem Element to test\n */ function isTag(elem) {\n    return elem.type === ElementType.Tag || elem.type === ElementType.Script || elem.type === ElementType.Style;\n}\n// Exports for backwards compatibility\n/** Type for the root element of a document */ const Root = ElementType.Root;\n/** Type for Text */ const Text = ElementType.Text;\n/** Type for <? ... ?> */ const Directive = ElementType.Directive;\n/** Type for <!-- ... --> */ const Comment = ElementType.Comment;\n/** Type for <script> tags */ const Script = ElementType.Script;\n/** Type for <style> tags */ const Style = ElementType.Style;\n/** Type for Any tag */ const Tag = ElementType.Tag;\n/** Type for <![CDATA[ ... ]]> */ const CDATA = ElementType.CDATA;\n/** Type for <!doctype ...> */ const Doctype = ElementType.Doctype;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9tZWxlbWVudHR5cGUvbGliL2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLGlEQUFpRCxHQUMxQyxJQUFJQSxZQUFZO0FBQ3RCLFVBQVVBLFdBQVc7SUFDbEIsNENBQTRDLEdBQzVDQSxXQUFXLENBQUMsT0FBTyxHQUFHO0lBQ3RCLGtCQUFrQixHQUNsQkEsV0FBVyxDQUFDLE9BQU8sR0FBRztJQUN0Qix1QkFBdUIsR0FDdkJBLFdBQVcsQ0FBQyxZQUFZLEdBQUc7SUFDM0IsMEJBQTBCLEdBQzFCQSxXQUFXLENBQUMsVUFBVSxHQUFHO0lBQ3pCLDJCQUEyQixHQUMzQkEsV0FBVyxDQUFDLFNBQVMsR0FBRztJQUN4QiwwQkFBMEIsR0FDMUJBLFdBQVcsQ0FBQyxRQUFRLEdBQUc7SUFDdkIscUJBQXFCLEdBQ3JCQSxXQUFXLENBQUMsTUFBTSxHQUFHO0lBQ3JCLCtCQUErQixHQUMvQkEsV0FBVyxDQUFDLFFBQVEsR0FBRztJQUN2Qiw0QkFBNEIsR0FDNUJBLFdBQVcsQ0FBQyxVQUFVLEdBQUc7QUFDN0IsR0FBR0EsZUFBZ0JBLENBQUFBLGNBQWMsQ0FBQztBQUNsQzs7OztDQUlDLEdBQ00sU0FBU0MsTUFBTUMsSUFBSTtJQUN0QixPQUFRQSxLQUFLQyxJQUFJLEtBQUtILFlBQVlJLEdBQUcsSUFDakNGLEtBQUtDLElBQUksS0FBS0gsWUFBWUssTUFBTSxJQUNoQ0gsS0FBS0MsSUFBSSxLQUFLSCxZQUFZTSxLQUFLO0FBQ3ZDO0FBQ0Esc0NBQXNDO0FBQ3RDLDRDQUE0QyxHQUNyQyxNQUFNQyxPQUFPUCxZQUFZTyxJQUFJLENBQUM7QUFDckMsa0JBQWtCLEdBQ1gsTUFBTUMsT0FBT1IsWUFBWVEsSUFBSSxDQUFDO0FBQ3JDLHVCQUF1QixHQUNoQixNQUFNQyxZQUFZVCxZQUFZUyxTQUFTLENBQUM7QUFDL0MsMEJBQTBCLEdBQ25CLE1BQU1DLFVBQVVWLFlBQVlVLE9BQU8sQ0FBQztBQUMzQywyQkFBMkIsR0FDcEIsTUFBTUwsU0FBU0wsWUFBWUssTUFBTSxDQUFDO0FBQ3pDLDBCQUEwQixHQUNuQixNQUFNQyxRQUFRTixZQUFZTSxLQUFLLENBQUM7QUFDdkMscUJBQXFCLEdBQ2QsTUFBTUYsTUFBTUosWUFBWUksR0FBRyxDQUFDO0FBQ25DLCtCQUErQixHQUN4QixNQUFNTyxRQUFRWCxZQUFZVyxLQUFLLENBQUM7QUFDdkMsNEJBQTRCLEdBQ3JCLE1BQU1DLFVBQVVaLFlBQVlZLE9BQU8sQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dhaGVndXJ1LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvZG9tZWxlbWVudHR5cGUvbGliL2VzbS9pbmRleC5qcz80ODg5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBUeXBlcyBvZiBlbGVtZW50cyBmb3VuZCBpbiBodG1scGFyc2VyMidzIERPTSAqL1xuZXhwb3J0IHZhciBFbGVtZW50VHlwZTtcbihmdW5jdGlvbiAoRWxlbWVudFR5cGUpIHtcbiAgICAvKiogVHlwZSBmb3IgdGhlIHJvb3QgZWxlbWVudCBvZiBhIGRvY3VtZW50ICovXG4gICAgRWxlbWVudFR5cGVbXCJSb290XCJdID0gXCJyb290XCI7XG4gICAgLyoqIFR5cGUgZm9yIFRleHQgKi9cbiAgICBFbGVtZW50VHlwZVtcIlRleHRcIl0gPSBcInRleHRcIjtcbiAgICAvKiogVHlwZSBmb3IgPD8gLi4uID8+ICovXG4gICAgRWxlbWVudFR5cGVbXCJEaXJlY3RpdmVcIl0gPSBcImRpcmVjdGl2ZVwiO1xuICAgIC8qKiBUeXBlIGZvciA8IS0tIC4uLiAtLT4gKi9cbiAgICBFbGVtZW50VHlwZVtcIkNvbW1lbnRcIl0gPSBcImNvbW1lbnRcIjtcbiAgICAvKiogVHlwZSBmb3IgPHNjcmlwdD4gdGFncyAqL1xuICAgIEVsZW1lbnRUeXBlW1wiU2NyaXB0XCJdID0gXCJzY3JpcHRcIjtcbiAgICAvKiogVHlwZSBmb3IgPHN0eWxlPiB0YWdzICovXG4gICAgRWxlbWVudFR5cGVbXCJTdHlsZVwiXSA9IFwic3R5bGVcIjtcbiAgICAvKiogVHlwZSBmb3IgQW55IHRhZyAqL1xuICAgIEVsZW1lbnRUeXBlW1wiVGFnXCJdID0gXCJ0YWdcIjtcbiAgICAvKiogVHlwZSBmb3IgPCFbQ0RBVEFbIC4uLiBdXT4gKi9cbiAgICBFbGVtZW50VHlwZVtcIkNEQVRBXCJdID0gXCJjZGF0YVwiO1xuICAgIC8qKiBUeXBlIGZvciA8IWRvY3R5cGUgLi4uPiAqL1xuICAgIEVsZW1lbnRUeXBlW1wiRG9jdHlwZVwiXSA9IFwiZG9jdHlwZVwiO1xufSkoRWxlbWVudFR5cGUgfHwgKEVsZW1lbnRUeXBlID0ge30pKTtcbi8qKlxuICogVGVzdHMgd2hldGhlciBhbiBlbGVtZW50IGlzIGEgdGFnIG9yIG5vdC5cbiAqXG4gKiBAcGFyYW0gZWxlbSBFbGVtZW50IHRvIHRlc3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVGFnKGVsZW0pIHtcbiAgICByZXR1cm4gKGVsZW0udHlwZSA9PT0gRWxlbWVudFR5cGUuVGFnIHx8XG4gICAgICAgIGVsZW0udHlwZSA9PT0gRWxlbWVudFR5cGUuU2NyaXB0IHx8XG4gICAgICAgIGVsZW0udHlwZSA9PT0gRWxlbWVudFR5cGUuU3R5bGUpO1xufVxuLy8gRXhwb3J0cyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbi8qKiBUeXBlIGZvciB0aGUgcm9vdCBlbGVtZW50IG9mIGEgZG9jdW1lbnQgKi9cbmV4cG9ydCBjb25zdCBSb290ID0gRWxlbWVudFR5cGUuUm9vdDtcbi8qKiBUeXBlIGZvciBUZXh0ICovXG5leHBvcnQgY29uc3QgVGV4dCA9IEVsZW1lbnRUeXBlLlRleHQ7XG4vKiogVHlwZSBmb3IgPD8gLi4uID8+ICovXG5leHBvcnQgY29uc3QgRGlyZWN0aXZlID0gRWxlbWVudFR5cGUuRGlyZWN0aXZlO1xuLyoqIFR5cGUgZm9yIDwhLS0gLi4uIC0tPiAqL1xuZXhwb3J0IGNvbnN0IENvbW1lbnQgPSBFbGVtZW50VHlwZS5Db21tZW50O1xuLyoqIFR5cGUgZm9yIDxzY3JpcHQ+IHRhZ3MgKi9cbmV4cG9ydCBjb25zdCBTY3JpcHQgPSBFbGVtZW50VHlwZS5TY3JpcHQ7XG4vKiogVHlwZSBmb3IgPHN0eWxlPiB0YWdzICovXG5leHBvcnQgY29uc3QgU3R5bGUgPSBFbGVtZW50VHlwZS5TdHlsZTtcbi8qKiBUeXBlIGZvciBBbnkgdGFnICovXG5leHBvcnQgY29uc3QgVGFnID0gRWxlbWVudFR5cGUuVGFnO1xuLyoqIFR5cGUgZm9yIDwhW0NEQVRBWyAuLi4gXV0+ICovXG5leHBvcnQgY29uc3QgQ0RBVEEgPSBFbGVtZW50VHlwZS5DREFUQTtcbi8qKiBUeXBlIGZvciA8IWRvY3R5cGUgLi4uPiAqL1xuZXhwb3J0IGNvbnN0IERvY3R5cGUgPSBFbGVtZW50VHlwZS5Eb2N0eXBlO1xuIl0sIm5hbWVzIjpbIkVsZW1lbnRUeXBlIiwiaXNUYWciLCJlbGVtIiwidHlwZSIsIlRhZyIsIlNjcmlwdCIsIlN0eWxlIiwiUm9vdCIsIlRleHQiLCJEaXJlY3RpdmUiLCJDb21tZW50IiwiQ0RBVEEiLCJEb2N0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/domelementtype/lib/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/domhandler/lib/esm/index.js":
/*!**************************************************!*\
  !*** ./node_modules/domhandler/lib/esm/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CDATA: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.CDATA),\n/* harmony export */   Comment: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.Comment),\n/* harmony export */   DataNode: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.DataNode),\n/* harmony export */   Document: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.Document),\n/* harmony export */   DomHandler: () => (/* binding */ DomHandler),\n/* harmony export */   Element: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.Element),\n/* harmony export */   Node: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.Node),\n/* harmony export */   NodeWithChildren: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.NodeWithChildren),\n/* harmony export */   ProcessingInstruction: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.ProcessingInstruction),\n/* harmony export */   Text: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.Text),\n/* harmony export */   cloneNode: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.cloneNode),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   hasChildren: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.hasChildren),\n/* harmony export */   isCDATA: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.isCDATA),\n/* harmony export */   isComment: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.isComment),\n/* harmony export */   isDirective: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.isDirective),\n/* harmony export */   isDocument: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.isDocument),\n/* harmony export */   isTag: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.isTag),\n/* harmony export */   isText: () => (/* reexport safe */ _node_js__WEBPACK_IMPORTED_MODULE_1__.isText)\n/* harmony export */ });\n/* harmony import */ var domelementtype__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domelementtype */ \"(rsc)/./node_modules/domelementtype/lib/esm/index.js\");\n/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node.js */ \"(rsc)/./node_modules/domhandler/lib/esm/node.js\");\n\n\n\n// Default options\nconst defaultOpts = {\n    withStartIndices: false,\n    withEndIndices: false,\n    xmlMode: false\n};\nclass DomHandler {\n    /**\n     * @param callback Called once parsing has completed.\n     * @param options Settings for the handler.\n     * @param elementCB Callback whenever a tag is closed.\n     */ constructor(callback, options, elementCB){\n        /** The elements of the DOM */ this.dom = [];\n        /** The root element for the DOM */ this.root = new _node_js__WEBPACK_IMPORTED_MODULE_1__.Document(this.dom);\n        /** Indicated whether parsing has been completed. */ this.done = false;\n        /** Stack of open tags. */ this.tagStack = [\n            this.root\n        ];\n        /** A data node that is still being written to. */ this.lastNode = null;\n        /** Reference to the parser instance. Used for location information. */ this.parser = null;\n        // Make it possible to skip arguments, for backwards-compatibility\n        if (typeof options === \"function\") {\n            elementCB = options;\n            options = defaultOpts;\n        }\n        if (typeof callback === \"object\") {\n            options = callback;\n            callback = undefined;\n        }\n        this.callback = callback !== null && callback !== void 0 ? callback : null;\n        this.options = options !== null && options !== void 0 ? options : defaultOpts;\n        this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;\n    }\n    onparserinit(parser) {\n        this.parser = parser;\n    }\n    // Resets the handler back to starting state\n    onreset() {\n        this.dom = [];\n        this.root = new _node_js__WEBPACK_IMPORTED_MODULE_1__.Document(this.dom);\n        this.done = false;\n        this.tagStack = [\n            this.root\n        ];\n        this.lastNode = null;\n        this.parser = null;\n    }\n    // Signals the handler that parsing is done\n    onend() {\n        if (this.done) return;\n        this.done = true;\n        this.parser = null;\n        this.handleCallback(null);\n    }\n    onerror(error) {\n        this.handleCallback(error);\n    }\n    onclosetag() {\n        this.lastNode = null;\n        const elem = this.tagStack.pop();\n        if (this.options.withEndIndices) {\n            elem.endIndex = this.parser.endIndex;\n        }\n        if (this.elementCB) this.elementCB(elem);\n    }\n    onopentag(name, attribs) {\n        const type = this.options.xmlMode ? domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Tag : undefined;\n        const element = new _node_js__WEBPACK_IMPORTED_MODULE_1__.Element(name, attribs, undefined, type);\n        this.addNode(element);\n        this.tagStack.push(element);\n    }\n    ontext(data) {\n        const { lastNode } = this;\n        if (lastNode && lastNode.type === domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Text) {\n            lastNode.data += data;\n            if (this.options.withEndIndices) {\n                lastNode.endIndex = this.parser.endIndex;\n            }\n        } else {\n            const node = new _node_js__WEBPACK_IMPORTED_MODULE_1__.Text(data);\n            this.addNode(node);\n            this.lastNode = node;\n        }\n    }\n    oncomment(data) {\n        if (this.lastNode && this.lastNode.type === domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Comment) {\n            this.lastNode.data += data;\n            return;\n        }\n        const node = new _node_js__WEBPACK_IMPORTED_MODULE_1__.Comment(data);\n        this.addNode(node);\n        this.lastNode = node;\n    }\n    oncommentend() {\n        this.lastNode = null;\n    }\n    oncdatastart() {\n        const text = new _node_js__WEBPACK_IMPORTED_MODULE_1__.Text(\"\");\n        const node = new _node_js__WEBPACK_IMPORTED_MODULE_1__.CDATA([\n            text\n        ]);\n        this.addNode(node);\n        text.parent = node;\n        this.lastNode = text;\n    }\n    oncdataend() {\n        this.lastNode = null;\n    }\n    onprocessinginstruction(name, data) {\n        const node = new _node_js__WEBPACK_IMPORTED_MODULE_1__.ProcessingInstruction(name, data);\n        this.addNode(node);\n    }\n    handleCallback(error) {\n        if (typeof this.callback === \"function\") {\n            this.callback(error, this.dom);\n        } else if (error) {\n            throw error;\n        }\n    }\n    addNode(node) {\n        const parent = this.tagStack[this.tagStack.length - 1];\n        const previousSibling = parent.children[parent.children.length - 1];\n        if (this.options.withStartIndices) {\n            node.startIndex = this.parser.startIndex;\n        }\n        if (this.options.withEndIndices) {\n            node.endIndex = this.parser.endIndex;\n        }\n        parent.children.push(node);\n        if (previousSibling) {\n            node.prev = previousSibling;\n            previousSibling.next = node;\n        }\n        node.parent = parent;\n        this.lastNode = null;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DomHandler);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/domhandler/lib/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/domhandler/lib/esm/node.js":
/*!*************************************************!*\
  !*** ./node_modules/domhandler/lib/esm/node.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CDATA: () => (/* binding */ CDATA),\n/* harmony export */   Comment: () => (/* binding */ Comment),\n/* harmony export */   DataNode: () => (/* binding */ DataNode),\n/* harmony export */   Document: () => (/* binding */ Document),\n/* harmony export */   Element: () => (/* binding */ Element),\n/* harmony export */   Node: () => (/* binding */ Node),\n/* harmony export */   NodeWithChildren: () => (/* binding */ NodeWithChildren),\n/* harmony export */   ProcessingInstruction: () => (/* binding */ ProcessingInstruction),\n/* harmony export */   Text: () => (/* binding */ Text),\n/* harmony export */   cloneNode: () => (/* binding */ cloneNode),\n/* harmony export */   hasChildren: () => (/* binding */ hasChildren),\n/* harmony export */   isCDATA: () => (/* binding */ isCDATA),\n/* harmony export */   isComment: () => (/* binding */ isComment),\n/* harmony export */   isDirective: () => (/* binding */ isDirective),\n/* harmony export */   isDocument: () => (/* binding */ isDocument),\n/* harmony export */   isTag: () => (/* binding */ isTag),\n/* harmony export */   isText: () => (/* binding */ isText)\n/* harmony export */ });\n/* harmony import */ var domelementtype__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domelementtype */ \"(rsc)/./node_modules/domelementtype/lib/esm/index.js\");\n\n/**\n * This object will be used as the prototype for Nodes when creating a\n * DOM-Level-1-compliant structure.\n */ class Node {\n    constructor(){\n        /** Parent of the node */ this.parent = null;\n        /** Previous sibling */ this.prev = null;\n        /** Next sibling */ this.next = null;\n        /** The start index of the node. Requires `withStartIndices` on the handler to be `true. */ this.startIndex = null;\n        /** The end index of the node. Requires `withEndIndices` on the handler to be `true. */ this.endIndex = null;\n    }\n    // Read-write aliases for properties\n    /**\n     * Same as {@link parent}.\n     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n     */ get parentNode() {\n        return this.parent;\n    }\n    set parentNode(parent) {\n        this.parent = parent;\n    }\n    /**\n     * Same as {@link prev}.\n     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n     */ get previousSibling() {\n        return this.prev;\n    }\n    set previousSibling(prev) {\n        this.prev = prev;\n    }\n    /**\n     * Same as {@link next}.\n     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n     */ get nextSibling() {\n        return this.next;\n    }\n    set nextSibling(next) {\n        this.next = next;\n    }\n    /**\n     * Clone this node, and optionally its children.\n     *\n     * @param recursive Clone child nodes as well.\n     * @returns A clone of the node.\n     */ cloneNode(recursive = false) {\n        return cloneNode(this, recursive);\n    }\n}\n/**\n * A node that contains some data.\n */ class DataNode extends Node {\n    /**\n     * @param data The content of the data node\n     */ constructor(data){\n        super();\n        this.data = data;\n    }\n    /**\n     * Same as {@link data}.\n     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n     */ get nodeValue() {\n        return this.data;\n    }\n    set nodeValue(data) {\n        this.data = data;\n    }\n}\n/**\n * Text within the document.\n */ class Text extends DataNode {\n    constructor(){\n        super(...arguments);\n        this.type = domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Text;\n    }\n    get nodeType() {\n        return 3;\n    }\n}\n/**\n * Comments within the document.\n */ class Comment extends DataNode {\n    constructor(){\n        super(...arguments);\n        this.type = domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Comment;\n    }\n    get nodeType() {\n        return 8;\n    }\n}\n/**\n * Processing instructions, including doc types.\n */ class ProcessingInstruction extends DataNode {\n    constructor(name, data){\n        super(data);\n        this.name = name;\n        this.type = domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Directive;\n    }\n    get nodeType() {\n        return 1;\n    }\n}\n/**\n * A `Node` that can have children.\n */ class NodeWithChildren extends Node {\n    /**\n     * @param children Children of the node. Only certain node types can have children.\n     */ constructor(children){\n        super();\n        this.children = children;\n    }\n    // Aliases\n    /** First child of the node. */ get firstChild() {\n        var _a;\n        return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;\n    }\n    /** Last child of the node. */ get lastChild() {\n        return this.children.length > 0 ? this.children[this.children.length - 1] : null;\n    }\n    /**\n     * Same as {@link children}.\n     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n     */ get childNodes() {\n        return this.children;\n    }\n    set childNodes(children) {\n        this.children = children;\n    }\n}\nclass CDATA extends NodeWithChildren {\n    constructor(){\n        super(...arguments);\n        this.type = domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.CDATA;\n    }\n    get nodeType() {\n        return 4;\n    }\n}\n/**\n * The root node of the document.\n */ class Document extends NodeWithChildren {\n    constructor(){\n        super(...arguments);\n        this.type = domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Root;\n    }\n    get nodeType() {\n        return 9;\n    }\n}\n/**\n * An element within the DOM.\n */ class Element extends NodeWithChildren {\n    /**\n     * @param name Name of the tag, eg. `div`, `span`.\n     * @param attribs Object mapping attribute names to attribute values.\n     * @param children Children of the node.\n     */ constructor(name, attribs, children = [], type = name === \"script\" ? domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Script : name === \"style\" ? domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Style : domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Tag){\n        super(children);\n        this.name = name;\n        this.attribs = attribs;\n        this.type = type;\n    }\n    get nodeType() {\n        return 1;\n    }\n    // DOM Level 1 aliases\n    /**\n     * Same as {@link name}.\n     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n     */ get tagName() {\n        return this.name;\n    }\n    set tagName(name) {\n        this.name = name;\n    }\n    get attributes() {\n        return Object.keys(this.attribs).map((name)=>{\n            var _a, _b;\n            return {\n                name,\n                value: this.attribs[name],\n                namespace: (_a = this[\"x-attribsNamespace\"]) === null || _a === void 0 ? void 0 : _a[name],\n                prefix: (_b = this[\"x-attribsPrefix\"]) === null || _b === void 0 ? void 0 : _b[name]\n            };\n        });\n    }\n}\n/**\n * @param node Node to check.\n * @returns `true` if the node is a `Element`, `false` otherwise.\n */ function isTag(node) {\n    return (0,domelementtype__WEBPACK_IMPORTED_MODULE_0__.isTag)(node);\n}\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `CDATA`, `false` otherwise.\n */ function isCDATA(node) {\n    return node.type === domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.CDATA;\n}\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `Text`, `false` otherwise.\n */ function isText(node) {\n    return node.type === domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Text;\n}\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `Comment`, `false` otherwise.\n */ function isComment(node) {\n    return node.type === domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Comment;\n}\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.\n */ function isDirective(node) {\n    return node.type === domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Directive;\n}\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.\n */ function isDocument(node) {\n    return node.type === domelementtype__WEBPACK_IMPORTED_MODULE_0__.ElementType.Root;\n}\n/**\n * @param node Node to check.\n * @returns `true` if the node has children, `false` otherwise.\n */ function hasChildren(node) {\n    return Object.prototype.hasOwnProperty.call(node, \"children\");\n}\n/**\n * Clone a node, and optionally its children.\n *\n * @param recursive Clone child nodes as well.\n * @returns A clone of the node.\n */ function cloneNode(node, recursive = false) {\n    let result;\n    if (isText(node)) {\n        result = new Text(node.data);\n    } else if (isComment(node)) {\n        result = new Comment(node.data);\n    } else if (isTag(node)) {\n        const children = recursive ? cloneChildren(node.children) : [];\n        const clone = new Element(node.name, {\n            ...node.attribs\n        }, children);\n        children.forEach((child)=>child.parent = clone);\n        if (node.namespace != null) {\n            clone.namespace = node.namespace;\n        }\n        if (node[\"x-attribsNamespace\"]) {\n            clone[\"x-attribsNamespace\"] = {\n                ...node[\"x-attribsNamespace\"]\n            };\n        }\n        if (node[\"x-attribsPrefix\"]) {\n            clone[\"x-attribsPrefix\"] = {\n                ...node[\"x-attribsPrefix\"]\n            };\n        }\n        result = clone;\n    } else if (isCDATA(node)) {\n        const children = recursive ? cloneChildren(node.children) : [];\n        const clone = new CDATA(children);\n        children.forEach((child)=>child.parent = clone);\n        result = clone;\n    } else if (isDocument(node)) {\n        const children = recursive ? cloneChildren(node.children) : [];\n        const clone = new Document(children);\n        children.forEach((child)=>child.parent = clone);\n        if (node[\"x-mode\"]) {\n            clone[\"x-mode\"] = node[\"x-mode\"];\n        }\n        result = clone;\n    } else if (isDirective(node)) {\n        const instruction = new ProcessingInstruction(node.name, node.data);\n        if (node[\"x-name\"] != null) {\n            instruction[\"x-name\"] = node[\"x-name\"];\n            instruction[\"x-publicId\"] = node[\"x-publicId\"];\n            instruction[\"x-systemId\"] = node[\"x-systemId\"];\n        }\n        result = instruction;\n    } else {\n        throw new Error(`Not implemented yet: ${node.type}`);\n    }\n    result.startIndex = node.startIndex;\n    result.endIndex = node.endIndex;\n    if (node.sourceCodeLocation != null) {\n        result.sourceCodeLocation = node.sourceCodeLocation;\n    }\n    return result;\n}\nfunction cloneChildren(childs) {\n    const children = childs.map((child)=>cloneNode(child, true));\n    for(let i = 1; i < children.length; i++){\n        children[i].prev = children[i - 1];\n        children[i - 1].next = children[i];\n    }\n    return children;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/domhandler/lib/esm/node.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/domutils/lib/esm/feeds.js":
/*!************************************************!*\
  !*** ./node_modules/domutils/lib/esm/feeds.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFeed: () => (/* binding */ getFeed)\n/* harmony export */ });\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/domutils/lib/esm/stringify.js\");\n/* harmony import */ var _legacy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./legacy.js */ \"(rsc)/./node_modules/domutils/lib/esm/legacy.js\");\n\n\n/**\n * Get the feed object from the root of a DOM tree.\n *\n * @category Feeds\n * @param doc - The DOM to to extract the feed from.\n * @returns The feed.\n */ function getFeed(doc) {\n    const feedRoot = getOneElement(isValidFeed, doc);\n    return !feedRoot ? null : feedRoot.name === \"feed\" ? getAtomFeed(feedRoot) : getRssFeed(feedRoot);\n}\n/**\n * Parse an Atom feed.\n *\n * @param feedRoot The root of the feed.\n * @returns The parsed feed.\n */ function getAtomFeed(feedRoot) {\n    var _a;\n    const childs = feedRoot.children;\n    const feed = {\n        type: \"atom\",\n        items: (0,_legacy_js__WEBPACK_IMPORTED_MODULE_1__.getElementsByTagName)(\"entry\", childs).map((item)=>{\n            var _a;\n            const { children } = item;\n            const entry = {\n                media: getMediaElements(children)\n            };\n            addConditionally(entry, \"id\", \"id\", children);\n            addConditionally(entry, \"title\", \"title\", children);\n            const href = (_a = getOneElement(\"link\", children)) === null || _a === void 0 ? void 0 : _a.attribs[\"href\"];\n            if (href) {\n                entry.link = href;\n            }\n            const description = fetch(\"summary\", children) || fetch(\"content\", children);\n            if (description) {\n                entry.description = description;\n            }\n            const pubDate = fetch(\"updated\", children);\n            if (pubDate) {\n                entry.pubDate = new Date(pubDate);\n            }\n            return entry;\n        })\n    };\n    addConditionally(feed, \"id\", \"id\", childs);\n    addConditionally(feed, \"title\", \"title\", childs);\n    const href = (_a = getOneElement(\"link\", childs)) === null || _a === void 0 ? void 0 : _a.attribs[\"href\"];\n    if (href) {\n        feed.link = href;\n    }\n    addConditionally(feed, \"description\", \"subtitle\", childs);\n    const updated = fetch(\"updated\", childs);\n    if (updated) {\n        feed.updated = new Date(updated);\n    }\n    addConditionally(feed, \"author\", \"email\", childs, true);\n    return feed;\n}\n/**\n * Parse a RSS feed.\n *\n * @param feedRoot The root of the feed.\n * @returns The parsed feed.\n */ function getRssFeed(feedRoot) {\n    var _a, _b;\n    const childs = (_b = (_a = getOneElement(\"channel\", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];\n    const feed = {\n        type: feedRoot.name.substr(0, 3),\n        id: \"\",\n        items: (0,_legacy_js__WEBPACK_IMPORTED_MODULE_1__.getElementsByTagName)(\"item\", feedRoot.children).map((item)=>{\n            const { children } = item;\n            const entry = {\n                media: getMediaElements(children)\n            };\n            addConditionally(entry, \"id\", \"guid\", children);\n            addConditionally(entry, \"title\", \"title\", children);\n            addConditionally(entry, \"link\", \"link\", children);\n            addConditionally(entry, \"description\", \"description\", children);\n            const pubDate = fetch(\"pubDate\", children) || fetch(\"dc:date\", children);\n            if (pubDate) entry.pubDate = new Date(pubDate);\n            return entry;\n        })\n    };\n    addConditionally(feed, \"title\", \"title\", childs);\n    addConditionally(feed, \"link\", \"link\", childs);\n    addConditionally(feed, \"description\", \"description\", childs);\n    const updated = fetch(\"lastBuildDate\", childs);\n    if (updated) {\n        feed.updated = new Date(updated);\n    }\n    addConditionally(feed, \"author\", \"managingEditor\", childs, true);\n    return feed;\n}\nconst MEDIA_KEYS_STRING = [\n    \"url\",\n    \"type\",\n    \"lang\"\n];\nconst MEDIA_KEYS_INT = [\n    \"fileSize\",\n    \"bitrate\",\n    \"framerate\",\n    \"samplingrate\",\n    \"channels\",\n    \"duration\",\n    \"height\",\n    \"width\"\n];\n/**\n * Get all media elements of a feed item.\n *\n * @param where Nodes to search in.\n * @returns Media elements.\n */ function getMediaElements(where) {\n    return (0,_legacy_js__WEBPACK_IMPORTED_MODULE_1__.getElementsByTagName)(\"media:content\", where).map((elem)=>{\n        const { attribs } = elem;\n        const media = {\n            medium: attribs[\"medium\"],\n            isDefault: !!attribs[\"isDefault\"]\n        };\n        for (const attrib of MEDIA_KEYS_STRING){\n            if (attribs[attrib]) {\n                media[attrib] = attribs[attrib];\n            }\n        }\n        for (const attrib of MEDIA_KEYS_INT){\n            if (attribs[attrib]) {\n                media[attrib] = parseInt(attribs[attrib], 10);\n            }\n        }\n        if (attribs[\"expression\"]) {\n            media.expression = attribs[\"expression\"];\n        }\n        return media;\n    });\n}\n/**\n * Get one element by tag name.\n *\n * @param tagName Tag name to look for\n * @param node Node to search in\n * @returns The element or null\n */ function getOneElement(tagName, node) {\n    return (0,_legacy_js__WEBPACK_IMPORTED_MODULE_1__.getElementsByTagName)(tagName, node, true, 1)[0];\n}\n/**\n * Get the text content of an element with a certain tag name.\n *\n * @param tagName Tag name to look for.\n * @param where Node to search in.\n * @param recurse Whether to recurse into child nodes.\n * @returns The text content of the element.\n */ function fetch(tagName, where, recurse = false) {\n    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_0__.textContent)((0,_legacy_js__WEBPACK_IMPORTED_MODULE_1__.getElementsByTagName)(tagName, where, recurse, 1)).trim();\n}\n/**\n * Adds a property to an object if it has a value.\n *\n * @param obj Object to be extended\n * @param prop Property name\n * @param tagName Tag name that contains the conditionally added property\n * @param where Element to search for the property\n * @param recurse Whether to recurse into child nodes.\n */ function addConditionally(obj, prop, tagName, where, recurse = false) {\n    const val = fetch(tagName, where, recurse);\n    if (val) obj[prop] = val;\n}\n/**\n * Checks if an element is a feed root node.\n *\n * @param value The name of the element to check.\n * @returns Whether an element is a feed root node.\n */ function isValidFeed(value) {\n    return value === \"rss\" || value === \"feed\" || value === \"rdf:RDF\";\n} //# sourceMappingURL=feeds.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/domutils/lib/esm/feeds.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/domutils/lib/esm/helpers.js":
/*!**************************************************!*\
  !*** ./node_modules/domutils/lib/esm/helpers.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocumentPosition: () => (/* binding */ DocumentPosition),\n/* harmony export */   compareDocumentPosition: () => (/* binding */ compareDocumentPosition),\n/* harmony export */   removeSubsets: () => (/* binding */ removeSubsets),\n/* harmony export */   uniqueSort: () => (/* binding */ uniqueSort)\n/* harmony export */ });\n/* harmony import */ var domhandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domhandler */ \"(rsc)/./node_modules/domhandler/lib/esm/index.js\");\n\n/**\n * Given an array of nodes, remove any member that is contained by another\n * member.\n *\n * @category Helpers\n * @param nodes Nodes to filter.\n * @returns Remaining nodes that aren't contained by other nodes.\n */ function removeSubsets(nodes) {\n    let idx = nodes.length;\n    /*\n     * Check if each node (or one of its ancestors) is already contained in the\n     * array.\n     */ while(--idx >= 0){\n        const node = nodes[idx];\n        /*\n         * Remove the node if it is not unique.\n         * We are going through the array from the end, so we only\n         * have to check nodes that preceed the node under consideration in the array.\n         */ if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {\n            nodes.splice(idx, 1);\n            continue;\n        }\n        for(let ancestor = node.parent; ancestor; ancestor = ancestor.parent){\n            if (nodes.includes(ancestor)) {\n                nodes.splice(idx, 1);\n                break;\n            }\n        }\n    }\n    return nodes;\n}\n/**\n * @category Helpers\n * @see {@link http://dom.spec.whatwg.org/#dom-node-comparedocumentposition}\n */ var DocumentPosition;\n(function(DocumentPosition) {\n    DocumentPosition[DocumentPosition[\"DISCONNECTED\"] = 1] = \"DISCONNECTED\";\n    DocumentPosition[DocumentPosition[\"PRECEDING\"] = 2] = \"PRECEDING\";\n    DocumentPosition[DocumentPosition[\"FOLLOWING\"] = 4] = \"FOLLOWING\";\n    DocumentPosition[DocumentPosition[\"CONTAINS\"] = 8] = \"CONTAINS\";\n    DocumentPosition[DocumentPosition[\"CONTAINED_BY\"] = 16] = \"CONTAINED_BY\";\n})(DocumentPosition || (DocumentPosition = {}));\n/**\n * Compare the position of one node against another node in any other document,\n * returning a bitmask with the values from {@link DocumentPosition}.\n *\n * Document order:\n * > There is an ordering, document order, defined on all the nodes in the\n * > document corresponding to the order in which the first character of the\n * > XML representation of each node occurs in the XML representation of the\n * > document after expansion of general entities. Thus, the document element\n * > node will be the first node. Element nodes occur before their children.\n * > Thus, document order orders element nodes in order of the occurrence of\n * > their start-tag in the XML (after expansion of entities). The attribute\n * > nodes of an element occur after the element and before its children. The\n * > relative order of attribute nodes is implementation-dependent.\n *\n * Source:\n * http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order\n *\n * @category Helpers\n * @param nodeA The first node to use in the comparison\n * @param nodeB The second node to use in the comparison\n * @returns A bitmask describing the input nodes' relative position.\n *\n * See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for\n * a description of these values.\n */ function compareDocumentPosition(nodeA, nodeB) {\n    const aParents = [];\n    const bParents = [];\n    if (nodeA === nodeB) {\n        return 0;\n    }\n    let current = (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.hasChildren)(nodeA) ? nodeA : nodeA.parent;\n    while(current){\n        aParents.unshift(current);\n        current = current.parent;\n    }\n    current = (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.hasChildren)(nodeB) ? nodeB : nodeB.parent;\n    while(current){\n        bParents.unshift(current);\n        current = current.parent;\n    }\n    const maxIdx = Math.min(aParents.length, bParents.length);\n    let idx = 0;\n    while(idx < maxIdx && aParents[idx] === bParents[idx]){\n        idx++;\n    }\n    if (idx === 0) {\n        return DocumentPosition.DISCONNECTED;\n    }\n    const sharedParent = aParents[idx - 1];\n    const siblings = sharedParent.children;\n    const aSibling = aParents[idx];\n    const bSibling = bParents[idx];\n    if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {\n        if (sharedParent === nodeB) {\n            return DocumentPosition.FOLLOWING | DocumentPosition.CONTAINED_BY;\n        }\n        return DocumentPosition.FOLLOWING;\n    }\n    if (sharedParent === nodeA) {\n        return DocumentPosition.PRECEDING | DocumentPosition.CONTAINS;\n    }\n    return DocumentPosition.PRECEDING;\n}\n/**\n * Sort an array of nodes based on their relative position in the document,\n * removing any duplicate nodes. If the array contains nodes that do not belong\n * to the same document, sort order is unspecified.\n *\n * @category Helpers\n * @param nodes Array of DOM nodes.\n * @returns Collection of unique nodes, sorted in document order.\n */ function uniqueSort(nodes) {\n    nodes = nodes.filter((node, i, arr)=>!arr.includes(node, i + 1));\n    nodes.sort((a, b)=>{\n        const relative = compareDocumentPosition(a, b);\n        if (relative & DocumentPosition.PRECEDING) {\n            return -1;\n        } else if (relative & DocumentPosition.FOLLOWING) {\n            return 1;\n        }\n        return 0;\n    });\n    return nodes;\n} //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/domutils/lib/esm/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/domutils/lib/esm/index.js":
/*!************************************************!*\
  !*** ./node_modules/domutils/lib/esm/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocumentPosition: () => (/* reexport safe */ _helpers_js__WEBPACK_IMPORTED_MODULE_5__.DocumentPosition),\n/* harmony export */   append: () => (/* reexport safe */ _manipulation_js__WEBPACK_IMPORTED_MODULE_2__.append),\n/* harmony export */   appendChild: () => (/* reexport safe */ _manipulation_js__WEBPACK_IMPORTED_MODULE_2__.appendChild),\n/* harmony export */   compareDocumentPosition: () => (/* reexport safe */ _helpers_js__WEBPACK_IMPORTED_MODULE_5__.compareDocumentPosition),\n/* harmony export */   existsOne: () => (/* reexport safe */ _querying_js__WEBPACK_IMPORTED_MODULE_3__.existsOne),\n/* harmony export */   filter: () => (/* reexport safe */ _querying_js__WEBPACK_IMPORTED_MODULE_3__.filter),\n/* harmony export */   find: () => (/* reexport safe */ _querying_js__WEBPACK_IMPORTED_MODULE_3__.find),\n/* harmony export */   findAll: () => (/* reexport safe */ _querying_js__WEBPACK_IMPORTED_MODULE_3__.findAll),\n/* harmony export */   findOne: () => (/* reexport safe */ _querying_js__WEBPACK_IMPORTED_MODULE_3__.findOne),\n/* harmony export */   findOneChild: () => (/* reexport safe */ _querying_js__WEBPACK_IMPORTED_MODULE_3__.findOneChild),\n/* harmony export */   getAttributeValue: () => (/* reexport safe */ _traversal_js__WEBPACK_IMPORTED_MODULE_1__.getAttributeValue),\n/* harmony export */   getChildren: () => (/* reexport safe */ _traversal_js__WEBPACK_IMPORTED_MODULE_1__.getChildren),\n/* harmony export */   getElementById: () => (/* reexport safe */ _legacy_js__WEBPACK_IMPORTED_MODULE_4__.getElementById),\n/* harmony export */   getElements: () => (/* reexport safe */ _legacy_js__WEBPACK_IMPORTED_MODULE_4__.getElements),\n/* harmony export */   getElementsByClassName: () => (/* reexport safe */ _legacy_js__WEBPACK_IMPORTED_MODULE_4__.getElementsByClassName),\n/* harmony export */   getElementsByTagName: () => (/* reexport safe */ _legacy_js__WEBPACK_IMPORTED_MODULE_4__.getElementsByTagName),\n/* harmony export */   getElementsByTagType: () => (/* reexport safe */ _legacy_js__WEBPACK_IMPORTED_MODULE_4__.getElementsByTagType),\n/* harmony export */   getFeed: () => (/* reexport safe */ _feeds_js__WEBPACK_IMPORTED_MODULE_6__.getFeed),\n/* harmony export */   getInnerHTML: () => (/* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_0__.getInnerHTML),\n/* harmony export */   getName: () => (/* reexport safe */ _traversal_js__WEBPACK_IMPORTED_MODULE_1__.getName),\n/* harmony export */   getOuterHTML: () => (/* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_0__.getOuterHTML),\n/* harmony export */   getParent: () => (/* reexport safe */ _traversal_js__WEBPACK_IMPORTED_MODULE_1__.getParent),\n/* harmony export */   getSiblings: () => (/* reexport safe */ _traversal_js__WEBPACK_IMPORTED_MODULE_1__.getSiblings),\n/* harmony export */   getText: () => (/* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_0__.getText),\n/* harmony export */   hasAttrib: () => (/* reexport safe */ _traversal_js__WEBPACK_IMPORTED_MODULE_1__.hasAttrib),\n/* harmony export */   hasChildren: () => (/* reexport safe */ domhandler__WEBPACK_IMPORTED_MODULE_7__.hasChildren),\n/* harmony export */   innerText: () => (/* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_0__.innerText),\n/* harmony export */   isCDATA: () => (/* reexport safe */ domhandler__WEBPACK_IMPORTED_MODULE_7__.isCDATA),\n/* harmony export */   isComment: () => (/* reexport safe */ domhandler__WEBPACK_IMPORTED_MODULE_7__.isComment),\n/* harmony export */   isDocument: () => (/* reexport safe */ domhandler__WEBPACK_IMPORTED_MODULE_7__.isDocument),\n/* harmony export */   isTag: () => (/* reexport safe */ domhandler__WEBPACK_IMPORTED_MODULE_7__.isTag),\n/* harmony export */   isText: () => (/* reexport safe */ domhandler__WEBPACK_IMPORTED_MODULE_7__.isText),\n/* harmony export */   nextElementSibling: () => (/* reexport safe */ _traversal_js__WEBPACK_IMPORTED_MODULE_1__.nextElementSibling),\n/* harmony export */   prepend: () => (/* reexport safe */ _manipulation_js__WEBPACK_IMPORTED_MODULE_2__.prepend),\n/* harmony export */   prependChild: () => (/* reexport safe */ _manipulation_js__WEBPACK_IMPORTED_MODULE_2__.prependChild),\n/* harmony export */   prevElementSibling: () => (/* reexport safe */ _traversal_js__WEBPACK_IMPORTED_MODULE_1__.prevElementSibling),\n/* harmony export */   removeElement: () => (/* reexport safe */ _manipulation_js__WEBPACK_IMPORTED_MODULE_2__.removeElement),\n/* harmony export */   removeSubsets: () => (/* reexport safe */ _helpers_js__WEBPACK_IMPORTED_MODULE_5__.removeSubsets),\n/* harmony export */   replaceElement: () => (/* reexport safe */ _manipulation_js__WEBPACK_IMPORTED_MODULE_2__.replaceElement),\n/* harmony export */   testElement: () => (/* reexport safe */ _legacy_js__WEBPACK_IMPORTED_MODULE_4__.testElement),\n/* harmony export */   textContent: () => (/* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_0__.textContent),\n/* harmony export */   uniqueSort: () => (/* reexport safe */ _helpers_js__WEBPACK_IMPORTED_MODULE_5__.uniqueSort)\n/* harmony export */ });\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/domutils/lib/esm/stringify.js\");\n/* harmony import */ var _traversal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./traversal.js */ \"(rsc)/./node_modules/domutils/lib/esm/traversal.js\");\n/* harmony import */ var _manipulation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./manipulation.js */ \"(rsc)/./node_modules/domutils/lib/esm/manipulation.js\");\n/* harmony import */ var _querying_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./querying.js */ \"(rsc)/./node_modules/domutils/lib/esm/querying.js\");\n/* harmony import */ var _legacy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./legacy.js */ \"(rsc)/./node_modules/domutils/lib/esm/legacy.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/domutils/lib/esm/helpers.js\");\n/* harmony import */ var _feeds_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./feeds.js */ \"(rsc)/./node_modules/domutils/lib/esm/feeds.js\");\n/* harmony import */ var domhandler__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! domhandler */ \"(rsc)/./node_modules/domhandler/lib/esm/index.js\");\n\n\n\n\n\n\n\n/** @deprecated Use these methods from `domhandler` directly. */  //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUErQjtBQUNBO0FBQ0c7QUFDSjtBQUNGO0FBQ0M7QUFDRjtBQUMzQiw4REFBOEQsR0FDMkIsQ0FDekYsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FoZWd1cnUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvZXNtL2luZGV4LmpzPzllNWQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vc3RyaW5naWZ5LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90cmF2ZXJzYWwuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21hbmlwdWxhdGlvbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcXVlcnlpbmcuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xlZ2FjeS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vaGVscGVycy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZmVlZHMuanNcIjtcbi8qKiBAZGVwcmVjYXRlZCBVc2UgdGhlc2UgbWV0aG9kcyBmcm9tIGBkb21oYW5kbGVyYCBkaXJlY3RseS4gKi9cbmV4cG9ydCB7IGlzVGFnLCBpc0NEQVRBLCBpc1RleHQsIGlzQ29tbWVudCwgaXNEb2N1bWVudCwgaGFzQ2hpbGRyZW4sIH0gZnJvbSBcImRvbWhhbmRsZXJcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJpc1RhZyIsImlzQ0RBVEEiLCJpc1RleHQiLCJpc0NvbW1lbnQiLCJpc0RvY3VtZW50IiwiaGFzQ2hpbGRyZW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/domutils/lib/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/domutils/lib/esm/legacy.js":
/*!*************************************************!*\
  !*** ./node_modules/domutils/lib/esm/legacy.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getElementById: () => (/* binding */ getElementById),\n/* harmony export */   getElements: () => (/* binding */ getElements),\n/* harmony export */   getElementsByClassName: () => (/* binding */ getElementsByClassName),\n/* harmony export */   getElementsByTagName: () => (/* binding */ getElementsByTagName),\n/* harmony export */   getElementsByTagType: () => (/* binding */ getElementsByTagType),\n/* harmony export */   testElement: () => (/* binding */ testElement)\n/* harmony export */ });\n/* harmony import */ var domhandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domhandler */ \"(rsc)/./node_modules/domhandler/lib/esm/index.js\");\n/* harmony import */ var _querying_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./querying.js */ \"(rsc)/./node_modules/domutils/lib/esm/querying.js\");\n\n\n/**\n * A map of functions to check nodes against.\n */ const Checks = {\n    tag_name (name) {\n        if (typeof name === \"function\") {\n            return (elem)=>(0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag)(elem) && name(elem.name);\n        } else if (name === \"*\") {\n            return domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag;\n        }\n        return (elem)=>(0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag)(elem) && elem.name === name;\n    },\n    tag_type (type) {\n        if (typeof type === \"function\") {\n            return (elem)=>type(elem.type);\n        }\n        return (elem)=>elem.type === type;\n    },\n    tag_contains (data) {\n        if (typeof data === \"function\") {\n            return (elem)=>(0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isText)(elem) && data(elem.data);\n        }\n        return (elem)=>(0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isText)(elem) && elem.data === data;\n    }\n};\n/**\n * Returns a function to check whether a node has an attribute with a particular\n * value.\n *\n * @param attrib Attribute to check.\n * @param value Attribute value to look for.\n * @returns A function to check whether the a node has an attribute with a\n *   particular value.\n */ function getAttribCheck(attrib, value) {\n    if (typeof value === \"function\") {\n        return (elem)=>(0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag)(elem) && value(elem.attribs[attrib]);\n    }\n    return (elem)=>(0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag)(elem) && elem.attribs[attrib] === value;\n}\n/**\n * Returns a function that returns `true` if either of the input functions\n * returns `true` for a node.\n *\n * @param a First function to combine.\n * @param b Second function to combine.\n * @returns A function taking a node and returning `true` if either of the input\n *   functions returns `true` for the node.\n */ function combineFuncs(a, b) {\n    return (elem)=>a(elem) || b(elem);\n}\n/**\n * Returns a function that executes all checks in `options` and returns `true`\n * if any of them match a node.\n *\n * @param options An object describing nodes to look for.\n * @returns A function that executes all checks in `options` and returns `true`\n *   if any of them match a node.\n */ function compileTest(options) {\n    const funcs = Object.keys(options).map((key)=>{\n        const value = options[key];\n        return Object.prototype.hasOwnProperty.call(Checks, key) ? Checks[key](value) : getAttribCheck(key, value);\n    });\n    return funcs.length === 0 ? null : funcs.reduce(combineFuncs);\n}\n/**\n * Checks whether a node matches the description in `options`.\n *\n * @category Legacy Query Functions\n * @param options An object describing nodes to look for.\n * @param node The element to test.\n * @returns Whether the element matches the description in `options`.\n */ function testElement(options, node) {\n    const test = compileTest(options);\n    return test ? test(node) : true;\n}\n/**\n * Returns all nodes that match `options`.\n *\n * @category Legacy Query Functions\n * @param options An object describing nodes to look for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes that match `options`.\n */ function getElements(options, nodes, recurse, limit = Infinity) {\n    const test = compileTest(options);\n    return test ? (0,_querying_js__WEBPACK_IMPORTED_MODULE_1__.filter)(test, nodes, recurse, limit) : [];\n}\n/**\n * Returns the node with the supplied ID.\n *\n * @category Legacy Query Functions\n * @param id The unique ID attribute value to look for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @returns The node with the supplied ID.\n */ function getElementById(id, nodes, recurse = true) {\n    if (!Array.isArray(nodes)) nodes = [\n        nodes\n    ];\n    return (0,_querying_js__WEBPACK_IMPORTED_MODULE_1__.findOne)(getAttribCheck(\"id\", id), nodes, recurse);\n}\n/**\n * Returns all nodes with the supplied `tagName`.\n *\n * @category Legacy Query Functions\n * @param tagName Tag name to search for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes with the supplied `tagName`.\n */ function getElementsByTagName(tagName, nodes, recurse = true, limit = Infinity) {\n    return (0,_querying_js__WEBPACK_IMPORTED_MODULE_1__.filter)(Checks[\"tag_name\"](tagName), nodes, recurse, limit);\n}\n/**\n * Returns all nodes with the supplied `className`.\n *\n * @category Legacy Query Functions\n * @param className Class name to search for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes with the supplied `className`.\n */ function getElementsByClassName(className, nodes, recurse = true, limit = Infinity) {\n    return (0,_querying_js__WEBPACK_IMPORTED_MODULE_1__.filter)(getAttribCheck(\"class\", className), nodes, recurse, limit);\n}\n/**\n * Returns all nodes with the supplied `type`.\n *\n * @category Legacy Query Functions\n * @param type Element type to look for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes with the supplied `type`.\n */ function getElementsByTagType(type, nodes, recurse = true, limit = Infinity) {\n    return (0,_querying_js__WEBPACK_IMPORTED_MODULE_1__.filter)(Checks[\"tag_type\"](type), nodes, recurse, limit);\n} //# sourceMappingURL=legacy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/domutils/lib/esm/legacy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/domutils/lib/esm/manipulation.js":
/*!*******************************************************!*\
  !*** ./node_modules/domutils/lib/esm/manipulation.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   append: () => (/* binding */ append),\n/* harmony export */   appendChild: () => (/* binding */ appendChild),\n/* harmony export */   prepend: () => (/* binding */ prepend),\n/* harmony export */   prependChild: () => (/* binding */ prependChild),\n/* harmony export */   removeElement: () => (/* binding */ removeElement),\n/* harmony export */   replaceElement: () => (/* binding */ replaceElement)\n/* harmony export */ });\n/**\n * Remove an element from the dom\n *\n * @category Manipulation\n * @param elem The element to be removed\n */ function removeElement(elem) {\n    if (elem.prev) elem.prev.next = elem.next;\n    if (elem.next) elem.next.prev = elem.prev;\n    if (elem.parent) {\n        const childs = elem.parent.children;\n        const childsIndex = childs.lastIndexOf(elem);\n        if (childsIndex >= 0) {\n            childs.splice(childsIndex, 1);\n        }\n    }\n    elem.next = null;\n    elem.prev = null;\n    elem.parent = null;\n}\n/**\n * Replace an element in the dom\n *\n * @category Manipulation\n * @param elem The element to be replaced\n * @param replacement The element to be added\n */ function replaceElement(elem, replacement) {\n    const prev = replacement.prev = elem.prev;\n    if (prev) {\n        prev.next = replacement;\n    }\n    const next = replacement.next = elem.next;\n    if (next) {\n        next.prev = replacement;\n    }\n    const parent = replacement.parent = elem.parent;\n    if (parent) {\n        const childs = parent.children;\n        childs[childs.lastIndexOf(elem)] = replacement;\n        elem.parent = null;\n    }\n}\n/**\n * Append a child to an element.\n *\n * @category Manipulation\n * @param parent The element to append to.\n * @param child The element to be added as a child.\n */ function appendChild(parent, child) {\n    removeElement(child);\n    child.next = null;\n    child.parent = parent;\n    if (parent.children.push(child) > 1) {\n        const sibling = parent.children[parent.children.length - 2];\n        sibling.next = child;\n        child.prev = sibling;\n    } else {\n        child.prev = null;\n    }\n}\n/**\n * Append an element after another.\n *\n * @category Manipulation\n * @param elem The element to append after.\n * @param next The element be added.\n */ function append(elem, next) {\n    removeElement(next);\n    const { parent } = elem;\n    const currNext = elem.next;\n    next.next = currNext;\n    next.prev = elem;\n    elem.next = next;\n    next.parent = parent;\n    if (currNext) {\n        currNext.prev = next;\n        if (parent) {\n            const childs = parent.children;\n            childs.splice(childs.lastIndexOf(currNext), 0, next);\n        }\n    } else if (parent) {\n        parent.children.push(next);\n    }\n}\n/**\n * Prepend a child to an element.\n *\n * @category Manipulation\n * @param parent The element to prepend before.\n * @param child The element to be added as a child.\n */ function prependChild(parent, child) {\n    removeElement(child);\n    child.parent = parent;\n    child.prev = null;\n    if (parent.children.unshift(child) !== 1) {\n        const sibling = parent.children[1];\n        sibling.prev = child;\n        child.next = sibling;\n    } else {\n        child.next = null;\n    }\n}\n/**\n * Prepend an element before another.\n *\n * @category Manipulation\n * @param elem The element to prepend before.\n * @param prev The element be added.\n */ function prepend(elem, prev) {\n    removeElement(prev);\n    const { parent } = elem;\n    if (parent) {\n        const childs = parent.children;\n        childs.splice(childs.indexOf(elem), 0, prev);\n    }\n    if (elem.prev) {\n        elem.prev.next = prev;\n    }\n    prev.parent = parent;\n    prev.prev = elem.prev;\n    prev.next = elem;\n    elem.prev = prev;\n} //# sourceMappingURL=manipulation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/domutils/lib/esm/manipulation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/domutils/lib/esm/querying.js":
/*!***************************************************!*\
  !*** ./node_modules/domutils/lib/esm/querying.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   existsOne: () => (/* binding */ existsOne),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   find: () => (/* binding */ find),\n/* harmony export */   findAll: () => (/* binding */ findAll),\n/* harmony export */   findOne: () => (/* binding */ findOne),\n/* harmony export */   findOneChild: () => (/* binding */ findOneChild)\n/* harmony export */ });\n/* harmony import */ var domhandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domhandler */ \"(rsc)/./node_modules/domhandler/lib/esm/index.js\");\n\n/**\n * Search a node and its children for nodes passing a test function. If `node` is not an array, it will be wrapped in one.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param node Node to search. Will be included in the result set if it matches.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */ function filter(test, node, recurse = true, limit = Infinity) {\n    return find(test, Array.isArray(node) ? node : [\n        node\n    ], recurse, limit);\n}\n/**\n * Search an array of nodes and their children for nodes passing a test function.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */ function find(test, nodes, recurse, limit) {\n    const result = [];\n    /** Stack of the arrays we are looking at. */ const nodeStack = [\n        Array.isArray(nodes) ? nodes : [\n            nodes\n        ]\n    ];\n    /** Stack of the indices within the arrays. */ const indexStack = [\n        0\n    ];\n    for(;;){\n        // First, check if the current array has any more elements to look at.\n        if (indexStack[0] >= nodeStack[0].length) {\n            // If we have no more arrays to look at, we are done.\n            if (indexStack.length === 1) {\n                return result;\n            }\n            // Otherwise, remove the current array from the stack.\n            nodeStack.shift();\n            indexStack.shift();\n            continue;\n        }\n        const elem = nodeStack[0][indexStack[0]++];\n        if (test(elem)) {\n            result.push(elem);\n            if (--limit <= 0) return result;\n        }\n        if (recurse && (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.hasChildren)(elem) && elem.children.length > 0) {\n            /*\n             * Add the children to the stack. We are depth-first, so this is\n             * the next array we look at.\n             */ indexStack.unshift(0);\n            nodeStack.unshift(elem.children);\n        }\n    }\n}\n/**\n * Finds the first element inside of an array that matches a test function. This is an alias for `Array.prototype.find`.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns The first node in the array that passes `test`.\n * @deprecated Use `Array.prototype.find` directly.\n */ function findOneChild(test, nodes) {\n    return nodes.find(test);\n}\n/**\n * Finds one element in a tree that passes a test.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Node or array of nodes to search.\n * @param recurse Also consider child nodes.\n * @returns The first node that passes `test`.\n */ function findOne(test, nodes, recurse = true) {\n    const searchedNodes = Array.isArray(nodes) ? nodes : [\n        nodes\n    ];\n    for(let i = 0; i < searchedNodes.length; i++){\n        const node = searchedNodes[i];\n        if ((0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag)(node) && test(node)) {\n            return node;\n        }\n        if (recurse && (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.hasChildren)(node) && node.children.length > 0) {\n            const found = findOne(test, node.children, true);\n            if (found) return found;\n        }\n    }\n    return null;\n}\n/**\n * Checks if a tree of nodes contains at least one node passing a test.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns Whether a tree of nodes contains at least one node passing the test.\n */ function existsOne(test, nodes) {\n    return (Array.isArray(nodes) ? nodes : [\n        nodes\n    ]).some((node)=>(0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag)(node) && test(node) || (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.hasChildren)(node) && existsOne(test, node.children));\n}\n/**\n * Search an array of nodes and their children for elements passing a test function.\n *\n * Same as `find`, but limited to elements and with less options, leading to reduced complexity.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns All nodes passing `test`.\n */ function findAll(test, nodes) {\n    const result = [];\n    const nodeStack = [\n        Array.isArray(nodes) ? nodes : [\n            nodes\n        ]\n    ];\n    const indexStack = [\n        0\n    ];\n    for(;;){\n        if (indexStack[0] >= nodeStack[0].length) {\n            if (nodeStack.length === 1) {\n                return result;\n            }\n            // Otherwise, remove the current array from the stack.\n            nodeStack.shift();\n            indexStack.shift();\n            continue;\n        }\n        const elem = nodeStack[0][indexStack[0]++];\n        if ((0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag)(elem) && test(elem)) result.push(elem);\n        if ((0,domhandler__WEBPACK_IMPORTED_MODULE_0__.hasChildren)(elem) && elem.children.length > 0) {\n            indexStack.unshift(0);\n            nodeStack.unshift(elem.children);\n        }\n    }\n} //# sourceMappingURL=querying.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/domutils/lib/esm/querying.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/domutils/lib/esm/stringify.js":
/*!****************************************************!*\
  !*** ./node_modules/domutils/lib/esm/stringify.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getInnerHTML: () => (/* binding */ getInnerHTML),\n/* harmony export */   getOuterHTML: () => (/* binding */ getOuterHTML),\n/* harmony export */   getText: () => (/* binding */ getText),\n/* harmony export */   innerText: () => (/* binding */ innerText),\n/* harmony export */   textContent: () => (/* binding */ textContent)\n/* harmony export */ });\n/* harmony import */ var domhandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domhandler */ \"(rsc)/./node_modules/domhandler/lib/esm/index.js\");\n/* harmony import */ var dom_serializer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dom-serializer */ \"(rsc)/./node_modules/dom-serializer/lib/esm/index.js\");\n/* harmony import */ var domelementtype__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! domelementtype */ \"(rsc)/./node_modules/domelementtype/lib/esm/index.js\");\n\n\n\n/**\n * @category Stringify\n * @deprecated Use the `dom-serializer` module directly.\n * @param node Node to get the outer HTML of.\n * @param options Options for serialization.\n * @returns `node`'s outer HTML.\n */ function getOuterHTML(node, options) {\n    return (0,dom_serializer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(node, options);\n}\n/**\n * @category Stringify\n * @deprecated Use the `dom-serializer` module directly.\n * @param node Node to get the inner HTML of.\n * @param options Options for serialization.\n * @returns `node`'s inner HTML.\n */ function getInnerHTML(node, options) {\n    return (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.hasChildren)(node) ? node.children.map((node)=>getOuterHTML(node, options)).join(\"\") : \"\";\n}\n/**\n * Get a node's inner text. Same as `textContent`, but inserts newlines for `<br>` tags. Ignores comments.\n *\n * @category Stringify\n * @deprecated Use `textContent` instead.\n * @param node Node to get the inner text of.\n * @returns `node`'s inner text.\n */ function getText(node) {\n    if (Array.isArray(node)) return node.map(getText).join(\"\");\n    if ((0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag)(node)) return node.name === \"br\" ? \"\\n\" : getText(node.children);\n    if ((0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isCDATA)(node)) return getText(node.children);\n    if ((0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isText)(node)) return node.data;\n    return \"\";\n}\n/**\n * Get a node's text content. Ignores comments.\n *\n * @category Stringify\n * @param node Node to get the text content of.\n * @returns `node`'s text content.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent}\n */ function textContent(node) {\n    if (Array.isArray(node)) return node.map(textContent).join(\"\");\n    if ((0,domhandler__WEBPACK_IMPORTED_MODULE_0__.hasChildren)(node) && !(0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isComment)(node)) {\n        return textContent(node.children);\n    }\n    if ((0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isText)(node)) return node.data;\n    return \"\";\n}\n/**\n * Get a node's inner text, ignoring `<script>` and `<style>` tags. Ignores comments.\n *\n * @category Stringify\n * @param node Node to get the inner text of.\n * @returns `node`'s inner text.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/innerText}\n */ function innerText(node) {\n    if (Array.isArray(node)) return node.map(innerText).join(\"\");\n    if ((0,domhandler__WEBPACK_IMPORTED_MODULE_0__.hasChildren)(node) && (node.type === domelementtype__WEBPACK_IMPORTED_MODULE_2__.ElementType.Tag || (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isCDATA)(node))) {\n        return innerText(node.children);\n    }\n    if ((0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isText)(node)) return node.data;\n    return \"\";\n} //# sourceMappingURL=stringify.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL2VzbS9zdHJpbmdpZnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBNkU7QUFDckM7QUFDSztBQUM3Qzs7Ozs7O0NBTUMsR0FDTSxTQUFTTyxhQUFhQyxJQUFJLEVBQUVDLE9BQU87SUFDdEMsT0FBT0osMERBQVVBLENBQUNHLE1BQU1DO0FBQzVCO0FBQ0E7Ozs7OztDQU1DLEdBQ00sU0FBU0MsYUFBYUYsSUFBSSxFQUFFQyxPQUFPO0lBQ3RDLE9BQU9OLHVEQUFXQSxDQUFDSyxRQUNiQSxLQUFLRyxRQUFRLENBQUNDLEdBQUcsQ0FBQyxDQUFDSixPQUFTRCxhQUFhQyxNQUFNQyxVQUFVSSxJQUFJLENBQUMsTUFDOUQ7QUFDVjtBQUNBOzs7Ozs7O0NBT0MsR0FDTSxTQUFTQyxRQUFRTixJQUFJO0lBQ3hCLElBQUlPLE1BQU1DLE9BQU8sQ0FBQ1IsT0FDZCxPQUFPQSxLQUFLSSxHQUFHLENBQUNFLFNBQVNELElBQUksQ0FBQztJQUNsQyxJQUFJYixpREFBS0EsQ0FBQ1EsT0FDTixPQUFPQSxLQUFLUyxJQUFJLEtBQUssT0FBTyxPQUFPSCxRQUFRTixLQUFLRyxRQUFRO0lBQzVELElBQUlWLG1EQUFPQSxDQUFDTyxPQUNSLE9BQU9NLFFBQVFOLEtBQUtHLFFBQVE7SUFDaEMsSUFBSVQsa0RBQU1BLENBQUNNLE9BQ1AsT0FBT0EsS0FBS1UsSUFBSTtJQUNwQixPQUFPO0FBQ1g7QUFDQTs7Ozs7OztDQU9DLEdBQ00sU0FBU0MsWUFBWVgsSUFBSTtJQUM1QixJQUFJTyxNQUFNQyxPQUFPLENBQUNSLE9BQ2QsT0FBT0EsS0FBS0ksR0FBRyxDQUFDTyxhQUFhTixJQUFJLENBQUM7SUFDdEMsSUFBSVYsdURBQVdBLENBQUNLLFNBQVMsQ0FBQ0oscURBQVNBLENBQUNJLE9BQU87UUFDdkMsT0FBT1csWUFBWVgsS0FBS0csUUFBUTtJQUNwQztJQUNBLElBQUlULGtEQUFNQSxDQUFDTSxPQUNQLE9BQU9BLEtBQUtVLElBQUk7SUFDcEIsT0FBTztBQUNYO0FBQ0E7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNFLFVBQVVaLElBQUk7SUFDMUIsSUFBSU8sTUFBTUMsT0FBTyxDQUFDUixPQUNkLE9BQU9BLEtBQUtJLEdBQUcsQ0FBQ1EsV0FBV1AsSUFBSSxDQUFDO0lBQ3BDLElBQUlWLHVEQUFXQSxDQUFDSyxTQUFVQSxDQUFBQSxLQUFLYSxJQUFJLEtBQUtmLHVEQUFXQSxDQUFDZ0IsR0FBRyxJQUFJckIsbURBQU9BLENBQUNPLEtBQUksR0FBSTtRQUN2RSxPQUFPWSxVQUFVWixLQUFLRyxRQUFRO0lBQ2xDO0lBQ0EsSUFBSVQsa0RBQU1BLENBQUNNLE9BQ1AsT0FBT0EsS0FBS1UsSUFBSTtJQUNwQixPQUFPO0FBQ1gsRUFDQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YWhlZ3VydS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2RvbXV0aWxzL2xpYi9lc20vc3RyaW5naWZ5LmpzPzU4OGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNUYWcsIGlzQ0RBVEEsIGlzVGV4dCwgaGFzQ2hpbGRyZW4sIGlzQ29tbWVudCwgfSBmcm9tIFwiZG9taGFuZGxlclwiO1xuaW1wb3J0IHJlbmRlckhUTUwgZnJvbSBcImRvbS1zZXJpYWxpemVyXCI7XG5pbXBvcnQgeyBFbGVtZW50VHlwZSB9IGZyb20gXCJkb21lbGVtZW50dHlwZVwiO1xuLyoqXG4gKiBAY2F0ZWdvcnkgU3RyaW5naWZ5XG4gKiBAZGVwcmVjYXRlZCBVc2UgdGhlIGBkb20tc2VyaWFsaXplcmAgbW9kdWxlIGRpcmVjdGx5LlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBnZXQgdGhlIG91dGVyIEhUTUwgb2YuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIGZvciBzZXJpYWxpemF0aW9uLlxuICogQHJldHVybnMgYG5vZGVgJ3Mgb3V0ZXIgSFRNTC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE91dGVySFRNTChub2RlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHJlbmRlckhUTUwobm9kZSwgb3B0aW9ucyk7XG59XG4vKipcbiAqIEBjYXRlZ29yeSBTdHJpbmdpZnlcbiAqIEBkZXByZWNhdGVkIFVzZSB0aGUgYGRvbS1zZXJpYWxpemVyYCBtb2R1bGUgZGlyZWN0bHkuXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGdldCB0aGUgaW5uZXIgSFRNTCBvZi5cbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZm9yIHNlcmlhbGl6YXRpb24uXG4gKiBAcmV0dXJucyBgbm9kZWAncyBpbm5lciBIVE1MLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5uZXJIVE1MKG5vZGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gaGFzQ2hpbGRyZW4obm9kZSlcbiAgICAgICAgPyBub2RlLmNoaWxkcmVuLm1hcCgobm9kZSkgPT4gZ2V0T3V0ZXJIVE1MKG5vZGUsIG9wdGlvbnMpKS5qb2luKFwiXCIpXG4gICAgICAgIDogXCJcIjtcbn1cbi8qKlxuICogR2V0IGEgbm9kZSdzIGlubmVyIHRleHQuIFNhbWUgYXMgYHRleHRDb250ZW50YCwgYnV0IGluc2VydHMgbmV3bGluZXMgZm9yIGA8YnI+YCB0YWdzLiBJZ25vcmVzIGNvbW1lbnRzLlxuICpcbiAqIEBjYXRlZ29yeSBTdHJpbmdpZnlcbiAqIEBkZXByZWNhdGVkIFVzZSBgdGV4dENvbnRlbnRgIGluc3RlYWQuXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGdldCB0aGUgaW5uZXIgdGV4dCBvZi5cbiAqIEByZXR1cm5zIGBub2RlYCdzIGlubmVyIHRleHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUZXh0KG5vZGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShub2RlKSlcbiAgICAgICAgcmV0dXJuIG5vZGUubWFwKGdldFRleHQpLmpvaW4oXCJcIik7XG4gICAgaWYgKGlzVGFnKG5vZGUpKVxuICAgICAgICByZXR1cm4gbm9kZS5uYW1lID09PSBcImJyXCIgPyBcIlxcblwiIDogZ2V0VGV4dChub2RlLmNoaWxkcmVuKTtcbiAgICBpZiAoaXNDREFUQShub2RlKSlcbiAgICAgICAgcmV0dXJuIGdldFRleHQobm9kZS5jaGlsZHJlbik7XG4gICAgaWYgKGlzVGV4dChub2RlKSlcbiAgICAgICAgcmV0dXJuIG5vZGUuZGF0YTtcbiAgICByZXR1cm4gXCJcIjtcbn1cbi8qKlxuICogR2V0IGEgbm9kZSdzIHRleHQgY29udGVudC4gSWdub3JlcyBjb21tZW50cy5cbiAqXG4gKiBAY2F0ZWdvcnkgU3RyaW5naWZ5XG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGdldCB0aGUgdGV4dCBjb250ZW50IG9mLlxuICogQHJldHVybnMgYG5vZGVgJ3MgdGV4dCBjb250ZW50LlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05vZGUvdGV4dENvbnRlbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0ZXh0Q29udGVudChub2RlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobm9kZSkpXG4gICAgICAgIHJldHVybiBub2RlLm1hcCh0ZXh0Q29udGVudCkuam9pbihcIlwiKTtcbiAgICBpZiAoaGFzQ2hpbGRyZW4obm9kZSkgJiYgIWlzQ29tbWVudChub2RlKSkge1xuICAgICAgICByZXR1cm4gdGV4dENvbnRlbnQobm9kZS5jaGlsZHJlbik7XG4gICAgfVxuICAgIGlmIChpc1RleHQobm9kZSkpXG4gICAgICAgIHJldHVybiBub2RlLmRhdGE7XG4gICAgcmV0dXJuIFwiXCI7XG59XG4vKipcbiAqIEdldCBhIG5vZGUncyBpbm5lciB0ZXh0LCBpZ25vcmluZyBgPHNjcmlwdD5gIGFuZCBgPHN0eWxlPmAgdGFncy4gSWdub3JlcyBjb21tZW50cy5cbiAqXG4gKiBAY2F0ZWdvcnkgU3RyaW5naWZ5XG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGdldCB0aGUgaW5uZXIgdGV4dCBvZi5cbiAqIEByZXR1cm5zIGBub2RlYCdzIGlubmVyIHRleHQuXG4gKiBAc2VlIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTm9kZS9pbm5lclRleHR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbm5lclRleHQobm9kZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKVxuICAgICAgICByZXR1cm4gbm9kZS5tYXAoaW5uZXJUZXh0KS5qb2luKFwiXCIpO1xuICAgIGlmIChoYXNDaGlsZHJlbihub2RlKSAmJiAobm9kZS50eXBlID09PSBFbGVtZW50VHlwZS5UYWcgfHwgaXNDREFUQShub2RlKSkpIHtcbiAgICAgICAgcmV0dXJuIGlubmVyVGV4dChub2RlLmNoaWxkcmVuKTtcbiAgICB9XG4gICAgaWYgKGlzVGV4dChub2RlKSlcbiAgICAgICAgcmV0dXJuIG5vZGUuZGF0YTtcbiAgICByZXR1cm4gXCJcIjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmluZ2lmeS5qcy5tYXAiXSwibmFtZXMiOlsiaXNUYWciLCJpc0NEQVRBIiwiaXNUZXh0IiwiaGFzQ2hpbGRyZW4iLCJpc0NvbW1lbnQiLCJyZW5kZXJIVE1MIiwiRWxlbWVudFR5cGUiLCJnZXRPdXRlckhUTUwiLCJub2RlIiwib3B0aW9ucyIsImdldElubmVySFRNTCIsImNoaWxkcmVuIiwibWFwIiwiam9pbiIsImdldFRleHQiLCJBcnJheSIsImlzQXJyYXkiLCJuYW1lIiwiZGF0YSIsInRleHRDb250ZW50IiwiaW5uZXJUZXh0IiwidHlwZSIsIlRhZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/domutils/lib/esm/stringify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/domutils/lib/esm/traversal.js":
/*!****************************************************!*\
  !*** ./node_modules/domutils/lib/esm/traversal.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAttributeValue: () => (/* binding */ getAttributeValue),\n/* harmony export */   getChildren: () => (/* binding */ getChildren),\n/* harmony export */   getName: () => (/* binding */ getName),\n/* harmony export */   getParent: () => (/* binding */ getParent),\n/* harmony export */   getSiblings: () => (/* binding */ getSiblings),\n/* harmony export */   hasAttrib: () => (/* binding */ hasAttrib),\n/* harmony export */   nextElementSibling: () => (/* binding */ nextElementSibling),\n/* harmony export */   prevElementSibling: () => (/* binding */ prevElementSibling)\n/* harmony export */ });\n/* harmony import */ var domhandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domhandler */ \"(rsc)/./node_modules/domhandler/lib/esm/index.js\");\n\n/**\n * Get a node's children.\n *\n * @category Traversal\n * @param elem Node to get the children of.\n * @returns `elem`'s children, or an empty array.\n */ function getChildren(elem) {\n    return (0,domhandler__WEBPACK_IMPORTED_MODULE_0__.hasChildren)(elem) ? elem.children : [];\n}\n/**\n * Get a node's parent.\n *\n * @category Traversal\n * @param elem Node to get the parent of.\n * @returns `elem`'s parent node, or `null` if `elem` is a root node.\n */ function getParent(elem) {\n    return elem.parent || null;\n}\n/**\n * Gets an elements siblings, including the element itself.\n *\n * Attempts to get the children through the element's parent first. If we don't\n * have a parent (the element is a root node), we walk the element's `prev` &\n * `next` to get all remaining nodes.\n *\n * @category Traversal\n * @param elem Element to get the siblings of.\n * @returns `elem`'s siblings, including `elem`.\n */ function getSiblings(elem) {\n    const parent = getParent(elem);\n    if (parent != null) return getChildren(parent);\n    const siblings = [\n        elem\n    ];\n    let { prev, next } = elem;\n    while(prev != null){\n        siblings.unshift(prev);\n        ({ prev } = prev);\n    }\n    while(next != null){\n        siblings.push(next);\n        ({ next } = next);\n    }\n    return siblings;\n}\n/**\n * Gets an attribute from an element.\n *\n * @category Traversal\n * @param elem Element to check.\n * @param name Attribute name to retrieve.\n * @returns The element's attribute value, or `undefined`.\n */ function getAttributeValue(elem, name) {\n    var _a;\n    return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];\n}\n/**\n * Checks whether an element has an attribute.\n *\n * @category Traversal\n * @param elem Element to check.\n * @param name Attribute name to look for.\n * @returns Returns whether `elem` has the attribute `name`.\n */ function hasAttrib(elem, name) {\n    return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;\n}\n/**\n * Get the tag name of an element.\n *\n * @category Traversal\n * @param elem The element to get the name for.\n * @returns The tag name of `elem`.\n */ function getName(elem) {\n    return elem.name;\n}\n/**\n * Returns the next element sibling of a node.\n *\n * @category Traversal\n * @param elem The element to get the next sibling of.\n * @returns `elem`'s next sibling that is a tag, or `null` if there is no next\n * sibling.\n */ function nextElementSibling(elem) {\n    let { next } = elem;\n    while(next !== null && !(0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag)(next))({ next } = next);\n    return next;\n}\n/**\n * Returns the previous element sibling of a node.\n *\n * @category Traversal\n * @param elem The element to get the previous sibling of.\n * @returns `elem`'s previous sibling that is a tag, or `null` if there is no\n * previous sibling.\n */ function prevElementSibling(elem) {\n    let { prev } = elem;\n    while(prev !== null && !(0,domhandler__WEBPACK_IMPORTED_MODULE_0__.isTag)(prev))({ prev } = prev);\n    return prev;\n} //# sourceMappingURL=traversal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL2VzbS90cmF2ZXJzYWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQWlEO0FBQ2pEOzs7Ozs7Q0FNQyxHQUNNLFNBQVNFLFlBQVlDLElBQUk7SUFDNUIsT0FBT0YsdURBQVdBLENBQUNFLFFBQVFBLEtBQUtDLFFBQVEsR0FBRyxFQUFFO0FBQ2pEO0FBQ0E7Ozs7OztDQU1DLEdBQ00sU0FBU0MsVUFBVUYsSUFBSTtJQUMxQixPQUFPQSxLQUFLRyxNQUFNLElBQUk7QUFDMUI7QUFDQTs7Ozs7Ozs7OztDQVVDLEdBQ00sU0FBU0MsWUFBWUosSUFBSTtJQUM1QixNQUFNRyxTQUFTRCxVQUFVRjtJQUN6QixJQUFJRyxVQUFVLE1BQ1YsT0FBT0osWUFBWUk7SUFDdkIsTUFBTUUsV0FBVztRQUFDTDtLQUFLO0lBQ3ZCLElBQUksRUFBRU0sSUFBSSxFQUFFQyxJQUFJLEVBQUUsR0FBR1A7SUFDckIsTUFBT00sUUFBUSxLQUFNO1FBQ2pCRCxTQUFTRyxPQUFPLENBQUNGO1FBQ2hCLEdBQUVBLElBQUksRUFBRSxHQUFHQSxJQUFHO0lBQ25CO0lBQ0EsTUFBT0MsUUFBUSxLQUFNO1FBQ2pCRixTQUFTSSxJQUFJLENBQUNGO1FBQ2IsR0FBRUEsSUFBSSxFQUFFLEdBQUdBLElBQUc7SUFDbkI7SUFDQSxPQUFPRjtBQUNYO0FBQ0E7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNLLGtCQUFrQlYsSUFBSSxFQUFFVyxJQUFJO0lBQ3hDLElBQUlDO0lBQ0osT0FBTyxDQUFDQSxLQUFLWixLQUFLYSxPQUFPLE1BQU0sUUFBUUQsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxFQUFFLENBQUNELEtBQUs7QUFDNUU7QUFDQTs7Ozs7OztDQU9DLEdBQ00sU0FBU0csVUFBVWQsSUFBSSxFQUFFVyxJQUFJO0lBQ2hDLE9BQVFYLEtBQUthLE9BQU8sSUFBSSxRQUNwQkUsT0FBT0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ2xCLEtBQUthLE9BQU8sRUFBRUYsU0FDbkRYLEtBQUthLE9BQU8sQ0FBQ0YsS0FBSyxJQUFJO0FBQzlCO0FBQ0E7Ozs7OztDQU1DLEdBQ00sU0FBU1EsUUFBUW5CLElBQUk7SUFDeEIsT0FBT0EsS0FBS1csSUFBSTtBQUNwQjtBQUNBOzs7Ozs7O0NBT0MsR0FDTSxTQUFTUyxtQkFBbUJwQixJQUFJO0lBQ25DLElBQUksRUFBRU8sSUFBSSxFQUFFLEdBQUdQO0lBQ2YsTUFBT08sU0FBUyxRQUFRLENBQUNWLGlEQUFLQSxDQUFDVSxNQUMxQixHQUFFQSxJQUFJLEVBQUUsR0FBR0EsSUFBRztJQUNuQixPQUFPQTtBQUNYO0FBQ0E7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNjLG1CQUFtQnJCLElBQUk7SUFDbkMsSUFBSSxFQUFFTSxJQUFJLEVBQUUsR0FBR047SUFDZixNQUFPTSxTQUFTLFFBQVEsQ0FBQ1QsaURBQUtBLENBQUNTLE1BQzFCLEdBQUVBLElBQUksRUFBRSxHQUFHQSxJQUFHO0lBQ25CLE9BQU9BO0FBQ1gsRUFDQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YWhlZ3VydS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2RvbXV0aWxzL2xpYi9lc20vdHJhdmVyc2FsLmpzPzNlMzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNUYWcsIGhhc0NoaWxkcmVuLCB9IGZyb20gXCJkb21oYW5kbGVyXCI7XG4vKipcbiAqIEdldCBhIG5vZGUncyBjaGlsZHJlbi5cbiAqXG4gKiBAY2F0ZWdvcnkgVHJhdmVyc2FsXG4gKiBAcGFyYW0gZWxlbSBOb2RlIHRvIGdldCB0aGUgY2hpbGRyZW4gb2YuXG4gKiBAcmV0dXJucyBgZWxlbWAncyBjaGlsZHJlbiwgb3IgYW4gZW1wdHkgYXJyYXkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGlsZHJlbihlbGVtKSB7XG4gICAgcmV0dXJuIGhhc0NoaWxkcmVuKGVsZW0pID8gZWxlbS5jaGlsZHJlbiA6IFtdO1xufVxuLyoqXG4gKiBHZXQgYSBub2RlJ3MgcGFyZW50LlxuICpcbiAqIEBjYXRlZ29yeSBUcmF2ZXJzYWxcbiAqIEBwYXJhbSBlbGVtIE5vZGUgdG8gZ2V0IHRoZSBwYXJlbnQgb2YuXG4gKiBAcmV0dXJucyBgZWxlbWAncyBwYXJlbnQgbm9kZSwgb3IgYG51bGxgIGlmIGBlbGVtYCBpcyBhIHJvb3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhcmVudChlbGVtKSB7XG4gICAgcmV0dXJuIGVsZW0ucGFyZW50IHx8IG51bGw7XG59XG4vKipcbiAqIEdldHMgYW4gZWxlbWVudHMgc2libGluZ3MsIGluY2x1ZGluZyB0aGUgZWxlbWVudCBpdHNlbGYuXG4gKlxuICogQXR0ZW1wdHMgdG8gZ2V0IHRoZSBjaGlsZHJlbiB0aHJvdWdoIHRoZSBlbGVtZW50J3MgcGFyZW50IGZpcnN0LiBJZiB3ZSBkb24ndFxuICogaGF2ZSBhIHBhcmVudCAodGhlIGVsZW1lbnQgaXMgYSByb290IG5vZGUpLCB3ZSB3YWxrIHRoZSBlbGVtZW50J3MgYHByZXZgICZcbiAqIGBuZXh0YCB0byBnZXQgYWxsIHJlbWFpbmluZyBub2Rlcy5cbiAqXG4gKiBAY2F0ZWdvcnkgVHJhdmVyc2FsXG4gKiBAcGFyYW0gZWxlbSBFbGVtZW50IHRvIGdldCB0aGUgc2libGluZ3Mgb2YuXG4gKiBAcmV0dXJucyBgZWxlbWAncyBzaWJsaW5ncywgaW5jbHVkaW5nIGBlbGVtYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNpYmxpbmdzKGVsZW0pIHtcbiAgICBjb25zdCBwYXJlbnQgPSBnZXRQYXJlbnQoZWxlbSk7XG4gICAgaWYgKHBhcmVudCAhPSBudWxsKVxuICAgICAgICByZXR1cm4gZ2V0Q2hpbGRyZW4ocGFyZW50KTtcbiAgICBjb25zdCBzaWJsaW5ncyA9IFtlbGVtXTtcbiAgICBsZXQgeyBwcmV2LCBuZXh0IH0gPSBlbGVtO1xuICAgIHdoaWxlIChwcmV2ICE9IG51bGwpIHtcbiAgICAgICAgc2libGluZ3MudW5zaGlmdChwcmV2KTtcbiAgICAgICAgKHsgcHJldiB9ID0gcHJldik7XG4gICAgfVxuICAgIHdoaWxlIChuZXh0ICE9IG51bGwpIHtcbiAgICAgICAgc2libGluZ3MucHVzaChuZXh0KTtcbiAgICAgICAgKHsgbmV4dCB9ID0gbmV4dCk7XG4gICAgfVxuICAgIHJldHVybiBzaWJsaW5ncztcbn1cbi8qKlxuICogR2V0cyBhbiBhdHRyaWJ1dGUgZnJvbSBhbiBlbGVtZW50LlxuICpcbiAqIEBjYXRlZ29yeSBUcmF2ZXJzYWxcbiAqIEBwYXJhbSBlbGVtIEVsZW1lbnQgdG8gY2hlY2suXG4gKiBAcGFyYW0gbmFtZSBBdHRyaWJ1dGUgbmFtZSB0byByZXRyaWV2ZS5cbiAqIEByZXR1cm5zIFRoZSBlbGVtZW50J3MgYXR0cmlidXRlIHZhbHVlLCBvciBgdW5kZWZpbmVkYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEF0dHJpYnV0ZVZhbHVlKGVsZW0sIG5hbWUpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIChfYSA9IGVsZW0uYXR0cmlicykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW25hbWVdO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBhbiBlbGVtZW50IGhhcyBhbiBhdHRyaWJ1dGUuXG4gKlxuICogQGNhdGVnb3J5IFRyYXZlcnNhbFxuICogQHBhcmFtIGVsZW0gRWxlbWVudCB0byBjaGVjay5cbiAqIEBwYXJhbSBuYW1lIEF0dHJpYnV0ZSBuYW1lIHRvIGxvb2sgZm9yLlxuICogQHJldHVybnMgUmV0dXJucyB3aGV0aGVyIGBlbGVtYCBoYXMgdGhlIGF0dHJpYnV0ZSBgbmFtZWAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNBdHRyaWIoZWxlbSwgbmFtZSkge1xuICAgIHJldHVybiAoZWxlbS5hdHRyaWJzICE9IG51bGwgJiZcbiAgICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGVsZW0uYXR0cmlicywgbmFtZSkgJiZcbiAgICAgICAgZWxlbS5hdHRyaWJzW25hbWVdICE9IG51bGwpO1xufVxuLyoqXG4gKiBHZXQgdGhlIHRhZyBuYW1lIG9mIGFuIGVsZW1lbnQuXG4gKlxuICogQGNhdGVnb3J5IFRyYXZlcnNhbFxuICogQHBhcmFtIGVsZW0gVGhlIGVsZW1lbnQgdG8gZ2V0IHRoZSBuYW1lIGZvci5cbiAqIEByZXR1cm5zIFRoZSB0YWcgbmFtZSBvZiBgZWxlbWAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXROYW1lKGVsZW0pIHtcbiAgICByZXR1cm4gZWxlbS5uYW1lO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBuZXh0IGVsZW1lbnQgc2libGluZyBvZiBhIG5vZGUuXG4gKlxuICogQGNhdGVnb3J5IFRyYXZlcnNhbFxuICogQHBhcmFtIGVsZW0gVGhlIGVsZW1lbnQgdG8gZ2V0IHRoZSBuZXh0IHNpYmxpbmcgb2YuXG4gKiBAcmV0dXJucyBgZWxlbWAncyBuZXh0IHNpYmxpbmcgdGhhdCBpcyBhIHRhZywgb3IgYG51bGxgIGlmIHRoZXJlIGlzIG5vIG5leHRcbiAqIHNpYmxpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuZXh0RWxlbWVudFNpYmxpbmcoZWxlbSkge1xuICAgIGxldCB7IG5leHQgfSA9IGVsZW07XG4gICAgd2hpbGUgKG5leHQgIT09IG51bGwgJiYgIWlzVGFnKG5leHQpKVxuICAgICAgICAoeyBuZXh0IH0gPSBuZXh0KTtcbiAgICByZXR1cm4gbmV4dDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgcHJldmlvdXMgZWxlbWVudCBzaWJsaW5nIG9mIGEgbm9kZS5cbiAqXG4gKiBAY2F0ZWdvcnkgVHJhdmVyc2FsXG4gKiBAcGFyYW0gZWxlbSBUaGUgZWxlbWVudCB0byBnZXQgdGhlIHByZXZpb3VzIHNpYmxpbmcgb2YuXG4gKiBAcmV0dXJucyBgZWxlbWAncyBwcmV2aW91cyBzaWJsaW5nIHRoYXQgaXMgYSB0YWcsIG9yIGBudWxsYCBpZiB0aGVyZSBpcyBub1xuICogcHJldmlvdXMgc2libGluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZXZFbGVtZW50U2libGluZyhlbGVtKSB7XG4gICAgbGV0IHsgcHJldiB9ID0gZWxlbTtcbiAgICB3aGlsZSAocHJldiAhPT0gbnVsbCAmJiAhaXNUYWcocHJldikpXG4gICAgICAgICh7IHByZXYgfSA9IHByZXYpO1xuICAgIHJldHVybiBwcmV2O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhdmVyc2FsLmpzLm1hcCJdLCJuYW1lcyI6WyJpc1RhZyIsImhhc0NoaWxkcmVuIiwiZ2V0Q2hpbGRyZW4iLCJlbGVtIiwiY2hpbGRyZW4iLCJnZXRQYXJlbnQiLCJwYXJlbnQiLCJnZXRTaWJsaW5ncyIsInNpYmxpbmdzIiwicHJldiIsIm5leHQiLCJ1bnNoaWZ0IiwicHVzaCIsImdldEF0dHJpYnV0ZVZhbHVlIiwibmFtZSIsIl9hIiwiYXR0cmlicyIsImhhc0F0dHJpYiIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImdldE5hbWUiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJwcmV2RWxlbWVudFNpYmxpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/domutils/lib/esm/traversal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/entities/lib/esm/decode.js":
/*!*************************************************!*\
  !*** ./node_modules/entities/lib/esm/decode.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BinTrieFlags: () => (/* binding */ BinTrieFlags),\n/* harmony export */   DecodingMode: () => (/* binding */ DecodingMode),\n/* harmony export */   EntityDecoder: () => (/* binding */ EntityDecoder),\n/* harmony export */   decodeCodePoint: () => (/* reexport safe */ _decode_codepoint_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   decodeHTML: () => (/* binding */ decodeHTML),\n/* harmony export */   decodeHTMLAttribute: () => (/* binding */ decodeHTMLAttribute),\n/* harmony export */   decodeHTMLStrict: () => (/* binding */ decodeHTMLStrict),\n/* harmony export */   decodeXML: () => (/* binding */ decodeXML),\n/* harmony export */   determineBranch: () => (/* binding */ determineBranch),\n/* harmony export */   fromCodePoint: () => (/* reexport safe */ _decode_codepoint_js__WEBPACK_IMPORTED_MODULE_2__.fromCodePoint),\n/* harmony export */   htmlDecodeTree: () => (/* reexport safe */ _generated_decode_data_html_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   replaceCodePoint: () => (/* reexport safe */ _decode_codepoint_js__WEBPACK_IMPORTED_MODULE_2__.replaceCodePoint),\n/* harmony export */   xmlDecodeTree: () => (/* reexport safe */ _generated_decode_data_xml_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _generated_decode_data_html_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generated/decode-data-html.js */ \"(rsc)/./node_modules/entities/lib/esm/generated/decode-data-html.js\");\n/* harmony import */ var _generated_decode_data_xml_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./generated/decode-data-xml.js */ \"(rsc)/./node_modules/entities/lib/esm/generated/decode-data-xml.js\");\n/* harmony import */ var _decode_codepoint_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./decode_codepoint.js */ \"(rsc)/./node_modules/entities/lib/esm/decode_codepoint.js\");\n\n\n\n// Re-export for use by eg. htmlparser2\n\n\nvar CharCodes;\n(function(CharCodes) {\n    CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n    CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n    CharCodes[CharCodes[\"EQUALS\"] = 61] = \"EQUALS\";\n    CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n    CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n    CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n    CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n    CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n    CharCodes[CharCodes[\"LOWER_Z\"] = 122] = \"LOWER_Z\";\n    CharCodes[CharCodes[\"UPPER_A\"] = 65] = \"UPPER_A\";\n    CharCodes[CharCodes[\"UPPER_F\"] = 70] = \"UPPER_F\";\n    CharCodes[CharCodes[\"UPPER_Z\"] = 90] = \"UPPER_Z\";\n})(CharCodes || (CharCodes = {}));\n/** Bit that needs to be set to convert an upper case ASCII character to lower case */ const TO_LOWER_BIT = 32;\nvar BinTrieFlags;\n(function(BinTrieFlags) {\n    BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags || (BinTrieFlags = {}));\nfunction isNumber(code) {\n    return code >= CharCodes.ZERO && code <= CharCodes.NINE;\n}\nfunction isHexadecimalCharacter(code) {\n    return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F;\n}\nfunction isAsciiAlphaNumeric(code) {\n    return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z || isNumber(code);\n}\n/**\n * Checks if the given character is a valid end character for an entity in an attribute.\n *\n * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n */ function isEntityInAttributeInvalidEnd(code) {\n    return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);\n}\nvar EntityDecoderState;\n(function(EntityDecoderState) {\n    EntityDecoderState[EntityDecoderState[\"EntityStart\"] = 0] = \"EntityStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericStart\"] = 1] = \"NumericStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericDecimal\"] = 2] = \"NumericDecimal\";\n    EntityDecoderState[EntityDecoderState[\"NumericHex\"] = 3] = \"NumericHex\";\n    EntityDecoderState[EntityDecoderState[\"NamedEntity\"] = 4] = \"NamedEntity\";\n})(EntityDecoderState || (EntityDecoderState = {}));\nvar DecodingMode;\n(function(DecodingMode) {\n    /** Entities in text nodes that can end with any character. */ DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n    /** Only allow entities terminated with a semicolon. */ DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n    /** Entities in attributes have limitations on ending characters. */ DecodingMode[DecodingMode[\"Attribute\"] = 2] = \"Attribute\";\n})(DecodingMode || (DecodingMode = {}));\n/**\n * Token decoder with support of writing partial entities.\n */ class EntityDecoder {\n    constructor(/** The tree used to decode entities. */ decodeTree, /**\n     * The function that is called when a codepoint is decoded.\n     *\n     * For multi-byte named entities, this will be called multiple times,\n     * with the second codepoint, and the same `consumed` value.\n     *\n     * @param codepoint The decoded codepoint.\n     * @param consumed The number of bytes consumed by the decoder.\n     */ emitCodePoint, /** An object that is used to produce errors. */ errors){\n        this.decodeTree = decodeTree;\n        this.emitCodePoint = emitCodePoint;\n        this.errors = errors;\n        /** The current state of the decoder. */ this.state = EntityDecoderState.EntityStart;\n        /** Characters that were consumed while parsing an entity. */ this.consumed = 1;\n        /**\n         * The result of the entity.\n         *\n         * Either the result index of a numeric entity, or the codepoint of a\n         * numeric entity.\n         */ this.result = 0;\n        /** The current index in the decode tree. */ this.treeIndex = 0;\n        /** The number of characters that were consumed in excess. */ this.excess = 1;\n        /** The mode in which the decoder is operating. */ this.decodeMode = DecodingMode.Strict;\n    }\n    /** Resets the instance to make it reusable. */ startEntity(decodeMode) {\n        this.decodeMode = decodeMode;\n        this.state = EntityDecoderState.EntityStart;\n        this.result = 0;\n        this.treeIndex = 0;\n        this.excess = 1;\n        this.consumed = 1;\n    }\n    /**\n     * Write an entity to the decoder. This can be called multiple times with partial entities.\n     * If the entity is incomplete, the decoder will return -1.\n     *\n     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the\n     * entity is incomplete, and resume when the next string is written.\n     *\n     * @param string The string containing the entity (or a continuation of the entity).\n     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */ write(str, offset) {\n        switch(this.state){\n            case EntityDecoderState.EntityStart:\n                {\n                    if (str.charCodeAt(offset) === CharCodes.NUM) {\n                        this.state = EntityDecoderState.NumericStart;\n                        this.consumed += 1;\n                        return this.stateNumericStart(str, offset + 1);\n                    }\n                    this.state = EntityDecoderState.NamedEntity;\n                    return this.stateNamedEntity(str, offset);\n                }\n            case EntityDecoderState.NumericStart:\n                {\n                    return this.stateNumericStart(str, offset);\n                }\n            case EntityDecoderState.NumericDecimal:\n                {\n                    return this.stateNumericDecimal(str, offset);\n                }\n            case EntityDecoderState.NumericHex:\n                {\n                    return this.stateNumericHex(str, offset);\n                }\n            case EntityDecoderState.NamedEntity:\n                {\n                    return this.stateNamedEntity(str, offset);\n                }\n        }\n    }\n    /**\n     * Switches between the numeric decimal and hexadecimal states.\n     *\n     * Equivalent to the `Numeric character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */ stateNumericStart(str, offset) {\n        if (offset >= str.length) {\n            return -1;\n        }\n        if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {\n            this.state = EntityDecoderState.NumericHex;\n            this.consumed += 1;\n            return this.stateNumericHex(str, offset + 1);\n        }\n        this.state = EntityDecoderState.NumericDecimal;\n        return this.stateNumericDecimal(str, offset);\n    }\n    addToNumericResult(str, start, end, base) {\n        if (start !== end) {\n            const digitCount = end - start;\n            this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start, digitCount), base);\n            this.consumed += digitCount;\n        }\n    }\n    /**\n     * Parses a hexadecimal numeric entity.\n     *\n     * Equivalent to the `Hexademical character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */ stateNumericHex(str, offset) {\n        const startIdx = offset;\n        while(offset < str.length){\n            const char = str.charCodeAt(offset);\n            if (isNumber(char) || isHexadecimalCharacter(char)) {\n                offset += 1;\n            } else {\n                this.addToNumericResult(str, startIdx, offset, 16);\n                return this.emitNumericEntity(char, 3);\n            }\n        }\n        this.addToNumericResult(str, startIdx, offset, 16);\n        return -1;\n    }\n    /**\n     * Parses a decimal numeric entity.\n     *\n     * Equivalent to the `Decimal character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */ stateNumericDecimal(str, offset) {\n        const startIdx = offset;\n        while(offset < str.length){\n            const char = str.charCodeAt(offset);\n            if (isNumber(char)) {\n                offset += 1;\n            } else {\n                this.addToNumericResult(str, startIdx, offset, 10);\n                return this.emitNumericEntity(char, 2);\n            }\n        }\n        this.addToNumericResult(str, startIdx, offset, 10);\n        return -1;\n    }\n    /**\n     * Validate and emit a numeric entity.\n     *\n     * Implements the logic from the `Hexademical character reference start\n     * state` and `Numeric character reference end state` in the HTML spec.\n     *\n     * @param lastCp The last code point of the entity. Used to see if the\n     *               entity was terminated with a semicolon.\n     * @param expectedLength The minimum number of characters that should be\n     *                       consumed. Used to validate that at least one digit\n     *                       was consumed.\n     * @returns The number of characters that were consumed.\n     */ emitNumericEntity(lastCp, expectedLength) {\n        var _a;\n        // Ensure we consumed at least one digit.\n        if (this.consumed <= expectedLength) {\n            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n            return 0;\n        }\n        // Figure out if this is a legit end of the entity\n        if (lastCp === CharCodes.SEMI) {\n            this.consumed += 1;\n        } else if (this.decodeMode === DecodingMode.Strict) {\n            return 0;\n        }\n        this.emitCodePoint((0,_decode_codepoint_js__WEBPACK_IMPORTED_MODULE_2__.replaceCodePoint)(this.result), this.consumed);\n        if (this.errors) {\n            if (lastCp !== CharCodes.SEMI) {\n                this.errors.missingSemicolonAfterCharacterReference();\n            }\n            this.errors.validateNumericCharacterReference(this.result);\n        }\n        return this.consumed;\n    }\n    /**\n     * Parses a named entity.\n     *\n     * Equivalent to the `Named character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */ stateNamedEntity(str, offset) {\n        const { decodeTree } = this;\n        let current = decodeTree[this.treeIndex];\n        // The mask is the number of bytes of the value, including the current byte.\n        let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n        for(; offset < str.length; offset++, this.excess++){\n            const char = str.charCodeAt(offset);\n            this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);\n            if (this.treeIndex < 0) {\n                return this.result === 0 || // If we are parsing an attribute\n                this.decodeMode === DecodingMode.Attribute && // We shouldn't have consumed any characters after the entity,\n                (valueLength === 0 || // And there should be no invalid characters.\n                isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();\n            }\n            current = decodeTree[this.treeIndex];\n            valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n            // If the branch is a value, store it and continue\n            if (valueLength !== 0) {\n                // If the entity is terminated by a semicolon, we are done.\n                if (char === CharCodes.SEMI) {\n                    return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);\n                }\n                // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.\n                if (this.decodeMode !== DecodingMode.Strict) {\n                    this.result = this.treeIndex;\n                    this.consumed += this.excess;\n                    this.excess = 0;\n                }\n            }\n        }\n        return -1;\n    }\n    /**\n     * Emit a named entity that was not terminated with a semicolon.\n     *\n     * @returns The number of characters consumed.\n     */ emitNotTerminatedNamedEntity() {\n        var _a;\n        const { result, decodeTree } = this;\n        const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;\n        this.emitNamedEntityData(result, valueLength, this.consumed);\n        (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();\n        return this.consumed;\n    }\n    /**\n     * Emit a named entity.\n     *\n     * @param result The index of the entity in the decode tree.\n     * @param valueLength The number of bytes in the entity.\n     * @param consumed The number of characters consumed.\n     *\n     * @returns The number of characters consumed.\n     */ emitNamedEntityData(result, valueLength, consumed) {\n        const { decodeTree } = this;\n        this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);\n        if (valueLength === 3) {\n            // For multi-byte values, we need to emit the second byte.\n            this.emitCodePoint(decodeTree[result + 2], consumed);\n        }\n        return consumed;\n    }\n    /**\n     * Signal to the parser that the end of the input was reached.\n     *\n     * Remaining data will be emitted and relevant errors will be produced.\n     *\n     * @returns The number of characters consumed.\n     */ end() {\n        var _a;\n        switch(this.state){\n            case EntityDecoderState.NamedEntity:\n                {\n                    // Emit a named entity if we have one.\n                    return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;\n                }\n            // Otherwise, emit a numeric entity if we have one.\n            case EntityDecoderState.NumericDecimal:\n                {\n                    return this.emitNumericEntity(0, 2);\n                }\n            case EntityDecoderState.NumericHex:\n                {\n                    return this.emitNumericEntity(0, 3);\n                }\n            case EntityDecoderState.NumericStart:\n                {\n                    (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n                    return 0;\n                }\n            case EntityDecoderState.EntityStart:\n                {\n                    // Return 0 if we have no entity.\n                    return 0;\n                }\n        }\n    }\n}\n/**\n * Creates a function that decodes entities in a string.\n *\n * @param decodeTree The decode tree.\n * @returns A function that decodes entities in a string.\n */ function getDecoder(decodeTree) {\n    let ret = \"\";\n    const decoder = new EntityDecoder(decodeTree, (str)=>ret += (0,_decode_codepoint_js__WEBPACK_IMPORTED_MODULE_2__.fromCodePoint)(str));\n    return function decodeWithTrie(str, decodeMode) {\n        let lastIndex = 0;\n        let offset = 0;\n        while((offset = str.indexOf(\"&\", offset)) >= 0){\n            ret += str.slice(lastIndex, offset);\n            decoder.startEntity(decodeMode);\n            const len = decoder.write(str, // Skip the \"&\"\n            offset + 1);\n            if (len < 0) {\n                lastIndex = offset + decoder.end();\n                break;\n            }\n            lastIndex = offset + len;\n            // If `len` is 0, skip the current `&` and continue.\n            offset = len === 0 ? lastIndex + 1 : lastIndex;\n        }\n        const result = ret + str.slice(lastIndex);\n        // Make sure we don't keep a reference to the final string.\n        ret = \"\";\n        return result;\n    };\n}\n/**\n * Determines the branch of the current node that is taken given the current\n * character. This function is used to traverse the trie.\n *\n * @param decodeTree The trie.\n * @param current The current node.\n * @param nodeIdx The index right after the current node and its value.\n * @param char The current character.\n * @returns The index of the next node, or -1 if no branch is taken.\n */ function determineBranch(decodeTree, current, nodeIdx, char) {\n    const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n    const jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n    // Case 1: Single branch encoded in jump offset\n    if (branchCount === 0) {\n        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n    }\n    // Case 2: Multiple branches encoded in jump table\n    if (jumpOffset) {\n        const value = char - jumpOffset;\n        return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;\n    }\n    // Case 3: Multiple branches encoded in dictionary\n    // Binary search for the character.\n    let lo = nodeIdx;\n    let hi = lo + branchCount - 1;\n    while(lo <= hi){\n        const mid = lo + hi >>> 1;\n        const midVal = decodeTree[mid];\n        if (midVal < char) {\n            lo = mid + 1;\n        } else if (midVal > char) {\n            hi = mid - 1;\n        } else {\n            return decodeTree[mid + branchCount];\n        }\n    }\n    return -1;\n}\nconst htmlDecoder = getDecoder(_generated_decode_data_html_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\nconst xmlDecoder = getDecoder(_generated_decode_data_xml_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n/**\n * Decodes an HTML string.\n *\n * @param str The string to decode.\n * @param mode The decoding mode.\n * @returns The decoded string.\n */ function decodeHTML(str, mode = DecodingMode.Legacy) {\n    return htmlDecoder(str, mode);\n}\n/**\n * Decodes an HTML string in an attribute.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */ function decodeHTMLAttribute(str) {\n    return htmlDecoder(str, DecodingMode.Attribute);\n}\n/**\n * Decodes an HTML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */ function decodeHTMLStrict(str) {\n    return htmlDecoder(str, DecodingMode.Strict);\n}\n/**\n * Decodes an XML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */ function decodeXML(str) {\n    return xmlDecoder(str, DecodingMode.Strict);\n} //# sourceMappingURL=decode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZW50aXRpZXMvbGliL2VzbS9kZWNvZGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE2RDtBQUNGO0FBQytCO0FBQzFGLHVDQUF1QztBQUNtQjtBQUNjO0FBQ3hFLElBQUlLO0FBQ0gsVUFBVUEsU0FBUztJQUNoQkEsU0FBUyxDQUFDQSxTQUFTLENBQUMsTUFBTSxHQUFHLEdBQUcsR0FBRztJQUNuQ0EsU0FBUyxDQUFDQSxTQUFTLENBQUMsT0FBTyxHQUFHLEdBQUcsR0FBRztJQUNwQ0EsU0FBUyxDQUFDQSxTQUFTLENBQUMsU0FBUyxHQUFHLEdBQUcsR0FBRztJQUN0Q0EsU0FBUyxDQUFDQSxTQUFTLENBQUMsT0FBTyxHQUFHLEdBQUcsR0FBRztJQUNwQ0EsU0FBUyxDQUFDQSxTQUFTLENBQUMsT0FBTyxHQUFHLEdBQUcsR0FBRztJQUNwQ0EsU0FBUyxDQUFDQSxTQUFTLENBQUMsVUFBVSxHQUFHLEdBQUcsR0FBRztJQUN2Q0EsU0FBUyxDQUFDQSxTQUFTLENBQUMsVUFBVSxHQUFHLElBQUksR0FBRztJQUN4Q0EsU0FBUyxDQUFDQSxTQUFTLENBQUMsVUFBVSxHQUFHLElBQUksR0FBRztJQUN4Q0EsU0FBUyxDQUFDQSxTQUFTLENBQUMsVUFBVSxHQUFHLElBQUksR0FBRztJQUN4Q0EsU0FBUyxDQUFDQSxTQUFTLENBQUMsVUFBVSxHQUFHLEdBQUcsR0FBRztJQUN2Q0EsU0FBUyxDQUFDQSxTQUFTLENBQUMsVUFBVSxHQUFHLEdBQUcsR0FBRztJQUN2Q0EsU0FBUyxDQUFDQSxTQUFTLENBQUMsVUFBVSxHQUFHLEdBQUcsR0FBRztBQUMzQyxHQUFHQSxhQUFjQSxDQUFBQSxZQUFZLENBQUM7QUFDOUIsb0ZBQW9GLEdBQ3BGLE1BQU1DLGVBQWU7QUFDZCxJQUFJQyxhQUFhO0FBQ3ZCLFVBQVVBLFlBQVk7SUFDbkJBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGVBQWUsR0FBRyxNQUFNLEdBQUc7SUFDckRBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGdCQUFnQixHQUFHLE1BQU0sR0FBRztJQUN0REEsWUFBWSxDQUFDQSxZQUFZLENBQUMsYUFBYSxHQUFHLElBQUksR0FBRztBQUNyRCxHQUFHQSxnQkFBaUJBLENBQUFBLGVBQWUsQ0FBQztBQUNwQyxTQUFTQyxTQUFTQyxJQUFJO0lBQ2xCLE9BQU9BLFFBQVFKLFVBQVVLLElBQUksSUFBSUQsUUFBUUosVUFBVU0sSUFBSTtBQUMzRDtBQUNBLFNBQVNDLHVCQUF1QkgsSUFBSTtJQUNoQyxPQUFRLFFBQVNKLFVBQVVRLE9BQU8sSUFBSUosUUFBUUosVUFBVVMsT0FBTyxJQUMxREwsUUFBUUosVUFBVVUsT0FBTyxJQUFJTixRQUFRSixVQUFVVyxPQUFPO0FBQy9EO0FBQ0EsU0FBU0Msb0JBQW9CUixJQUFJO0lBQzdCLE9BQVEsUUFBU0osVUFBVVEsT0FBTyxJQUFJSixRQUFRSixVQUFVYSxPQUFPLElBQzFEVCxRQUFRSixVQUFVVSxPQUFPLElBQUlOLFFBQVFKLFVBQVVjLE9BQU8sSUFDdkRYLFNBQVNDO0FBQ2pCO0FBQ0E7Ozs7O0NBS0MsR0FDRCxTQUFTVyw4QkFBOEJYLElBQUk7SUFDdkMsT0FBT0EsU0FBU0osVUFBVWdCLE1BQU0sSUFBSUosb0JBQW9CUjtBQUM1RDtBQUNBLElBQUlhO0FBQ0gsVUFBVUEsa0JBQWtCO0lBQ3pCQSxrQkFBa0IsQ0FBQ0Esa0JBQWtCLENBQUMsY0FBYyxHQUFHLEVBQUUsR0FBRztJQUM1REEsa0JBQWtCLENBQUNBLGtCQUFrQixDQUFDLGVBQWUsR0FBRyxFQUFFLEdBQUc7SUFDN0RBLGtCQUFrQixDQUFDQSxrQkFBa0IsQ0FBQyxpQkFBaUIsR0FBRyxFQUFFLEdBQUc7SUFDL0RBLGtCQUFrQixDQUFDQSxrQkFBa0IsQ0FBQyxhQUFhLEdBQUcsRUFBRSxHQUFHO0lBQzNEQSxrQkFBa0IsQ0FBQ0Esa0JBQWtCLENBQUMsY0FBYyxHQUFHLEVBQUUsR0FBRztBQUNoRSxHQUFHQSxzQkFBdUJBLENBQUFBLHFCQUFxQixDQUFDO0FBQ3pDLElBQUlDLGFBQWE7QUFDdkIsVUFBVUEsWUFBWTtJQUNuQiw0REFBNEQsR0FDNURBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFNBQVMsR0FBRyxFQUFFLEdBQUc7SUFDM0MscURBQXFELEdBQ3JEQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxTQUFTLEdBQUcsRUFBRSxHQUFHO0lBQzNDLGtFQUFrRSxHQUNsRUEsWUFBWSxDQUFDQSxZQUFZLENBQUMsWUFBWSxHQUFHLEVBQUUsR0FBRztBQUNsRCxHQUFHQSxnQkFBaUJBLENBQUFBLGVBQWUsQ0FBQztBQUNwQzs7Q0FFQyxHQUNNLE1BQU1DO0lBQ1RDLFlBQ0Esc0NBQXNDLEdBQ3RDQyxVQUFVLEVBQ1Y7Ozs7Ozs7O0tBUUMsR0FDREMsYUFBYSxFQUNiLDhDQUE4QyxHQUM5Q0MsTUFBTSxDQUFFO1FBQ0osSUFBSSxDQUFDRixVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsYUFBYSxHQUFHQTtRQUNyQixJQUFJLENBQUNDLE1BQU0sR0FBR0E7UUFDZCxzQ0FBc0MsR0FDdEMsSUFBSSxDQUFDQyxLQUFLLEdBQUdQLG1CQUFtQlEsV0FBVztRQUMzQywyREFBMkQsR0FDM0QsSUFBSSxDQUFDQyxRQUFRLEdBQUc7UUFDaEI7Ozs7O1NBS0MsR0FDRCxJQUFJLENBQUNDLE1BQU0sR0FBRztRQUNkLDBDQUEwQyxHQUMxQyxJQUFJLENBQUNDLFNBQVMsR0FBRztRQUNqQiwyREFBMkQsR0FDM0QsSUFBSSxDQUFDQyxNQUFNLEdBQUc7UUFDZCxnREFBZ0QsR0FDaEQsSUFBSSxDQUFDQyxVQUFVLEdBQUdaLGFBQWFhLE1BQU07SUFDekM7SUFDQSw2Q0FBNkMsR0FDN0NDLFlBQVlGLFVBQVUsRUFBRTtRQUNwQixJQUFJLENBQUNBLFVBQVUsR0FBR0E7UUFDbEIsSUFBSSxDQUFDTixLQUFLLEdBQUdQLG1CQUFtQlEsV0FBVztRQUMzQyxJQUFJLENBQUNFLE1BQU0sR0FBRztRQUNkLElBQUksQ0FBQ0MsU0FBUyxHQUFHO1FBQ2pCLElBQUksQ0FBQ0MsTUFBTSxHQUFHO1FBQ2QsSUFBSSxDQUFDSCxRQUFRLEdBQUc7SUFDcEI7SUFDQTs7Ozs7Ozs7OztLQVVDLEdBQ0RPLE1BQU1DLEdBQUcsRUFBRUMsTUFBTSxFQUFFO1FBQ2YsT0FBUSxJQUFJLENBQUNYLEtBQUs7WUFDZCxLQUFLUCxtQkFBbUJRLFdBQVc7Z0JBQUU7b0JBQ2pDLElBQUlTLElBQUlFLFVBQVUsQ0FBQ0QsWUFBWW5DLFVBQVVxQyxHQUFHLEVBQUU7d0JBQzFDLElBQUksQ0FBQ2IsS0FBSyxHQUFHUCxtQkFBbUJxQixZQUFZO3dCQUM1QyxJQUFJLENBQUNaLFFBQVEsSUFBSTt3QkFDakIsT0FBTyxJQUFJLENBQUNhLGlCQUFpQixDQUFDTCxLQUFLQyxTQUFTO29CQUNoRDtvQkFDQSxJQUFJLENBQUNYLEtBQUssR0FBR1AsbUJBQW1CdUIsV0FBVztvQkFDM0MsT0FBTyxJQUFJLENBQUNDLGdCQUFnQixDQUFDUCxLQUFLQztnQkFDdEM7WUFDQSxLQUFLbEIsbUJBQW1CcUIsWUFBWTtnQkFBRTtvQkFDbEMsT0FBTyxJQUFJLENBQUNDLGlCQUFpQixDQUFDTCxLQUFLQztnQkFDdkM7WUFDQSxLQUFLbEIsbUJBQW1CeUIsY0FBYztnQkFBRTtvQkFDcEMsT0FBTyxJQUFJLENBQUNDLG1CQUFtQixDQUFDVCxLQUFLQztnQkFDekM7WUFDQSxLQUFLbEIsbUJBQW1CMkIsVUFBVTtnQkFBRTtvQkFDaEMsT0FBTyxJQUFJLENBQUNDLGVBQWUsQ0FBQ1gsS0FBS0M7Z0JBQ3JDO1lBQ0EsS0FBS2xCLG1CQUFtQnVCLFdBQVc7Z0JBQUU7b0JBQ2pDLE9BQU8sSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBQ1AsS0FBS0M7Z0JBQ3RDO1FBQ0o7SUFDSjtJQUNBOzs7Ozs7OztLQVFDLEdBQ0RJLGtCQUFrQkwsR0FBRyxFQUFFQyxNQUFNLEVBQUU7UUFDM0IsSUFBSUEsVUFBVUQsSUFBSVksTUFBTSxFQUFFO1lBQ3RCLE9BQU8sQ0FBQztRQUNaO1FBQ0EsSUFBSSxDQUFDWixJQUFJRSxVQUFVLENBQUNELFVBQVVsQyxZQUFXLE1BQU9ELFVBQVUrQyxPQUFPLEVBQUU7WUFDL0QsSUFBSSxDQUFDdkIsS0FBSyxHQUFHUCxtQkFBbUIyQixVQUFVO1lBQzFDLElBQUksQ0FBQ2xCLFFBQVEsSUFBSTtZQUNqQixPQUFPLElBQUksQ0FBQ21CLGVBQWUsQ0FBQ1gsS0FBS0MsU0FBUztRQUM5QztRQUNBLElBQUksQ0FBQ1gsS0FBSyxHQUFHUCxtQkFBbUJ5QixjQUFjO1FBQzlDLE9BQU8sSUFBSSxDQUFDQyxtQkFBbUIsQ0FBQ1QsS0FBS0M7SUFDekM7SUFDQWEsbUJBQW1CZCxHQUFHLEVBQUVlLEtBQUssRUFBRUMsR0FBRyxFQUFFQyxJQUFJLEVBQUU7UUFDdEMsSUFBSUYsVUFBVUMsS0FBSztZQUNmLE1BQU1FLGFBQWFGLE1BQU1EO1lBQ3pCLElBQUksQ0FBQ3RCLE1BQU0sR0FDUCxJQUFJLENBQUNBLE1BQU0sR0FBRzBCLEtBQUtDLEdBQUcsQ0FBQ0gsTUFBTUMsY0FDekJHLFNBQVNyQixJQUFJc0IsTUFBTSxDQUFDUCxPQUFPRyxhQUFhRDtZQUNoRCxJQUFJLENBQUN6QixRQUFRLElBQUkwQjtRQUNyQjtJQUNKO0lBQ0E7Ozs7Ozs7O0tBUUMsR0FDRFAsZ0JBQWdCWCxHQUFHLEVBQUVDLE1BQU0sRUFBRTtRQUN6QixNQUFNc0IsV0FBV3RCO1FBQ2pCLE1BQU9BLFNBQVNELElBQUlZLE1BQU0sQ0FBRTtZQUN4QixNQUFNWSxPQUFPeEIsSUFBSUUsVUFBVSxDQUFDRDtZQUM1QixJQUFJaEMsU0FBU3VELFNBQVNuRCx1QkFBdUJtRCxPQUFPO2dCQUNoRHZCLFVBQVU7WUFDZCxPQUNLO2dCQUNELElBQUksQ0FBQ2Esa0JBQWtCLENBQUNkLEtBQUt1QixVQUFVdEIsUUFBUTtnQkFDL0MsT0FBTyxJQUFJLENBQUN3QixpQkFBaUIsQ0FBQ0QsTUFBTTtZQUN4QztRQUNKO1FBQ0EsSUFBSSxDQUFDVixrQkFBa0IsQ0FBQ2QsS0FBS3VCLFVBQVV0QixRQUFRO1FBQy9DLE9BQU8sQ0FBQztJQUNaO0lBQ0E7Ozs7Ozs7O0tBUUMsR0FDRFEsb0JBQW9CVCxHQUFHLEVBQUVDLE1BQU0sRUFBRTtRQUM3QixNQUFNc0IsV0FBV3RCO1FBQ2pCLE1BQU9BLFNBQVNELElBQUlZLE1BQU0sQ0FBRTtZQUN4QixNQUFNWSxPQUFPeEIsSUFBSUUsVUFBVSxDQUFDRDtZQUM1QixJQUFJaEMsU0FBU3VELE9BQU87Z0JBQ2hCdkIsVUFBVTtZQUNkLE9BQ0s7Z0JBQ0QsSUFBSSxDQUFDYSxrQkFBa0IsQ0FBQ2QsS0FBS3VCLFVBQVV0QixRQUFRO2dCQUMvQyxPQUFPLElBQUksQ0FBQ3dCLGlCQUFpQixDQUFDRCxNQUFNO1lBQ3hDO1FBQ0o7UUFDQSxJQUFJLENBQUNWLGtCQUFrQixDQUFDZCxLQUFLdUIsVUFBVXRCLFFBQVE7UUFDL0MsT0FBTyxDQUFDO0lBQ1o7SUFDQTs7Ozs7Ozs7Ozs7O0tBWUMsR0FDRHdCLGtCQUFrQkMsTUFBTSxFQUFFQyxjQUFjLEVBQUU7UUFDdEMsSUFBSUM7UUFDSix5Q0FBeUM7UUFDekMsSUFBSSxJQUFJLENBQUNwQyxRQUFRLElBQUltQyxnQkFBZ0I7WUFDaENDLENBQUFBLEtBQUssSUFBSSxDQUFDdkMsTUFBTSxNQUFNLFFBQVF1QyxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdDLDBDQUEwQyxDQUFDLElBQUksQ0FBQ3JDLFFBQVE7WUFDbkgsT0FBTztRQUNYO1FBQ0Esa0RBQWtEO1FBQ2xELElBQUlrQyxXQUFXNUQsVUFBVWdFLElBQUksRUFBRTtZQUMzQixJQUFJLENBQUN0QyxRQUFRLElBQUk7UUFDckIsT0FDSyxJQUFJLElBQUksQ0FBQ0ksVUFBVSxLQUFLWixhQUFhYSxNQUFNLEVBQUU7WUFDOUMsT0FBTztRQUNYO1FBQ0EsSUFBSSxDQUFDVCxhQUFhLENBQUN4QixzRUFBZ0JBLENBQUMsSUFBSSxDQUFDNkIsTUFBTSxHQUFHLElBQUksQ0FBQ0QsUUFBUTtRQUMvRCxJQUFJLElBQUksQ0FBQ0gsTUFBTSxFQUFFO1lBQ2IsSUFBSXFDLFdBQVc1RCxVQUFVZ0UsSUFBSSxFQUFFO2dCQUMzQixJQUFJLENBQUN6QyxNQUFNLENBQUMwQyx1Q0FBdUM7WUFDdkQ7WUFDQSxJQUFJLENBQUMxQyxNQUFNLENBQUMyQyxpQ0FBaUMsQ0FBQyxJQUFJLENBQUN2QyxNQUFNO1FBQzdEO1FBQ0EsT0FBTyxJQUFJLENBQUNELFFBQVE7SUFDeEI7SUFDQTs7Ozs7Ozs7S0FRQyxHQUNEZSxpQkFBaUJQLEdBQUcsRUFBRUMsTUFBTSxFQUFFO1FBQzFCLE1BQU0sRUFBRWQsVUFBVSxFQUFFLEdBQUcsSUFBSTtRQUMzQixJQUFJOEMsVUFBVTlDLFVBQVUsQ0FBQyxJQUFJLENBQUNPLFNBQVMsQ0FBQztRQUN4Qyw0RUFBNEU7UUFDNUUsSUFBSXdDLGNBQWMsQ0FBQ0QsVUFBVWpFLGFBQWFtRSxZQUFZLEtBQUs7UUFDM0QsTUFBT2xDLFNBQVNELElBQUlZLE1BQU0sRUFBRVgsVUFBVSxJQUFJLENBQUNOLE1BQU0sR0FBSTtZQUNqRCxNQUFNNkIsT0FBT3hCLElBQUlFLFVBQVUsQ0FBQ0Q7WUFDNUIsSUFBSSxDQUFDUCxTQUFTLEdBQUcwQyxnQkFBZ0JqRCxZQUFZOEMsU0FBUyxJQUFJLENBQUN2QyxTQUFTLEdBQUd5QixLQUFLa0IsR0FBRyxDQUFDLEdBQUdILGNBQWNWO1lBQ2pHLElBQUksSUFBSSxDQUFDOUIsU0FBUyxHQUFHLEdBQUc7Z0JBQ3BCLE9BQU8sSUFBSSxDQUFDRCxNQUFNLEtBQUssS0FDbkIsaUNBQWlDO2dCQUNoQyxJQUFJLENBQUNHLFVBQVUsS0FBS1osYUFBYXNELFNBQVMsSUFDdkMsOERBQThEO2dCQUM3REosQ0FBQUEsZ0JBQWdCLEtBQ2IsNkNBQTZDO2dCQUM3Q3JELDhCQUE4QjJDLEtBQUksSUFDeEMsSUFDQSxJQUFJLENBQUNlLDRCQUE0QjtZQUMzQztZQUNBTixVQUFVOUMsVUFBVSxDQUFDLElBQUksQ0FBQ08sU0FBUyxDQUFDO1lBQ3BDd0MsY0FBYyxDQUFDRCxVQUFVakUsYUFBYW1FLFlBQVksS0FBSztZQUN2RCxrREFBa0Q7WUFDbEQsSUFBSUQsZ0JBQWdCLEdBQUc7Z0JBQ25CLDJEQUEyRDtnQkFDM0QsSUFBSVYsU0FBUzFELFVBQVVnRSxJQUFJLEVBQUU7b0JBQ3pCLE9BQU8sSUFBSSxDQUFDVSxtQkFBbUIsQ0FBQyxJQUFJLENBQUM5QyxTQUFTLEVBQUV3QyxhQUFhLElBQUksQ0FBQzFDLFFBQVEsR0FBRyxJQUFJLENBQUNHLE1BQU07Z0JBQzVGO2dCQUNBLDJGQUEyRjtnQkFDM0YsSUFBSSxJQUFJLENBQUNDLFVBQVUsS0FBS1osYUFBYWEsTUFBTSxFQUFFO29CQUN6QyxJQUFJLENBQUNKLE1BQU0sR0FBRyxJQUFJLENBQUNDLFNBQVM7b0JBQzVCLElBQUksQ0FBQ0YsUUFBUSxJQUFJLElBQUksQ0FBQ0csTUFBTTtvQkFDNUIsSUFBSSxDQUFDQSxNQUFNLEdBQUc7Z0JBQ2xCO1lBQ0o7UUFDSjtRQUNBLE9BQU8sQ0FBQztJQUNaO0lBQ0E7Ozs7S0FJQyxHQUNENEMsK0JBQStCO1FBQzNCLElBQUlYO1FBQ0osTUFBTSxFQUFFbkMsTUFBTSxFQUFFTixVQUFVLEVBQUUsR0FBRyxJQUFJO1FBQ25DLE1BQU0rQyxjQUFjLENBQUMvQyxVQUFVLENBQUNNLE9BQU8sR0FBR3pCLGFBQWFtRSxZQUFZLEtBQUs7UUFDeEUsSUFBSSxDQUFDSyxtQkFBbUIsQ0FBQy9DLFFBQVF5QyxhQUFhLElBQUksQ0FBQzFDLFFBQVE7UUFDMURvQyxDQUFBQSxLQUFLLElBQUksQ0FBQ3ZDLE1BQU0sTUFBTSxRQUFRdUMsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHRyx1Q0FBdUM7UUFDbEcsT0FBTyxJQUFJLENBQUN2QyxRQUFRO0lBQ3hCO0lBQ0E7Ozs7Ozs7O0tBUUMsR0FDRGdELG9CQUFvQi9DLE1BQU0sRUFBRXlDLFdBQVcsRUFBRTFDLFFBQVEsRUFBRTtRQUMvQyxNQUFNLEVBQUVMLFVBQVUsRUFBRSxHQUFHLElBQUk7UUFDM0IsSUFBSSxDQUFDQyxhQUFhLENBQUM4QyxnQkFBZ0IsSUFDN0IvQyxVQUFVLENBQUNNLE9BQU8sR0FBRyxDQUFDekIsYUFBYW1FLFlBQVksR0FDL0NoRCxVQUFVLENBQUNNLFNBQVMsRUFBRSxFQUFFRDtRQUM5QixJQUFJMEMsZ0JBQWdCLEdBQUc7WUFDbkIsMERBQTBEO1lBQzFELElBQUksQ0FBQzlDLGFBQWEsQ0FBQ0QsVUFBVSxDQUFDTSxTQUFTLEVBQUUsRUFBRUQ7UUFDL0M7UUFDQSxPQUFPQTtJQUNYO0lBQ0E7Ozs7OztLQU1DLEdBQ0R3QixNQUFNO1FBQ0YsSUFBSVk7UUFDSixPQUFRLElBQUksQ0FBQ3RDLEtBQUs7WUFDZCxLQUFLUCxtQkFBbUJ1QixXQUFXO2dCQUFFO29CQUNqQyxzQ0FBc0M7b0JBQ3RDLE9BQU8sSUFBSSxDQUFDYixNQUFNLEtBQUssS0FDbEIsS0FBSSxDQUFDRyxVQUFVLEtBQUtaLGFBQWFzRCxTQUFTLElBQ3ZDLElBQUksQ0FBQzdDLE1BQU0sS0FBSyxJQUFJLENBQUNDLFNBQVMsSUFDaEMsSUFBSSxDQUFDNkMsNEJBQTRCLEtBQ2pDO2dCQUNWO1lBQ0EsbURBQW1EO1lBQ25ELEtBQUt4RCxtQkFBbUJ5QixjQUFjO2dCQUFFO29CQUNwQyxPQUFPLElBQUksQ0FBQ2lCLGlCQUFpQixDQUFDLEdBQUc7Z0JBQ3JDO1lBQ0EsS0FBSzFDLG1CQUFtQjJCLFVBQVU7Z0JBQUU7b0JBQ2hDLE9BQU8sSUFBSSxDQUFDZSxpQkFBaUIsQ0FBQyxHQUFHO2dCQUNyQztZQUNBLEtBQUsxQyxtQkFBbUJxQixZQUFZO2dCQUFFO29CQUNqQ3dCLENBQUFBLEtBQUssSUFBSSxDQUFDdkMsTUFBTSxNQUFNLFFBQVF1QyxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdDLDBDQUEwQyxDQUFDLElBQUksQ0FBQ3JDLFFBQVE7b0JBQ25ILE9BQU87Z0JBQ1g7WUFDQSxLQUFLVCxtQkFBbUJRLFdBQVc7Z0JBQUU7b0JBQ2pDLGlDQUFpQztvQkFDakMsT0FBTztnQkFDWDtRQUNKO0lBQ0o7QUFDSjtBQUNBOzs7OztDQUtDLEdBQ0QsU0FBU2tELFdBQVd0RCxVQUFVO0lBQzFCLElBQUl1RCxNQUFNO0lBQ1YsTUFBTUMsVUFBVSxJQUFJMUQsY0FBY0UsWUFBWSxDQUFDYSxNQUFTMEMsT0FBTzdFLG1FQUFhQSxDQUFDbUM7SUFDN0UsT0FBTyxTQUFTNEMsZUFBZTVDLEdBQUcsRUFBRUosVUFBVTtRQUMxQyxJQUFJaUQsWUFBWTtRQUNoQixJQUFJNUMsU0FBUztRQUNiLE1BQU8sQ0FBQ0EsU0FBU0QsSUFBSThDLE9BQU8sQ0FBQyxLQUFLN0MsT0FBTSxLQUFNLEVBQUc7WUFDN0N5QyxPQUFPMUMsSUFBSStDLEtBQUssQ0FBQ0YsV0FBVzVDO1lBQzVCMEMsUUFBUTdDLFdBQVcsQ0FBQ0Y7WUFDcEIsTUFBTW9ELE1BQU1MLFFBQVE1QyxLQUFLLENBQUNDLEtBQzFCLGVBQWU7WUFDZkMsU0FBUztZQUNULElBQUkrQyxNQUFNLEdBQUc7Z0JBQ1RILFlBQVk1QyxTQUFTMEMsUUFBUTNCLEdBQUc7Z0JBQ2hDO1lBQ0o7WUFDQTZCLFlBQVk1QyxTQUFTK0M7WUFDckIsb0RBQW9EO1lBQ3BEL0MsU0FBUytDLFFBQVEsSUFBSUgsWUFBWSxJQUFJQTtRQUN6QztRQUNBLE1BQU1wRCxTQUFTaUQsTUFBTTFDLElBQUkrQyxLQUFLLENBQUNGO1FBQy9CLDJEQUEyRDtRQUMzREgsTUFBTTtRQUNOLE9BQU9qRDtJQUNYO0FBQ0o7QUFDQTs7Ozs7Ozs7O0NBU0MsR0FDTSxTQUFTMkMsZ0JBQWdCakQsVUFBVSxFQUFFOEMsT0FBTyxFQUFFZ0IsT0FBTyxFQUFFekIsSUFBSTtJQUM5RCxNQUFNMEIsY0FBYyxDQUFDakIsVUFBVWpFLGFBQWFtRixhQUFhLEtBQUs7SUFDOUQsTUFBTUMsYUFBYW5CLFVBQVVqRSxhQUFhcUYsVUFBVTtJQUNwRCwrQ0FBK0M7SUFDL0MsSUFBSUgsZ0JBQWdCLEdBQUc7UUFDbkIsT0FBT0UsZUFBZSxLQUFLNUIsU0FBUzRCLGFBQWFILFVBQVUsQ0FBQztJQUNoRTtJQUNBLGtEQUFrRDtJQUNsRCxJQUFJRyxZQUFZO1FBQ1osTUFBTUUsUUFBUTlCLE9BQU80QjtRQUNyQixPQUFPRSxRQUFRLEtBQUtBLFNBQVNKLGNBQ3ZCLENBQUMsSUFDRC9ELFVBQVUsQ0FBQzhELFVBQVVLLE1BQU0sR0FBRztJQUN4QztJQUNBLGtEQUFrRDtJQUNsRCxtQ0FBbUM7SUFDbkMsSUFBSUMsS0FBS047SUFDVCxJQUFJTyxLQUFLRCxLQUFLTCxjQUFjO0lBQzVCLE1BQU9LLE1BQU1DLEdBQUk7UUFDYixNQUFNQyxNQUFNLEtBQU1ELE9BQVE7UUFDMUIsTUFBTUUsU0FBU3ZFLFVBQVUsQ0FBQ3NFLElBQUk7UUFDOUIsSUFBSUMsU0FBU2xDLE1BQU07WUFDZitCLEtBQUtFLE1BQU07UUFDZixPQUNLLElBQUlDLFNBQVNsQyxNQUFNO1lBQ3BCZ0MsS0FBS0MsTUFBTTtRQUNmLE9BQ0s7WUFDRCxPQUFPdEUsVUFBVSxDQUFDc0UsTUFBTVAsWUFBWTtRQUN4QztJQUNKO0lBQ0EsT0FBTyxDQUFDO0FBQ1o7QUFDQSxNQUFNUyxjQUFjbEIsV0FBV2hGLHNFQUFjQTtBQUM3QyxNQUFNbUcsYUFBYW5CLFdBQVcvRSxxRUFBYUE7QUFDM0M7Ozs7OztDQU1DLEdBQ00sU0FBU21HLFdBQVc3RCxHQUFHLEVBQUU4RCxPQUFPOUUsYUFBYStFLE1BQU07SUFDdEQsT0FBT0osWUFBWTNELEtBQUs4RDtBQUM1QjtBQUNBOzs7OztDQUtDLEdBQ00sU0FBU0Usb0JBQW9CaEUsR0FBRztJQUNuQyxPQUFPMkQsWUFBWTNELEtBQUtoQixhQUFhc0QsU0FBUztBQUNsRDtBQUNBOzs7OztDQUtDLEdBQ00sU0FBUzJCLGlCQUFpQmpFLEdBQUc7SUFDaEMsT0FBTzJELFlBQVkzRCxLQUFLaEIsYUFBYWEsTUFBTTtBQUMvQztBQUNBOzs7OztDQUtDLEdBQ00sU0FBU3FFLFVBQVVsRSxHQUFHO0lBQ3pCLE9BQU80RCxXQUFXNUQsS0FBS2hCLGFBQWFhLE1BQU07QUFDOUMsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YWhlZ3VydS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2VudGl0aWVzL2xpYi9lc20vZGVjb2RlLmpzP2FhZGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGh0bWxEZWNvZGVUcmVlIGZyb20gXCIuL2dlbmVyYXRlZC9kZWNvZGUtZGF0YS1odG1sLmpzXCI7XG5pbXBvcnQgeG1sRGVjb2RlVHJlZSBmcm9tIFwiLi9nZW5lcmF0ZWQvZGVjb2RlLWRhdGEteG1sLmpzXCI7XG5pbXBvcnQgZGVjb2RlQ29kZVBvaW50LCB7IHJlcGxhY2VDb2RlUG9pbnQsIGZyb21Db2RlUG9pbnQsIH0gZnJvbSBcIi4vZGVjb2RlX2NvZGVwb2ludC5qc1wiO1xuLy8gUmUtZXhwb3J0IGZvciB1c2UgYnkgZWcuIGh0bWxwYXJzZXIyXG5leHBvcnQgeyBodG1sRGVjb2RlVHJlZSwgeG1sRGVjb2RlVHJlZSwgZGVjb2RlQ29kZVBvaW50IH07XG5leHBvcnQgeyByZXBsYWNlQ29kZVBvaW50LCBmcm9tQ29kZVBvaW50IH0gZnJvbSBcIi4vZGVjb2RlX2NvZGVwb2ludC5qc1wiO1xudmFyIENoYXJDb2RlcztcbihmdW5jdGlvbiAoQ2hhckNvZGVzKSB7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIk5VTVwiXSA9IDM1XSA9IFwiTlVNXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIlNFTUlcIl0gPSA1OV0gPSBcIlNFTUlcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiRVFVQUxTXCJdID0gNjFdID0gXCJFUVVBTFNcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiWkVST1wiXSA9IDQ4XSA9IFwiWkVST1wiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJOSU5FXCJdID0gNTddID0gXCJOSU5FXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkxPV0VSX0FcIl0gPSA5N10gPSBcIkxPV0VSX0FcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiTE9XRVJfRlwiXSA9IDEwMl0gPSBcIkxPV0VSX0ZcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiTE9XRVJfWFwiXSA9IDEyMF0gPSBcIkxPV0VSX1hcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiTE9XRVJfWlwiXSA9IDEyMl0gPSBcIkxPV0VSX1pcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiVVBQRVJfQVwiXSA9IDY1XSA9IFwiVVBQRVJfQVwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJVUFBFUl9GXCJdID0gNzBdID0gXCJVUFBFUl9GXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIlVQUEVSX1pcIl0gPSA5MF0gPSBcIlVQUEVSX1pcIjtcbn0pKENoYXJDb2RlcyB8fCAoQ2hhckNvZGVzID0ge30pKTtcbi8qKiBCaXQgdGhhdCBuZWVkcyB0byBiZSBzZXQgdG8gY29udmVydCBhbiB1cHBlciBjYXNlIEFTQ0lJIGNoYXJhY3RlciB0byBsb3dlciBjYXNlICovXG5jb25zdCBUT19MT1dFUl9CSVQgPSAwYjEwMDAwMDtcbmV4cG9ydCB2YXIgQmluVHJpZUZsYWdzO1xuKGZ1bmN0aW9uIChCaW5UcmllRmxhZ3MpIHtcbiAgICBCaW5UcmllRmxhZ3NbQmluVHJpZUZsYWdzW1wiVkFMVUVfTEVOR1RIXCJdID0gNDkxNTJdID0gXCJWQUxVRV9MRU5HVEhcIjtcbiAgICBCaW5UcmllRmxhZ3NbQmluVHJpZUZsYWdzW1wiQlJBTkNIX0xFTkdUSFwiXSA9IDE2MjU2XSA9IFwiQlJBTkNIX0xFTkdUSFwiO1xuICAgIEJpblRyaWVGbGFnc1tCaW5UcmllRmxhZ3NbXCJKVU1QX1RBQkxFXCJdID0gMTI3XSA9IFwiSlVNUF9UQUJMRVwiO1xufSkoQmluVHJpZUZsYWdzIHx8IChCaW5UcmllRmxhZ3MgPSB7fSkpO1xuZnVuY3Rpb24gaXNOdW1iZXIoY29kZSkge1xuICAgIHJldHVybiBjb2RlID49IENoYXJDb2Rlcy5aRVJPICYmIGNvZGUgPD0gQ2hhckNvZGVzLk5JTkU7XG59XG5mdW5jdGlvbiBpc0hleGFkZWNpbWFsQ2hhcmFjdGVyKGNvZGUpIHtcbiAgICByZXR1cm4gKChjb2RlID49IENoYXJDb2Rlcy5VUFBFUl9BICYmIGNvZGUgPD0gQ2hhckNvZGVzLlVQUEVSX0YpIHx8XG4gICAgICAgIChjb2RlID49IENoYXJDb2Rlcy5MT1dFUl9BICYmIGNvZGUgPD0gQ2hhckNvZGVzLkxPV0VSX0YpKTtcbn1cbmZ1bmN0aW9uIGlzQXNjaWlBbHBoYU51bWVyaWMoY29kZSkge1xuICAgIHJldHVybiAoKGNvZGUgPj0gQ2hhckNvZGVzLlVQUEVSX0EgJiYgY29kZSA8PSBDaGFyQ29kZXMuVVBQRVJfWikgfHxcbiAgICAgICAgKGNvZGUgPj0gQ2hhckNvZGVzLkxPV0VSX0EgJiYgY29kZSA8PSBDaGFyQ29kZXMuTE9XRVJfWikgfHxcbiAgICAgICAgaXNOdW1iZXIoY29kZSkpO1xufVxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGNoYXJhY3RlciBpcyBhIHZhbGlkIGVuZCBjaGFyYWN0ZXIgZm9yIGFuIGVudGl0eSBpbiBhbiBhdHRyaWJ1dGUuXG4gKlxuICogQXR0cmlidXRlIHZhbHVlcyB0aGF0IGFyZW4ndCB0ZXJtaW5hdGVkIHByb3Blcmx5IGFyZW4ndCBwYXJzZWQsIGFuZCBzaG91bGRuJ3QgbGVhZCB0byBhIHBhcnNlciBlcnJvci5cbiAqIFNlZSB0aGUgZXhhbXBsZSBpbiBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9wYXJzaW5nLmh0bWwjbmFtZWQtY2hhcmFjdGVyLXJlZmVyZW5jZS1zdGF0ZVxuICovXG5mdW5jdGlvbiBpc0VudGl0eUluQXR0cmlidXRlSW52YWxpZEVuZChjb2RlKSB7XG4gICAgcmV0dXJuIGNvZGUgPT09IENoYXJDb2Rlcy5FUVVBTFMgfHwgaXNBc2NpaUFscGhhTnVtZXJpYyhjb2RlKTtcbn1cbnZhciBFbnRpdHlEZWNvZGVyU3RhdGU7XG4oZnVuY3Rpb24gKEVudGl0eURlY29kZXJTdGF0ZSkge1xuICAgIEVudGl0eURlY29kZXJTdGF0ZVtFbnRpdHlEZWNvZGVyU3RhdGVbXCJFbnRpdHlTdGFydFwiXSA9IDBdID0gXCJFbnRpdHlTdGFydFwiO1xuICAgIEVudGl0eURlY29kZXJTdGF0ZVtFbnRpdHlEZWNvZGVyU3RhdGVbXCJOdW1lcmljU3RhcnRcIl0gPSAxXSA9IFwiTnVtZXJpY1N0YXJ0XCI7XG4gICAgRW50aXR5RGVjb2RlclN0YXRlW0VudGl0eURlY29kZXJTdGF0ZVtcIk51bWVyaWNEZWNpbWFsXCJdID0gMl0gPSBcIk51bWVyaWNEZWNpbWFsXCI7XG4gICAgRW50aXR5RGVjb2RlclN0YXRlW0VudGl0eURlY29kZXJTdGF0ZVtcIk51bWVyaWNIZXhcIl0gPSAzXSA9IFwiTnVtZXJpY0hleFwiO1xuICAgIEVudGl0eURlY29kZXJTdGF0ZVtFbnRpdHlEZWNvZGVyU3RhdGVbXCJOYW1lZEVudGl0eVwiXSA9IDRdID0gXCJOYW1lZEVudGl0eVwiO1xufSkoRW50aXR5RGVjb2RlclN0YXRlIHx8IChFbnRpdHlEZWNvZGVyU3RhdGUgPSB7fSkpO1xuZXhwb3J0IHZhciBEZWNvZGluZ01vZGU7XG4oZnVuY3Rpb24gKERlY29kaW5nTW9kZSkge1xuICAgIC8qKiBFbnRpdGllcyBpbiB0ZXh0IG5vZGVzIHRoYXQgY2FuIGVuZCB3aXRoIGFueSBjaGFyYWN0ZXIuICovXG4gICAgRGVjb2RpbmdNb2RlW0RlY29kaW5nTW9kZVtcIkxlZ2FjeVwiXSA9IDBdID0gXCJMZWdhY3lcIjtcbiAgICAvKiogT25seSBhbGxvdyBlbnRpdGllcyB0ZXJtaW5hdGVkIHdpdGggYSBzZW1pY29sb24uICovXG4gICAgRGVjb2RpbmdNb2RlW0RlY29kaW5nTW9kZVtcIlN0cmljdFwiXSA9IDFdID0gXCJTdHJpY3RcIjtcbiAgICAvKiogRW50aXRpZXMgaW4gYXR0cmlidXRlcyBoYXZlIGxpbWl0YXRpb25zIG9uIGVuZGluZyBjaGFyYWN0ZXJzLiAqL1xuICAgIERlY29kaW5nTW9kZVtEZWNvZGluZ01vZGVbXCJBdHRyaWJ1dGVcIl0gPSAyXSA9IFwiQXR0cmlidXRlXCI7XG59KShEZWNvZGluZ01vZGUgfHwgKERlY29kaW5nTW9kZSA9IHt9KSk7XG4vKipcbiAqIFRva2VuIGRlY29kZXIgd2l0aCBzdXBwb3J0IG9mIHdyaXRpbmcgcGFydGlhbCBlbnRpdGllcy5cbiAqL1xuZXhwb3J0IGNsYXNzIEVudGl0eURlY29kZXIge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKiBUaGUgdHJlZSB1c2VkIHRvIGRlY29kZSBlbnRpdGllcy4gKi9cbiAgICBkZWNvZGVUcmVlLCBcbiAgICAvKipcbiAgICAgKiBUaGUgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiBhIGNvZGVwb2ludCBpcyBkZWNvZGVkLlxuICAgICAqXG4gICAgICogRm9yIG11bHRpLWJ5dGUgbmFtZWQgZW50aXRpZXMsIHRoaXMgd2lsbCBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMsXG4gICAgICogd2l0aCB0aGUgc2Vjb25kIGNvZGVwb2ludCwgYW5kIHRoZSBzYW1lIGBjb25zdW1lZGAgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29kZXBvaW50IFRoZSBkZWNvZGVkIGNvZGVwb2ludC5cbiAgICAgKiBAcGFyYW0gY29uc3VtZWQgVGhlIG51bWJlciBvZiBieXRlcyBjb25zdW1lZCBieSB0aGUgZGVjb2Rlci5cbiAgICAgKi9cbiAgICBlbWl0Q29kZVBvaW50LCBcbiAgICAvKiogQW4gb2JqZWN0IHRoYXQgaXMgdXNlZCB0byBwcm9kdWNlIGVycm9ycy4gKi9cbiAgICBlcnJvcnMpIHtcbiAgICAgICAgdGhpcy5kZWNvZGVUcmVlID0gZGVjb2RlVHJlZTtcbiAgICAgICAgdGhpcy5lbWl0Q29kZVBvaW50ID0gZW1pdENvZGVQb2ludDtcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgICAgIC8qKiBUaGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgZGVjb2Rlci4gKi9cbiAgICAgICAgdGhpcy5zdGF0ZSA9IEVudGl0eURlY29kZXJTdGF0ZS5FbnRpdHlTdGFydDtcbiAgICAgICAgLyoqIENoYXJhY3RlcnMgdGhhdCB3ZXJlIGNvbnN1bWVkIHdoaWxlIHBhcnNpbmcgYW4gZW50aXR5LiAqL1xuICAgICAgICB0aGlzLmNvbnN1bWVkID0gMTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSByZXN1bHQgb2YgdGhlIGVudGl0eS5cbiAgICAgICAgICpcbiAgICAgICAgICogRWl0aGVyIHRoZSByZXN1bHQgaW5kZXggb2YgYSBudW1lcmljIGVudGl0eSwgb3IgdGhlIGNvZGVwb2ludCBvZiBhXG4gICAgICAgICAqIG51bWVyaWMgZW50aXR5LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZXN1bHQgPSAwO1xuICAgICAgICAvKiogVGhlIGN1cnJlbnQgaW5kZXggaW4gdGhlIGRlY29kZSB0cmVlLiAqL1xuICAgICAgICB0aGlzLnRyZWVJbmRleCA9IDA7XG4gICAgICAgIC8qKiBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgdGhhdCB3ZXJlIGNvbnN1bWVkIGluIGV4Y2Vzcy4gKi9cbiAgICAgICAgdGhpcy5leGNlc3MgPSAxO1xuICAgICAgICAvKiogVGhlIG1vZGUgaW4gd2hpY2ggdGhlIGRlY29kZXIgaXMgb3BlcmF0aW5nLiAqL1xuICAgICAgICB0aGlzLmRlY29kZU1vZGUgPSBEZWNvZGluZ01vZGUuU3RyaWN0O1xuICAgIH1cbiAgICAvKiogUmVzZXRzIHRoZSBpbnN0YW5jZSB0byBtYWtlIGl0IHJldXNhYmxlLiAqL1xuICAgIHN0YXJ0RW50aXR5KGRlY29kZU1vZGUpIHtcbiAgICAgICAgdGhpcy5kZWNvZGVNb2RlID0gZGVjb2RlTW9kZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IEVudGl0eURlY29kZXJTdGF0ZS5FbnRpdHlTdGFydDtcbiAgICAgICAgdGhpcy5yZXN1bHQgPSAwO1xuICAgICAgICB0aGlzLnRyZWVJbmRleCA9IDA7XG4gICAgICAgIHRoaXMuZXhjZXNzID0gMTtcbiAgICAgICAgdGhpcy5jb25zdW1lZCA9IDE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlIGFuIGVudGl0eSB0byB0aGUgZGVjb2Rlci4gVGhpcyBjYW4gYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHdpdGggcGFydGlhbCBlbnRpdGllcy5cbiAgICAgKiBJZiB0aGUgZW50aXR5IGlzIGluY29tcGxldGUsIHRoZSBkZWNvZGVyIHdpbGwgcmV0dXJuIC0xLlxuICAgICAqXG4gICAgICogTWlycm9ycyB0aGUgaW1wbGVtZW50YXRpb24gb2YgYGdldERlY29kZXJgLCBidXQgd2l0aCB0aGUgYWJpbGl0eSB0byBzdG9wIGRlY29kaW5nIGlmIHRoZVxuICAgICAqIGVudGl0eSBpcyBpbmNvbXBsZXRlLCBhbmQgcmVzdW1lIHdoZW4gdGhlIG5leHQgc3RyaW5nIGlzIHdyaXR0ZW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RyaW5nIFRoZSBzdHJpbmcgY29udGFpbmluZyB0aGUgZW50aXR5IChvciBhIGNvbnRpbnVhdGlvbiBvZiB0aGUgZW50aXR5KS5cbiAgICAgKiBAcGFyYW0gb2Zmc2V0IFRoZSBvZmZzZXQgYXQgd2hpY2ggdGhlIGVudGl0eSBiZWdpbnMuIFNob3VsZCBiZSAwIGlmIHRoaXMgaXMgbm90IHRoZSBmaXJzdCBjYWxsLlxuICAgICAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyB0aGF0IHdlcmUgY29uc3VtZWQsIG9yIC0xIGlmIHRoZSBlbnRpdHkgaXMgaW5jb21wbGV0ZS5cbiAgICAgKi9cbiAgICB3cml0ZShzdHIsIG9mZnNldCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuc3RhdGUpIHtcbiAgICAgICAgICAgIGNhc2UgRW50aXR5RGVjb2RlclN0YXRlLkVudGl0eVN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgaWYgKHN0ci5jaGFyQ29kZUF0KG9mZnNldCkgPT09IENoYXJDb2Rlcy5OVU0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IEVudGl0eURlY29kZXJTdGF0ZS5OdW1lcmljU3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29uc3VtZWQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVOdW1lcmljU3RhcnQoc3RyLCBvZmZzZXQgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IEVudGl0eURlY29kZXJTdGF0ZS5OYW1lZEVudGl0eTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZU5hbWVkRW50aXR5KHN0ciwgb2Zmc2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgRW50aXR5RGVjb2RlclN0YXRlLk51bWVyaWNTdGFydDoge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlTnVtZXJpY1N0YXJ0KHN0ciwgb2Zmc2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgRW50aXR5RGVjb2RlclN0YXRlLk51bWVyaWNEZWNpbWFsOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVOdW1lcmljRGVjaW1hbChzdHIsIG9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEVudGl0eURlY29kZXJTdGF0ZS5OdW1lcmljSGV4OiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVOdW1lcmljSGV4KHN0ciwgb2Zmc2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgRW50aXR5RGVjb2RlclN0YXRlLk5hbWVkRW50aXR5OiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVOYW1lZEVudGl0eShzdHIsIG9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU3dpdGNoZXMgYmV0d2VlbiB0aGUgbnVtZXJpYyBkZWNpbWFsIGFuZCBoZXhhZGVjaW1hbCBzdGF0ZXMuXG4gICAgICpcbiAgICAgKiBFcXVpdmFsZW50IHRvIHRoZSBgTnVtZXJpYyBjaGFyYWN0ZXIgcmVmZXJlbmNlIHN0YXRlYCBpbiB0aGUgSFRNTCBzcGVjLlxuICAgICAqXG4gICAgICogQHBhcmFtIHN0ciBUaGUgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGVudGl0eSAob3IgYSBjb250aW51YXRpb24gb2YgdGhlIGVudGl0eSkuXG4gICAgICogQHBhcmFtIG9mZnNldCBUaGUgY3VycmVudCBvZmZzZXQuXG4gICAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRoYXQgd2VyZSBjb25zdW1lZCwgb3IgLTEgaWYgdGhlIGVudGl0eSBpcyBpbmNvbXBsZXRlLlxuICAgICAqL1xuICAgIHN0YXRlTnVtZXJpY1N0YXJ0KHN0ciwgb2Zmc2V0KSB7XG4gICAgICAgIGlmIChvZmZzZXQgPj0gc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc3RyLmNoYXJDb2RlQXQob2Zmc2V0KSB8IFRPX0xPV0VSX0JJVCkgPT09IENoYXJDb2Rlcy5MT1dFUl9YKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gRW50aXR5RGVjb2RlclN0YXRlLk51bWVyaWNIZXg7XG4gICAgICAgICAgICB0aGlzLmNvbnN1bWVkICs9IDE7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZU51bWVyaWNIZXgoc3RyLCBvZmZzZXQgKyAxKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXRlID0gRW50aXR5RGVjb2RlclN0YXRlLk51bWVyaWNEZWNpbWFsO1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZU51bWVyaWNEZWNpbWFsKHN0ciwgb2Zmc2V0KTtcbiAgICB9XG4gICAgYWRkVG9OdW1lcmljUmVzdWx0KHN0ciwgc3RhcnQsIGVuZCwgYmFzZSkge1xuICAgICAgICBpZiAoc3RhcnQgIT09IGVuZCkge1xuICAgICAgICAgICAgY29uc3QgZGlnaXRDb3VudCA9IGVuZCAtIHN0YXJ0O1xuICAgICAgICAgICAgdGhpcy5yZXN1bHQgPVxuICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0ICogTWF0aC5wb3coYmFzZSwgZGlnaXRDb3VudCkgK1xuICAgICAgICAgICAgICAgICAgICBwYXJzZUludChzdHIuc3Vic3RyKHN0YXJ0LCBkaWdpdENvdW50KSwgYmFzZSk7XG4gICAgICAgICAgICB0aGlzLmNvbnN1bWVkICs9IGRpZ2l0Q291bnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgaGV4YWRlY2ltYWwgbnVtZXJpYyBlbnRpdHkuXG4gICAgICpcbiAgICAgKiBFcXVpdmFsZW50IHRvIHRoZSBgSGV4YWRlbWljYWwgY2hhcmFjdGVyIHJlZmVyZW5jZSBzdGF0ZWAgaW4gdGhlIEhUTUwgc3BlYy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdHIgVGhlIHN0cmluZyBjb250YWluaW5nIHRoZSBlbnRpdHkgKG9yIGEgY29udGludWF0aW9uIG9mIHRoZSBlbnRpdHkpLlxuICAgICAqIEBwYXJhbSBvZmZzZXQgVGhlIGN1cnJlbnQgb2Zmc2V0LlxuICAgICAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyB0aGF0IHdlcmUgY29uc3VtZWQsIG9yIC0xIGlmIHRoZSBlbnRpdHkgaXMgaW5jb21wbGV0ZS5cbiAgICAgKi9cbiAgICBzdGF0ZU51bWVyaWNIZXgoc3RyLCBvZmZzZXQpIHtcbiAgICAgICAgY29uc3Qgc3RhcnRJZHggPSBvZmZzZXQ7XG4gICAgICAgIHdoaWxlIChvZmZzZXQgPCBzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFyID0gc3RyLmNoYXJDb2RlQXQob2Zmc2V0KTtcbiAgICAgICAgICAgIGlmIChpc051bWJlcihjaGFyKSB8fCBpc0hleGFkZWNpbWFsQ2hhcmFjdGVyKGNoYXIpKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFRvTnVtZXJpY1Jlc3VsdChzdHIsIHN0YXJ0SWR4LCBvZmZzZXQsIDE2KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbWl0TnVtZXJpY0VudGl0eShjaGFyLCAzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkZFRvTnVtZXJpY1Jlc3VsdChzdHIsIHN0YXJ0SWR4LCBvZmZzZXQsIDE2KTtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBkZWNpbWFsIG51bWVyaWMgZW50aXR5LlxuICAgICAqXG4gICAgICogRXF1aXZhbGVudCB0byB0aGUgYERlY2ltYWwgY2hhcmFjdGVyIHJlZmVyZW5jZSBzdGF0ZWAgaW4gdGhlIEhUTUwgc3BlYy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdHIgVGhlIHN0cmluZyBjb250YWluaW5nIHRoZSBlbnRpdHkgKG9yIGEgY29udGludWF0aW9uIG9mIHRoZSBlbnRpdHkpLlxuICAgICAqIEBwYXJhbSBvZmZzZXQgVGhlIGN1cnJlbnQgb2Zmc2V0LlxuICAgICAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyB0aGF0IHdlcmUgY29uc3VtZWQsIG9yIC0xIGlmIHRoZSBlbnRpdHkgaXMgaW5jb21wbGV0ZS5cbiAgICAgKi9cbiAgICBzdGF0ZU51bWVyaWNEZWNpbWFsKHN0ciwgb2Zmc2V0KSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0SWR4ID0gb2Zmc2V0O1xuICAgICAgICB3aGlsZSAob2Zmc2V0IDwgc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgY2hhciA9IHN0ci5jaGFyQ29kZUF0KG9mZnNldCk7XG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIoY2hhcikpIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkVG9OdW1lcmljUmVzdWx0KHN0ciwgc3RhcnRJZHgsIG9mZnNldCwgMTApO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVtaXROdW1lcmljRW50aXR5KGNoYXIsIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRkVG9OdW1lcmljUmVzdWx0KHN0ciwgc3RhcnRJZHgsIG9mZnNldCwgMTApO1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlIGFuZCBlbWl0IGEgbnVtZXJpYyBlbnRpdHkuXG4gICAgICpcbiAgICAgKiBJbXBsZW1lbnRzIHRoZSBsb2dpYyBmcm9tIHRoZSBgSGV4YWRlbWljYWwgY2hhcmFjdGVyIHJlZmVyZW5jZSBzdGFydFxuICAgICAqIHN0YXRlYCBhbmQgYE51bWVyaWMgY2hhcmFjdGVyIHJlZmVyZW5jZSBlbmQgc3RhdGVgIGluIHRoZSBIVE1MIHNwZWMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGFzdENwIFRoZSBsYXN0IGNvZGUgcG9pbnQgb2YgdGhlIGVudGl0eS4gVXNlZCB0byBzZWUgaWYgdGhlXG4gICAgICogICAgICAgICAgICAgICBlbnRpdHkgd2FzIHRlcm1pbmF0ZWQgd2l0aCBhIHNlbWljb2xvbi5cbiAgICAgKiBAcGFyYW0gZXhwZWN0ZWRMZW5ndGggVGhlIG1pbmltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgdGhhdCBzaG91bGQgYmVcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgY29uc3VtZWQuIFVzZWQgdG8gdmFsaWRhdGUgdGhhdCBhdCBsZWFzdCBvbmUgZGlnaXRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgd2FzIGNvbnN1bWVkLlxuICAgICAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyB0aGF0IHdlcmUgY29uc3VtZWQuXG4gICAgICovXG4gICAgZW1pdE51bWVyaWNFbnRpdHkobGFzdENwLCBleHBlY3RlZExlbmd0aCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIC8vIEVuc3VyZSB3ZSBjb25zdW1lZCBhdCBsZWFzdCBvbmUgZGlnaXQuXG4gICAgICAgIGlmICh0aGlzLmNvbnN1bWVkIDw9IGV4cGVjdGVkTGVuZ3RoKSB7XG4gICAgICAgICAgICAoX2EgPSB0aGlzLmVycm9ycykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFic2VuY2VPZkRpZ2l0c0luTnVtZXJpY0NoYXJhY3RlclJlZmVyZW5jZSh0aGlzLmNvbnN1bWVkKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZpZ3VyZSBvdXQgaWYgdGhpcyBpcyBhIGxlZ2l0IGVuZCBvZiB0aGUgZW50aXR5XG4gICAgICAgIGlmIChsYXN0Q3AgPT09IENoYXJDb2Rlcy5TRU1JKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnN1bWVkICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5kZWNvZGVNb2RlID09PSBEZWNvZGluZ01vZGUuU3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVtaXRDb2RlUG9pbnQocmVwbGFjZUNvZGVQb2ludCh0aGlzLnJlc3VsdCksIHRoaXMuY29uc3VtZWQpO1xuICAgICAgICBpZiAodGhpcy5lcnJvcnMpIHtcbiAgICAgICAgICAgIGlmIChsYXN0Q3AgIT09IENoYXJDb2Rlcy5TRU1JKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMubWlzc2luZ1NlbWljb2xvbkFmdGVyQ2hhcmFjdGVyUmVmZXJlbmNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVycm9ycy52YWxpZGF0ZU51bWVyaWNDaGFyYWN0ZXJSZWZlcmVuY2UodGhpcy5yZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN1bWVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBuYW1lZCBlbnRpdHkuXG4gICAgICpcbiAgICAgKiBFcXVpdmFsZW50IHRvIHRoZSBgTmFtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZSBzdGF0ZWAgaW4gdGhlIEhUTUwgc3BlYy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdHIgVGhlIHN0cmluZyBjb250YWluaW5nIHRoZSBlbnRpdHkgKG9yIGEgY29udGludWF0aW9uIG9mIHRoZSBlbnRpdHkpLlxuICAgICAqIEBwYXJhbSBvZmZzZXQgVGhlIGN1cnJlbnQgb2Zmc2V0LlxuICAgICAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyB0aGF0IHdlcmUgY29uc3VtZWQsIG9yIC0xIGlmIHRoZSBlbnRpdHkgaXMgaW5jb21wbGV0ZS5cbiAgICAgKi9cbiAgICBzdGF0ZU5hbWVkRW50aXR5KHN0ciwgb2Zmc2V0KSB7XG4gICAgICAgIGNvbnN0IHsgZGVjb2RlVHJlZSB9ID0gdGhpcztcbiAgICAgICAgbGV0IGN1cnJlbnQgPSBkZWNvZGVUcmVlW3RoaXMudHJlZUluZGV4XTtcbiAgICAgICAgLy8gVGhlIG1hc2sgaXMgdGhlIG51bWJlciBvZiBieXRlcyBvZiB0aGUgdmFsdWUsIGluY2x1ZGluZyB0aGUgY3VycmVudCBieXRlLlxuICAgICAgICBsZXQgdmFsdWVMZW5ndGggPSAoY3VycmVudCAmIEJpblRyaWVGbGFncy5WQUxVRV9MRU5HVEgpID4+IDE0O1xuICAgICAgICBmb3IgKDsgb2Zmc2V0IDwgc3RyLmxlbmd0aDsgb2Zmc2V0KyssIHRoaXMuZXhjZXNzKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYXIgPSBzdHIuY2hhckNvZGVBdChvZmZzZXQpO1xuICAgICAgICAgICAgdGhpcy50cmVlSW5kZXggPSBkZXRlcm1pbmVCcmFuY2goZGVjb2RlVHJlZSwgY3VycmVudCwgdGhpcy50cmVlSW5kZXggKyBNYXRoLm1heCgxLCB2YWx1ZUxlbmd0aCksIGNoYXIpO1xuICAgICAgICAgICAgaWYgKHRoaXMudHJlZUluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc3VsdCA9PT0gMCB8fFxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSBhcmUgcGFyc2luZyBhbiBhdHRyaWJ1dGVcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuZGVjb2RlTW9kZSA9PT0gRGVjb2RpbmdNb2RlLkF0dHJpYnV0ZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2Ugc2hvdWxkbid0IGhhdmUgY29uc3VtZWQgYW55IGNoYXJhY3RlcnMgYWZ0ZXIgdGhlIGVudGl0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgICh2YWx1ZUxlbmd0aCA9PT0gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFuZCB0aGVyZSBzaG91bGQgYmUgbm8gaW52YWxpZCBjaGFyYWN0ZXJzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRW50aXR5SW5BdHRyaWJ1dGVJbnZhbGlkRW5kKGNoYXIpKSlcbiAgICAgICAgICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5lbWl0Tm90VGVybWluYXRlZE5hbWVkRW50aXR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50ID0gZGVjb2RlVHJlZVt0aGlzLnRyZWVJbmRleF07XG4gICAgICAgICAgICB2YWx1ZUxlbmd0aCA9IChjdXJyZW50ICYgQmluVHJpZUZsYWdzLlZBTFVFX0xFTkdUSCkgPj4gMTQ7XG4gICAgICAgICAgICAvLyBJZiB0aGUgYnJhbmNoIGlzIGEgdmFsdWUsIHN0b3JlIGl0IGFuZCBjb250aW51ZVxuICAgICAgICAgICAgaWYgKHZhbHVlTGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGVudGl0eSBpcyB0ZXJtaW5hdGVkIGJ5IGEgc2VtaWNvbG9uLCB3ZSBhcmUgZG9uZS5cbiAgICAgICAgICAgICAgICBpZiAoY2hhciA9PT0gQ2hhckNvZGVzLlNFTUkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdE5hbWVkRW50aXR5RGF0YSh0aGlzLnRyZWVJbmRleCwgdmFsdWVMZW5ndGgsIHRoaXMuY29uc3VtZWQgKyB0aGlzLmV4Y2Vzcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIElmIHdlIGVuY291bnRlciBhIG5vbi10ZXJtaW5hdGVkIChsZWdhY3kpIGVudGl0eSB3aGlsZSBwYXJzaW5nIHN0cmljdGx5LCB0aGVuIGlnbm9yZSBpdC5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kZWNvZGVNb2RlICE9PSBEZWNvZGluZ01vZGUuU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0ID0gdGhpcy50cmVlSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29uc3VtZWQgKz0gdGhpcy5leGNlc3M7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXhjZXNzID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbWl0IGEgbmFtZWQgZW50aXR5IHRoYXQgd2FzIG5vdCB0ZXJtaW5hdGVkIHdpdGggYSBzZW1pY29sb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgY29uc3VtZWQuXG4gICAgICovXG4gICAgZW1pdE5vdFRlcm1pbmF0ZWROYW1lZEVudGl0eSgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCB7IHJlc3VsdCwgZGVjb2RlVHJlZSB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgdmFsdWVMZW5ndGggPSAoZGVjb2RlVHJlZVtyZXN1bHRdICYgQmluVHJpZUZsYWdzLlZBTFVFX0xFTkdUSCkgPj4gMTQ7XG4gICAgICAgIHRoaXMuZW1pdE5hbWVkRW50aXR5RGF0YShyZXN1bHQsIHZhbHVlTGVuZ3RoLCB0aGlzLmNvbnN1bWVkKTtcbiAgICAgICAgKF9hID0gdGhpcy5lcnJvcnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5taXNzaW5nU2VtaWNvbG9uQWZ0ZXJDaGFyYWN0ZXJSZWZlcmVuY2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3VtZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVtaXQgYSBuYW1lZCBlbnRpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVzdWx0IFRoZSBpbmRleCBvZiB0aGUgZW50aXR5IGluIHRoZSBkZWNvZGUgdHJlZS5cbiAgICAgKiBAcGFyYW0gdmFsdWVMZW5ndGggVGhlIG51bWJlciBvZiBieXRlcyBpbiB0aGUgZW50aXR5LlxuICAgICAqIEBwYXJhbSBjb25zdW1lZCBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgY29uc3VtZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgY29uc3VtZWQuXG4gICAgICovXG4gICAgZW1pdE5hbWVkRW50aXR5RGF0YShyZXN1bHQsIHZhbHVlTGVuZ3RoLCBjb25zdW1lZCkge1xuICAgICAgICBjb25zdCB7IGRlY29kZVRyZWUgfSA9IHRoaXM7XG4gICAgICAgIHRoaXMuZW1pdENvZGVQb2ludCh2YWx1ZUxlbmd0aCA9PT0gMVxuICAgICAgICAgICAgPyBkZWNvZGVUcmVlW3Jlc3VsdF0gJiB+QmluVHJpZUZsYWdzLlZBTFVFX0xFTkdUSFxuICAgICAgICAgICAgOiBkZWNvZGVUcmVlW3Jlc3VsdCArIDFdLCBjb25zdW1lZCk7XG4gICAgICAgIGlmICh2YWx1ZUxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgLy8gRm9yIG11bHRpLWJ5dGUgdmFsdWVzLCB3ZSBuZWVkIHRvIGVtaXQgdGhlIHNlY29uZCBieXRlLlxuICAgICAgICAgICAgdGhpcy5lbWl0Q29kZVBvaW50KGRlY29kZVRyZWVbcmVzdWx0ICsgMl0sIGNvbnN1bWVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uc3VtZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNpZ25hbCB0byB0aGUgcGFyc2VyIHRoYXQgdGhlIGVuZCBvZiB0aGUgaW5wdXQgd2FzIHJlYWNoZWQuXG4gICAgICpcbiAgICAgKiBSZW1haW5pbmcgZGF0YSB3aWxsIGJlIGVtaXR0ZWQgYW5kIHJlbGV2YW50IGVycm9ycyB3aWxsIGJlIHByb2R1Y2VkLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGNvbnN1bWVkLlxuICAgICAqL1xuICAgIGVuZCgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBzd2l0Y2ggKHRoaXMuc3RhdGUpIHtcbiAgICAgICAgICAgIGNhc2UgRW50aXR5RGVjb2RlclN0YXRlLk5hbWVkRW50aXR5OiB7XG4gICAgICAgICAgICAgICAgLy8gRW1pdCBhIG5hbWVkIGVudGl0eSBpZiB3ZSBoYXZlIG9uZS5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXN1bHQgIT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuZGVjb2RlTW9kZSAhPT0gRGVjb2RpbmdNb2RlLkF0dHJpYnV0ZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXN1bHQgPT09IHRoaXMudHJlZUluZGV4KVxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuZW1pdE5vdFRlcm1pbmF0ZWROYW1lZEVudGl0eSgpXG4gICAgICAgICAgICAgICAgICAgIDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgZW1pdCBhIG51bWVyaWMgZW50aXR5IGlmIHdlIGhhdmUgb25lLlxuICAgICAgICAgICAgY2FzZSBFbnRpdHlEZWNvZGVyU3RhdGUuTnVtZXJpY0RlY2ltYWw6IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbWl0TnVtZXJpY0VudGl0eSgwLCAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgRW50aXR5RGVjb2RlclN0YXRlLk51bWVyaWNIZXg6IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbWl0TnVtZXJpY0VudGl0eSgwLCAzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgRW50aXR5RGVjb2RlclN0YXRlLk51bWVyaWNTdGFydDoge1xuICAgICAgICAgICAgICAgIChfYSA9IHRoaXMuZXJyb3JzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWJzZW5jZU9mRGlnaXRzSW5OdW1lcmljQ2hhcmFjdGVyUmVmZXJlbmNlKHRoaXMuY29uc3VtZWQpO1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBFbnRpdHlEZWNvZGVyU3RhdGUuRW50aXR5U3RhcnQ6IHtcbiAgICAgICAgICAgICAgICAvLyBSZXR1cm4gMCBpZiB3ZSBoYXZlIG5vIGVudGl0eS5cbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZGVjb2RlcyBlbnRpdGllcyBpbiBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gZGVjb2RlVHJlZSBUaGUgZGVjb2RlIHRyZWUuXG4gKiBAcmV0dXJucyBBIGZ1bmN0aW9uIHRoYXQgZGVjb2RlcyBlbnRpdGllcyBpbiBhIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZ2V0RGVjb2RlcihkZWNvZGVUcmVlKSB7XG4gICAgbGV0IHJldCA9IFwiXCI7XG4gICAgY29uc3QgZGVjb2RlciA9IG5ldyBFbnRpdHlEZWNvZGVyKGRlY29kZVRyZWUsIChzdHIpID0+IChyZXQgKz0gZnJvbUNvZGVQb2ludChzdHIpKSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGRlY29kZVdpdGhUcmllKHN0ciwgZGVjb2RlTW9kZSkge1xuICAgICAgICBsZXQgbGFzdEluZGV4ID0gMDtcbiAgICAgICAgbGV0IG9mZnNldCA9IDA7XG4gICAgICAgIHdoaWxlICgob2Zmc2V0ID0gc3RyLmluZGV4T2YoXCImXCIsIG9mZnNldCkpID49IDApIHtcbiAgICAgICAgICAgIHJldCArPSBzdHIuc2xpY2UobGFzdEluZGV4LCBvZmZzZXQpO1xuICAgICAgICAgICAgZGVjb2Rlci5zdGFydEVudGl0eShkZWNvZGVNb2RlKTtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IGRlY29kZXIud3JpdGUoc3RyLCBcbiAgICAgICAgICAgIC8vIFNraXAgdGhlIFwiJlwiXG4gICAgICAgICAgICBvZmZzZXQgKyAxKTtcbiAgICAgICAgICAgIGlmIChsZW4gPCAwKSB7XG4gICAgICAgICAgICAgICAgbGFzdEluZGV4ID0gb2Zmc2V0ICsgZGVjb2Rlci5lbmQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RJbmRleCA9IG9mZnNldCArIGxlbjtcbiAgICAgICAgICAgIC8vIElmIGBsZW5gIGlzIDAsIHNraXAgdGhlIGN1cnJlbnQgYCZgIGFuZCBjb250aW51ZS5cbiAgICAgICAgICAgIG9mZnNldCA9IGxlbiA9PT0gMCA/IGxhc3RJbmRleCArIDEgOiBsYXN0SW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmV0ICsgc3RyLnNsaWNlKGxhc3RJbmRleCk7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBkb24ndCBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBmaW5hbCBzdHJpbmcuXG4gICAgICAgIHJldCA9IFwiXCI7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyB0aGUgYnJhbmNoIG9mIHRoZSBjdXJyZW50IG5vZGUgdGhhdCBpcyB0YWtlbiBnaXZlbiB0aGUgY3VycmVudFxuICogY2hhcmFjdGVyLiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gdHJhdmVyc2UgdGhlIHRyaWUuXG4gKlxuICogQHBhcmFtIGRlY29kZVRyZWUgVGhlIHRyaWUuXG4gKiBAcGFyYW0gY3VycmVudCBUaGUgY3VycmVudCBub2RlLlxuICogQHBhcmFtIG5vZGVJZHggVGhlIGluZGV4IHJpZ2h0IGFmdGVyIHRoZSBjdXJyZW50IG5vZGUgYW5kIGl0cyB2YWx1ZS5cbiAqIEBwYXJhbSBjaGFyIFRoZSBjdXJyZW50IGNoYXJhY3Rlci5cbiAqIEByZXR1cm5zIFRoZSBpbmRleCBvZiB0aGUgbmV4dCBub2RlLCBvciAtMSBpZiBubyBicmFuY2ggaXMgdGFrZW4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXRlcm1pbmVCcmFuY2goZGVjb2RlVHJlZSwgY3VycmVudCwgbm9kZUlkeCwgY2hhcikge1xuICAgIGNvbnN0IGJyYW5jaENvdW50ID0gKGN1cnJlbnQgJiBCaW5UcmllRmxhZ3MuQlJBTkNIX0xFTkdUSCkgPj4gNztcbiAgICBjb25zdCBqdW1wT2Zmc2V0ID0gY3VycmVudCAmIEJpblRyaWVGbGFncy5KVU1QX1RBQkxFO1xuICAgIC8vIENhc2UgMTogU2luZ2xlIGJyYW5jaCBlbmNvZGVkIGluIGp1bXAgb2Zmc2V0XG4gICAgaWYgKGJyYW5jaENvdW50ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBqdW1wT2Zmc2V0ICE9PSAwICYmIGNoYXIgPT09IGp1bXBPZmZzZXQgPyBub2RlSWR4IDogLTE7XG4gICAgfVxuICAgIC8vIENhc2UgMjogTXVsdGlwbGUgYnJhbmNoZXMgZW5jb2RlZCBpbiBqdW1wIHRhYmxlXG4gICAgaWYgKGp1bXBPZmZzZXQpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBjaGFyIC0ganVtcE9mZnNldDtcbiAgICAgICAgcmV0dXJuIHZhbHVlIDwgMCB8fCB2YWx1ZSA+PSBicmFuY2hDb3VudFxuICAgICAgICAgICAgPyAtMVxuICAgICAgICAgICAgOiBkZWNvZGVUcmVlW25vZGVJZHggKyB2YWx1ZV0gLSAxO1xuICAgIH1cbiAgICAvLyBDYXNlIDM6IE11bHRpcGxlIGJyYW5jaGVzIGVuY29kZWQgaW4gZGljdGlvbmFyeVxuICAgIC8vIEJpbmFyeSBzZWFyY2ggZm9yIHRoZSBjaGFyYWN0ZXIuXG4gICAgbGV0IGxvID0gbm9kZUlkeDtcbiAgICBsZXQgaGkgPSBsbyArIGJyYW5jaENvdW50IC0gMTtcbiAgICB3aGlsZSAobG8gPD0gaGkpIHtcbiAgICAgICAgY29uc3QgbWlkID0gKGxvICsgaGkpID4+PiAxO1xuICAgICAgICBjb25zdCBtaWRWYWwgPSBkZWNvZGVUcmVlW21pZF07XG4gICAgICAgIGlmIChtaWRWYWwgPCBjaGFyKSB7XG4gICAgICAgICAgICBsbyA9IG1pZCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWlkVmFsID4gY2hhcikge1xuICAgICAgICAgICAgaGkgPSBtaWQgLSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGRlY29kZVRyZWVbbWlkICsgYnJhbmNoQ291bnRdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbmNvbnN0IGh0bWxEZWNvZGVyID0gZ2V0RGVjb2RlcihodG1sRGVjb2RlVHJlZSk7XG5jb25zdCB4bWxEZWNvZGVyID0gZ2V0RGVjb2Rlcih4bWxEZWNvZGVUcmVlKTtcbi8qKlxuICogRGVjb2RlcyBhbiBIVE1MIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gc3RyIFRoZSBzdHJpbmcgdG8gZGVjb2RlLlxuICogQHBhcmFtIG1vZGUgVGhlIGRlY29kaW5nIG1vZGUuXG4gKiBAcmV0dXJucyBUaGUgZGVjb2RlZCBzdHJpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVIVE1MKHN0ciwgbW9kZSA9IERlY29kaW5nTW9kZS5MZWdhY3kpIHtcbiAgICByZXR1cm4gaHRtbERlY29kZXIoc3RyLCBtb2RlKTtcbn1cbi8qKlxuICogRGVjb2RlcyBhbiBIVE1MIHN0cmluZyBpbiBhbiBhdHRyaWJ1dGUuXG4gKlxuICogQHBhcmFtIHN0ciBUaGUgc3RyaW5nIHRvIGRlY29kZS5cbiAqIEByZXR1cm5zIFRoZSBkZWNvZGVkIHN0cmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUhUTUxBdHRyaWJ1dGUoc3RyKSB7XG4gICAgcmV0dXJuIGh0bWxEZWNvZGVyKHN0ciwgRGVjb2RpbmdNb2RlLkF0dHJpYnV0ZSk7XG59XG4vKipcbiAqIERlY29kZXMgYW4gSFRNTCBzdHJpbmcsIHJlcXVpcmluZyBhbGwgZW50aXRpZXMgdG8gYmUgdGVybWluYXRlZCBieSBhIHNlbWljb2xvbi5cbiAqXG4gKiBAcGFyYW0gc3RyIFRoZSBzdHJpbmcgdG8gZGVjb2RlLlxuICogQHJldHVybnMgVGhlIGRlY29kZWQgc3RyaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlSFRNTFN0cmljdChzdHIpIHtcbiAgICByZXR1cm4gaHRtbERlY29kZXIoc3RyLCBEZWNvZGluZ01vZGUuU3RyaWN0KTtcbn1cbi8qKlxuICogRGVjb2RlcyBhbiBYTUwgc3RyaW5nLCByZXF1aXJpbmcgYWxsIGVudGl0aWVzIHRvIGJlIHRlcm1pbmF0ZWQgYnkgYSBzZW1pY29sb24uXG4gKlxuICogQHBhcmFtIHN0ciBUaGUgc3RyaW5nIHRvIGRlY29kZS5cbiAqIEByZXR1cm5zIFRoZSBkZWNvZGVkIHN0cmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVhNTChzdHIpIHtcbiAgICByZXR1cm4geG1sRGVjb2RlcihzdHIsIERlY29kaW5nTW9kZS5TdHJpY3QpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVjb2RlLmpzLm1hcCJdLCJuYW1lcyI6WyJodG1sRGVjb2RlVHJlZSIsInhtbERlY29kZVRyZWUiLCJkZWNvZGVDb2RlUG9pbnQiLCJyZXBsYWNlQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsIkNoYXJDb2RlcyIsIlRPX0xPV0VSX0JJVCIsIkJpblRyaWVGbGFncyIsImlzTnVtYmVyIiwiY29kZSIsIlpFUk8iLCJOSU5FIiwiaXNIZXhhZGVjaW1hbENoYXJhY3RlciIsIlVQUEVSX0EiLCJVUFBFUl9GIiwiTE9XRVJfQSIsIkxPV0VSX0YiLCJpc0FzY2lpQWxwaGFOdW1lcmljIiwiVVBQRVJfWiIsIkxPV0VSX1oiLCJpc0VudGl0eUluQXR0cmlidXRlSW52YWxpZEVuZCIsIkVRVUFMUyIsIkVudGl0eURlY29kZXJTdGF0ZSIsIkRlY29kaW5nTW9kZSIsIkVudGl0eURlY29kZXIiLCJjb25zdHJ1Y3RvciIsImRlY29kZVRyZWUiLCJlbWl0Q29kZVBvaW50IiwiZXJyb3JzIiwic3RhdGUiLCJFbnRpdHlTdGFydCIsImNvbnN1bWVkIiwicmVzdWx0IiwidHJlZUluZGV4IiwiZXhjZXNzIiwiZGVjb2RlTW9kZSIsIlN0cmljdCIsInN0YXJ0RW50aXR5Iiwid3JpdGUiLCJzdHIiLCJvZmZzZXQiLCJjaGFyQ29kZUF0IiwiTlVNIiwiTnVtZXJpY1N0YXJ0Iiwic3RhdGVOdW1lcmljU3RhcnQiLCJOYW1lZEVudGl0eSIsInN0YXRlTmFtZWRFbnRpdHkiLCJOdW1lcmljRGVjaW1hbCIsInN0YXRlTnVtZXJpY0RlY2ltYWwiLCJOdW1lcmljSGV4Iiwic3RhdGVOdW1lcmljSGV4IiwibGVuZ3RoIiwiTE9XRVJfWCIsImFkZFRvTnVtZXJpY1Jlc3VsdCIsInN0YXJ0IiwiZW5kIiwiYmFzZSIsImRpZ2l0Q291bnQiLCJNYXRoIiwicG93IiwicGFyc2VJbnQiLCJzdWJzdHIiLCJzdGFydElkeCIsImNoYXIiLCJlbWl0TnVtZXJpY0VudGl0eSIsImxhc3RDcCIsImV4cGVjdGVkTGVuZ3RoIiwiX2EiLCJhYnNlbmNlT2ZEaWdpdHNJbk51bWVyaWNDaGFyYWN0ZXJSZWZlcmVuY2UiLCJTRU1JIiwibWlzc2luZ1NlbWljb2xvbkFmdGVyQ2hhcmFjdGVyUmVmZXJlbmNlIiwidmFsaWRhdGVOdW1lcmljQ2hhcmFjdGVyUmVmZXJlbmNlIiwiY3VycmVudCIsInZhbHVlTGVuZ3RoIiwiVkFMVUVfTEVOR1RIIiwiZGV0ZXJtaW5lQnJhbmNoIiwibWF4IiwiQXR0cmlidXRlIiwiZW1pdE5vdFRlcm1pbmF0ZWROYW1lZEVudGl0eSIsImVtaXROYW1lZEVudGl0eURhdGEiLCJnZXREZWNvZGVyIiwicmV0IiwiZGVjb2RlciIsImRlY29kZVdpdGhUcmllIiwibGFzdEluZGV4IiwiaW5kZXhPZiIsInNsaWNlIiwibGVuIiwibm9kZUlkeCIsImJyYW5jaENvdW50IiwiQlJBTkNIX0xFTkdUSCIsImp1bXBPZmZzZXQiLCJKVU1QX1RBQkxFIiwidmFsdWUiLCJsbyIsImhpIiwibWlkIiwibWlkVmFsIiwiaHRtbERlY29kZXIiLCJ4bWxEZWNvZGVyIiwiZGVjb2RlSFRNTCIsIm1vZGUiLCJMZWdhY3kiLCJkZWNvZGVIVE1MQXR0cmlidXRlIiwiZGVjb2RlSFRNTFN0cmljdCIsImRlY29kZVhNTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/entities/lib/esm/decode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/entities/lib/esm/decode_codepoint.js":
/*!***********************************************************!*\
  !*** ./node_modules/entities/lib/esm/decode_codepoint.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ decodeCodePoint),\n/* harmony export */   fromCodePoint: () => (/* binding */ fromCodePoint),\n/* harmony export */   replaceCodePoint: () => (/* binding */ replaceCodePoint)\n/* harmony export */ });\n// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134\nvar _a;\nconst decodeMap = new Map([\n    [\n        0,\n        65533\n    ],\n    // C1 Unicode control character reference replacements\n    [\n        128,\n        8364\n    ],\n    [\n        130,\n        8218\n    ],\n    [\n        131,\n        402\n    ],\n    [\n        132,\n        8222\n    ],\n    [\n        133,\n        8230\n    ],\n    [\n        134,\n        8224\n    ],\n    [\n        135,\n        8225\n    ],\n    [\n        136,\n        710\n    ],\n    [\n        137,\n        8240\n    ],\n    [\n        138,\n        352\n    ],\n    [\n        139,\n        8249\n    ],\n    [\n        140,\n        338\n    ],\n    [\n        142,\n        381\n    ],\n    [\n        145,\n        8216\n    ],\n    [\n        146,\n        8217\n    ],\n    [\n        147,\n        8220\n    ],\n    [\n        148,\n        8221\n    ],\n    [\n        149,\n        8226\n    ],\n    [\n        150,\n        8211\n    ],\n    [\n        151,\n        8212\n    ],\n    [\n        152,\n        732\n    ],\n    [\n        153,\n        8482\n    ],\n    [\n        154,\n        353\n    ],\n    [\n        155,\n        8250\n    ],\n    [\n        156,\n        339\n    ],\n    [\n        158,\n        382\n    ],\n    [\n        159,\n        376\n    ]\n]);\n/**\n * Polyfill for `String.fromCodePoint`. It is used to create a string from a Unicode code point.\n */ const fromCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins\n(_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function(codePoint) {\n    let output = \"\";\n    if (codePoint > 0xffff) {\n        codePoint -= 0x10000;\n        output += String.fromCharCode(codePoint >>> 10 & 0x3ff | 0xd800);\n        codePoint = 0xdc00 | codePoint & 0x3ff;\n    }\n    output += String.fromCharCode(codePoint);\n    return output;\n};\n/**\n * Replace the given code point with a replacement character if it is a\n * surrogate or is outside the valid range. Otherwise return the code\n * point unchanged.\n */ function replaceCodePoint(codePoint) {\n    var _a;\n    if (codePoint >= 0xd800 && codePoint <= 0xdfff || codePoint > 0x10ffff) {\n        return 0xfffd;\n    }\n    return (_a = decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;\n}\n/**\n * Replace the code point if relevant, then convert it to a string.\n *\n * @deprecated Use `fromCodePoint(replaceCodePoint(codePoint))` instead.\n * @param codePoint The code point to decode.\n * @returns The decoded code point.\n */ function decodeCodePoint(codePoint) {\n    return fromCodePoint(replaceCodePoint(codePoint));\n} //# sourceMappingURL=decode_codepoint.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZW50aXRpZXMvbGliL2VzbS9kZWNvZGVfY29kZXBvaW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHFIQUFxSDtBQUNySCxJQUFJQTtBQUNKLE1BQU1DLFlBQVksSUFBSUMsSUFBSTtJQUN0QjtRQUFDO1FBQUc7S0FBTTtJQUNWLHNEQUFzRDtJQUN0RDtRQUFDO1FBQUs7S0FBSztJQUNYO1FBQUM7UUFBSztLQUFLO0lBQ1g7UUFBQztRQUFLO0tBQUk7SUFDVjtRQUFDO1FBQUs7S0FBSztJQUNYO1FBQUM7UUFBSztLQUFLO0lBQ1g7UUFBQztRQUFLO0tBQUs7SUFDWDtRQUFDO1FBQUs7S0FBSztJQUNYO1FBQUM7UUFBSztLQUFJO0lBQ1Y7UUFBQztRQUFLO0tBQUs7SUFDWDtRQUFDO1FBQUs7S0FBSTtJQUNWO1FBQUM7UUFBSztLQUFLO0lBQ1g7UUFBQztRQUFLO0tBQUk7SUFDVjtRQUFDO1FBQUs7S0FBSTtJQUNWO1FBQUM7UUFBSztLQUFLO0lBQ1g7UUFBQztRQUFLO0tBQUs7SUFDWDtRQUFDO1FBQUs7S0FBSztJQUNYO1FBQUM7UUFBSztLQUFLO0lBQ1g7UUFBQztRQUFLO0tBQUs7SUFDWDtRQUFDO1FBQUs7S0FBSztJQUNYO1FBQUM7UUFBSztLQUFLO0lBQ1g7UUFBQztRQUFLO0tBQUk7SUFDVjtRQUFDO1FBQUs7S0FBSztJQUNYO1FBQUM7UUFBSztLQUFJO0lBQ1Y7UUFBQztRQUFLO0tBQUs7SUFDWDtRQUFDO1FBQUs7S0FBSTtJQUNWO1FBQUM7UUFBSztLQUFJO0lBQ1Y7UUFBQztRQUFLO0tBQUk7Q0FDYjtBQUNEOztDQUVDLEdBQ00sTUFBTUMsZ0JBRWIsaUhBRGlIO0FBQ2hISCxDQUFBQSxLQUFLSSxPQUFPRCxhQUFhLE1BQU0sUUFBUUgsT0FBTyxLQUFLLElBQUlBLEtBQUssU0FBVUssU0FBUztJQUM1RSxJQUFJQyxTQUFTO0lBQ2IsSUFBSUQsWUFBWSxRQUFRO1FBQ3BCQSxhQUFhO1FBQ2JDLFVBQVVGLE9BQU9HLFlBQVksQ0FBQyxjQUFnQixLQUFNLFFBQVM7UUFDN0RGLFlBQVksU0FBVUEsWUFBWTtJQUN0QztJQUNBQyxVQUFVRixPQUFPRyxZQUFZLENBQUNGO0lBQzlCLE9BQU9DO0FBQ1gsRUFBRTtBQUNGOzs7O0NBSUMsR0FDTSxTQUFTRSxpQkFBaUJILFNBQVM7SUFDdEMsSUFBSUw7SUFDSixJQUFJLGFBQWMsVUFBVUssYUFBYSxVQUFXQSxZQUFZLFVBQVU7UUFDdEUsT0FBTztJQUNYO0lBQ0EsT0FBTyxDQUFDTCxLQUFLQyxVQUFVUSxHQUFHLENBQUNKLFVBQVMsTUFBTyxRQUFRTCxPQUFPLEtBQUssSUFBSUEsS0FBS0s7QUFDNUU7QUFDQTs7Ozs7O0NBTUMsR0FDYyxTQUFTSyxnQkFBZ0JMLFNBQVM7SUFDN0MsT0FBT0YsY0FBY0ssaUJBQWlCSDtBQUMxQyxFQUNBLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL3dhaGVndXJ1LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvZW50aXRpZXMvbGliL2VzbS9kZWNvZGVfY29kZXBvaW50LmpzP2E4OWUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL2hlL2Jsb2IvMzZhZmUxNzkzOTIyMjZjZjFiNmNjZGIxNmViYmI3YTVhODQ0ZDkzYS9zcmMvaGUuanMjTDEwNi1MMTM0XG52YXIgX2E7XG5jb25zdCBkZWNvZGVNYXAgPSBuZXcgTWFwKFtcbiAgICBbMCwgNjU1MzNdLFxuICAgIC8vIEMxIFVuaWNvZGUgY29udHJvbCBjaGFyYWN0ZXIgcmVmZXJlbmNlIHJlcGxhY2VtZW50c1xuICAgIFsxMjgsIDgzNjRdLFxuICAgIFsxMzAsIDgyMThdLFxuICAgIFsxMzEsIDQwMl0sXG4gICAgWzEzMiwgODIyMl0sXG4gICAgWzEzMywgODIzMF0sXG4gICAgWzEzNCwgODIyNF0sXG4gICAgWzEzNSwgODIyNV0sXG4gICAgWzEzNiwgNzEwXSxcbiAgICBbMTM3LCA4MjQwXSxcbiAgICBbMTM4LCAzNTJdLFxuICAgIFsxMzksIDgyNDldLFxuICAgIFsxNDAsIDMzOF0sXG4gICAgWzE0MiwgMzgxXSxcbiAgICBbMTQ1LCA4MjE2XSxcbiAgICBbMTQ2LCA4MjE3XSxcbiAgICBbMTQ3LCA4MjIwXSxcbiAgICBbMTQ4LCA4MjIxXSxcbiAgICBbMTQ5LCA4MjI2XSxcbiAgICBbMTUwLCA4MjExXSxcbiAgICBbMTUxLCA4MjEyXSxcbiAgICBbMTUyLCA3MzJdLFxuICAgIFsxNTMsIDg0ODJdLFxuICAgIFsxNTQsIDM1M10sXG4gICAgWzE1NSwgODI1MF0sXG4gICAgWzE1NiwgMzM5XSxcbiAgICBbMTU4LCAzODJdLFxuICAgIFsxNTksIDM3Nl0sXG5dKTtcbi8qKlxuICogUG9seWZpbGwgZm9yIGBTdHJpbmcuZnJvbUNvZGVQb2ludGAuIEl0IGlzIHVzZWQgdG8gY3JlYXRlIGEgc3RyaW5nIGZyb20gYSBVbmljb2RlIGNvZGUgcG9pbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBmcm9tQ29kZVBvaW50ID0gXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVubmVjZXNzYXJ5LWNvbmRpdGlvbiwgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9lcy1idWlsdGluc1xuKF9hID0gU3RyaW5nLmZyb21Db2RlUG9pbnQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGZ1bmN0aW9uIChjb2RlUG9pbnQpIHtcbiAgICBsZXQgb3V0cHV0ID0gXCJcIjtcbiAgICBpZiAoY29kZVBvaW50ID4gMHhmZmZmKSB7XG4gICAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwO1xuICAgICAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+Pj4gMTApICYgMHgzZmYpIHwgMHhkODAwKTtcbiAgICAgICAgY29kZVBvaW50ID0gMHhkYzAwIHwgKGNvZGVQb2ludCAmIDB4M2ZmKTtcbiAgICB9XG4gICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcbiAgICByZXR1cm4gb3V0cHV0O1xufTtcbi8qKlxuICogUmVwbGFjZSB0aGUgZ2l2ZW4gY29kZSBwb2ludCB3aXRoIGEgcmVwbGFjZW1lbnQgY2hhcmFjdGVyIGlmIGl0IGlzIGFcbiAqIHN1cnJvZ2F0ZSBvciBpcyBvdXRzaWRlIHRoZSB2YWxpZCByYW5nZS4gT3RoZXJ3aXNlIHJldHVybiB0aGUgY29kZVxuICogcG9pbnQgdW5jaGFuZ2VkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZUNvZGVQb2ludChjb2RlUG9pbnQpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKChjb2RlUG9pbnQgPj0gMHhkODAwICYmIGNvZGVQb2ludCA8PSAweGRmZmYpIHx8IGNvZGVQb2ludCA+IDB4MTBmZmZmKSB7XG4gICAgICAgIHJldHVybiAweGZmZmQ7XG4gICAgfVxuICAgIHJldHVybiAoX2EgPSBkZWNvZGVNYXAuZ2V0KGNvZGVQb2ludCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGNvZGVQb2ludDtcbn1cbi8qKlxuICogUmVwbGFjZSB0aGUgY29kZSBwb2ludCBpZiByZWxldmFudCwgdGhlbiBjb252ZXJ0IGl0IHRvIGEgc3RyaW5nLlxuICpcbiAqIEBkZXByZWNhdGVkIFVzZSBgZnJvbUNvZGVQb2ludChyZXBsYWNlQ29kZVBvaW50KGNvZGVQb2ludCkpYCBpbnN0ZWFkLlxuICogQHBhcmFtIGNvZGVQb2ludCBUaGUgY29kZSBwb2ludCB0byBkZWNvZGUuXG4gKiBAcmV0dXJucyBUaGUgZGVjb2RlZCBjb2RlIHBvaW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnQoY29kZVBvaW50KSB7XG4gICAgcmV0dXJuIGZyb21Db2RlUG9pbnQocmVwbGFjZUNvZGVQb2ludChjb2RlUG9pbnQpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlY29kZV9jb2RlcG9pbnQuanMubWFwIl0sIm5hbWVzIjpbIl9hIiwiZGVjb2RlTWFwIiwiTWFwIiwiZnJvbUNvZGVQb2ludCIsIlN0cmluZyIsImNvZGVQb2ludCIsIm91dHB1dCIsImZyb21DaGFyQ29kZSIsInJlcGxhY2VDb2RlUG9pbnQiLCJnZXQiLCJkZWNvZGVDb2RlUG9pbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/entities/lib/esm/decode_codepoint.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/entities/lib/esm/encode.js":
/*!*************************************************!*\
  !*** ./node_modules/entities/lib/esm/encode.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeHTML: () => (/* binding */ encodeHTML),\n/* harmony export */   encodeNonAsciiHTML: () => (/* binding */ encodeNonAsciiHTML)\n/* harmony export */ });\n/* harmony import */ var _generated_encode_html_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generated/encode-html.js */ \"(rsc)/./node_modules/entities/lib/esm/generated/encode-html.js\");\n/* harmony import */ var _escape_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./escape.js */ \"(rsc)/./node_modules/entities/lib/esm/escape.js\");\n\n\nconst htmlReplacer = /[\\t\\n!-,./:-@[-`\\f{-}$\\x80-\\uFFFF]/g;\n/**\n * Encodes all characters in the input using HTML entities. This includes\n * characters that are valid ASCII characters in HTML documents, such as `#`.\n *\n * To get a more compact output, consider using the `encodeNonAsciiHTML`\n * function, which will only encode characters that are not valid in HTML\n * documents, as well as non-ASCII characters.\n *\n * If a character has no equivalent entity, a numeric hexadecimal reference\n * (eg. `&#xfc;`) will be used.\n */ function encodeHTML(data) {\n    return encodeHTMLTrieRe(htmlReplacer, data);\n}\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in HTML\n * documents using HTML entities. This function will not encode characters that\n * are valid in HTML documents, such as `#`.\n *\n * If a character has no equivalent entity, a numeric hexadecimal reference\n * (eg. `&#xfc;`) will be used.\n */ function encodeNonAsciiHTML(data) {\n    return encodeHTMLTrieRe(_escape_js__WEBPACK_IMPORTED_MODULE_1__.xmlReplacer, data);\n}\nfunction encodeHTMLTrieRe(regExp, str) {\n    let ret = \"\";\n    let lastIdx = 0;\n    let match;\n    while((match = regExp.exec(str)) !== null){\n        const i = match.index;\n        ret += str.substring(lastIdx, i);\n        const char = str.charCodeAt(i);\n        let next = _generated_encode_html_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(char);\n        if (typeof next === \"object\") {\n            // We are in a branch. Try to match the next char.\n            if (i + 1 < str.length) {\n                const nextChar = str.charCodeAt(i + 1);\n                const value = typeof next.n === \"number\" ? next.n === nextChar ? next.o : undefined : next.n.get(nextChar);\n                if (value !== undefined) {\n                    ret += value;\n                    lastIdx = regExp.lastIndex += 1;\n                    continue;\n                }\n            }\n            next = next.v;\n        }\n        // We might have a tree node without a value; skip and use a numeric entity.\n        if (next !== undefined) {\n            ret += next;\n            lastIdx = i + 1;\n        } else {\n            const cp = (0,_escape_js__WEBPACK_IMPORTED_MODULE_1__.getCodePoint)(str, i);\n            ret += `&#x${cp.toString(16)};`;\n            // Increase by 1 if we have a surrogate pair\n            lastIdx = regExp.lastIndex += Number(cp !== char);\n        }\n    }\n    return ret + str.substr(lastIdx);\n} //# sourceMappingURL=encode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZW50aXRpZXMvbGliL2VzbS9lbmNvZGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFrRDtBQUNNO0FBQ3hELE1BQU1HLGVBQWU7QUFDckI7Ozs7Ozs7Ozs7Q0FVQyxHQUNNLFNBQVNDLFdBQVdDLElBQUk7SUFDM0IsT0FBT0MsaUJBQWlCSCxjQUFjRTtBQUMxQztBQUNBOzs7Ozs7O0NBT0MsR0FDTSxTQUFTRSxtQkFBbUJGLElBQUk7SUFDbkMsT0FBT0MsaUJBQWlCTCxtREFBV0EsRUFBRUk7QUFDekM7QUFDQSxTQUFTQyxpQkFBaUJFLE1BQU0sRUFBRUMsR0FBRztJQUNqQyxJQUFJQyxNQUFNO0lBQ1YsSUFBSUMsVUFBVTtJQUNkLElBQUlDO0lBQ0osTUFBTyxDQUFDQSxRQUFRSixPQUFPSyxJQUFJLENBQUNKLElBQUcsTUFBTyxLQUFNO1FBQ3hDLE1BQU1LLElBQUlGLE1BQU1HLEtBQUs7UUFDckJMLE9BQU9ELElBQUlPLFNBQVMsQ0FBQ0wsU0FBU0c7UUFDOUIsTUFBTUcsT0FBT1IsSUFBSVMsVUFBVSxDQUFDSjtRQUM1QixJQUFJSyxPQUFPbkIsaUVBQVFBLENBQUNvQixHQUFHLENBQUNIO1FBQ3hCLElBQUksT0FBT0UsU0FBUyxVQUFVO1lBQzFCLGtEQUFrRDtZQUNsRCxJQUFJTCxJQUFJLElBQUlMLElBQUlZLE1BQU0sRUFBRTtnQkFDcEIsTUFBTUMsV0FBV2IsSUFBSVMsVUFBVSxDQUFDSixJQUFJO2dCQUNwQyxNQUFNUyxRQUFRLE9BQU9KLEtBQUtLLENBQUMsS0FBSyxXQUMxQkwsS0FBS0ssQ0FBQyxLQUFLRixXQUNQSCxLQUFLTSxDQUFDLEdBQ05DLFlBQ0pQLEtBQUtLLENBQUMsQ0FBQ0osR0FBRyxDQUFDRTtnQkFDakIsSUFBSUMsVUFBVUcsV0FBVztvQkFDckJoQixPQUFPYTtvQkFDUFosVUFBVUgsT0FBT21CLFNBQVMsSUFBSTtvQkFDOUI7Z0JBQ0o7WUFDSjtZQUNBUixPQUFPQSxLQUFLUyxDQUFDO1FBQ2pCO1FBQ0EsNEVBQTRFO1FBQzVFLElBQUlULFNBQVNPLFdBQVc7WUFDcEJoQixPQUFPUztZQUNQUixVQUFVRyxJQUFJO1FBQ2xCLE9BQ0s7WUFDRCxNQUFNZSxLQUFLM0Isd0RBQVlBLENBQUNPLEtBQUtLO1lBQzdCSixPQUFPLENBQUMsR0FBRyxFQUFFbUIsR0FBR0MsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQy9CLDRDQUE0QztZQUM1Q25CLFVBQVVILE9BQU9tQixTQUFTLElBQUlJLE9BQU9GLE9BQU9aO1FBQ2hEO0lBQ0o7SUFDQSxPQUFPUCxNQUFNRCxJQUFJdUIsTUFBTSxDQUFDckI7QUFDNUIsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YWhlZ3VydS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2VudGl0aWVzL2xpYi9lc20vZW5jb2RlLmpzP2JmNjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGh0bWxUcmllIGZyb20gXCIuL2dlbmVyYXRlZC9lbmNvZGUtaHRtbC5qc1wiO1xuaW1wb3J0IHsgeG1sUmVwbGFjZXIsIGdldENvZGVQb2ludCB9IGZyb20gXCIuL2VzY2FwZS5qc1wiO1xuY29uc3QgaHRtbFJlcGxhY2VyID0gL1tcXHRcXG4hLSwuLzotQFstYFxcZnstfSRcXHg4MC1cXHVGRkZGXS9nO1xuLyoqXG4gKiBFbmNvZGVzIGFsbCBjaGFyYWN0ZXJzIGluIHRoZSBpbnB1dCB1c2luZyBIVE1MIGVudGl0aWVzLiBUaGlzIGluY2x1ZGVzXG4gKiBjaGFyYWN0ZXJzIHRoYXQgYXJlIHZhbGlkIEFTQ0lJIGNoYXJhY3RlcnMgaW4gSFRNTCBkb2N1bWVudHMsIHN1Y2ggYXMgYCNgLlxuICpcbiAqIFRvIGdldCBhIG1vcmUgY29tcGFjdCBvdXRwdXQsIGNvbnNpZGVyIHVzaW5nIHRoZSBgZW5jb2RlTm9uQXNjaWlIVE1MYFxuICogZnVuY3Rpb24sIHdoaWNoIHdpbGwgb25seSBlbmNvZGUgY2hhcmFjdGVycyB0aGF0IGFyZSBub3QgdmFsaWQgaW4gSFRNTFxuICogZG9jdW1lbnRzLCBhcyB3ZWxsIGFzIG5vbi1BU0NJSSBjaGFyYWN0ZXJzLlxuICpcbiAqIElmIGEgY2hhcmFjdGVyIGhhcyBubyBlcXVpdmFsZW50IGVudGl0eSwgYSBudW1lcmljIGhleGFkZWNpbWFsIHJlZmVyZW5jZVxuICogKGVnLiBgJiN4ZmM7YCkgd2lsbCBiZSB1c2VkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlSFRNTChkYXRhKSB7XG4gICAgcmV0dXJuIGVuY29kZUhUTUxUcmllUmUoaHRtbFJlcGxhY2VyLCBkYXRhKTtcbn1cbi8qKlxuICogRW5jb2RlcyBhbGwgbm9uLUFTQ0lJIGNoYXJhY3RlcnMsIGFzIHdlbGwgYXMgY2hhcmFjdGVycyBub3QgdmFsaWQgaW4gSFRNTFxuICogZG9jdW1lbnRzIHVzaW5nIEhUTUwgZW50aXRpZXMuIFRoaXMgZnVuY3Rpb24gd2lsbCBub3QgZW5jb2RlIGNoYXJhY3RlcnMgdGhhdFxuICogYXJlIHZhbGlkIGluIEhUTUwgZG9jdW1lbnRzLCBzdWNoIGFzIGAjYC5cbiAqXG4gKiBJZiBhIGNoYXJhY3RlciBoYXMgbm8gZXF1aXZhbGVudCBlbnRpdHksIGEgbnVtZXJpYyBoZXhhZGVjaW1hbCByZWZlcmVuY2VcbiAqIChlZy4gYCYjeGZjO2ApIHdpbGwgYmUgdXNlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZU5vbkFzY2lpSFRNTChkYXRhKSB7XG4gICAgcmV0dXJuIGVuY29kZUhUTUxUcmllUmUoeG1sUmVwbGFjZXIsIGRhdGEpO1xufVxuZnVuY3Rpb24gZW5jb2RlSFRNTFRyaWVSZShyZWdFeHAsIHN0cikge1xuICAgIGxldCByZXQgPSBcIlwiO1xuICAgIGxldCBsYXN0SWR4ID0gMDtcbiAgICBsZXQgbWF0Y2g7XG4gICAgd2hpbGUgKChtYXRjaCA9IHJlZ0V4cC5leGVjKHN0cikpICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGkgPSBtYXRjaC5pbmRleDtcbiAgICAgICAgcmV0ICs9IHN0ci5zdWJzdHJpbmcobGFzdElkeCwgaSk7XG4gICAgICAgIGNvbnN0IGNoYXIgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgbGV0IG5leHQgPSBodG1sVHJpZS5nZXQoY2hhcik7XG4gICAgICAgIGlmICh0eXBlb2YgbmV4dCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgLy8gV2UgYXJlIGluIGEgYnJhbmNoLiBUcnkgdG8gbWF0Y2ggdGhlIG5leHQgY2hhci5cbiAgICAgICAgICAgIGlmIChpICsgMSA8IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0Q2hhciA9IHN0ci5jaGFyQ29kZUF0KGkgKyAxKTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHR5cGVvZiBuZXh0Lm4gPT09IFwibnVtYmVyXCJcbiAgICAgICAgICAgICAgICAgICAgPyBuZXh0Lm4gPT09IG5leHRDaGFyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG5leHQub1xuICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgOiBuZXh0Lm4uZ2V0KG5leHRDaGFyKTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXQgKz0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RJZHggPSByZWdFeHAubGFzdEluZGV4ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5leHQgPSBuZXh0LnY7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgbWlnaHQgaGF2ZSBhIHRyZWUgbm9kZSB3aXRob3V0IGEgdmFsdWU7IHNraXAgYW5kIHVzZSBhIG51bWVyaWMgZW50aXR5LlxuICAgICAgICBpZiAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXQgKz0gbmV4dDtcbiAgICAgICAgICAgIGxhc3RJZHggPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNwID0gZ2V0Q29kZVBvaW50KHN0ciwgaSk7XG4gICAgICAgICAgICByZXQgKz0gYCYjeCR7Y3AudG9TdHJpbmcoMTYpfTtgO1xuICAgICAgICAgICAgLy8gSW5jcmVhc2UgYnkgMSBpZiB3ZSBoYXZlIGEgc3Vycm9nYXRlIHBhaXJcbiAgICAgICAgICAgIGxhc3RJZHggPSByZWdFeHAubGFzdEluZGV4ICs9IE51bWJlcihjcCAhPT0gY2hhcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldCArIHN0ci5zdWJzdHIobGFzdElkeCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbmNvZGUuanMubWFwIl0sIm5hbWVzIjpbImh0bWxUcmllIiwieG1sUmVwbGFjZXIiLCJnZXRDb2RlUG9pbnQiLCJodG1sUmVwbGFjZXIiLCJlbmNvZGVIVE1MIiwiZGF0YSIsImVuY29kZUhUTUxUcmllUmUiLCJlbmNvZGVOb25Bc2NpaUhUTUwiLCJyZWdFeHAiLCJzdHIiLCJyZXQiLCJsYXN0SWR4IiwibWF0Y2giLCJleGVjIiwiaSIsImluZGV4Iiwic3Vic3RyaW5nIiwiY2hhciIsImNoYXJDb2RlQXQiLCJuZXh0IiwiZ2V0IiwibGVuZ3RoIiwibmV4dENoYXIiLCJ2YWx1ZSIsIm4iLCJvIiwidW5kZWZpbmVkIiwibGFzdEluZGV4IiwidiIsImNwIiwidG9TdHJpbmciLCJOdW1iZXIiLCJzdWJzdHIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/entities/lib/esm/encode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/entities/lib/esm/escape.js":
/*!*************************************************!*\
  !*** ./node_modules/entities/lib/esm/escape.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeXML: () => (/* binding */ encodeXML),\n/* harmony export */   escape: () => (/* binding */ escape),\n/* harmony export */   escapeAttribute: () => (/* binding */ escapeAttribute),\n/* harmony export */   escapeText: () => (/* binding */ escapeText),\n/* harmony export */   escapeUTF8: () => (/* binding */ escapeUTF8),\n/* harmony export */   getCodePoint: () => (/* binding */ getCodePoint),\n/* harmony export */   xmlReplacer: () => (/* binding */ xmlReplacer)\n/* harmony export */ });\nconst xmlReplacer = /[\"&'<>$\\x80-\\uFFFF]/g;\nconst xmlCodeMap = new Map([\n    [\n        34,\n        \"&quot;\"\n    ],\n    [\n        38,\n        \"&amp;\"\n    ],\n    [\n        39,\n        \"&apos;\"\n    ],\n    [\n        60,\n        \"&lt;\"\n    ],\n    [\n        62,\n        \"&gt;\"\n    ]\n]);\n// For compatibility with node < 4, we wrap `codePointAt`\nconst getCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nString.prototype.codePointAt != null ? (str, index)=>str.codePointAt(index) : (c, index)=>(c.charCodeAt(index) & 0xfc00) === 0xd800 ? (c.charCodeAt(index) - 0xd800) * 0x400 + c.charCodeAt(index + 1) - 0xdc00 + 0x10000 : c.charCodeAt(index);\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using XML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */ function encodeXML(str) {\n    let ret = \"\";\n    let lastIdx = 0;\n    let match;\n    while((match = xmlReplacer.exec(str)) !== null){\n        const i = match.index;\n        const char = str.charCodeAt(i);\n        const next = xmlCodeMap.get(char);\n        if (next !== undefined) {\n            ret += str.substring(lastIdx, i) + next;\n            lastIdx = i + 1;\n        } else {\n            ret += `${str.substring(lastIdx, i)}&#x${getCodePoint(str, i).toString(16)};`;\n            // Increase by 1 if we have a surrogate pair\n            lastIdx = xmlReplacer.lastIndex += Number((char & 0xfc00) === 0xd800);\n        }\n    }\n    return ret + str.substr(lastIdx);\n}\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using numeric hexadecimal reference (eg. `&#xfc;`).\n *\n * Have a look at `escapeUTF8` if you want a more concise output at the expense\n * of reduced transportability.\n *\n * @param data String to escape.\n */ const escape = encodeXML;\n/**\n * Creates a function that escapes all characters matched by the given regular\n * expression using the given map of characters to escape to their entities.\n *\n * @param regex Regular expression to match characters to escape.\n * @param map Map of characters to escape to their entities.\n *\n * @returns Function that escapes all characters matched by the given regular\n * expression using the given map of characters to escape to their entities.\n */ function getEscaper(regex, map) {\n    return function escape(data) {\n        let match;\n        let lastIdx = 0;\n        let result = \"\";\n        while(match = regex.exec(data)){\n            if (lastIdx !== match.index) {\n                result += data.substring(lastIdx, match.index);\n            }\n            // We know that this character will be in the map.\n            result += map.get(match[0].charCodeAt(0));\n            // Every match will be of length 1\n            lastIdx = match.index + 1;\n        }\n        return result + data.substring(lastIdx);\n    };\n}\n/**\n * Encodes all characters not valid in XML documents using XML entities.\n *\n * Note that the output will be character-set dependent.\n *\n * @param data String to escape.\n */ const escapeUTF8 = getEscaper(/[&<>'\"]/g, xmlCodeMap);\n/**\n * Encodes all characters that have to be escaped in HTML attributes,\n * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n *\n * @param data String to escape.\n */ const escapeAttribute = getEscaper(/[\"&\\u00A0]/g, new Map([\n    [\n        34,\n        \"&quot;\"\n    ],\n    [\n        38,\n        \"&amp;\"\n    ],\n    [\n        160,\n        \"&nbsp;\"\n    ]\n]));\n/**\n * Encodes all characters that have to be escaped in HTML text,\n * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n *\n * @param data String to escape.\n */ const escapeText = getEscaper(/[&<>\\u00A0]/g, new Map([\n    [\n        38,\n        \"&amp;\"\n    ],\n    [\n        60,\n        \"&lt;\"\n    ],\n    [\n        62,\n        \"&gt;\"\n    ],\n    [\n        160,\n        \"&nbsp;\"\n    ]\n])); //# sourceMappingURL=escape.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/entities/lib/esm/escape.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/entities/lib/esm/generated/decode-data-html.js":
/*!*********************************************************************!*\
  !*** ./node_modules/entities/lib/esm/generated/decode-data-html.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Generated using scripts/write-decode-map.ts\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Uint16Array(// prettier-ignore\n'ᵁ<\\xd5ıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\\x00\\x00\\x00\\x00\\x00\\x00ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\\\bfms\\x7f\\x84\\x8b\\x90\\x95\\x98\\xa6\\xb3\\xb9\\xc8\\xcflig耻\\xc6䃆P耻&䀦cute耻\\xc1䃁reve;䄂Āiyx}rc耻\\xc2䃂;䐐r;쀀\\ud835\\udd04rave耻\\xc0䃀pha;䎑acr;䄀d;橓Āgp\\x9d\\xa1on;䄄f;쀀\\ud835\\udd38plyFunction;恡ing耻\\xc5䃅Ācs\\xbe\\xc3r;쀀\\ud835\\udc9cign;扔ilde耻\\xc3䃃ml耻\\xc4䃄Ѐaceforsu\\xe5\\xfb\\xfeėĜĢħĪĀcr\\xea\\xf2kslash;或Ŷ\\xf6\\xf8;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀\\ud835\\udd05pf;쀀\\ud835\\udd39eve;䋘c\\xf2ēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻\\xa9䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻\\xc7䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷\\xf2ſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀\\ud835\\udc9epĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀\\ud835\\udd07Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\\x00\\x00\\x00͔͂\\x00Ѕf;쀀\\ud835\\udd3bƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegra\\xecȹoɴ͹\\x00\\x00ͻ\\xbb͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔e\\xe5ˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\\x00\\x00ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\\x00ц\\x00ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\\x00ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀\\ud835\\udc9frok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻\\xd0䃐cute耻\\xc9䃉ƀaiyӒӗӜron;䄚rc耻\\xca䃊;䐭ot;䄖r;쀀\\ud835\\udd08rave耻\\xc8䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\\x00\\x00ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀\\ud835\\udd3csilon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻\\xcb䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀\\ud835\\udd09lledɓ֗\\x00\\x00֣mallSquare;旼erySmallSquare;斪Ͱֺ\\x00ֿ\\x00\\x00ׄf;쀀\\ud835\\udd3dAll;戀riertrf;愱c\\xf2׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀\\ud835\\udd0a;拙pf;쀀\\ud835\\udd3eeater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀\\ud835\\udca2;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\\x00ڲf;愍izontalLine;攀Āctۃۅ\\xf2کrok;䄦mpńېۘownHum\\xf0įqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻\\xcd䃍Āiyܓܘrc耻\\xce䃎;䐘ot;䄰r;愑rave耻\\xcc䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lie\\xf3ϝǴ݉\\x00ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀\\ud835\\udd40a;䎙cr;愐ilde;䄨ǫޚ\\x00ޞcy;䐆l耻\\xcf䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀\\ud835\\udd0dpf;쀀\\ud835\\udd41ǣ߇\\x00ߌr;쀀\\ud835\\udca5rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀\\ud835\\udd0epf;쀀\\ud835\\udd42cr;쀀\\ud835\\udca6րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\\x00ࣃbleBracket;柦nǔࣈ\\x00࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ight\\xe1Μs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀\\ud835\\udd0fĀ;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊight\\xe1οight\\xe1ϊf;쀀\\ud835\\udd43erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂ\\xf2ࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀\\ud835\\udd10nusPlus;戓pf;쀀\\ud835\\udd44c\\xf2੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘\\xeb૙eryThi\\xee૙tedĀGL૸ଆreaterGreate\\xf2ٳessLes\\xf3ੈLine;䀊r;쀀\\ud835\\udd11ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀\\ud835\\udca9ilde耻\\xd1䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻\\xd3䃓Āiy෎ීrc耻\\xd4䃔;䐞blac;䅐r;쀀\\ud835\\udd12rave耻\\xd2䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀\\ud835\\udd46enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀\\ud835\\udcaaash耻\\xd8䃘iŬื฼de耻\\xd5䃕es;樷ml耻\\xd6䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀\\ud835\\udd13i;䎦;䎠usMinus;䂱Āipຢອncareplan\\xe5ڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀\\ud835\\udcab;䎨ȀUfos༑༖༛༟OT耻\"䀢r;쀀\\ud835\\udd14pf;愚cr;쀀\\ud835\\udcac؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻\\xae䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r\\xbbཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\\x00စbleBracket;柧nǔည\\x00နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀\\ud835\\udd16ortȀDLRUᄪᄴᄾᅉownArrow\\xbbОeftArrow\\xbb࢚ightArrow\\xbb࿝pArrow;憑gma;䎣allCircle;战pf;쀀\\ud835\\udd4aɲᅭ\\x00\\x00ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀\\ud835\\udcaear;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Th\\xe1ྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et\\xbbሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻\\xde䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀\\ud835\\udd17Āeiቻ኉ǲኀ\\x00ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀\\ud835\\udd4bipleDot;惛Āctዖዛr;쀀\\ud835\\udcafrok;䅦ૡዷጎጚጦ\\x00ጬጱ\\x00\\x00\\x00\\x00\\x00ጸጽ፷ᎅ\\x00᏿ᐄᐊᐐĀcrዻጁute耻\\xda䃚rĀ;oጇገ憟cir;楉rǣጓ\\x00጖y;䐎ve;䅬Āiyጞጣrc耻\\xdb䃛;䐣blac;䅰r;쀀\\ud835\\udd18rave耻\\xd9䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀\\ud835\\udd4cЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥own\\xe1ϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀\\ud835\\udcb0ilde;䅨ml耻\\xdc䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀\\ud835\\udd19pf;쀀\\ud835\\udd4dcr;쀀\\ud835\\udcb1dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀\\ud835\\udd1apf;쀀\\ud835\\udd4ecr;쀀\\ud835\\udcb2Ȁfiosᓋᓐᓒᓘr;쀀\\ud835\\udd1b;䎞pf;쀀\\ud835\\udd4fcr;쀀\\ud835\\udcb3ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻\\xdd䃝Āiyᔉᔍrc;䅶;䐫r;쀀\\ud835\\udd1cpf;쀀\\ud835\\udd50cr;쀀\\ud835\\udcb4ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\\x00ᕛoWidt\\xe8૙a;䎖r;愨pf;愤cr;쀀\\ud835\\udcb5௡ᖃᖊᖐ\\x00ᖰᖶᖿ\\x00\\x00\\x00\\x00ᗆᗛᗫᙟ᙭\\x00ᚕ᚛ᚲᚹ\\x00ᚾcute耻\\xe1䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻\\xe2䃢te肻\\xb4̆;䐰lig耻\\xe6䃦Ā;r\\xb2ᖺ;쀀\\ud835\\udd1erave耻\\xe0䃠ĀepᗊᗖĀfpᗏᗔsym;愵\\xe8ᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\\x00\\x00ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e\\xbbᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢\\xbb\\xb9arr;捼Āgpᙣᙧon;䄅f;쀀\\ud835\\udd52΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒ\\xf1ᚃing耻\\xe5䃥ƀctyᚡᚦᚨr;쀀\\ud835\\udcb6;䀪mpĀ;e዁ᚯ\\xf1ʈilde耻\\xe3䃣ml耻\\xe4䃤Āciᛂᛈonin\\xf4ɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e\\xbbᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰s\\xe9ᜌno\\xf5ēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀\\ud835\\udd1fg΀costuvwឍឝឳេ៕៛៞ƀaiuបពរ\\xf0ݠrc;旯p\\xbb፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\\x00\\x00ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄e\\xe5ᑄ\\xe5ᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\\x00ᠳƲᠯ\\x00ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀\\ud835\\udd53Ā;tᏋᡣom\\xbbᏌtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻\\xa6䂦Ȁceioᥑᥖᥚᥠr;쀀\\ud835\\udcb7mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t\\xbb᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\\x00᧨ᨑᨕᨲ\\x00ᨷᩐ\\x00\\x00᪴\\x00\\x00᫁\\x00\\x00ᬡᬮ᭍᭒\\x00᯽\\x00ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁\\xeeړȀaeiu᧰᧻ᨁᨅǰ᧵\\x00᧸s;橍on;䄍dil耻\\xe7䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻\\xb8ƭptyv;榲t脀\\xa2;eᨭᨮ䂢r\\xe4Ʋr;쀀\\ud835\\udd20ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark\\xbbᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\\x00\\x00᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟\\xbbཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it\\xbb᪼ˬ᫇᫔᫺\\x00ᬊonĀ;eᫍᫎ䀺Ā;q\\xc7\\xc6ɭ᫙\\x00\\x00᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁\\xeeᅠeĀmx᫱᫶ent\\xbb᫩e\\xf3ɍǧ᫾\\x00ᬇĀ;dኻᬂot;橭n\\xf4Ɇƀfryᬐᬔᬗ;쀀\\ud835\\udd54o\\xe4ɔ脀\\xa9;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀\\ud835\\udcb8Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\\x00\\x00᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\\x00\\x00ᯒre\\xe3᭳u\\xe3᭵ee;拎edge;拏en耻\\xa4䂤earrowĀlrᯮ᯳eft\\xbbᮀight\\xbbᮽe\\xe4ᯝĀciᰁᰇonin\\xf4Ƿnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍r\\xf2΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸\\xf2ᄳhĀ;vᱚᱛ怐\\xbbऊūᱡᱧarow;椏a\\xe3̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻\\xb0䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀\\ud835\\udd21arĀlrᲳᲵ\\xbbࣜ\\xbbသʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀\\xf7;o᳧ᳰntimes;拇n\\xf8᳷cy;䑒cɯᴆ\\x00\\x00ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀\\ud835\\udd55ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedg\\xe5\\xfanƀadhᄮᵝᵧownarrow\\xf3ᲃarpoonĀlrᵲᵶef\\xf4Ჴigh\\xf4ᲶŢᵿᶅkaro\\xf7གɯᶊ\\x00\\x00ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀\\ud835\\udcb9;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃r\\xf2Щa\\xf2ྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴo\\xf4ᲉĀcsḎḔute耻\\xe9䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻\\xea䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀\\ud835\\udd22ƀ;rsṐṑṗ檚ave耻\\xe8䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et\\xbbẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀\\ud835\\udd56ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on\\xbbớ;䏵ȀcsuvỪỳἋἣĀioữḱrc\\xbbḮɩỹ\\x00\\x00ỻ\\xedՈantĀglἂἆtr\\xbbṝess\\xbbṺƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯o\\xf4͒ĀahὉὋ;䎷耻\\xf0䃰Āmrὓὗl耻\\xeb䃫o;悬ƀcipὡὤὧl;䀡s\\xf4ծĀeoὬὴctatio\\xeeՙnential\\xe5չৡᾒ\\x00ᾞ\\x00ᾡᾧ\\x00\\x00ῆῌ\\x00ΐ\\x00ῦῪ \\x00 ⁚llingdotse\\xf1Ṅy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\\x00\\x00᾽g;耀ﬀig;耀ﬄ;쀀\\ud835\\udd23lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\\x00ῳf;쀀\\ud835\\udd57ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\\x00⁐β•‥‧‪‬\\x00‮耻\\xbd䂽;慓耻\\xbc䂼;慕;慙;慛Ƴ‴\\x00‶;慔;慖ʴ‾⁁\\x00\\x00⁃耻\\xbe䂾;慗;慜5;慘ƶ⁌\\x00⁎;慚;慝8;慞l;恄wn;挢cr;쀀\\ud835\\udcbbࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lan\\xf4٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀\\ud835\\udd24Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox\\xbbℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀\\ud835\\udd58Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\\x00↎pro\\xf8₞r;楸qĀlqؿ↖les\\xf3₈i\\xed٫Āen↣↭rtneqq;쀀≩︀\\xc5↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽r\\xf2ΠȀilmr⇐⇔⇗⇛rs\\xf0ᒄf\\xbb․il\\xf4کĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it\\xbb∊lip;怦con;抹r;쀀\\ud835\\udd25sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀\\ud835\\udd59bar;怕ƀclt≯≴≸r;쀀\\ud835\\udcbdas\\xe8⇴rok;䄧Ābp⊂⊇ull;恃hen\\xbbᱛૡ⊣\\x00⊪\\x00⊸⋅⋎\\x00⋕⋳\\x00\\x00⋸⌢⍧⍢⍿\\x00⎆⎪⎴cute耻\\xed䃭ƀ;iyݱ⊰⊵rc耻\\xee䃮;䐸Ācx⊼⊿y;䐵cl耻\\xa1䂡ĀfrΟ⋉;쀀\\ud835\\udd26rave耻\\xec䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓in\\xe5ގar\\xf4ܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝do\\xf4⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙er\\xf3ᕣ\\xe3⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀\\ud835\\udd5aa;䎹uest耻\\xbf䂿Āci⎊⎏r;쀀\\ud835\\udcbenʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\\x00⎼cy;䑖l耻\\xef䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀\\ud835\\udd27ath;䈷pf;쀀\\ud835\\udd5bǣ⏬\\x00⏱r;쀀\\ud835\\udcbfrcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀\\ud835\\udd28reen;䄸cy;䑅cy;䑜pf;쀀\\ud835\\udd5ccr;쀀\\ud835\\udcc0஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼r\\xf2৆\\xf2Εail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\\x00⒪\\x00⒱\\x00\\x00\\x00\\x00\\x00⒵Ⓔ\\x00ⓆⓈⓍ\\x00⓹ute;䄺mptyv;榴ra\\xeeࡌbda;䎻gƀ;dlࢎⓁⓃ;榑\\xe5ࢎ;檅uo耻\\xab䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝\\xeb≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼\\xecࢰ\\xe2┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□a\\xe9⓶arpoonĀdu▯▴own\\xbbњp\\xbb०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoon\\xf3྘quigarro\\xf7⇰hreetimes;拋ƀ;qs▋ও◺lan\\xf4বʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋ppro\\xf8Ⓠot;拖qĀgq♃♅\\xf4উgt\\xf2⒌\\xf4ছi\\xedলƀilr♕࣡♚sht;楼;쀀\\ud835\\udd29Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖r\\xf2◁orne\\xf2ᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che\\xbb⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox\\xbb⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽r\\xebࣁgƀlmr⛿✍✔eftĀar০✇ight\\xe1৲apsto;柼ight\\xe1৽parrowĀlr✥✩ef\\xf4⓭ight;憬ƀafl✶✹✽r;榅;쀀\\ud835\\udd5dus;樭imes;樴š❋❏st;戗\\xe1ፎƀ;ef❗❘᠀旊nge\\xbb❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇r\\xf2ࢨorne\\xf2ᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀\\ud835\\udcc1mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹re\\xe5◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀\\xc5⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻\\xaf䂯Āet⡗⡙;時Ā;e⡞⡟朠se\\xbb⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻ow\\xeeҌef\\xf4ए\\xf0Ꮡker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle\\xbbᘦr;쀀\\ud835\\udd2ao;愧ƀcdn⢯⢴⣉ro耻\\xb5䂵Ȁ;acdᑤ⢽⣀⣄s\\xf4ᚧir;櫰ot肻\\xb7Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛\\xf2−\\xf0ઁĀdp⣩⣮els;抧f;쀀\\ud835\\udd5eĀct⣸⣽r;쀀\\ud835\\udcc2pos\\xbbᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la\\xbb˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉ro\\xf8඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\\x00⧣p肻\\xa0ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\\x00⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸ui\\xf6ୣĀei⩊⩎ar;椨\\xed஘istĀ;s஠டr;쀀\\ud835\\udd2bȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lan\\xf4௢i\\xed௪Ā;rஶ⪁\\xbbஷƀAap⪊⪍⪑r\\xf2⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹r\\xf2⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro\\xf7⫁ightarro\\xf7⪐ƀ;qs఻⪺⫪lan\\xf4ౕĀ;sౕ⫴\\xbbశi\\xedౝĀ;rవ⫾iĀ;eచథi\\xe4ඐĀpt⬌⬑f;쀀\\ud835\\udd5f膀\\xac;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lle\\xec୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳u\\xe5ಥĀ;cಘ⭸Ā;eಒ⭽\\xf1ಘȀAait⮈⮋⮝⮧r\\xf2⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow\\xbb⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉u\\xe5൅;쀀\\ud835\\udcc3ortɭ⬅\\x00\\x00⯖ar\\xe1⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭\\xe5೸\\xe5ഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗ\\xf1സȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇ\\xecௗlde耻\\xf1䃱\\xe7ృiangleĀlrⱒⱜeftĀ;eచⱚ\\xf1దightĀ;eೋⱥ\\xf1೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00ⴭ\\x00ⴸⵈⵠⵥ⵲ⶄᬇ\\x00\\x00ⶍⶫ\\x00ⷈⷎ\\x00ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻\\xf3䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻\\xf4䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀\\ud835\\udd2cͯ⵹\\x00\\x00⵼\\x00ⶂn;䋛ave耻\\xf2䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨr\\xf2᪀Āir⶝ⶠr;榾oss;榻n\\xe5๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀\\ud835\\udd60ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨r\\xf2᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f\\xbbⷿ耻\\xaa䂪耻\\xba䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧\\xf2⸁ash耻\\xf8䃸l;折iŬⸯ⸴de耻\\xf5䃵esĀ;aǛ⸺s;樶ml耻\\xf6䃶bar;挽ૡ⹞\\x00⹽\\x00⺀⺝\\x00⺢⺹\\x00\\x00⻋ຜ\\x00⼓\\x00\\x00⼫⾼\\x00⿈rȀ;astЃ⹧⹲຅脀\\xb6;l⹭⹮䂶le\\xecЃɩ⹸\\x00\\x00⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀\\ud835\\udd2dƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕ma\\xf4੶ne;明ƀ;tv⺿⻀⻈䏀chfork\\xbb´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎\\xf6⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻\\xb1ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀\\ud835\\udd61nd耻\\xa3䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷u\\xe5໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾ppro\\xf8⽃urlye\\xf1໙\\xf1໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨i\\xedໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺\\xf0⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴\\xef໻rel;抰Āci⿀⿅r;쀀\\ud835\\udcc5;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀\\ud835\\udd2epf;쀀\\ud835\\udd62rime;恗cr;쀀\\ud835\\udcc6ƀaeo⿸〉〓tĀei⿾々rnion\\xf3ڰnt;樖stĀ;e【】䀿\\xf1Ἑ\\xf4༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがr\\xf2Ⴓ\\xf2ϝail;検ar\\xf2ᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕i\\xe3ᅮmptyv;榳gȀ;del࿑らるろ;榒;榥\\xe5࿑uo耻\\xbb䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞\\xeb≝\\xf0✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶al\\xf3༞ƀabrョリヮr\\xf2៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗\\xec࿲\\xe2ヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜn\\xe5Ⴛar\\xf4ྩt;断ƀilrㅩဣㅮsht;楽;쀀\\ud835\\udd2fĀaoㅷㆆrĀduㅽㅿ\\xbbѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭa\\xe9トarpoonĀduㆻㆿow\\xeeㅾp\\xbb႒eftĀah㇊㇐rrow\\xf3࿪arpoon\\xf3Ցightarrows;應quigarro\\xf7ニhreetimes;拌g;䋚ingdotse\\xf1ἲƀahm㈍㈐㈓r\\xf2࿪a\\xf2Ց;怏oustĀ;a㈞㈟掱che\\xbb㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾r\\xebဃƀafl㉇㉊㉎r;榆;쀀\\ud835\\udd63us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒ar\\xf2㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀\\ud835\\udcc7Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠re\\xe5ㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\\x00㍺㎤\\x00\\x00㏬㏰\\x00㐨㑈㑚㒭㒱㓊㓱\\x00㘖\\x00\\x00㘳cute;䅛qu\\xef➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\\x00㋼;檸on;䅡u\\xe5ᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓i\\xedሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒\\xeb∨Ā;oਸ਼਴t耻\\xa7䂧i;䀻war;椩mĀin㍩\\xf0nu\\xf3\\xf1t;朶rĀ;o㍶⁕쀀\\ud835\\udd30Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\\x00\\x00㎜i\\xe4ᑤara\\xec⹯耻\\xad䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲ar\\xf2ᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetm\\xe9㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀\\ud835\\udd64aĀdr㑍ЂesĀ;u㑔㑕晠it\\xbb㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍\\xf1ᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝\\xf1ᆮƀ;afᅻ㒦ְrť㒫ֱ\\xbbᅼar\\xf2ᅈȀcemt㒹㒾㓂㓅r;쀀\\ud835\\udcc8tm\\xee\\xf1i\\xec㐕ar\\xe6ᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psilo\\xeeỠh\\xe9⺯s\\xbb⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦ppro\\xf8㋺urlye\\xf1ᇾ\\xf1ᇳƀaes㖂㖈㌛ppro\\xf8㌚q\\xf1㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻\\xb9䂹耻\\xb2䂲耻\\xb3䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨\\xeb∮Ā;oਫ਩war;椪lig耻\\xdf䃟௡㙑㙝㙠ዎ㙳㙹\\x00㙾㛂\\x00\\x00\\x00\\x00\\x00㛛㜃\\x00㜉㝬\\x00\\x00\\x00㞇ɲ㙖\\x00\\x00㙛get;挖;䏄r\\xeb๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀\\ud835\\udd31Ȁeiko㚆㚝㚵㚼ǲ㚋\\x00㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮ppro\\xf8዁im\\xbbኬs\\xf0ኞĀas㚺㚮\\xf0዁rn耻\\xfe䃾Ǭ̟㛆⋧es膀\\xd7;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀\\xe1⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀\\ud835\\udd65rk;櫚\\xe1㍢rime;怴ƀaip㜏㜒㝤d\\xe5ቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own\\xbbᶻeftĀ;e⠀㜾\\xf1म;扜ightĀ;e㊪㝋\\xf1ၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀\\ud835\\udcc9;䑆cy;䑛rok;䅧Āio㞋㞎x\\xf4᝷headĀlr㞗㞠eftarro\\xf7ࡏightarrow\\xbbཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶r\\xf2ϭar;楣Ācr㟜㟢ute耻\\xfa䃺\\xf2ᅐrǣ㟪\\x00㟭y;䑞ve;䅭Āiy㟵㟺rc耻\\xfb䃻;䑃ƀabh㠃㠆㠋r\\xf2Ꭽlac;䅱a\\xf2ᏃĀir㠓㠘sht;楾;쀀\\ud835\\udd32rave耻\\xf9䃹š㠧㠱rĀlr㠬㠮\\xbbॗ\\xbbႃlk;斀Āct㠹㡍ɯ㠿\\x00\\x00㡊rnĀ;e㡅㡆挜r\\xbb㡆op;挏ri;旸Āal㡖㡚cr;䅫肻\\xa8͉Āgp㡢㡦on;䅳f;쀀\\ud835\\udd66̀adhlsuᅋ㡸㡽፲㢑㢠own\\xe1ᎳarpoonĀlr㢈㢌ef\\xf4㠭igh\\xf4㠯iƀ;hl㢙㢚㢜䏅\\xbbᏺon\\xbb㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\\x00\\x00㣁rnĀ;e㢼㢽挝r\\xbb㢽op;挎ng;䅯ri;旹cr;쀀\\ud835\\udccaƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨\\xbb᠓Āam㣯㣲r\\xf2㢨l耻\\xfc䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠r\\xf2ϷarĀ;v㤦㤧櫨;櫩as\\xe8ϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖app\\xe1␕othin\\xe7ẖƀhir㓫⻈㥙op\\xf4⾵Ā;hᎷ㥢\\xefㆍĀiu㥩㥭gm\\xe1㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟et\\xe1㚜iangleĀlr㦪㦯eft\\xbbथight\\xbbၑy;䐲ash\\xbbံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨa\\xf2ᑩr;쀀\\ud835\\udd33tr\\xe9㦮suĀbp㧯㧱\\xbbജ\\xbb൙pf;쀀\\ud835\\udd67ro\\xf0໻tr\\xe9㦴Ācu㨆㨋r;쀀\\ud835\\udccbĀbp㨐㨘nĀEe㦀㨖\\xbb㥾nĀEe㦒㨞\\xbb㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀\\ud835\\udd34pf;쀀\\ud835\\udd68Ā;eᑹ㩦at\\xe8ᑹcr;쀀\\ud835\\udcccૣណ㪇\\x00㪋\\x00㪐㪛\\x00\\x00㪝㪨㪫㪯\\x00\\x00㫃㫎\\x00㫘ៜ៟tr\\xe9៑r;쀀\\ud835\\udd35ĀAa㪔㪗r\\xf2σr\\xf2৶;䎾ĀAa㪡㪤r\\xf2θr\\xf2৫a\\xf0✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀\\ud835\\udd69im\\xe5ឲĀAa㫇㫊r\\xf2ώr\\xf2ਁĀcq㫒ីr;쀀\\ud835\\udccdĀpt៖㫜r\\xe9។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻\\xfd䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻\\xa5䂥r;쀀\\ud835\\udd36cy;䑗pf;쀀\\ud835\\udd6acr;쀀\\ud835\\udcceĀcm㬦㬩y;䑎l耻\\xff䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡tr\\xe6ᕟa;䎶r;쀀\\ud835\\udd37cy;䐶grarr;懝pf;쀀\\ud835\\udd6bcr;쀀\\ud835\\udccfĀjn㮅㮇;怍j;怌'.split(\"\").map((c)=>c.charCodeAt(0)))); //# sourceMappingURL=decode-data-html.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/entities/lib/esm/generated/decode-data-html.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/entities/lib/esm/generated/decode-data-xml.js":
/*!********************************************************************!*\
  !*** ./node_modules/entities/lib/esm/generated/decode-data-xml.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Generated using scripts/write-decode-map.ts\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Uint16Array(// prettier-ignore\n\"Ȁaglq\t\\x15\\x18\\x1bɭ\\x0f\\x00\\x00\\x12p;䀦os;䀧t;䀾t;䀼uot;䀢\".split(\"\").map((c)=>c.charCodeAt(0)))); //# sourceMappingURL=decode-data-xml.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZW50aXRpZXMvbGliL2VzbS9nZW5lcmF0ZWQvZGVjb2RlLWRhdGEteG1sLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSw4Q0FBOEM7QUFDOUMsaUVBQWUsSUFBSUEsWUFDbkIsa0JBQWtCO0FBQ2xCLHdEQUNLQyxLQUFLLENBQUMsSUFDTkMsR0FBRyxDQUFDLENBQUNDLElBQU1BLEVBQUVDLFVBQVUsQ0FBQyxJQUFJLEVBQUMsQ0FDbEMsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FoZWd1cnUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9lbnRpdGllcy9saWIvZXNtL2dlbmVyYXRlZC9kZWNvZGUtZGF0YS14bWwuanM/ZjA2NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgdXNpbmcgc2NyaXB0cy93cml0ZS1kZWNvZGUtbWFwLnRzXG5leHBvcnQgZGVmYXVsdCBuZXcgVWludDE2QXJyYXkoXG4vLyBwcmV0dGllci1pZ25vcmVcblwiXFx1MDIwMGFnbHFcXHRcXHgxNVxceDE4XFx4MWJcXHUwMjZkXFx4MGZcXDBcXDBcXHgxMnA7XFx1NDAyNm9zO1xcdTQwMjd0O1xcdTQwM2V0O1xcdTQwM2N1b3Q7XFx1NDAyMlwiXG4gICAgLnNwbGl0KFwiXCIpXG4gICAgLm1hcCgoYykgPT4gYy5jaGFyQ29kZUF0KDApKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvZGUtZGF0YS14bWwuanMubWFwIl0sIm5hbWVzIjpbIlVpbnQxNkFycmF5Iiwic3BsaXQiLCJtYXAiLCJjIiwiY2hhckNvZGVBdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/entities/lib/esm/generated/decode-data-xml.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/entities/lib/esm/generated/encode-html.js":
/*!****************************************************************!*\
  !*** ./node_modules/entities/lib/esm/generated/encode-html.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Generated using scripts/write-encode-map.ts\nfunction restoreDiff(arr) {\n    for(let i = 1; i < arr.length; i++){\n        arr[i][0] += arr[i - 1][0] + 1;\n    }\n    return arr;\n}\n// prettier-ignore\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Map(/* #__PURE__ */ restoreDiff([\n    [\n        9,\n        \"&Tab;\"\n    ],\n    [\n        0,\n        \"&NewLine;\"\n    ],\n    [\n        22,\n        \"&excl;\"\n    ],\n    [\n        0,\n        \"&quot;\"\n    ],\n    [\n        0,\n        \"&num;\"\n    ],\n    [\n        0,\n        \"&dollar;\"\n    ],\n    [\n        0,\n        \"&percnt;\"\n    ],\n    [\n        0,\n        \"&amp;\"\n    ],\n    [\n        0,\n        \"&apos;\"\n    ],\n    [\n        0,\n        \"&lpar;\"\n    ],\n    [\n        0,\n        \"&rpar;\"\n    ],\n    [\n        0,\n        \"&ast;\"\n    ],\n    [\n        0,\n        \"&plus;\"\n    ],\n    [\n        0,\n        \"&comma;\"\n    ],\n    [\n        1,\n        \"&period;\"\n    ],\n    [\n        0,\n        \"&sol;\"\n    ],\n    [\n        10,\n        \"&colon;\"\n    ],\n    [\n        0,\n        \"&semi;\"\n    ],\n    [\n        0,\n        {\n            v: \"&lt;\",\n            n: 8402,\n            o: \"&nvlt;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&equals;\",\n            n: 8421,\n            o: \"&bne;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&gt;\",\n            n: 8402,\n            o: \"&nvgt;\"\n        }\n    ],\n    [\n        0,\n        \"&quest;\"\n    ],\n    [\n        0,\n        \"&commat;\"\n    ],\n    [\n        26,\n        \"&lbrack;\"\n    ],\n    [\n        0,\n        \"&bsol;\"\n    ],\n    [\n        0,\n        \"&rbrack;\"\n    ],\n    [\n        0,\n        \"&Hat;\"\n    ],\n    [\n        0,\n        \"&lowbar;\"\n    ],\n    [\n        0,\n        \"&DiacriticalGrave;\"\n    ],\n    [\n        5,\n        {\n            n: 106,\n            o: \"&fjlig;\"\n        }\n    ],\n    [\n        20,\n        \"&lbrace;\"\n    ],\n    [\n        0,\n        \"&verbar;\"\n    ],\n    [\n        0,\n        \"&rbrace;\"\n    ],\n    [\n        34,\n        \"&nbsp;\"\n    ],\n    [\n        0,\n        \"&iexcl;\"\n    ],\n    [\n        0,\n        \"&cent;\"\n    ],\n    [\n        0,\n        \"&pound;\"\n    ],\n    [\n        0,\n        \"&curren;\"\n    ],\n    [\n        0,\n        \"&yen;\"\n    ],\n    [\n        0,\n        \"&brvbar;\"\n    ],\n    [\n        0,\n        \"&sect;\"\n    ],\n    [\n        0,\n        \"&die;\"\n    ],\n    [\n        0,\n        \"&copy;\"\n    ],\n    [\n        0,\n        \"&ordf;\"\n    ],\n    [\n        0,\n        \"&laquo;\"\n    ],\n    [\n        0,\n        \"&not;\"\n    ],\n    [\n        0,\n        \"&shy;\"\n    ],\n    [\n        0,\n        \"&circledR;\"\n    ],\n    [\n        0,\n        \"&macr;\"\n    ],\n    [\n        0,\n        \"&deg;\"\n    ],\n    [\n        0,\n        \"&PlusMinus;\"\n    ],\n    [\n        0,\n        \"&sup2;\"\n    ],\n    [\n        0,\n        \"&sup3;\"\n    ],\n    [\n        0,\n        \"&acute;\"\n    ],\n    [\n        0,\n        \"&micro;\"\n    ],\n    [\n        0,\n        \"&para;\"\n    ],\n    [\n        0,\n        \"&centerdot;\"\n    ],\n    [\n        0,\n        \"&cedil;\"\n    ],\n    [\n        0,\n        \"&sup1;\"\n    ],\n    [\n        0,\n        \"&ordm;\"\n    ],\n    [\n        0,\n        \"&raquo;\"\n    ],\n    [\n        0,\n        \"&frac14;\"\n    ],\n    [\n        0,\n        \"&frac12;\"\n    ],\n    [\n        0,\n        \"&frac34;\"\n    ],\n    [\n        0,\n        \"&iquest;\"\n    ],\n    [\n        0,\n        \"&Agrave;\"\n    ],\n    [\n        0,\n        \"&Aacute;\"\n    ],\n    [\n        0,\n        \"&Acirc;\"\n    ],\n    [\n        0,\n        \"&Atilde;\"\n    ],\n    [\n        0,\n        \"&Auml;\"\n    ],\n    [\n        0,\n        \"&angst;\"\n    ],\n    [\n        0,\n        \"&AElig;\"\n    ],\n    [\n        0,\n        \"&Ccedil;\"\n    ],\n    [\n        0,\n        \"&Egrave;\"\n    ],\n    [\n        0,\n        \"&Eacute;\"\n    ],\n    [\n        0,\n        \"&Ecirc;\"\n    ],\n    [\n        0,\n        \"&Euml;\"\n    ],\n    [\n        0,\n        \"&Igrave;\"\n    ],\n    [\n        0,\n        \"&Iacute;\"\n    ],\n    [\n        0,\n        \"&Icirc;\"\n    ],\n    [\n        0,\n        \"&Iuml;\"\n    ],\n    [\n        0,\n        \"&ETH;\"\n    ],\n    [\n        0,\n        \"&Ntilde;\"\n    ],\n    [\n        0,\n        \"&Ograve;\"\n    ],\n    [\n        0,\n        \"&Oacute;\"\n    ],\n    [\n        0,\n        \"&Ocirc;\"\n    ],\n    [\n        0,\n        \"&Otilde;\"\n    ],\n    [\n        0,\n        \"&Ouml;\"\n    ],\n    [\n        0,\n        \"&times;\"\n    ],\n    [\n        0,\n        \"&Oslash;\"\n    ],\n    [\n        0,\n        \"&Ugrave;\"\n    ],\n    [\n        0,\n        \"&Uacute;\"\n    ],\n    [\n        0,\n        \"&Ucirc;\"\n    ],\n    [\n        0,\n        \"&Uuml;\"\n    ],\n    [\n        0,\n        \"&Yacute;\"\n    ],\n    [\n        0,\n        \"&THORN;\"\n    ],\n    [\n        0,\n        \"&szlig;\"\n    ],\n    [\n        0,\n        \"&agrave;\"\n    ],\n    [\n        0,\n        \"&aacute;\"\n    ],\n    [\n        0,\n        \"&acirc;\"\n    ],\n    [\n        0,\n        \"&atilde;\"\n    ],\n    [\n        0,\n        \"&auml;\"\n    ],\n    [\n        0,\n        \"&aring;\"\n    ],\n    [\n        0,\n        \"&aelig;\"\n    ],\n    [\n        0,\n        \"&ccedil;\"\n    ],\n    [\n        0,\n        \"&egrave;\"\n    ],\n    [\n        0,\n        \"&eacute;\"\n    ],\n    [\n        0,\n        \"&ecirc;\"\n    ],\n    [\n        0,\n        \"&euml;\"\n    ],\n    [\n        0,\n        \"&igrave;\"\n    ],\n    [\n        0,\n        \"&iacute;\"\n    ],\n    [\n        0,\n        \"&icirc;\"\n    ],\n    [\n        0,\n        \"&iuml;\"\n    ],\n    [\n        0,\n        \"&eth;\"\n    ],\n    [\n        0,\n        \"&ntilde;\"\n    ],\n    [\n        0,\n        \"&ograve;\"\n    ],\n    [\n        0,\n        \"&oacute;\"\n    ],\n    [\n        0,\n        \"&ocirc;\"\n    ],\n    [\n        0,\n        \"&otilde;\"\n    ],\n    [\n        0,\n        \"&ouml;\"\n    ],\n    [\n        0,\n        \"&div;\"\n    ],\n    [\n        0,\n        \"&oslash;\"\n    ],\n    [\n        0,\n        \"&ugrave;\"\n    ],\n    [\n        0,\n        \"&uacute;\"\n    ],\n    [\n        0,\n        \"&ucirc;\"\n    ],\n    [\n        0,\n        \"&uuml;\"\n    ],\n    [\n        0,\n        \"&yacute;\"\n    ],\n    [\n        0,\n        \"&thorn;\"\n    ],\n    [\n        0,\n        \"&yuml;\"\n    ],\n    [\n        0,\n        \"&Amacr;\"\n    ],\n    [\n        0,\n        \"&amacr;\"\n    ],\n    [\n        0,\n        \"&Abreve;\"\n    ],\n    [\n        0,\n        \"&abreve;\"\n    ],\n    [\n        0,\n        \"&Aogon;\"\n    ],\n    [\n        0,\n        \"&aogon;\"\n    ],\n    [\n        0,\n        \"&Cacute;\"\n    ],\n    [\n        0,\n        \"&cacute;\"\n    ],\n    [\n        0,\n        \"&Ccirc;\"\n    ],\n    [\n        0,\n        \"&ccirc;\"\n    ],\n    [\n        0,\n        \"&Cdot;\"\n    ],\n    [\n        0,\n        \"&cdot;\"\n    ],\n    [\n        0,\n        \"&Ccaron;\"\n    ],\n    [\n        0,\n        \"&ccaron;\"\n    ],\n    [\n        0,\n        \"&Dcaron;\"\n    ],\n    [\n        0,\n        \"&dcaron;\"\n    ],\n    [\n        0,\n        \"&Dstrok;\"\n    ],\n    [\n        0,\n        \"&dstrok;\"\n    ],\n    [\n        0,\n        \"&Emacr;\"\n    ],\n    [\n        0,\n        \"&emacr;\"\n    ],\n    [\n        2,\n        \"&Edot;\"\n    ],\n    [\n        0,\n        \"&edot;\"\n    ],\n    [\n        0,\n        \"&Eogon;\"\n    ],\n    [\n        0,\n        \"&eogon;\"\n    ],\n    [\n        0,\n        \"&Ecaron;\"\n    ],\n    [\n        0,\n        \"&ecaron;\"\n    ],\n    [\n        0,\n        \"&Gcirc;\"\n    ],\n    [\n        0,\n        \"&gcirc;\"\n    ],\n    [\n        0,\n        \"&Gbreve;\"\n    ],\n    [\n        0,\n        \"&gbreve;\"\n    ],\n    [\n        0,\n        \"&Gdot;\"\n    ],\n    [\n        0,\n        \"&gdot;\"\n    ],\n    [\n        0,\n        \"&Gcedil;\"\n    ],\n    [\n        1,\n        \"&Hcirc;\"\n    ],\n    [\n        0,\n        \"&hcirc;\"\n    ],\n    [\n        0,\n        \"&Hstrok;\"\n    ],\n    [\n        0,\n        \"&hstrok;\"\n    ],\n    [\n        0,\n        \"&Itilde;\"\n    ],\n    [\n        0,\n        \"&itilde;\"\n    ],\n    [\n        0,\n        \"&Imacr;\"\n    ],\n    [\n        0,\n        \"&imacr;\"\n    ],\n    [\n        2,\n        \"&Iogon;\"\n    ],\n    [\n        0,\n        \"&iogon;\"\n    ],\n    [\n        0,\n        \"&Idot;\"\n    ],\n    [\n        0,\n        \"&imath;\"\n    ],\n    [\n        0,\n        \"&IJlig;\"\n    ],\n    [\n        0,\n        \"&ijlig;\"\n    ],\n    [\n        0,\n        \"&Jcirc;\"\n    ],\n    [\n        0,\n        \"&jcirc;\"\n    ],\n    [\n        0,\n        \"&Kcedil;\"\n    ],\n    [\n        0,\n        \"&kcedil;\"\n    ],\n    [\n        0,\n        \"&kgreen;\"\n    ],\n    [\n        0,\n        \"&Lacute;\"\n    ],\n    [\n        0,\n        \"&lacute;\"\n    ],\n    [\n        0,\n        \"&Lcedil;\"\n    ],\n    [\n        0,\n        \"&lcedil;\"\n    ],\n    [\n        0,\n        \"&Lcaron;\"\n    ],\n    [\n        0,\n        \"&lcaron;\"\n    ],\n    [\n        0,\n        \"&Lmidot;\"\n    ],\n    [\n        0,\n        \"&lmidot;\"\n    ],\n    [\n        0,\n        \"&Lstrok;\"\n    ],\n    [\n        0,\n        \"&lstrok;\"\n    ],\n    [\n        0,\n        \"&Nacute;\"\n    ],\n    [\n        0,\n        \"&nacute;\"\n    ],\n    [\n        0,\n        \"&Ncedil;\"\n    ],\n    [\n        0,\n        \"&ncedil;\"\n    ],\n    [\n        0,\n        \"&Ncaron;\"\n    ],\n    [\n        0,\n        \"&ncaron;\"\n    ],\n    [\n        0,\n        \"&napos;\"\n    ],\n    [\n        0,\n        \"&ENG;\"\n    ],\n    [\n        0,\n        \"&eng;\"\n    ],\n    [\n        0,\n        \"&Omacr;\"\n    ],\n    [\n        0,\n        \"&omacr;\"\n    ],\n    [\n        2,\n        \"&Odblac;\"\n    ],\n    [\n        0,\n        \"&odblac;\"\n    ],\n    [\n        0,\n        \"&OElig;\"\n    ],\n    [\n        0,\n        \"&oelig;\"\n    ],\n    [\n        0,\n        \"&Racute;\"\n    ],\n    [\n        0,\n        \"&racute;\"\n    ],\n    [\n        0,\n        \"&Rcedil;\"\n    ],\n    [\n        0,\n        \"&rcedil;\"\n    ],\n    [\n        0,\n        \"&Rcaron;\"\n    ],\n    [\n        0,\n        \"&rcaron;\"\n    ],\n    [\n        0,\n        \"&Sacute;\"\n    ],\n    [\n        0,\n        \"&sacute;\"\n    ],\n    [\n        0,\n        \"&Scirc;\"\n    ],\n    [\n        0,\n        \"&scirc;\"\n    ],\n    [\n        0,\n        \"&Scedil;\"\n    ],\n    [\n        0,\n        \"&scedil;\"\n    ],\n    [\n        0,\n        \"&Scaron;\"\n    ],\n    [\n        0,\n        \"&scaron;\"\n    ],\n    [\n        0,\n        \"&Tcedil;\"\n    ],\n    [\n        0,\n        \"&tcedil;\"\n    ],\n    [\n        0,\n        \"&Tcaron;\"\n    ],\n    [\n        0,\n        \"&tcaron;\"\n    ],\n    [\n        0,\n        \"&Tstrok;\"\n    ],\n    [\n        0,\n        \"&tstrok;\"\n    ],\n    [\n        0,\n        \"&Utilde;\"\n    ],\n    [\n        0,\n        \"&utilde;\"\n    ],\n    [\n        0,\n        \"&Umacr;\"\n    ],\n    [\n        0,\n        \"&umacr;\"\n    ],\n    [\n        0,\n        \"&Ubreve;\"\n    ],\n    [\n        0,\n        \"&ubreve;\"\n    ],\n    [\n        0,\n        \"&Uring;\"\n    ],\n    [\n        0,\n        \"&uring;\"\n    ],\n    [\n        0,\n        \"&Udblac;\"\n    ],\n    [\n        0,\n        \"&udblac;\"\n    ],\n    [\n        0,\n        \"&Uogon;\"\n    ],\n    [\n        0,\n        \"&uogon;\"\n    ],\n    [\n        0,\n        \"&Wcirc;\"\n    ],\n    [\n        0,\n        \"&wcirc;\"\n    ],\n    [\n        0,\n        \"&Ycirc;\"\n    ],\n    [\n        0,\n        \"&ycirc;\"\n    ],\n    [\n        0,\n        \"&Yuml;\"\n    ],\n    [\n        0,\n        \"&Zacute;\"\n    ],\n    [\n        0,\n        \"&zacute;\"\n    ],\n    [\n        0,\n        \"&Zdot;\"\n    ],\n    [\n        0,\n        \"&zdot;\"\n    ],\n    [\n        0,\n        \"&Zcaron;\"\n    ],\n    [\n        0,\n        \"&zcaron;\"\n    ],\n    [\n        19,\n        \"&fnof;\"\n    ],\n    [\n        34,\n        \"&imped;\"\n    ],\n    [\n        63,\n        \"&gacute;\"\n    ],\n    [\n        65,\n        \"&jmath;\"\n    ],\n    [\n        142,\n        \"&circ;\"\n    ],\n    [\n        0,\n        \"&caron;\"\n    ],\n    [\n        16,\n        \"&breve;\"\n    ],\n    [\n        0,\n        \"&DiacriticalDot;\"\n    ],\n    [\n        0,\n        \"&ring;\"\n    ],\n    [\n        0,\n        \"&ogon;\"\n    ],\n    [\n        0,\n        \"&DiacriticalTilde;\"\n    ],\n    [\n        0,\n        \"&dblac;\"\n    ],\n    [\n        51,\n        \"&DownBreve;\"\n    ],\n    [\n        127,\n        \"&Alpha;\"\n    ],\n    [\n        0,\n        \"&Beta;\"\n    ],\n    [\n        0,\n        \"&Gamma;\"\n    ],\n    [\n        0,\n        \"&Delta;\"\n    ],\n    [\n        0,\n        \"&Epsilon;\"\n    ],\n    [\n        0,\n        \"&Zeta;\"\n    ],\n    [\n        0,\n        \"&Eta;\"\n    ],\n    [\n        0,\n        \"&Theta;\"\n    ],\n    [\n        0,\n        \"&Iota;\"\n    ],\n    [\n        0,\n        \"&Kappa;\"\n    ],\n    [\n        0,\n        \"&Lambda;\"\n    ],\n    [\n        0,\n        \"&Mu;\"\n    ],\n    [\n        0,\n        \"&Nu;\"\n    ],\n    [\n        0,\n        \"&Xi;\"\n    ],\n    [\n        0,\n        \"&Omicron;\"\n    ],\n    [\n        0,\n        \"&Pi;\"\n    ],\n    [\n        0,\n        \"&Rho;\"\n    ],\n    [\n        1,\n        \"&Sigma;\"\n    ],\n    [\n        0,\n        \"&Tau;\"\n    ],\n    [\n        0,\n        \"&Upsilon;\"\n    ],\n    [\n        0,\n        \"&Phi;\"\n    ],\n    [\n        0,\n        \"&Chi;\"\n    ],\n    [\n        0,\n        \"&Psi;\"\n    ],\n    [\n        0,\n        \"&ohm;\"\n    ],\n    [\n        7,\n        \"&alpha;\"\n    ],\n    [\n        0,\n        \"&beta;\"\n    ],\n    [\n        0,\n        \"&gamma;\"\n    ],\n    [\n        0,\n        \"&delta;\"\n    ],\n    [\n        0,\n        \"&epsi;\"\n    ],\n    [\n        0,\n        \"&zeta;\"\n    ],\n    [\n        0,\n        \"&eta;\"\n    ],\n    [\n        0,\n        \"&theta;\"\n    ],\n    [\n        0,\n        \"&iota;\"\n    ],\n    [\n        0,\n        \"&kappa;\"\n    ],\n    [\n        0,\n        \"&lambda;\"\n    ],\n    [\n        0,\n        \"&mu;\"\n    ],\n    [\n        0,\n        \"&nu;\"\n    ],\n    [\n        0,\n        \"&xi;\"\n    ],\n    [\n        0,\n        \"&omicron;\"\n    ],\n    [\n        0,\n        \"&pi;\"\n    ],\n    [\n        0,\n        \"&rho;\"\n    ],\n    [\n        0,\n        \"&sigmaf;\"\n    ],\n    [\n        0,\n        \"&sigma;\"\n    ],\n    [\n        0,\n        \"&tau;\"\n    ],\n    [\n        0,\n        \"&upsi;\"\n    ],\n    [\n        0,\n        \"&phi;\"\n    ],\n    [\n        0,\n        \"&chi;\"\n    ],\n    [\n        0,\n        \"&psi;\"\n    ],\n    [\n        0,\n        \"&omega;\"\n    ],\n    [\n        7,\n        \"&thetasym;\"\n    ],\n    [\n        0,\n        \"&Upsi;\"\n    ],\n    [\n        2,\n        \"&phiv;\"\n    ],\n    [\n        0,\n        \"&piv;\"\n    ],\n    [\n        5,\n        \"&Gammad;\"\n    ],\n    [\n        0,\n        \"&digamma;\"\n    ],\n    [\n        18,\n        \"&kappav;\"\n    ],\n    [\n        0,\n        \"&rhov;\"\n    ],\n    [\n        3,\n        \"&epsiv;\"\n    ],\n    [\n        0,\n        \"&backepsilon;\"\n    ],\n    [\n        10,\n        \"&IOcy;\"\n    ],\n    [\n        0,\n        \"&DJcy;\"\n    ],\n    [\n        0,\n        \"&GJcy;\"\n    ],\n    [\n        0,\n        \"&Jukcy;\"\n    ],\n    [\n        0,\n        \"&DScy;\"\n    ],\n    [\n        0,\n        \"&Iukcy;\"\n    ],\n    [\n        0,\n        \"&YIcy;\"\n    ],\n    [\n        0,\n        \"&Jsercy;\"\n    ],\n    [\n        0,\n        \"&LJcy;\"\n    ],\n    [\n        0,\n        \"&NJcy;\"\n    ],\n    [\n        0,\n        \"&TSHcy;\"\n    ],\n    [\n        0,\n        \"&KJcy;\"\n    ],\n    [\n        1,\n        \"&Ubrcy;\"\n    ],\n    [\n        0,\n        \"&DZcy;\"\n    ],\n    [\n        0,\n        \"&Acy;\"\n    ],\n    [\n        0,\n        \"&Bcy;\"\n    ],\n    [\n        0,\n        \"&Vcy;\"\n    ],\n    [\n        0,\n        \"&Gcy;\"\n    ],\n    [\n        0,\n        \"&Dcy;\"\n    ],\n    [\n        0,\n        \"&IEcy;\"\n    ],\n    [\n        0,\n        \"&ZHcy;\"\n    ],\n    [\n        0,\n        \"&Zcy;\"\n    ],\n    [\n        0,\n        \"&Icy;\"\n    ],\n    [\n        0,\n        \"&Jcy;\"\n    ],\n    [\n        0,\n        \"&Kcy;\"\n    ],\n    [\n        0,\n        \"&Lcy;\"\n    ],\n    [\n        0,\n        \"&Mcy;\"\n    ],\n    [\n        0,\n        \"&Ncy;\"\n    ],\n    [\n        0,\n        \"&Ocy;\"\n    ],\n    [\n        0,\n        \"&Pcy;\"\n    ],\n    [\n        0,\n        \"&Rcy;\"\n    ],\n    [\n        0,\n        \"&Scy;\"\n    ],\n    [\n        0,\n        \"&Tcy;\"\n    ],\n    [\n        0,\n        \"&Ucy;\"\n    ],\n    [\n        0,\n        \"&Fcy;\"\n    ],\n    [\n        0,\n        \"&KHcy;\"\n    ],\n    [\n        0,\n        \"&TScy;\"\n    ],\n    [\n        0,\n        \"&CHcy;\"\n    ],\n    [\n        0,\n        \"&SHcy;\"\n    ],\n    [\n        0,\n        \"&SHCHcy;\"\n    ],\n    [\n        0,\n        \"&HARDcy;\"\n    ],\n    [\n        0,\n        \"&Ycy;\"\n    ],\n    [\n        0,\n        \"&SOFTcy;\"\n    ],\n    [\n        0,\n        \"&Ecy;\"\n    ],\n    [\n        0,\n        \"&YUcy;\"\n    ],\n    [\n        0,\n        \"&YAcy;\"\n    ],\n    [\n        0,\n        \"&acy;\"\n    ],\n    [\n        0,\n        \"&bcy;\"\n    ],\n    [\n        0,\n        \"&vcy;\"\n    ],\n    [\n        0,\n        \"&gcy;\"\n    ],\n    [\n        0,\n        \"&dcy;\"\n    ],\n    [\n        0,\n        \"&iecy;\"\n    ],\n    [\n        0,\n        \"&zhcy;\"\n    ],\n    [\n        0,\n        \"&zcy;\"\n    ],\n    [\n        0,\n        \"&icy;\"\n    ],\n    [\n        0,\n        \"&jcy;\"\n    ],\n    [\n        0,\n        \"&kcy;\"\n    ],\n    [\n        0,\n        \"&lcy;\"\n    ],\n    [\n        0,\n        \"&mcy;\"\n    ],\n    [\n        0,\n        \"&ncy;\"\n    ],\n    [\n        0,\n        \"&ocy;\"\n    ],\n    [\n        0,\n        \"&pcy;\"\n    ],\n    [\n        0,\n        \"&rcy;\"\n    ],\n    [\n        0,\n        \"&scy;\"\n    ],\n    [\n        0,\n        \"&tcy;\"\n    ],\n    [\n        0,\n        \"&ucy;\"\n    ],\n    [\n        0,\n        \"&fcy;\"\n    ],\n    [\n        0,\n        \"&khcy;\"\n    ],\n    [\n        0,\n        \"&tscy;\"\n    ],\n    [\n        0,\n        \"&chcy;\"\n    ],\n    [\n        0,\n        \"&shcy;\"\n    ],\n    [\n        0,\n        \"&shchcy;\"\n    ],\n    [\n        0,\n        \"&hardcy;\"\n    ],\n    [\n        0,\n        \"&ycy;\"\n    ],\n    [\n        0,\n        \"&softcy;\"\n    ],\n    [\n        0,\n        \"&ecy;\"\n    ],\n    [\n        0,\n        \"&yucy;\"\n    ],\n    [\n        0,\n        \"&yacy;\"\n    ],\n    [\n        1,\n        \"&iocy;\"\n    ],\n    [\n        0,\n        \"&djcy;\"\n    ],\n    [\n        0,\n        \"&gjcy;\"\n    ],\n    [\n        0,\n        \"&jukcy;\"\n    ],\n    [\n        0,\n        \"&dscy;\"\n    ],\n    [\n        0,\n        \"&iukcy;\"\n    ],\n    [\n        0,\n        \"&yicy;\"\n    ],\n    [\n        0,\n        \"&jsercy;\"\n    ],\n    [\n        0,\n        \"&ljcy;\"\n    ],\n    [\n        0,\n        \"&njcy;\"\n    ],\n    [\n        0,\n        \"&tshcy;\"\n    ],\n    [\n        0,\n        \"&kjcy;\"\n    ],\n    [\n        1,\n        \"&ubrcy;\"\n    ],\n    [\n        0,\n        \"&dzcy;\"\n    ],\n    [\n        7074,\n        \"&ensp;\"\n    ],\n    [\n        0,\n        \"&emsp;\"\n    ],\n    [\n        0,\n        \"&emsp13;\"\n    ],\n    [\n        0,\n        \"&emsp14;\"\n    ],\n    [\n        1,\n        \"&numsp;\"\n    ],\n    [\n        0,\n        \"&puncsp;\"\n    ],\n    [\n        0,\n        \"&ThinSpace;\"\n    ],\n    [\n        0,\n        \"&hairsp;\"\n    ],\n    [\n        0,\n        \"&NegativeMediumSpace;\"\n    ],\n    [\n        0,\n        \"&zwnj;\"\n    ],\n    [\n        0,\n        \"&zwj;\"\n    ],\n    [\n        0,\n        \"&lrm;\"\n    ],\n    [\n        0,\n        \"&rlm;\"\n    ],\n    [\n        0,\n        \"&dash;\"\n    ],\n    [\n        2,\n        \"&ndash;\"\n    ],\n    [\n        0,\n        \"&mdash;\"\n    ],\n    [\n        0,\n        \"&horbar;\"\n    ],\n    [\n        0,\n        \"&Verbar;\"\n    ],\n    [\n        1,\n        \"&lsquo;\"\n    ],\n    [\n        0,\n        \"&CloseCurlyQuote;\"\n    ],\n    [\n        0,\n        \"&lsquor;\"\n    ],\n    [\n        1,\n        \"&ldquo;\"\n    ],\n    [\n        0,\n        \"&CloseCurlyDoubleQuote;\"\n    ],\n    [\n        0,\n        \"&bdquo;\"\n    ],\n    [\n        1,\n        \"&dagger;\"\n    ],\n    [\n        0,\n        \"&Dagger;\"\n    ],\n    [\n        0,\n        \"&bull;\"\n    ],\n    [\n        2,\n        \"&nldr;\"\n    ],\n    [\n        0,\n        \"&hellip;\"\n    ],\n    [\n        9,\n        \"&permil;\"\n    ],\n    [\n        0,\n        \"&pertenk;\"\n    ],\n    [\n        0,\n        \"&prime;\"\n    ],\n    [\n        0,\n        \"&Prime;\"\n    ],\n    [\n        0,\n        \"&tprime;\"\n    ],\n    [\n        0,\n        \"&backprime;\"\n    ],\n    [\n        3,\n        \"&lsaquo;\"\n    ],\n    [\n        0,\n        \"&rsaquo;\"\n    ],\n    [\n        3,\n        \"&oline;\"\n    ],\n    [\n        2,\n        \"&caret;\"\n    ],\n    [\n        1,\n        \"&hybull;\"\n    ],\n    [\n        0,\n        \"&frasl;\"\n    ],\n    [\n        10,\n        \"&bsemi;\"\n    ],\n    [\n        7,\n        \"&qprime;\"\n    ],\n    [\n        7,\n        {\n            v: \"&MediumSpace;\",\n            n: 8202,\n            o: \"&ThickSpace;\"\n        }\n    ],\n    [\n        0,\n        \"&NoBreak;\"\n    ],\n    [\n        0,\n        \"&af;\"\n    ],\n    [\n        0,\n        \"&InvisibleTimes;\"\n    ],\n    [\n        0,\n        \"&ic;\"\n    ],\n    [\n        72,\n        \"&euro;\"\n    ],\n    [\n        46,\n        \"&tdot;\"\n    ],\n    [\n        0,\n        \"&DotDot;\"\n    ],\n    [\n        37,\n        \"&complexes;\"\n    ],\n    [\n        2,\n        \"&incare;\"\n    ],\n    [\n        4,\n        \"&gscr;\"\n    ],\n    [\n        0,\n        \"&hamilt;\"\n    ],\n    [\n        0,\n        \"&Hfr;\"\n    ],\n    [\n        0,\n        \"&Hopf;\"\n    ],\n    [\n        0,\n        \"&planckh;\"\n    ],\n    [\n        0,\n        \"&hbar;\"\n    ],\n    [\n        0,\n        \"&imagline;\"\n    ],\n    [\n        0,\n        \"&Ifr;\"\n    ],\n    [\n        0,\n        \"&lagran;\"\n    ],\n    [\n        0,\n        \"&ell;\"\n    ],\n    [\n        1,\n        \"&naturals;\"\n    ],\n    [\n        0,\n        \"&numero;\"\n    ],\n    [\n        0,\n        \"&copysr;\"\n    ],\n    [\n        0,\n        \"&weierp;\"\n    ],\n    [\n        0,\n        \"&Popf;\"\n    ],\n    [\n        0,\n        \"&Qopf;\"\n    ],\n    [\n        0,\n        \"&realine;\"\n    ],\n    [\n        0,\n        \"&real;\"\n    ],\n    [\n        0,\n        \"&reals;\"\n    ],\n    [\n        0,\n        \"&rx;\"\n    ],\n    [\n        3,\n        \"&trade;\"\n    ],\n    [\n        1,\n        \"&integers;\"\n    ],\n    [\n        2,\n        \"&mho;\"\n    ],\n    [\n        0,\n        \"&zeetrf;\"\n    ],\n    [\n        0,\n        \"&iiota;\"\n    ],\n    [\n        2,\n        \"&bernou;\"\n    ],\n    [\n        0,\n        \"&Cayleys;\"\n    ],\n    [\n        1,\n        \"&escr;\"\n    ],\n    [\n        0,\n        \"&Escr;\"\n    ],\n    [\n        0,\n        \"&Fouriertrf;\"\n    ],\n    [\n        1,\n        \"&Mellintrf;\"\n    ],\n    [\n        0,\n        \"&order;\"\n    ],\n    [\n        0,\n        \"&alefsym;\"\n    ],\n    [\n        0,\n        \"&beth;\"\n    ],\n    [\n        0,\n        \"&gimel;\"\n    ],\n    [\n        0,\n        \"&daleth;\"\n    ],\n    [\n        12,\n        \"&CapitalDifferentialD;\"\n    ],\n    [\n        0,\n        \"&dd;\"\n    ],\n    [\n        0,\n        \"&ee;\"\n    ],\n    [\n        0,\n        \"&ii;\"\n    ],\n    [\n        10,\n        \"&frac13;\"\n    ],\n    [\n        0,\n        \"&frac23;\"\n    ],\n    [\n        0,\n        \"&frac15;\"\n    ],\n    [\n        0,\n        \"&frac25;\"\n    ],\n    [\n        0,\n        \"&frac35;\"\n    ],\n    [\n        0,\n        \"&frac45;\"\n    ],\n    [\n        0,\n        \"&frac16;\"\n    ],\n    [\n        0,\n        \"&frac56;\"\n    ],\n    [\n        0,\n        \"&frac18;\"\n    ],\n    [\n        0,\n        \"&frac38;\"\n    ],\n    [\n        0,\n        \"&frac58;\"\n    ],\n    [\n        0,\n        \"&frac78;\"\n    ],\n    [\n        49,\n        \"&larr;\"\n    ],\n    [\n        0,\n        \"&ShortUpArrow;\"\n    ],\n    [\n        0,\n        \"&rarr;\"\n    ],\n    [\n        0,\n        \"&darr;\"\n    ],\n    [\n        0,\n        \"&harr;\"\n    ],\n    [\n        0,\n        \"&updownarrow;\"\n    ],\n    [\n        0,\n        \"&nwarr;\"\n    ],\n    [\n        0,\n        \"&nearr;\"\n    ],\n    [\n        0,\n        \"&LowerRightArrow;\"\n    ],\n    [\n        0,\n        \"&LowerLeftArrow;\"\n    ],\n    [\n        0,\n        \"&nlarr;\"\n    ],\n    [\n        0,\n        \"&nrarr;\"\n    ],\n    [\n        1,\n        {\n            v: \"&rarrw;\",\n            n: 824,\n            o: \"&nrarrw;\"\n        }\n    ],\n    [\n        0,\n        \"&Larr;\"\n    ],\n    [\n        0,\n        \"&Uarr;\"\n    ],\n    [\n        0,\n        \"&Rarr;\"\n    ],\n    [\n        0,\n        \"&Darr;\"\n    ],\n    [\n        0,\n        \"&larrtl;\"\n    ],\n    [\n        0,\n        \"&rarrtl;\"\n    ],\n    [\n        0,\n        \"&LeftTeeArrow;\"\n    ],\n    [\n        0,\n        \"&mapstoup;\"\n    ],\n    [\n        0,\n        \"&map;\"\n    ],\n    [\n        0,\n        \"&DownTeeArrow;\"\n    ],\n    [\n        1,\n        \"&hookleftarrow;\"\n    ],\n    [\n        0,\n        \"&hookrightarrow;\"\n    ],\n    [\n        0,\n        \"&larrlp;\"\n    ],\n    [\n        0,\n        \"&looparrowright;\"\n    ],\n    [\n        0,\n        \"&harrw;\"\n    ],\n    [\n        0,\n        \"&nharr;\"\n    ],\n    [\n        1,\n        \"&lsh;\"\n    ],\n    [\n        0,\n        \"&rsh;\"\n    ],\n    [\n        0,\n        \"&ldsh;\"\n    ],\n    [\n        0,\n        \"&rdsh;\"\n    ],\n    [\n        1,\n        \"&crarr;\"\n    ],\n    [\n        0,\n        \"&cularr;\"\n    ],\n    [\n        0,\n        \"&curarr;\"\n    ],\n    [\n        2,\n        \"&circlearrowleft;\"\n    ],\n    [\n        0,\n        \"&circlearrowright;\"\n    ],\n    [\n        0,\n        \"&leftharpoonup;\"\n    ],\n    [\n        0,\n        \"&DownLeftVector;\"\n    ],\n    [\n        0,\n        \"&RightUpVector;\"\n    ],\n    [\n        0,\n        \"&LeftUpVector;\"\n    ],\n    [\n        0,\n        \"&rharu;\"\n    ],\n    [\n        0,\n        \"&DownRightVector;\"\n    ],\n    [\n        0,\n        \"&dharr;\"\n    ],\n    [\n        0,\n        \"&dharl;\"\n    ],\n    [\n        0,\n        \"&RightArrowLeftArrow;\"\n    ],\n    [\n        0,\n        \"&udarr;\"\n    ],\n    [\n        0,\n        \"&LeftArrowRightArrow;\"\n    ],\n    [\n        0,\n        \"&leftleftarrows;\"\n    ],\n    [\n        0,\n        \"&upuparrows;\"\n    ],\n    [\n        0,\n        \"&rightrightarrows;\"\n    ],\n    [\n        0,\n        \"&ddarr;\"\n    ],\n    [\n        0,\n        \"&leftrightharpoons;\"\n    ],\n    [\n        0,\n        \"&Equilibrium;\"\n    ],\n    [\n        0,\n        \"&nlArr;\"\n    ],\n    [\n        0,\n        \"&nhArr;\"\n    ],\n    [\n        0,\n        \"&nrArr;\"\n    ],\n    [\n        0,\n        \"&DoubleLeftArrow;\"\n    ],\n    [\n        0,\n        \"&DoubleUpArrow;\"\n    ],\n    [\n        0,\n        \"&DoubleRightArrow;\"\n    ],\n    [\n        0,\n        \"&dArr;\"\n    ],\n    [\n        0,\n        \"&DoubleLeftRightArrow;\"\n    ],\n    [\n        0,\n        \"&DoubleUpDownArrow;\"\n    ],\n    [\n        0,\n        \"&nwArr;\"\n    ],\n    [\n        0,\n        \"&neArr;\"\n    ],\n    [\n        0,\n        \"&seArr;\"\n    ],\n    [\n        0,\n        \"&swArr;\"\n    ],\n    [\n        0,\n        \"&lAarr;\"\n    ],\n    [\n        0,\n        \"&rAarr;\"\n    ],\n    [\n        1,\n        \"&zigrarr;\"\n    ],\n    [\n        6,\n        \"&larrb;\"\n    ],\n    [\n        0,\n        \"&rarrb;\"\n    ],\n    [\n        15,\n        \"&DownArrowUpArrow;\"\n    ],\n    [\n        7,\n        \"&loarr;\"\n    ],\n    [\n        0,\n        \"&roarr;\"\n    ],\n    [\n        0,\n        \"&hoarr;\"\n    ],\n    [\n        0,\n        \"&forall;\"\n    ],\n    [\n        0,\n        \"&comp;\"\n    ],\n    [\n        0,\n        {\n            v: \"&part;\",\n            n: 824,\n            o: \"&npart;\"\n        }\n    ],\n    [\n        0,\n        \"&exist;\"\n    ],\n    [\n        0,\n        \"&nexist;\"\n    ],\n    [\n        0,\n        \"&empty;\"\n    ],\n    [\n        1,\n        \"&Del;\"\n    ],\n    [\n        0,\n        \"&Element;\"\n    ],\n    [\n        0,\n        \"&NotElement;\"\n    ],\n    [\n        1,\n        \"&ni;\"\n    ],\n    [\n        0,\n        \"&notni;\"\n    ],\n    [\n        2,\n        \"&prod;\"\n    ],\n    [\n        0,\n        \"&coprod;\"\n    ],\n    [\n        0,\n        \"&sum;\"\n    ],\n    [\n        0,\n        \"&minus;\"\n    ],\n    [\n        0,\n        \"&MinusPlus;\"\n    ],\n    [\n        0,\n        \"&dotplus;\"\n    ],\n    [\n        1,\n        \"&Backslash;\"\n    ],\n    [\n        0,\n        \"&lowast;\"\n    ],\n    [\n        0,\n        \"&compfn;\"\n    ],\n    [\n        1,\n        \"&radic;\"\n    ],\n    [\n        2,\n        \"&prop;\"\n    ],\n    [\n        0,\n        \"&infin;\"\n    ],\n    [\n        0,\n        \"&angrt;\"\n    ],\n    [\n        0,\n        {\n            v: \"&ang;\",\n            n: 8402,\n            o: \"&nang;\"\n        }\n    ],\n    [\n        0,\n        \"&angmsd;\"\n    ],\n    [\n        0,\n        \"&angsph;\"\n    ],\n    [\n        0,\n        \"&mid;\"\n    ],\n    [\n        0,\n        \"&nmid;\"\n    ],\n    [\n        0,\n        \"&DoubleVerticalBar;\"\n    ],\n    [\n        0,\n        \"&NotDoubleVerticalBar;\"\n    ],\n    [\n        0,\n        \"&and;\"\n    ],\n    [\n        0,\n        \"&or;\"\n    ],\n    [\n        0,\n        {\n            v: \"&cap;\",\n            n: 65024,\n            o: \"&caps;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&cup;\",\n            n: 65024,\n            o: \"&cups;\"\n        }\n    ],\n    [\n        0,\n        \"&int;\"\n    ],\n    [\n        0,\n        \"&Int;\"\n    ],\n    [\n        0,\n        \"&iiint;\"\n    ],\n    [\n        0,\n        \"&conint;\"\n    ],\n    [\n        0,\n        \"&Conint;\"\n    ],\n    [\n        0,\n        \"&Cconint;\"\n    ],\n    [\n        0,\n        \"&cwint;\"\n    ],\n    [\n        0,\n        \"&ClockwiseContourIntegral;\"\n    ],\n    [\n        0,\n        \"&awconint;\"\n    ],\n    [\n        0,\n        \"&there4;\"\n    ],\n    [\n        0,\n        \"&becaus;\"\n    ],\n    [\n        0,\n        \"&ratio;\"\n    ],\n    [\n        0,\n        \"&Colon;\"\n    ],\n    [\n        0,\n        \"&dotminus;\"\n    ],\n    [\n        1,\n        \"&mDDot;\"\n    ],\n    [\n        0,\n        \"&homtht;\"\n    ],\n    [\n        0,\n        {\n            v: \"&sim;\",\n            n: 8402,\n            o: \"&nvsim;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&backsim;\",\n            n: 817,\n            o: \"&race;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&ac;\",\n            n: 819,\n            o: \"&acE;\"\n        }\n    ],\n    [\n        0,\n        \"&acd;\"\n    ],\n    [\n        0,\n        \"&VerticalTilde;\"\n    ],\n    [\n        0,\n        \"&NotTilde;\"\n    ],\n    [\n        0,\n        {\n            v: \"&eqsim;\",\n            n: 824,\n            o: \"&nesim;\"\n        }\n    ],\n    [\n        0,\n        \"&sime;\"\n    ],\n    [\n        0,\n        \"&NotTildeEqual;\"\n    ],\n    [\n        0,\n        \"&cong;\"\n    ],\n    [\n        0,\n        \"&simne;\"\n    ],\n    [\n        0,\n        \"&ncong;\"\n    ],\n    [\n        0,\n        \"&ap;\"\n    ],\n    [\n        0,\n        \"&nap;\"\n    ],\n    [\n        0,\n        \"&ape;\"\n    ],\n    [\n        0,\n        {\n            v: \"&apid;\",\n            n: 824,\n            o: \"&napid;\"\n        }\n    ],\n    [\n        0,\n        \"&backcong;\"\n    ],\n    [\n        0,\n        {\n            v: \"&asympeq;\",\n            n: 8402,\n            o: \"&nvap;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&bump;\",\n            n: 824,\n            o: \"&nbump;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&bumpe;\",\n            n: 824,\n            o: \"&nbumpe;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&doteq;\",\n            n: 824,\n            o: \"&nedot;\"\n        }\n    ],\n    [\n        0,\n        \"&doteqdot;\"\n    ],\n    [\n        0,\n        \"&efDot;\"\n    ],\n    [\n        0,\n        \"&erDot;\"\n    ],\n    [\n        0,\n        \"&Assign;\"\n    ],\n    [\n        0,\n        \"&ecolon;\"\n    ],\n    [\n        0,\n        \"&ecir;\"\n    ],\n    [\n        0,\n        \"&circeq;\"\n    ],\n    [\n        1,\n        \"&wedgeq;\"\n    ],\n    [\n        0,\n        \"&veeeq;\"\n    ],\n    [\n        1,\n        \"&triangleq;\"\n    ],\n    [\n        2,\n        \"&equest;\"\n    ],\n    [\n        0,\n        \"&ne;\"\n    ],\n    [\n        0,\n        {\n            v: \"&Congruent;\",\n            n: 8421,\n            o: \"&bnequiv;\"\n        }\n    ],\n    [\n        0,\n        \"&nequiv;\"\n    ],\n    [\n        1,\n        {\n            v: \"&le;\",\n            n: 8402,\n            o: \"&nvle;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&ge;\",\n            n: 8402,\n            o: \"&nvge;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&lE;\",\n            n: 824,\n            o: \"&nlE;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&gE;\",\n            n: 824,\n            o: \"&ngE;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&lnE;\",\n            n: 65024,\n            o: \"&lvertneqq;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&gnE;\",\n            n: 65024,\n            o: \"&gvertneqq;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&ll;\",\n            n: new Map(/* #__PURE__ */ restoreDiff([\n                [\n                    824,\n                    \"&nLtv;\"\n                ],\n                [\n                    7577,\n                    \"&nLt;\"\n                ]\n            ]))\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&gg;\",\n            n: new Map(/* #__PURE__ */ restoreDiff([\n                [\n                    824,\n                    \"&nGtv;\"\n                ],\n                [\n                    7577,\n                    \"&nGt;\"\n                ]\n            ]))\n        }\n    ],\n    [\n        0,\n        \"&between;\"\n    ],\n    [\n        0,\n        \"&NotCupCap;\"\n    ],\n    [\n        0,\n        \"&nless;\"\n    ],\n    [\n        0,\n        \"&ngt;\"\n    ],\n    [\n        0,\n        \"&nle;\"\n    ],\n    [\n        0,\n        \"&nge;\"\n    ],\n    [\n        0,\n        \"&lesssim;\"\n    ],\n    [\n        0,\n        \"&GreaterTilde;\"\n    ],\n    [\n        0,\n        \"&nlsim;\"\n    ],\n    [\n        0,\n        \"&ngsim;\"\n    ],\n    [\n        0,\n        \"&LessGreater;\"\n    ],\n    [\n        0,\n        \"&gl;\"\n    ],\n    [\n        0,\n        \"&NotLessGreater;\"\n    ],\n    [\n        0,\n        \"&NotGreaterLess;\"\n    ],\n    [\n        0,\n        \"&pr;\"\n    ],\n    [\n        0,\n        \"&sc;\"\n    ],\n    [\n        0,\n        \"&prcue;\"\n    ],\n    [\n        0,\n        \"&sccue;\"\n    ],\n    [\n        0,\n        \"&PrecedesTilde;\"\n    ],\n    [\n        0,\n        {\n            v: \"&scsim;\",\n            n: 824,\n            o: \"&NotSucceedsTilde;\"\n        }\n    ],\n    [\n        0,\n        \"&NotPrecedes;\"\n    ],\n    [\n        0,\n        \"&NotSucceeds;\"\n    ],\n    [\n        0,\n        {\n            v: \"&sub;\",\n            n: 8402,\n            o: \"&NotSubset;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&sup;\",\n            n: 8402,\n            o: \"&NotSuperset;\"\n        }\n    ],\n    [\n        0,\n        \"&nsub;\"\n    ],\n    [\n        0,\n        \"&nsup;\"\n    ],\n    [\n        0,\n        \"&sube;\"\n    ],\n    [\n        0,\n        \"&supe;\"\n    ],\n    [\n        0,\n        \"&NotSubsetEqual;\"\n    ],\n    [\n        0,\n        \"&NotSupersetEqual;\"\n    ],\n    [\n        0,\n        {\n            v: \"&subne;\",\n            n: 65024,\n            o: \"&varsubsetneq;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&supne;\",\n            n: 65024,\n            o: \"&varsupsetneq;\"\n        }\n    ],\n    [\n        1,\n        \"&cupdot;\"\n    ],\n    [\n        0,\n        \"&UnionPlus;\"\n    ],\n    [\n        0,\n        {\n            v: \"&sqsub;\",\n            n: 824,\n            o: \"&NotSquareSubset;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&sqsup;\",\n            n: 824,\n            o: \"&NotSquareSuperset;\"\n        }\n    ],\n    [\n        0,\n        \"&sqsube;\"\n    ],\n    [\n        0,\n        \"&sqsupe;\"\n    ],\n    [\n        0,\n        {\n            v: \"&sqcap;\",\n            n: 65024,\n            o: \"&sqcaps;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&sqcup;\",\n            n: 65024,\n            o: \"&sqcups;\"\n        }\n    ],\n    [\n        0,\n        \"&CirclePlus;\"\n    ],\n    [\n        0,\n        \"&CircleMinus;\"\n    ],\n    [\n        0,\n        \"&CircleTimes;\"\n    ],\n    [\n        0,\n        \"&osol;\"\n    ],\n    [\n        0,\n        \"&CircleDot;\"\n    ],\n    [\n        0,\n        \"&circledcirc;\"\n    ],\n    [\n        0,\n        \"&circledast;\"\n    ],\n    [\n        1,\n        \"&circleddash;\"\n    ],\n    [\n        0,\n        \"&boxplus;\"\n    ],\n    [\n        0,\n        \"&boxminus;\"\n    ],\n    [\n        0,\n        \"&boxtimes;\"\n    ],\n    [\n        0,\n        \"&dotsquare;\"\n    ],\n    [\n        0,\n        \"&RightTee;\"\n    ],\n    [\n        0,\n        \"&dashv;\"\n    ],\n    [\n        0,\n        \"&DownTee;\"\n    ],\n    [\n        0,\n        \"&bot;\"\n    ],\n    [\n        1,\n        \"&models;\"\n    ],\n    [\n        0,\n        \"&DoubleRightTee;\"\n    ],\n    [\n        0,\n        \"&Vdash;\"\n    ],\n    [\n        0,\n        \"&Vvdash;\"\n    ],\n    [\n        0,\n        \"&VDash;\"\n    ],\n    [\n        0,\n        \"&nvdash;\"\n    ],\n    [\n        0,\n        \"&nvDash;\"\n    ],\n    [\n        0,\n        \"&nVdash;\"\n    ],\n    [\n        0,\n        \"&nVDash;\"\n    ],\n    [\n        0,\n        \"&prurel;\"\n    ],\n    [\n        1,\n        \"&LeftTriangle;\"\n    ],\n    [\n        0,\n        \"&RightTriangle;\"\n    ],\n    [\n        0,\n        {\n            v: \"&LeftTriangleEqual;\",\n            n: 8402,\n            o: \"&nvltrie;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&RightTriangleEqual;\",\n            n: 8402,\n            o: \"&nvrtrie;\"\n        }\n    ],\n    [\n        0,\n        \"&origof;\"\n    ],\n    [\n        0,\n        \"&imof;\"\n    ],\n    [\n        0,\n        \"&multimap;\"\n    ],\n    [\n        0,\n        \"&hercon;\"\n    ],\n    [\n        0,\n        \"&intcal;\"\n    ],\n    [\n        0,\n        \"&veebar;\"\n    ],\n    [\n        1,\n        \"&barvee;\"\n    ],\n    [\n        0,\n        \"&angrtvb;\"\n    ],\n    [\n        0,\n        \"&lrtri;\"\n    ],\n    [\n        0,\n        \"&bigwedge;\"\n    ],\n    [\n        0,\n        \"&bigvee;\"\n    ],\n    [\n        0,\n        \"&bigcap;\"\n    ],\n    [\n        0,\n        \"&bigcup;\"\n    ],\n    [\n        0,\n        \"&diam;\"\n    ],\n    [\n        0,\n        \"&sdot;\"\n    ],\n    [\n        0,\n        \"&sstarf;\"\n    ],\n    [\n        0,\n        \"&divideontimes;\"\n    ],\n    [\n        0,\n        \"&bowtie;\"\n    ],\n    [\n        0,\n        \"&ltimes;\"\n    ],\n    [\n        0,\n        \"&rtimes;\"\n    ],\n    [\n        0,\n        \"&leftthreetimes;\"\n    ],\n    [\n        0,\n        \"&rightthreetimes;\"\n    ],\n    [\n        0,\n        \"&backsimeq;\"\n    ],\n    [\n        0,\n        \"&curlyvee;\"\n    ],\n    [\n        0,\n        \"&curlywedge;\"\n    ],\n    [\n        0,\n        \"&Sub;\"\n    ],\n    [\n        0,\n        \"&Sup;\"\n    ],\n    [\n        0,\n        \"&Cap;\"\n    ],\n    [\n        0,\n        \"&Cup;\"\n    ],\n    [\n        0,\n        \"&fork;\"\n    ],\n    [\n        0,\n        \"&epar;\"\n    ],\n    [\n        0,\n        \"&lessdot;\"\n    ],\n    [\n        0,\n        \"&gtdot;\"\n    ],\n    [\n        0,\n        {\n            v: \"&Ll;\",\n            n: 824,\n            o: \"&nLl;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&Gg;\",\n            n: 824,\n            o: \"&nGg;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&leg;\",\n            n: 65024,\n            o: \"&lesg;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&gel;\",\n            n: 65024,\n            o: \"&gesl;\"\n        }\n    ],\n    [\n        2,\n        \"&cuepr;\"\n    ],\n    [\n        0,\n        \"&cuesc;\"\n    ],\n    [\n        0,\n        \"&NotPrecedesSlantEqual;\"\n    ],\n    [\n        0,\n        \"&NotSucceedsSlantEqual;\"\n    ],\n    [\n        0,\n        \"&NotSquareSubsetEqual;\"\n    ],\n    [\n        0,\n        \"&NotSquareSupersetEqual;\"\n    ],\n    [\n        2,\n        \"&lnsim;\"\n    ],\n    [\n        0,\n        \"&gnsim;\"\n    ],\n    [\n        0,\n        \"&precnsim;\"\n    ],\n    [\n        0,\n        \"&scnsim;\"\n    ],\n    [\n        0,\n        \"&nltri;\"\n    ],\n    [\n        0,\n        \"&NotRightTriangle;\"\n    ],\n    [\n        0,\n        \"&nltrie;\"\n    ],\n    [\n        0,\n        \"&NotRightTriangleEqual;\"\n    ],\n    [\n        0,\n        \"&vellip;\"\n    ],\n    [\n        0,\n        \"&ctdot;\"\n    ],\n    [\n        0,\n        \"&utdot;\"\n    ],\n    [\n        0,\n        \"&dtdot;\"\n    ],\n    [\n        0,\n        \"&disin;\"\n    ],\n    [\n        0,\n        \"&isinsv;\"\n    ],\n    [\n        0,\n        \"&isins;\"\n    ],\n    [\n        0,\n        {\n            v: \"&isindot;\",\n            n: 824,\n            o: \"&notindot;\"\n        }\n    ],\n    [\n        0,\n        \"&notinvc;\"\n    ],\n    [\n        0,\n        \"&notinvb;\"\n    ],\n    [\n        1,\n        {\n            v: \"&isinE;\",\n            n: 824,\n            o: \"&notinE;\"\n        }\n    ],\n    [\n        0,\n        \"&nisd;\"\n    ],\n    [\n        0,\n        \"&xnis;\"\n    ],\n    [\n        0,\n        \"&nis;\"\n    ],\n    [\n        0,\n        \"&notnivc;\"\n    ],\n    [\n        0,\n        \"&notnivb;\"\n    ],\n    [\n        6,\n        \"&barwed;\"\n    ],\n    [\n        0,\n        \"&Barwed;\"\n    ],\n    [\n        1,\n        \"&lceil;\"\n    ],\n    [\n        0,\n        \"&rceil;\"\n    ],\n    [\n        0,\n        \"&LeftFloor;\"\n    ],\n    [\n        0,\n        \"&rfloor;\"\n    ],\n    [\n        0,\n        \"&drcrop;\"\n    ],\n    [\n        0,\n        \"&dlcrop;\"\n    ],\n    [\n        0,\n        \"&urcrop;\"\n    ],\n    [\n        0,\n        \"&ulcrop;\"\n    ],\n    [\n        0,\n        \"&bnot;\"\n    ],\n    [\n        1,\n        \"&profline;\"\n    ],\n    [\n        0,\n        \"&profsurf;\"\n    ],\n    [\n        1,\n        \"&telrec;\"\n    ],\n    [\n        0,\n        \"&target;\"\n    ],\n    [\n        5,\n        \"&ulcorn;\"\n    ],\n    [\n        0,\n        \"&urcorn;\"\n    ],\n    [\n        0,\n        \"&dlcorn;\"\n    ],\n    [\n        0,\n        \"&drcorn;\"\n    ],\n    [\n        2,\n        \"&frown;\"\n    ],\n    [\n        0,\n        \"&smile;\"\n    ],\n    [\n        9,\n        \"&cylcty;\"\n    ],\n    [\n        0,\n        \"&profalar;\"\n    ],\n    [\n        7,\n        \"&topbot;\"\n    ],\n    [\n        6,\n        \"&ovbar;\"\n    ],\n    [\n        1,\n        \"&solbar;\"\n    ],\n    [\n        60,\n        \"&angzarr;\"\n    ],\n    [\n        51,\n        \"&lmoustache;\"\n    ],\n    [\n        0,\n        \"&rmoustache;\"\n    ],\n    [\n        2,\n        \"&OverBracket;\"\n    ],\n    [\n        0,\n        \"&bbrk;\"\n    ],\n    [\n        0,\n        \"&bbrktbrk;\"\n    ],\n    [\n        37,\n        \"&OverParenthesis;\"\n    ],\n    [\n        0,\n        \"&UnderParenthesis;\"\n    ],\n    [\n        0,\n        \"&OverBrace;\"\n    ],\n    [\n        0,\n        \"&UnderBrace;\"\n    ],\n    [\n        2,\n        \"&trpezium;\"\n    ],\n    [\n        4,\n        \"&elinters;\"\n    ],\n    [\n        59,\n        \"&blank;\"\n    ],\n    [\n        164,\n        \"&circledS;\"\n    ],\n    [\n        55,\n        \"&boxh;\"\n    ],\n    [\n        1,\n        \"&boxv;\"\n    ],\n    [\n        9,\n        \"&boxdr;\"\n    ],\n    [\n        3,\n        \"&boxdl;\"\n    ],\n    [\n        3,\n        \"&boxur;\"\n    ],\n    [\n        3,\n        \"&boxul;\"\n    ],\n    [\n        3,\n        \"&boxvr;\"\n    ],\n    [\n        7,\n        \"&boxvl;\"\n    ],\n    [\n        7,\n        \"&boxhd;\"\n    ],\n    [\n        7,\n        \"&boxhu;\"\n    ],\n    [\n        7,\n        \"&boxvh;\"\n    ],\n    [\n        19,\n        \"&boxH;\"\n    ],\n    [\n        0,\n        \"&boxV;\"\n    ],\n    [\n        0,\n        \"&boxdR;\"\n    ],\n    [\n        0,\n        \"&boxDr;\"\n    ],\n    [\n        0,\n        \"&boxDR;\"\n    ],\n    [\n        0,\n        \"&boxdL;\"\n    ],\n    [\n        0,\n        \"&boxDl;\"\n    ],\n    [\n        0,\n        \"&boxDL;\"\n    ],\n    [\n        0,\n        \"&boxuR;\"\n    ],\n    [\n        0,\n        \"&boxUr;\"\n    ],\n    [\n        0,\n        \"&boxUR;\"\n    ],\n    [\n        0,\n        \"&boxuL;\"\n    ],\n    [\n        0,\n        \"&boxUl;\"\n    ],\n    [\n        0,\n        \"&boxUL;\"\n    ],\n    [\n        0,\n        \"&boxvR;\"\n    ],\n    [\n        0,\n        \"&boxVr;\"\n    ],\n    [\n        0,\n        \"&boxVR;\"\n    ],\n    [\n        0,\n        \"&boxvL;\"\n    ],\n    [\n        0,\n        \"&boxVl;\"\n    ],\n    [\n        0,\n        \"&boxVL;\"\n    ],\n    [\n        0,\n        \"&boxHd;\"\n    ],\n    [\n        0,\n        \"&boxhD;\"\n    ],\n    [\n        0,\n        \"&boxHD;\"\n    ],\n    [\n        0,\n        \"&boxHu;\"\n    ],\n    [\n        0,\n        \"&boxhU;\"\n    ],\n    [\n        0,\n        \"&boxHU;\"\n    ],\n    [\n        0,\n        \"&boxvH;\"\n    ],\n    [\n        0,\n        \"&boxVh;\"\n    ],\n    [\n        0,\n        \"&boxVH;\"\n    ],\n    [\n        19,\n        \"&uhblk;\"\n    ],\n    [\n        3,\n        \"&lhblk;\"\n    ],\n    [\n        3,\n        \"&block;\"\n    ],\n    [\n        8,\n        \"&blk14;\"\n    ],\n    [\n        0,\n        \"&blk12;\"\n    ],\n    [\n        0,\n        \"&blk34;\"\n    ],\n    [\n        13,\n        \"&square;\"\n    ],\n    [\n        8,\n        \"&blacksquare;\"\n    ],\n    [\n        0,\n        \"&EmptyVerySmallSquare;\"\n    ],\n    [\n        1,\n        \"&rect;\"\n    ],\n    [\n        0,\n        \"&marker;\"\n    ],\n    [\n        2,\n        \"&fltns;\"\n    ],\n    [\n        1,\n        \"&bigtriangleup;\"\n    ],\n    [\n        0,\n        \"&blacktriangle;\"\n    ],\n    [\n        0,\n        \"&triangle;\"\n    ],\n    [\n        2,\n        \"&blacktriangleright;\"\n    ],\n    [\n        0,\n        \"&rtri;\"\n    ],\n    [\n        3,\n        \"&bigtriangledown;\"\n    ],\n    [\n        0,\n        \"&blacktriangledown;\"\n    ],\n    [\n        0,\n        \"&dtri;\"\n    ],\n    [\n        2,\n        \"&blacktriangleleft;\"\n    ],\n    [\n        0,\n        \"&ltri;\"\n    ],\n    [\n        6,\n        \"&loz;\"\n    ],\n    [\n        0,\n        \"&cir;\"\n    ],\n    [\n        32,\n        \"&tridot;\"\n    ],\n    [\n        2,\n        \"&bigcirc;\"\n    ],\n    [\n        8,\n        \"&ultri;\"\n    ],\n    [\n        0,\n        \"&urtri;\"\n    ],\n    [\n        0,\n        \"&lltri;\"\n    ],\n    [\n        0,\n        \"&EmptySmallSquare;\"\n    ],\n    [\n        0,\n        \"&FilledSmallSquare;\"\n    ],\n    [\n        8,\n        \"&bigstar;\"\n    ],\n    [\n        0,\n        \"&star;\"\n    ],\n    [\n        7,\n        \"&phone;\"\n    ],\n    [\n        49,\n        \"&female;\"\n    ],\n    [\n        1,\n        \"&male;\"\n    ],\n    [\n        29,\n        \"&spades;\"\n    ],\n    [\n        2,\n        \"&clubs;\"\n    ],\n    [\n        1,\n        \"&hearts;\"\n    ],\n    [\n        0,\n        \"&diamondsuit;\"\n    ],\n    [\n        3,\n        \"&sung;\"\n    ],\n    [\n        2,\n        \"&flat;\"\n    ],\n    [\n        0,\n        \"&natural;\"\n    ],\n    [\n        0,\n        \"&sharp;\"\n    ],\n    [\n        163,\n        \"&check;\"\n    ],\n    [\n        3,\n        \"&cross;\"\n    ],\n    [\n        8,\n        \"&malt;\"\n    ],\n    [\n        21,\n        \"&sext;\"\n    ],\n    [\n        33,\n        \"&VerticalSeparator;\"\n    ],\n    [\n        25,\n        \"&lbbrk;\"\n    ],\n    [\n        0,\n        \"&rbbrk;\"\n    ],\n    [\n        84,\n        \"&bsolhsub;\"\n    ],\n    [\n        0,\n        \"&suphsol;\"\n    ],\n    [\n        28,\n        \"&LeftDoubleBracket;\"\n    ],\n    [\n        0,\n        \"&RightDoubleBracket;\"\n    ],\n    [\n        0,\n        \"&lang;\"\n    ],\n    [\n        0,\n        \"&rang;\"\n    ],\n    [\n        0,\n        \"&Lang;\"\n    ],\n    [\n        0,\n        \"&Rang;\"\n    ],\n    [\n        0,\n        \"&loang;\"\n    ],\n    [\n        0,\n        \"&roang;\"\n    ],\n    [\n        7,\n        \"&longleftarrow;\"\n    ],\n    [\n        0,\n        \"&longrightarrow;\"\n    ],\n    [\n        0,\n        \"&longleftrightarrow;\"\n    ],\n    [\n        0,\n        \"&DoubleLongLeftArrow;\"\n    ],\n    [\n        0,\n        \"&DoubleLongRightArrow;\"\n    ],\n    [\n        0,\n        \"&DoubleLongLeftRightArrow;\"\n    ],\n    [\n        1,\n        \"&longmapsto;\"\n    ],\n    [\n        2,\n        \"&dzigrarr;\"\n    ],\n    [\n        258,\n        \"&nvlArr;\"\n    ],\n    [\n        0,\n        \"&nvrArr;\"\n    ],\n    [\n        0,\n        \"&nvHarr;\"\n    ],\n    [\n        0,\n        \"&Map;\"\n    ],\n    [\n        6,\n        \"&lbarr;\"\n    ],\n    [\n        0,\n        \"&bkarow;\"\n    ],\n    [\n        0,\n        \"&lBarr;\"\n    ],\n    [\n        0,\n        \"&dbkarow;\"\n    ],\n    [\n        0,\n        \"&drbkarow;\"\n    ],\n    [\n        0,\n        \"&DDotrahd;\"\n    ],\n    [\n        0,\n        \"&UpArrowBar;\"\n    ],\n    [\n        0,\n        \"&DownArrowBar;\"\n    ],\n    [\n        2,\n        \"&Rarrtl;\"\n    ],\n    [\n        2,\n        \"&latail;\"\n    ],\n    [\n        0,\n        \"&ratail;\"\n    ],\n    [\n        0,\n        \"&lAtail;\"\n    ],\n    [\n        0,\n        \"&rAtail;\"\n    ],\n    [\n        0,\n        \"&larrfs;\"\n    ],\n    [\n        0,\n        \"&rarrfs;\"\n    ],\n    [\n        0,\n        \"&larrbfs;\"\n    ],\n    [\n        0,\n        \"&rarrbfs;\"\n    ],\n    [\n        2,\n        \"&nwarhk;\"\n    ],\n    [\n        0,\n        \"&nearhk;\"\n    ],\n    [\n        0,\n        \"&hksearow;\"\n    ],\n    [\n        0,\n        \"&hkswarow;\"\n    ],\n    [\n        0,\n        \"&nwnear;\"\n    ],\n    [\n        0,\n        \"&nesear;\"\n    ],\n    [\n        0,\n        \"&seswar;\"\n    ],\n    [\n        0,\n        \"&swnwar;\"\n    ],\n    [\n        8,\n        {\n            v: \"&rarrc;\",\n            n: 824,\n            o: \"&nrarrc;\"\n        }\n    ],\n    [\n        1,\n        \"&cudarrr;\"\n    ],\n    [\n        0,\n        \"&ldca;\"\n    ],\n    [\n        0,\n        \"&rdca;\"\n    ],\n    [\n        0,\n        \"&cudarrl;\"\n    ],\n    [\n        0,\n        \"&larrpl;\"\n    ],\n    [\n        2,\n        \"&curarrm;\"\n    ],\n    [\n        0,\n        \"&cularrp;\"\n    ],\n    [\n        7,\n        \"&rarrpl;\"\n    ],\n    [\n        2,\n        \"&harrcir;\"\n    ],\n    [\n        0,\n        \"&Uarrocir;\"\n    ],\n    [\n        0,\n        \"&lurdshar;\"\n    ],\n    [\n        0,\n        \"&ldrushar;\"\n    ],\n    [\n        2,\n        \"&LeftRightVector;\"\n    ],\n    [\n        0,\n        \"&RightUpDownVector;\"\n    ],\n    [\n        0,\n        \"&DownLeftRightVector;\"\n    ],\n    [\n        0,\n        \"&LeftUpDownVector;\"\n    ],\n    [\n        0,\n        \"&LeftVectorBar;\"\n    ],\n    [\n        0,\n        \"&RightVectorBar;\"\n    ],\n    [\n        0,\n        \"&RightUpVectorBar;\"\n    ],\n    [\n        0,\n        \"&RightDownVectorBar;\"\n    ],\n    [\n        0,\n        \"&DownLeftVectorBar;\"\n    ],\n    [\n        0,\n        \"&DownRightVectorBar;\"\n    ],\n    [\n        0,\n        \"&LeftUpVectorBar;\"\n    ],\n    [\n        0,\n        \"&LeftDownVectorBar;\"\n    ],\n    [\n        0,\n        \"&LeftTeeVector;\"\n    ],\n    [\n        0,\n        \"&RightTeeVector;\"\n    ],\n    [\n        0,\n        \"&RightUpTeeVector;\"\n    ],\n    [\n        0,\n        \"&RightDownTeeVector;\"\n    ],\n    [\n        0,\n        \"&DownLeftTeeVector;\"\n    ],\n    [\n        0,\n        \"&DownRightTeeVector;\"\n    ],\n    [\n        0,\n        \"&LeftUpTeeVector;\"\n    ],\n    [\n        0,\n        \"&LeftDownTeeVector;\"\n    ],\n    [\n        0,\n        \"&lHar;\"\n    ],\n    [\n        0,\n        \"&uHar;\"\n    ],\n    [\n        0,\n        \"&rHar;\"\n    ],\n    [\n        0,\n        \"&dHar;\"\n    ],\n    [\n        0,\n        \"&luruhar;\"\n    ],\n    [\n        0,\n        \"&ldrdhar;\"\n    ],\n    [\n        0,\n        \"&ruluhar;\"\n    ],\n    [\n        0,\n        \"&rdldhar;\"\n    ],\n    [\n        0,\n        \"&lharul;\"\n    ],\n    [\n        0,\n        \"&llhard;\"\n    ],\n    [\n        0,\n        \"&rharul;\"\n    ],\n    [\n        0,\n        \"&lrhard;\"\n    ],\n    [\n        0,\n        \"&udhar;\"\n    ],\n    [\n        0,\n        \"&duhar;\"\n    ],\n    [\n        0,\n        \"&RoundImplies;\"\n    ],\n    [\n        0,\n        \"&erarr;\"\n    ],\n    [\n        0,\n        \"&simrarr;\"\n    ],\n    [\n        0,\n        \"&larrsim;\"\n    ],\n    [\n        0,\n        \"&rarrsim;\"\n    ],\n    [\n        0,\n        \"&rarrap;\"\n    ],\n    [\n        0,\n        \"&ltlarr;\"\n    ],\n    [\n        1,\n        \"&gtrarr;\"\n    ],\n    [\n        0,\n        \"&subrarr;\"\n    ],\n    [\n        1,\n        \"&suplarr;\"\n    ],\n    [\n        0,\n        \"&lfisht;\"\n    ],\n    [\n        0,\n        \"&rfisht;\"\n    ],\n    [\n        0,\n        \"&ufisht;\"\n    ],\n    [\n        0,\n        \"&dfisht;\"\n    ],\n    [\n        5,\n        \"&lopar;\"\n    ],\n    [\n        0,\n        \"&ropar;\"\n    ],\n    [\n        4,\n        \"&lbrke;\"\n    ],\n    [\n        0,\n        \"&rbrke;\"\n    ],\n    [\n        0,\n        \"&lbrkslu;\"\n    ],\n    [\n        0,\n        \"&rbrksld;\"\n    ],\n    [\n        0,\n        \"&lbrksld;\"\n    ],\n    [\n        0,\n        \"&rbrkslu;\"\n    ],\n    [\n        0,\n        \"&langd;\"\n    ],\n    [\n        0,\n        \"&rangd;\"\n    ],\n    [\n        0,\n        \"&lparlt;\"\n    ],\n    [\n        0,\n        \"&rpargt;\"\n    ],\n    [\n        0,\n        \"&gtlPar;\"\n    ],\n    [\n        0,\n        \"&ltrPar;\"\n    ],\n    [\n        3,\n        \"&vzigzag;\"\n    ],\n    [\n        1,\n        \"&vangrt;\"\n    ],\n    [\n        0,\n        \"&angrtvbd;\"\n    ],\n    [\n        6,\n        \"&ange;\"\n    ],\n    [\n        0,\n        \"&range;\"\n    ],\n    [\n        0,\n        \"&dwangle;\"\n    ],\n    [\n        0,\n        \"&uwangle;\"\n    ],\n    [\n        0,\n        \"&angmsdaa;\"\n    ],\n    [\n        0,\n        \"&angmsdab;\"\n    ],\n    [\n        0,\n        \"&angmsdac;\"\n    ],\n    [\n        0,\n        \"&angmsdad;\"\n    ],\n    [\n        0,\n        \"&angmsdae;\"\n    ],\n    [\n        0,\n        \"&angmsdaf;\"\n    ],\n    [\n        0,\n        \"&angmsdag;\"\n    ],\n    [\n        0,\n        \"&angmsdah;\"\n    ],\n    [\n        0,\n        \"&bemptyv;\"\n    ],\n    [\n        0,\n        \"&demptyv;\"\n    ],\n    [\n        0,\n        \"&cemptyv;\"\n    ],\n    [\n        0,\n        \"&raemptyv;\"\n    ],\n    [\n        0,\n        \"&laemptyv;\"\n    ],\n    [\n        0,\n        \"&ohbar;\"\n    ],\n    [\n        0,\n        \"&omid;\"\n    ],\n    [\n        0,\n        \"&opar;\"\n    ],\n    [\n        1,\n        \"&operp;\"\n    ],\n    [\n        1,\n        \"&olcross;\"\n    ],\n    [\n        0,\n        \"&odsold;\"\n    ],\n    [\n        1,\n        \"&olcir;\"\n    ],\n    [\n        0,\n        \"&ofcir;\"\n    ],\n    [\n        0,\n        \"&olt;\"\n    ],\n    [\n        0,\n        \"&ogt;\"\n    ],\n    [\n        0,\n        \"&cirscir;\"\n    ],\n    [\n        0,\n        \"&cirE;\"\n    ],\n    [\n        0,\n        \"&solb;\"\n    ],\n    [\n        0,\n        \"&bsolb;\"\n    ],\n    [\n        3,\n        \"&boxbox;\"\n    ],\n    [\n        3,\n        \"&trisb;\"\n    ],\n    [\n        0,\n        \"&rtriltri;\"\n    ],\n    [\n        0,\n        {\n            v: \"&LeftTriangleBar;\",\n            n: 824,\n            o: \"&NotLeftTriangleBar;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&RightTriangleBar;\",\n            n: 824,\n            o: \"&NotRightTriangleBar;\"\n        }\n    ],\n    [\n        11,\n        \"&iinfin;\"\n    ],\n    [\n        0,\n        \"&infintie;\"\n    ],\n    [\n        0,\n        \"&nvinfin;\"\n    ],\n    [\n        4,\n        \"&eparsl;\"\n    ],\n    [\n        0,\n        \"&smeparsl;\"\n    ],\n    [\n        0,\n        \"&eqvparsl;\"\n    ],\n    [\n        5,\n        \"&blacklozenge;\"\n    ],\n    [\n        8,\n        \"&RuleDelayed;\"\n    ],\n    [\n        1,\n        \"&dsol;\"\n    ],\n    [\n        9,\n        \"&bigodot;\"\n    ],\n    [\n        0,\n        \"&bigoplus;\"\n    ],\n    [\n        0,\n        \"&bigotimes;\"\n    ],\n    [\n        1,\n        \"&biguplus;\"\n    ],\n    [\n        1,\n        \"&bigsqcup;\"\n    ],\n    [\n        5,\n        \"&iiiint;\"\n    ],\n    [\n        0,\n        \"&fpartint;\"\n    ],\n    [\n        2,\n        \"&cirfnint;\"\n    ],\n    [\n        0,\n        \"&awint;\"\n    ],\n    [\n        0,\n        \"&rppolint;\"\n    ],\n    [\n        0,\n        \"&scpolint;\"\n    ],\n    [\n        0,\n        \"&npolint;\"\n    ],\n    [\n        0,\n        \"&pointint;\"\n    ],\n    [\n        0,\n        \"&quatint;\"\n    ],\n    [\n        0,\n        \"&intlarhk;\"\n    ],\n    [\n        10,\n        \"&pluscir;\"\n    ],\n    [\n        0,\n        \"&plusacir;\"\n    ],\n    [\n        0,\n        \"&simplus;\"\n    ],\n    [\n        0,\n        \"&plusdu;\"\n    ],\n    [\n        0,\n        \"&plussim;\"\n    ],\n    [\n        0,\n        \"&plustwo;\"\n    ],\n    [\n        1,\n        \"&mcomma;\"\n    ],\n    [\n        0,\n        \"&minusdu;\"\n    ],\n    [\n        2,\n        \"&loplus;\"\n    ],\n    [\n        0,\n        \"&roplus;\"\n    ],\n    [\n        0,\n        \"&Cross;\"\n    ],\n    [\n        0,\n        \"&timesd;\"\n    ],\n    [\n        0,\n        \"&timesbar;\"\n    ],\n    [\n        1,\n        \"&smashp;\"\n    ],\n    [\n        0,\n        \"&lotimes;\"\n    ],\n    [\n        0,\n        \"&rotimes;\"\n    ],\n    [\n        0,\n        \"&otimesas;\"\n    ],\n    [\n        0,\n        \"&Otimes;\"\n    ],\n    [\n        0,\n        \"&odiv;\"\n    ],\n    [\n        0,\n        \"&triplus;\"\n    ],\n    [\n        0,\n        \"&triminus;\"\n    ],\n    [\n        0,\n        \"&tritime;\"\n    ],\n    [\n        0,\n        \"&intprod;\"\n    ],\n    [\n        2,\n        \"&amalg;\"\n    ],\n    [\n        0,\n        \"&capdot;\"\n    ],\n    [\n        1,\n        \"&ncup;\"\n    ],\n    [\n        0,\n        \"&ncap;\"\n    ],\n    [\n        0,\n        \"&capand;\"\n    ],\n    [\n        0,\n        \"&cupor;\"\n    ],\n    [\n        0,\n        \"&cupcap;\"\n    ],\n    [\n        0,\n        \"&capcup;\"\n    ],\n    [\n        0,\n        \"&cupbrcap;\"\n    ],\n    [\n        0,\n        \"&capbrcup;\"\n    ],\n    [\n        0,\n        \"&cupcup;\"\n    ],\n    [\n        0,\n        \"&capcap;\"\n    ],\n    [\n        0,\n        \"&ccups;\"\n    ],\n    [\n        0,\n        \"&ccaps;\"\n    ],\n    [\n        2,\n        \"&ccupssm;\"\n    ],\n    [\n        2,\n        \"&And;\"\n    ],\n    [\n        0,\n        \"&Or;\"\n    ],\n    [\n        0,\n        \"&andand;\"\n    ],\n    [\n        0,\n        \"&oror;\"\n    ],\n    [\n        0,\n        \"&orslope;\"\n    ],\n    [\n        0,\n        \"&andslope;\"\n    ],\n    [\n        1,\n        \"&andv;\"\n    ],\n    [\n        0,\n        \"&orv;\"\n    ],\n    [\n        0,\n        \"&andd;\"\n    ],\n    [\n        0,\n        \"&ord;\"\n    ],\n    [\n        1,\n        \"&wedbar;\"\n    ],\n    [\n        6,\n        \"&sdote;\"\n    ],\n    [\n        3,\n        \"&simdot;\"\n    ],\n    [\n        2,\n        {\n            v: \"&congdot;\",\n            n: 824,\n            o: \"&ncongdot;\"\n        }\n    ],\n    [\n        0,\n        \"&easter;\"\n    ],\n    [\n        0,\n        \"&apacir;\"\n    ],\n    [\n        0,\n        {\n            v: \"&apE;\",\n            n: 824,\n            o: \"&napE;\"\n        }\n    ],\n    [\n        0,\n        \"&eplus;\"\n    ],\n    [\n        0,\n        \"&pluse;\"\n    ],\n    [\n        0,\n        \"&Esim;\"\n    ],\n    [\n        0,\n        \"&Colone;\"\n    ],\n    [\n        0,\n        \"&Equal;\"\n    ],\n    [\n        1,\n        \"&ddotseq;\"\n    ],\n    [\n        0,\n        \"&equivDD;\"\n    ],\n    [\n        0,\n        \"&ltcir;\"\n    ],\n    [\n        0,\n        \"&gtcir;\"\n    ],\n    [\n        0,\n        \"&ltquest;\"\n    ],\n    [\n        0,\n        \"&gtquest;\"\n    ],\n    [\n        0,\n        {\n            v: \"&leqslant;\",\n            n: 824,\n            o: \"&nleqslant;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&geqslant;\",\n            n: 824,\n            o: \"&ngeqslant;\"\n        }\n    ],\n    [\n        0,\n        \"&lesdot;\"\n    ],\n    [\n        0,\n        \"&gesdot;\"\n    ],\n    [\n        0,\n        \"&lesdoto;\"\n    ],\n    [\n        0,\n        \"&gesdoto;\"\n    ],\n    [\n        0,\n        \"&lesdotor;\"\n    ],\n    [\n        0,\n        \"&gesdotol;\"\n    ],\n    [\n        0,\n        \"&lap;\"\n    ],\n    [\n        0,\n        \"&gap;\"\n    ],\n    [\n        0,\n        \"&lne;\"\n    ],\n    [\n        0,\n        \"&gne;\"\n    ],\n    [\n        0,\n        \"&lnap;\"\n    ],\n    [\n        0,\n        \"&gnap;\"\n    ],\n    [\n        0,\n        \"&lEg;\"\n    ],\n    [\n        0,\n        \"&gEl;\"\n    ],\n    [\n        0,\n        \"&lsime;\"\n    ],\n    [\n        0,\n        \"&gsime;\"\n    ],\n    [\n        0,\n        \"&lsimg;\"\n    ],\n    [\n        0,\n        \"&gsiml;\"\n    ],\n    [\n        0,\n        \"&lgE;\"\n    ],\n    [\n        0,\n        \"&glE;\"\n    ],\n    [\n        0,\n        \"&lesges;\"\n    ],\n    [\n        0,\n        \"&gesles;\"\n    ],\n    [\n        0,\n        \"&els;\"\n    ],\n    [\n        0,\n        \"&egs;\"\n    ],\n    [\n        0,\n        \"&elsdot;\"\n    ],\n    [\n        0,\n        \"&egsdot;\"\n    ],\n    [\n        0,\n        \"&el;\"\n    ],\n    [\n        0,\n        \"&eg;\"\n    ],\n    [\n        2,\n        \"&siml;\"\n    ],\n    [\n        0,\n        \"&simg;\"\n    ],\n    [\n        0,\n        \"&simlE;\"\n    ],\n    [\n        0,\n        \"&simgE;\"\n    ],\n    [\n        0,\n        {\n            v: \"&LessLess;\",\n            n: 824,\n            o: \"&NotNestedLessLess;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&GreaterGreater;\",\n            n: 824,\n            o: \"&NotNestedGreaterGreater;\"\n        }\n    ],\n    [\n        1,\n        \"&glj;\"\n    ],\n    [\n        0,\n        \"&gla;\"\n    ],\n    [\n        0,\n        \"&ltcc;\"\n    ],\n    [\n        0,\n        \"&gtcc;\"\n    ],\n    [\n        0,\n        \"&lescc;\"\n    ],\n    [\n        0,\n        \"&gescc;\"\n    ],\n    [\n        0,\n        \"&smt;\"\n    ],\n    [\n        0,\n        \"&lat;\"\n    ],\n    [\n        0,\n        {\n            v: \"&smte;\",\n            n: 65024,\n            o: \"&smtes;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&late;\",\n            n: 65024,\n            o: \"&lates;\"\n        }\n    ],\n    [\n        0,\n        \"&bumpE;\"\n    ],\n    [\n        0,\n        {\n            v: \"&PrecedesEqual;\",\n            n: 824,\n            o: \"&NotPrecedesEqual;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&sce;\",\n            n: 824,\n            o: \"&NotSucceedsEqual;\"\n        }\n    ],\n    [\n        2,\n        \"&prE;\"\n    ],\n    [\n        0,\n        \"&scE;\"\n    ],\n    [\n        0,\n        \"&precneqq;\"\n    ],\n    [\n        0,\n        \"&scnE;\"\n    ],\n    [\n        0,\n        \"&prap;\"\n    ],\n    [\n        0,\n        \"&scap;\"\n    ],\n    [\n        0,\n        \"&precnapprox;\"\n    ],\n    [\n        0,\n        \"&scnap;\"\n    ],\n    [\n        0,\n        \"&Pr;\"\n    ],\n    [\n        0,\n        \"&Sc;\"\n    ],\n    [\n        0,\n        \"&subdot;\"\n    ],\n    [\n        0,\n        \"&supdot;\"\n    ],\n    [\n        0,\n        \"&subplus;\"\n    ],\n    [\n        0,\n        \"&supplus;\"\n    ],\n    [\n        0,\n        \"&submult;\"\n    ],\n    [\n        0,\n        \"&supmult;\"\n    ],\n    [\n        0,\n        \"&subedot;\"\n    ],\n    [\n        0,\n        \"&supedot;\"\n    ],\n    [\n        0,\n        {\n            v: \"&subE;\",\n            n: 824,\n            o: \"&nsubE;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&supE;\",\n            n: 824,\n            o: \"&nsupE;\"\n        }\n    ],\n    [\n        0,\n        \"&subsim;\"\n    ],\n    [\n        0,\n        \"&supsim;\"\n    ],\n    [\n        2,\n        {\n            v: \"&subnE;\",\n            n: 65024,\n            o: \"&varsubsetneqq;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&supnE;\",\n            n: 65024,\n            o: \"&varsupsetneqq;\"\n        }\n    ],\n    [\n        2,\n        \"&csub;\"\n    ],\n    [\n        0,\n        \"&csup;\"\n    ],\n    [\n        0,\n        \"&csube;\"\n    ],\n    [\n        0,\n        \"&csupe;\"\n    ],\n    [\n        0,\n        \"&subsup;\"\n    ],\n    [\n        0,\n        \"&supsub;\"\n    ],\n    [\n        0,\n        \"&subsub;\"\n    ],\n    [\n        0,\n        \"&supsup;\"\n    ],\n    [\n        0,\n        \"&suphsub;\"\n    ],\n    [\n        0,\n        \"&supdsub;\"\n    ],\n    [\n        0,\n        \"&forkv;\"\n    ],\n    [\n        0,\n        \"&topfork;\"\n    ],\n    [\n        0,\n        \"&mlcp;\"\n    ],\n    [\n        8,\n        \"&Dashv;\"\n    ],\n    [\n        1,\n        \"&Vdashl;\"\n    ],\n    [\n        0,\n        \"&Barv;\"\n    ],\n    [\n        0,\n        \"&vBar;\"\n    ],\n    [\n        0,\n        \"&vBarv;\"\n    ],\n    [\n        1,\n        \"&Vbar;\"\n    ],\n    [\n        0,\n        \"&Not;\"\n    ],\n    [\n        0,\n        \"&bNot;\"\n    ],\n    [\n        0,\n        \"&rnmid;\"\n    ],\n    [\n        0,\n        \"&cirmid;\"\n    ],\n    [\n        0,\n        \"&midcir;\"\n    ],\n    [\n        0,\n        \"&topcir;\"\n    ],\n    [\n        0,\n        \"&nhpar;\"\n    ],\n    [\n        0,\n        \"&parsim;\"\n    ],\n    [\n        9,\n        {\n            v: \"&parsl;\",\n            n: 8421,\n            o: \"&nparsl;\"\n        }\n    ],\n    [\n        44343,\n        {\n            n: new Map(/* #__PURE__ */ restoreDiff([\n                [\n                    56476,\n                    \"&Ascr;\"\n                ],\n                [\n                    1,\n                    \"&Cscr;\"\n                ],\n                [\n                    0,\n                    \"&Dscr;\"\n                ],\n                [\n                    2,\n                    \"&Gscr;\"\n                ],\n                [\n                    2,\n                    \"&Jscr;\"\n                ],\n                [\n                    0,\n                    \"&Kscr;\"\n                ],\n                [\n                    2,\n                    \"&Nscr;\"\n                ],\n                [\n                    0,\n                    \"&Oscr;\"\n                ],\n                [\n                    0,\n                    \"&Pscr;\"\n                ],\n                [\n                    0,\n                    \"&Qscr;\"\n                ],\n                [\n                    1,\n                    \"&Sscr;\"\n                ],\n                [\n                    0,\n                    \"&Tscr;\"\n                ],\n                [\n                    0,\n                    \"&Uscr;\"\n                ],\n                [\n                    0,\n                    \"&Vscr;\"\n                ],\n                [\n                    0,\n                    \"&Wscr;\"\n                ],\n                [\n                    0,\n                    \"&Xscr;\"\n                ],\n                [\n                    0,\n                    \"&Yscr;\"\n                ],\n                [\n                    0,\n                    \"&Zscr;\"\n                ],\n                [\n                    0,\n                    \"&ascr;\"\n                ],\n                [\n                    0,\n                    \"&bscr;\"\n                ],\n                [\n                    0,\n                    \"&cscr;\"\n                ],\n                [\n                    0,\n                    \"&dscr;\"\n                ],\n                [\n                    1,\n                    \"&fscr;\"\n                ],\n                [\n                    1,\n                    \"&hscr;\"\n                ],\n                [\n                    0,\n                    \"&iscr;\"\n                ],\n                [\n                    0,\n                    \"&jscr;\"\n                ],\n                [\n                    0,\n                    \"&kscr;\"\n                ],\n                [\n                    0,\n                    \"&lscr;\"\n                ],\n                [\n                    0,\n                    \"&mscr;\"\n                ],\n                [\n                    0,\n                    \"&nscr;\"\n                ],\n                [\n                    1,\n                    \"&pscr;\"\n                ],\n                [\n                    0,\n                    \"&qscr;\"\n                ],\n                [\n                    0,\n                    \"&rscr;\"\n                ],\n                [\n                    0,\n                    \"&sscr;\"\n                ],\n                [\n                    0,\n                    \"&tscr;\"\n                ],\n                [\n                    0,\n                    \"&uscr;\"\n                ],\n                [\n                    0,\n                    \"&vscr;\"\n                ],\n                [\n                    0,\n                    \"&wscr;\"\n                ],\n                [\n                    0,\n                    \"&xscr;\"\n                ],\n                [\n                    0,\n                    \"&yscr;\"\n                ],\n                [\n                    0,\n                    \"&zscr;\"\n                ],\n                [\n                    52,\n                    \"&Afr;\"\n                ],\n                [\n                    0,\n                    \"&Bfr;\"\n                ],\n                [\n                    1,\n                    \"&Dfr;\"\n                ],\n                [\n                    0,\n                    \"&Efr;\"\n                ],\n                [\n                    0,\n                    \"&Ffr;\"\n                ],\n                [\n                    0,\n                    \"&Gfr;\"\n                ],\n                [\n                    2,\n                    \"&Jfr;\"\n                ],\n                [\n                    0,\n                    \"&Kfr;\"\n                ],\n                [\n                    0,\n                    \"&Lfr;\"\n                ],\n                [\n                    0,\n                    \"&Mfr;\"\n                ],\n                [\n                    0,\n                    \"&Nfr;\"\n                ],\n                [\n                    0,\n                    \"&Ofr;\"\n                ],\n                [\n                    0,\n                    \"&Pfr;\"\n                ],\n                [\n                    0,\n                    \"&Qfr;\"\n                ],\n                [\n                    1,\n                    \"&Sfr;\"\n                ],\n                [\n                    0,\n                    \"&Tfr;\"\n                ],\n                [\n                    0,\n                    \"&Ufr;\"\n                ],\n                [\n                    0,\n                    \"&Vfr;\"\n                ],\n                [\n                    0,\n                    \"&Wfr;\"\n                ],\n                [\n                    0,\n                    \"&Xfr;\"\n                ],\n                [\n                    0,\n                    \"&Yfr;\"\n                ],\n                [\n                    1,\n                    \"&afr;\"\n                ],\n                [\n                    0,\n                    \"&bfr;\"\n                ],\n                [\n                    0,\n                    \"&cfr;\"\n                ],\n                [\n                    0,\n                    \"&dfr;\"\n                ],\n                [\n                    0,\n                    \"&efr;\"\n                ],\n                [\n                    0,\n                    \"&ffr;\"\n                ],\n                [\n                    0,\n                    \"&gfr;\"\n                ],\n                [\n                    0,\n                    \"&hfr;\"\n                ],\n                [\n                    0,\n                    \"&ifr;\"\n                ],\n                [\n                    0,\n                    \"&jfr;\"\n                ],\n                [\n                    0,\n                    \"&kfr;\"\n                ],\n                [\n                    0,\n                    \"&lfr;\"\n                ],\n                [\n                    0,\n                    \"&mfr;\"\n                ],\n                [\n                    0,\n                    \"&nfr;\"\n                ],\n                [\n                    0,\n                    \"&ofr;\"\n                ],\n                [\n                    0,\n                    \"&pfr;\"\n                ],\n                [\n                    0,\n                    \"&qfr;\"\n                ],\n                [\n                    0,\n                    \"&rfr;\"\n                ],\n                [\n                    0,\n                    \"&sfr;\"\n                ],\n                [\n                    0,\n                    \"&tfr;\"\n                ],\n                [\n                    0,\n                    \"&ufr;\"\n                ],\n                [\n                    0,\n                    \"&vfr;\"\n                ],\n                [\n                    0,\n                    \"&wfr;\"\n                ],\n                [\n                    0,\n                    \"&xfr;\"\n                ],\n                [\n                    0,\n                    \"&yfr;\"\n                ],\n                [\n                    0,\n                    \"&zfr;\"\n                ],\n                [\n                    0,\n                    \"&Aopf;\"\n                ],\n                [\n                    0,\n                    \"&Bopf;\"\n                ],\n                [\n                    1,\n                    \"&Dopf;\"\n                ],\n                [\n                    0,\n                    \"&Eopf;\"\n                ],\n                [\n                    0,\n                    \"&Fopf;\"\n                ],\n                [\n                    0,\n                    \"&Gopf;\"\n                ],\n                [\n                    1,\n                    \"&Iopf;\"\n                ],\n                [\n                    0,\n                    \"&Jopf;\"\n                ],\n                [\n                    0,\n                    \"&Kopf;\"\n                ],\n                [\n                    0,\n                    \"&Lopf;\"\n                ],\n                [\n                    0,\n                    \"&Mopf;\"\n                ],\n                [\n                    1,\n                    \"&Oopf;\"\n                ],\n                [\n                    3,\n                    \"&Sopf;\"\n                ],\n                [\n                    0,\n                    \"&Topf;\"\n                ],\n                [\n                    0,\n                    \"&Uopf;\"\n                ],\n                [\n                    0,\n                    \"&Vopf;\"\n                ],\n                [\n                    0,\n                    \"&Wopf;\"\n                ],\n                [\n                    0,\n                    \"&Xopf;\"\n                ],\n                [\n                    0,\n                    \"&Yopf;\"\n                ],\n                [\n                    1,\n                    \"&aopf;\"\n                ],\n                [\n                    0,\n                    \"&bopf;\"\n                ],\n                [\n                    0,\n                    \"&copf;\"\n                ],\n                [\n                    0,\n                    \"&dopf;\"\n                ],\n                [\n                    0,\n                    \"&eopf;\"\n                ],\n                [\n                    0,\n                    \"&fopf;\"\n                ],\n                [\n                    0,\n                    \"&gopf;\"\n                ],\n                [\n                    0,\n                    \"&hopf;\"\n                ],\n                [\n                    0,\n                    \"&iopf;\"\n                ],\n                [\n                    0,\n                    \"&jopf;\"\n                ],\n                [\n                    0,\n                    \"&kopf;\"\n                ],\n                [\n                    0,\n                    \"&lopf;\"\n                ],\n                [\n                    0,\n                    \"&mopf;\"\n                ],\n                [\n                    0,\n                    \"&nopf;\"\n                ],\n                [\n                    0,\n                    \"&oopf;\"\n                ],\n                [\n                    0,\n                    \"&popf;\"\n                ],\n                [\n                    0,\n                    \"&qopf;\"\n                ],\n                [\n                    0,\n                    \"&ropf;\"\n                ],\n                [\n                    0,\n                    \"&sopf;\"\n                ],\n                [\n                    0,\n                    \"&topf;\"\n                ],\n                [\n                    0,\n                    \"&uopf;\"\n                ],\n                [\n                    0,\n                    \"&vopf;\"\n                ],\n                [\n                    0,\n                    \"&wopf;\"\n                ],\n                [\n                    0,\n                    \"&xopf;\"\n                ],\n                [\n                    0,\n                    \"&yopf;\"\n                ],\n                [\n                    0,\n                    \"&zopf;\"\n                ]\n            ]))\n        }\n    ],\n    [\n        8906,\n        \"&fflig;\"\n    ],\n    [\n        0,\n        \"&filig;\"\n    ],\n    [\n        0,\n        \"&fllig;\"\n    ],\n    [\n        0,\n        \"&ffilig;\"\n    ],\n    [\n        0,\n        \"&ffllig;\"\n    ]\n]))); //# sourceMappingURL=encode-html.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/entities/lib/esm/generated/encode-html.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/entities/lib/esm/index.js":
/*!************************************************!*\
  !*** ./node_modules/entities/lib/esm/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DecodingMode: () => (/* reexport safe */ _decode_js__WEBPACK_IMPORTED_MODULE_0__.DecodingMode),\n/* harmony export */   EncodingMode: () => (/* binding */ EncodingMode),\n/* harmony export */   EntityDecoder: () => (/* reexport safe */ _decode_js__WEBPACK_IMPORTED_MODULE_0__.EntityDecoder),\n/* harmony export */   EntityLevel: () => (/* binding */ EntityLevel),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   decodeHTML: () => (/* reexport safe */ _decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeHTML),\n/* harmony export */   decodeHTML4: () => (/* reexport safe */ _decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeHTML),\n/* harmony export */   decodeHTML4Strict: () => (/* reexport safe */ _decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeHTMLStrict),\n/* harmony export */   decodeHTML5: () => (/* reexport safe */ _decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeHTML),\n/* harmony export */   decodeHTML5Strict: () => (/* reexport safe */ _decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeHTMLStrict),\n/* harmony export */   decodeHTMLAttribute: () => (/* reexport safe */ _decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeHTMLAttribute),\n/* harmony export */   decodeHTMLStrict: () => (/* reexport safe */ _decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeHTMLStrict),\n/* harmony export */   decodeStrict: () => (/* binding */ decodeStrict),\n/* harmony export */   decodeXML: () => (/* reexport safe */ _decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeXML),\n/* harmony export */   decodeXMLStrict: () => (/* reexport safe */ _decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeXML),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   encodeHTML: () => (/* reexport safe */ _encode_js__WEBPACK_IMPORTED_MODULE_1__.encodeHTML),\n/* harmony export */   encodeHTML4: () => (/* reexport safe */ _encode_js__WEBPACK_IMPORTED_MODULE_1__.encodeHTML),\n/* harmony export */   encodeHTML5: () => (/* reexport safe */ _encode_js__WEBPACK_IMPORTED_MODULE_1__.encodeHTML),\n/* harmony export */   encodeNonAsciiHTML: () => (/* reexport safe */ _encode_js__WEBPACK_IMPORTED_MODULE_1__.encodeNonAsciiHTML),\n/* harmony export */   encodeXML: () => (/* reexport safe */ _escape_js__WEBPACK_IMPORTED_MODULE_2__.encodeXML),\n/* harmony export */   escape: () => (/* reexport safe */ _escape_js__WEBPACK_IMPORTED_MODULE_2__.escape),\n/* harmony export */   escapeAttribute: () => (/* reexport safe */ _escape_js__WEBPACK_IMPORTED_MODULE_2__.escapeAttribute),\n/* harmony export */   escapeText: () => (/* reexport safe */ _escape_js__WEBPACK_IMPORTED_MODULE_2__.escapeText),\n/* harmony export */   escapeUTF8: () => (/* reexport safe */ _escape_js__WEBPACK_IMPORTED_MODULE_2__.escapeUTF8)\n/* harmony export */ });\n/* harmony import */ var _decode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./decode.js */ \"(rsc)/./node_modules/entities/lib/esm/decode.js\");\n/* harmony import */ var _encode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encode.js */ \"(rsc)/./node_modules/entities/lib/esm/encode.js\");\n/* harmony import */ var _escape_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./escape.js */ \"(rsc)/./node_modules/entities/lib/esm/escape.js\");\n\n\n\n/** The level of entities to support. */ var EntityLevel;\n(function(EntityLevel) {\n    /** Support only XML entities. */ EntityLevel[EntityLevel[\"XML\"] = 0] = \"XML\";\n    /** Support HTML entities, which are a superset of XML entities. */ EntityLevel[EntityLevel[\"HTML\"] = 1] = \"HTML\";\n})(EntityLevel || (EntityLevel = {}));\nvar EncodingMode;\n(function(EncodingMode) {\n    /**\n     * The output is UTF-8 encoded. Only characters that need escaping within\n     * XML will be escaped.\n     */ EncodingMode[EncodingMode[\"UTF8\"] = 0] = \"UTF8\";\n    /**\n     * The output consists only of ASCII characters. Characters that need\n     * escaping within HTML, and characters that aren't ASCII characters will\n     * be escaped.\n     */ EncodingMode[EncodingMode[\"ASCII\"] = 1] = \"ASCII\";\n    /**\n     * Encode all characters that have an equivalent entity, as well as all\n     * characters that are not ASCII characters.\n     */ EncodingMode[EncodingMode[\"Extensive\"] = 2] = \"Extensive\";\n    /**\n     * Encode all characters that have to be escaped in HTML attributes,\n     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n     */ EncodingMode[EncodingMode[\"Attribute\"] = 3] = \"Attribute\";\n    /**\n     * Encode all characters that have to be escaped in HTML text,\n     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n     */ EncodingMode[EncodingMode[\"Text\"] = 4] = \"Text\";\n})(EncodingMode || (EncodingMode = {}));\n/**\n * Decodes a string with entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n */ function decode(data, options = EntityLevel.XML) {\n    const level = typeof options === \"number\" ? options : options.level;\n    if (level === EntityLevel.HTML) {\n        const mode = typeof options === \"object\" ? options.mode : undefined;\n        return (0,_decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeHTML)(data, mode);\n    }\n    return (0,_decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeXML)(data);\n}\n/**\n * Decodes a string with entities. Does not allow missing trailing semicolons for entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n * @deprecated Use `decode` with the `mode` set to `Strict`.\n */ function decodeStrict(data, options = EntityLevel.XML) {\n    var _a;\n    const opts = typeof options === \"number\" ? {\n        level: options\n    } : options;\n    (_a = opts.mode) !== null && _a !== void 0 ? _a : opts.mode = _decode_js__WEBPACK_IMPORTED_MODULE_0__.DecodingMode.Strict;\n    return decode(data, opts);\n}\n/**\n * Encodes a string with entities.\n *\n * @param data String to encode.\n * @param options Encoding options.\n */ function encode(data, options = EntityLevel.XML) {\n    const opts = typeof options === \"number\" ? {\n        level: options\n    } : options;\n    // Mode `UTF8` just escapes XML entities\n    if (opts.mode === EncodingMode.UTF8) return (0,_escape_js__WEBPACK_IMPORTED_MODULE_2__.escapeUTF8)(data);\n    if (opts.mode === EncodingMode.Attribute) return (0,_escape_js__WEBPACK_IMPORTED_MODULE_2__.escapeAttribute)(data);\n    if (opts.mode === EncodingMode.Text) return (0,_escape_js__WEBPACK_IMPORTED_MODULE_2__.escapeText)(data);\n    if (opts.level === EntityLevel.HTML) {\n        if (opts.mode === EncodingMode.ASCII) {\n            return (0,_encode_js__WEBPACK_IMPORTED_MODULE_1__.encodeNonAsciiHTML)(data);\n        }\n        return (0,_encode_js__WEBPACK_IMPORTED_MODULE_1__.encodeHTML)(data);\n    }\n    // ASCII and Extensive are equivalent\n    return (0,_escape_js__WEBPACK_IMPORTED_MODULE_2__.encodeXML)(data);\n}\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/entities/lib/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/html-to-text/lib/html-to-text.mjs":
/*!********************************************************!*\
  !*** ./node_modules/html-to-text/lib/html-to-text.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compile: () => (/* binding */ compile),\n/* harmony export */   convert: () => (/* binding */ convert),\n/* harmony export */   htmlToText: () => (/* binding */ convert)\n/* harmony export */ });\n/* harmony import */ var _selderee_plugin_htmlparser2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @selderee/plugin-htmlparser2 */ \"(rsc)/./node_modules/@selderee/plugin-htmlparser2/lib/hp2-builder.mjs\");\n/* harmony import */ var htmlparser2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! htmlparser2 */ \"(rsc)/./node_modules/htmlparser2/lib/esm/index.js\");\n/* harmony import */ var selderee__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! selderee */ \"(rsc)/./node_modules/selderee/lib/selderee.mjs\");\n/* harmony import */ var deepmerge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! deepmerge */ \"(rsc)/./node_modules/deepmerge/dist/cjs.js\");\n/* harmony import */ var dom_serializer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! dom-serializer */ \"(rsc)/./node_modules/dom-serializer/lib/esm/index.js\");\n\n\n\n\n\n/**\n * Make a recursive function that will only run to a given depth\n * and switches to an alternative function at that depth. \\\n * No limitation if `n` is `undefined` (Just wraps `f` in that case).\n *\n * @param   { number | undefined } n   Allowed depth of recursion. `undefined` for no limitation.\n * @param   { Function }           f   Function that accepts recursive callback as the first argument.\n * @param   { Function }           [g] Function to run instead, when maximum depth was reached. Do nothing by default.\n * @returns { Function }\n */ function limitedDepthRecursive(n, f, g = ()=>undefined) {\n    if (n === undefined) {\n        const f1 = function(...args) {\n            return f(f1, ...args);\n        };\n        return f1;\n    }\n    if (n >= 0) {\n        return function(...args) {\n            return f(limitedDepthRecursive(n - 1, f, g), ...args);\n        };\n    }\n    return g;\n}\n/**\n * Return the same string or a substring with\n * the given character occurrences removed from each side.\n *\n * @param   { string } str  A string to trim.\n * @param   { string } char A character to be trimmed.\n * @returns { string }\n */ function trimCharacter(str, char) {\n    let start = 0;\n    let end = str.length;\n    while(start < end && str[start] === char){\n        ++start;\n    }\n    while(end > start && str[end - 1] === char){\n        --end;\n    }\n    return start > 0 || end < str.length ? str.substring(start, end) : str;\n}\n/**\n * Return the same string or a substring with\n * the given character occurrences removed from the end only.\n *\n * @param   { string } str  A string to trim.\n * @param   { string } char A character to be trimmed.\n * @returns { string }\n */ function trimCharacterEnd(str, char) {\n    let end = str.length;\n    while(end > 0 && str[end - 1] === char){\n        --end;\n    }\n    return end < str.length ? str.substring(0, end) : str;\n}\n/**\n * Return a new string will all characters replaced with unicode escape sequences.\n * This extreme kind of escaping can used to be safely compose regular expressions.\n *\n * @param { string } str A string to escape.\n * @returns { string } A string of unicode escape sequences.\n */ function unicodeEscape(str) {\n    return str.replace(/[\\s\\S]/g, (c)=>\"\\\\u\" + c.charCodeAt().toString(16).padStart(4, \"0\"));\n}\n/**\n * Deduplicate an array by a given key callback.\n * Item properties are merged recursively and with the preference for last defined values.\n * Of items with the same key, merged item takes the place of the last item,\n * others are omitted.\n *\n * @param { any[] } items An array to deduplicate.\n * @param { (x: any) => string } getKey Callback to get a value that distinguishes unique items.\n * @returns { any[] }\n */ function mergeDuplicatesPreferLast(items, getKey) {\n    const map = new Map();\n    for(let i = items.length; i-- > 0;){\n        const item = items[i];\n        const key = getKey(item);\n        map.set(key, map.has(key) ? deepmerge__WEBPACK_IMPORTED_MODULE_2__(item, map.get(key), {\n            arrayMerge: overwriteMerge$1\n        }) : item);\n    }\n    return [\n        ...map.values()\n    ].reverse();\n}\nconst overwriteMerge$1 = (acc, src, options)=>[\n        ...src\n    ];\n/**\n * Get a nested property from an object.\n *\n * @param   { object }   obj  The object to query for the value.\n * @param   { string[] } path The path to the property.\n * @returns { any }\n */ function get(obj, path) {\n    for (const key of path){\n        if (!obj) {\n            return undefined;\n        }\n        obj = obj[key];\n    }\n    return obj;\n}\n/**\n * Convert a number into alphabetic sequence representation (Sequence without zeroes).\n *\n * For example: `a, ..., z, aa, ..., zz, aaa, ...`.\n *\n * @param   { number } num              Number to convert. Must be >= 1.\n * @param   { string } [baseChar = 'a'] Character for 1 in the sequence.\n * @param   { number } [base = 26]      Number of characters in the sequence.\n * @returns { string }\n */ function numberToLetterSequence(num, baseChar = \"a\", base = 26) {\n    const digits = [];\n    do {\n        num -= 1;\n        digits.push(num % base);\n        num = num / base >> 0; // quick `floor`\n    }while (num > 0);\n    const baseCode = baseChar.charCodeAt(0);\n    return digits.reverse().map((n)=>String.fromCharCode(baseCode + n)).join(\"\");\n}\nconst I = [\n    \"I\",\n    \"X\",\n    \"C\",\n    \"M\"\n];\nconst V = [\n    \"V\",\n    \"L\",\n    \"D\"\n];\n/**\n * Convert a number to it's Roman representation. No large numbers extension.\n *\n * @param   { number } num Number to convert. `0 < num <= 3999`.\n * @returns { string }\n */ function numberToRoman(num) {\n    return [\n        ...num + \"\"\n    ].map((n)=>+n).reverse().map((v, i)=>v % 5 < 4 ? (v < 5 ? \"\" : V[i]) + I[i].repeat(v % 5) : I[i] + (v < 5 ? V[i] : I[i + 1])).reverse().join(\"\");\n}\n/**\n * Helps to build text from words.\n */ class InlineTextBuilder {\n    /**\n   * Creates an instance of InlineTextBuilder.\n   *\n   * If `maxLineLength` is not provided then it is either `options.wordwrap` or unlimited.\n   *\n   * @param { Options } options           HtmlToText options.\n   * @param { number }  [ maxLineLength ] This builder will try to wrap text to fit this line length.\n   */ constructor(options, maxLineLength = undefined){\n        /** @type { string[][] } */ this.lines = [];\n        /** @type { string[] }   */ this.nextLineWords = [];\n        this.maxLineLength = maxLineLength || options.wordwrap || Number.MAX_VALUE;\n        this.nextLineAvailableChars = this.maxLineLength;\n        this.wrapCharacters = get(options, [\n            \"longWordSplit\",\n            \"wrapCharacters\"\n        ]) || [];\n        this.forceWrapOnLimit = get(options, [\n            \"longWordSplit\",\n            \"forceWrapOnLimit\"\n        ]) || false;\n        this.stashedSpace = false;\n        this.wordBreakOpportunity = false;\n    }\n    /**\n   * Add a new word.\n   *\n   * @param { string } word A word to add.\n   * @param { boolean } [noWrap] Don't wrap text even if the line is too long.\n   */ pushWord(word, noWrap = false) {\n        if (this.nextLineAvailableChars <= 0 && !noWrap) {\n            this.startNewLine();\n        }\n        const isLineStart = this.nextLineWords.length === 0;\n        const cost = word.length + (isLineStart ? 0 : 1);\n        if (cost <= this.nextLineAvailableChars || noWrap) {\n            this.nextLineWords.push(word);\n            this.nextLineAvailableChars -= cost;\n        } else {\n            // The word is moved to a new line - prefer to wrap between words.\n            const [first, ...rest] = this.splitLongWord(word);\n            if (!isLineStart) {\n                this.startNewLine();\n            }\n            this.nextLineWords.push(first);\n            this.nextLineAvailableChars -= first.length;\n            for (const part of rest){\n                this.startNewLine();\n                this.nextLineWords.push(part);\n                this.nextLineAvailableChars -= part.length;\n            }\n        }\n    }\n    /**\n   * Pop a word from the currently built line.\n   * This doesn't affect completed lines.\n   *\n   * @returns { string }\n   */ popWord() {\n        const lastWord = this.nextLineWords.pop();\n        if (lastWord !== undefined) {\n            const isLineStart = this.nextLineWords.length === 0;\n            const cost = lastWord.length + (isLineStart ? 0 : 1);\n            this.nextLineAvailableChars += cost;\n        }\n        return lastWord;\n    }\n    /**\n   * Concat a word to the last word already in the builder.\n   * Adds a new word in case there are no words yet in the last line.\n   *\n   * @param { string } word A word to be concatenated.\n   * @param { boolean } [noWrap] Don't wrap text even if the line is too long.\n   */ concatWord(word, noWrap = false) {\n        if (this.wordBreakOpportunity && word.length > this.nextLineAvailableChars) {\n            this.pushWord(word, noWrap);\n            this.wordBreakOpportunity = false;\n        } else {\n            const lastWord = this.popWord();\n            this.pushWord(lastWord ? lastWord.concat(word) : word, noWrap);\n        }\n    }\n    /**\n   * Add current line (and more empty lines if provided argument > 1) to the list of complete lines and start a new one.\n   *\n   * @param { number } n Number of line breaks that will be added to the resulting string.\n   */ startNewLine(n = 1) {\n        this.lines.push(this.nextLineWords);\n        if (n > 1) {\n            this.lines.push(...Array.from({\n                length: n - 1\n            }, ()=>[]));\n        }\n        this.nextLineWords = [];\n        this.nextLineAvailableChars = this.maxLineLength;\n    }\n    /**\n   * No words in this builder.\n   *\n   * @returns { boolean }\n   */ isEmpty() {\n        return this.lines.length === 0 && this.nextLineWords.length === 0;\n    }\n    clear() {\n        this.lines.length = 0;\n        this.nextLineWords.length = 0;\n        this.nextLineAvailableChars = this.maxLineLength;\n    }\n    /**\n   * Join all lines of words inside the InlineTextBuilder into a complete string.\n   *\n   * @returns { string }\n   */ toString() {\n        return [\n            ...this.lines,\n            this.nextLineWords\n        ].map((words)=>words.join(\" \")).join(\"\\n\");\n    }\n    /**\n   * Split a long word up to fit within the word wrap limit.\n   * Use either a character to split looking back from the word wrap limit,\n   * or truncate to the word wrap limit.\n   *\n   * @param   { string }   word Input word.\n   * @returns { string[] }      Parts of the word.\n   */ splitLongWord(word) {\n        const parts = [];\n        let idx = 0;\n        while(word.length > this.maxLineLength){\n            const firstLine = word.substring(0, this.maxLineLength);\n            const remainingChars = word.substring(this.maxLineLength);\n            const splitIndex = firstLine.lastIndexOf(this.wrapCharacters[idx]);\n            if (splitIndex > -1) {\n                word = firstLine.substring(splitIndex + 1) + remainingChars;\n                parts.push(firstLine.substring(0, splitIndex + 1));\n            } else {\n                idx++;\n                if (idx < this.wrapCharacters.length) {\n                    word = firstLine + remainingChars;\n                } else {\n                    if (this.forceWrapOnLimit) {\n                        parts.push(firstLine);\n                        word = remainingChars;\n                        if (word.length > this.maxLineLength) {\n                            continue;\n                        }\n                    } else {\n                        word = firstLine + remainingChars;\n                    }\n                    break;\n                }\n            }\n        }\n        parts.push(word); // Add remaining part to array\n        return parts;\n    }\n}\n/* eslint-disable max-classes-per-file */ class StackItem {\n    constructor(next = null){\n        this.next = next;\n    }\n    getRoot() {\n        return this.next ? this.next : this;\n    }\n}\nclass BlockStackItem extends StackItem {\n    constructor(options, next = null, leadingLineBreaks = 1, maxLineLength = undefined){\n        super(next);\n        this.leadingLineBreaks = leadingLineBreaks;\n        this.inlineTextBuilder = new InlineTextBuilder(options, maxLineLength);\n        this.rawText = \"\";\n        this.stashedLineBreaks = 0;\n        this.isPre = next && next.isPre;\n        this.isNoWrap = next && next.isNoWrap;\n    }\n}\nclass ListStackItem extends BlockStackItem {\n    constructor(options, next = null, { interRowLineBreaks = 1, leadingLineBreaks = 2, maxLineLength = undefined, maxPrefixLength = 0, prefixAlign = \"left\" } = {}){\n        super(options, next, leadingLineBreaks, maxLineLength);\n        this.maxPrefixLength = maxPrefixLength;\n        this.prefixAlign = prefixAlign;\n        this.interRowLineBreaks = interRowLineBreaks;\n    }\n}\nclass ListItemStackItem extends BlockStackItem {\n    constructor(options, next = null, { leadingLineBreaks = 1, maxLineLength = undefined, prefix = \"\" } = {}){\n        super(options, next, leadingLineBreaks, maxLineLength);\n        this.prefix = prefix;\n    }\n}\nclass TableStackItem extends StackItem {\n    constructor(next = null){\n        super(next);\n        this.rows = [];\n        this.isPre = next && next.isPre;\n        this.isNoWrap = next && next.isNoWrap;\n    }\n}\nclass TableRowStackItem extends StackItem {\n    constructor(next = null){\n        super(next);\n        this.cells = [];\n        this.isPre = next && next.isPre;\n        this.isNoWrap = next && next.isNoWrap;\n    }\n}\nclass TableCellStackItem extends StackItem {\n    constructor(options, next = null, maxColumnWidth = undefined){\n        super(next);\n        this.inlineTextBuilder = new InlineTextBuilder(options, maxColumnWidth);\n        this.rawText = \"\";\n        this.stashedLineBreaks = 0;\n        this.isPre = next && next.isPre;\n        this.isNoWrap = next && next.isNoWrap;\n    }\n}\nclass TransformerStackItem extends StackItem {\n    constructor(next = null, transform){\n        super(next);\n        this.transform = transform;\n    }\n}\nfunction charactersToCodes(str) {\n    return [\n        ...str\n    ].map((c)=>\"\\\\u\" + c.charCodeAt(0).toString(16).padStart(4, \"0\")).join(\"\");\n}\n/**\n * Helps to handle HTML whitespaces.\n *\n * @class WhitespaceProcessor\n */ class WhitespaceProcessor {\n    /**\n   * Creates an instance of WhitespaceProcessor.\n   *\n   * @param { Options } options    HtmlToText options.\n   * @memberof WhitespaceProcessor\n   */ constructor(options){\n        this.whitespaceChars = options.preserveNewlines ? options.whitespaceCharacters.replace(/\\n/g, \"\") : options.whitespaceCharacters;\n        const whitespaceCodes = charactersToCodes(this.whitespaceChars);\n        this.leadingWhitespaceRe = new RegExp(`^[${whitespaceCodes}]`);\n        this.trailingWhitespaceRe = new RegExp(`[${whitespaceCodes}]$`);\n        this.allWhitespaceOrEmptyRe = new RegExp(`^[${whitespaceCodes}]*$`);\n        this.newlineOrNonWhitespaceRe = new RegExp(`(\\\\n|[^\\\\n${whitespaceCodes}])`, \"g\");\n        this.newlineOrNonNewlineStringRe = new RegExp(`(\\\\n|[^\\\\n]+)`, \"g\");\n        if (options.preserveNewlines) {\n            const wordOrNewlineRe = new RegExp(`\\\\n|[^\\\\n${whitespaceCodes}]+`, \"gm\");\n            /**\n       * Shrink whitespaces and wrap text, add to the builder.\n       *\n       * @param { string }                  text              Input text.\n       * @param { InlineTextBuilder }       inlineTextBuilder A builder to receive processed text.\n       * @param { (str: string) => string } [ transform ]     A transform to be applied to words.\n       * @param { boolean }                 [noWrap] Don't wrap text even if the line is too long.\n       */ this.shrinkWrapAdd = function(text, inlineTextBuilder, transform = (str)=>str, noWrap = false) {\n                if (!text) {\n                    return;\n                }\n                const previouslyStashedSpace = inlineTextBuilder.stashedSpace;\n                let anyMatch = false;\n                let m = wordOrNewlineRe.exec(text);\n                if (m) {\n                    anyMatch = true;\n                    if (m[0] === \"\\n\") {\n                        inlineTextBuilder.startNewLine();\n                    } else if (previouslyStashedSpace || this.testLeadingWhitespace(text)) {\n                        inlineTextBuilder.pushWord(transform(m[0]), noWrap);\n                    } else {\n                        inlineTextBuilder.concatWord(transform(m[0]), noWrap);\n                    }\n                    while((m = wordOrNewlineRe.exec(text)) !== null){\n                        if (m[0] === \"\\n\") {\n                            inlineTextBuilder.startNewLine();\n                        } else {\n                            inlineTextBuilder.pushWord(transform(m[0]), noWrap);\n                        }\n                    }\n                }\n                inlineTextBuilder.stashedSpace = previouslyStashedSpace && !anyMatch || this.testTrailingWhitespace(text);\n            // No need to stash a space in case last added item was a new line,\n            // but that won't affect anything later anyway.\n            };\n        } else {\n            const wordRe = new RegExp(`[^${whitespaceCodes}]+`, \"g\");\n            this.shrinkWrapAdd = function(text, inlineTextBuilder, transform = (str)=>str, noWrap = false) {\n                if (!text) {\n                    return;\n                }\n                const previouslyStashedSpace = inlineTextBuilder.stashedSpace;\n                let anyMatch = false;\n                let m = wordRe.exec(text);\n                if (m) {\n                    anyMatch = true;\n                    if (previouslyStashedSpace || this.testLeadingWhitespace(text)) {\n                        inlineTextBuilder.pushWord(transform(m[0]), noWrap);\n                    } else {\n                        inlineTextBuilder.concatWord(transform(m[0]), noWrap);\n                    }\n                    while((m = wordRe.exec(text)) !== null){\n                        inlineTextBuilder.pushWord(transform(m[0]), noWrap);\n                    }\n                }\n                inlineTextBuilder.stashedSpace = previouslyStashedSpace && !anyMatch || this.testTrailingWhitespace(text);\n            };\n        }\n    }\n    /**\n   * Add text with only minimal processing.\n   * Everything between newlines considered a single word.\n   * No whitespace is trimmed.\n   * Not affected by preserveNewlines option - `\\n` always starts a new line.\n   *\n   * `noWrap` argument is `true` by default - this won't start a new line\n   * even if there is not enough space left in the current line.\n   *\n   * @param { string }            text              Input text.\n   * @param { InlineTextBuilder } inlineTextBuilder A builder to receive processed text.\n   * @param { boolean }           [noWrap] Don't wrap text even if the line is too long.\n   */ addLiteral(text, inlineTextBuilder, noWrap = true) {\n        if (!text) {\n            return;\n        }\n        const previouslyStashedSpace = inlineTextBuilder.stashedSpace;\n        let anyMatch = false;\n        let m = this.newlineOrNonNewlineStringRe.exec(text);\n        if (m) {\n            anyMatch = true;\n            if (m[0] === \"\\n\") {\n                inlineTextBuilder.startNewLine();\n            } else if (previouslyStashedSpace) {\n                inlineTextBuilder.pushWord(m[0], noWrap);\n            } else {\n                inlineTextBuilder.concatWord(m[0], noWrap);\n            }\n            while((m = this.newlineOrNonNewlineStringRe.exec(text)) !== null){\n                if (m[0] === \"\\n\") {\n                    inlineTextBuilder.startNewLine();\n                } else {\n                    inlineTextBuilder.pushWord(m[0], noWrap);\n                }\n            }\n        }\n        inlineTextBuilder.stashedSpace = previouslyStashedSpace && !anyMatch;\n    }\n    /**\n   * Test whether the given text starts with HTML whitespace character.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */ testLeadingWhitespace(text) {\n        return this.leadingWhitespaceRe.test(text);\n    }\n    /**\n   * Test whether the given text ends with HTML whitespace character.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */ testTrailingWhitespace(text) {\n        return this.trailingWhitespaceRe.test(text);\n    }\n    /**\n   * Test whether the given text contains any non-whitespace characters.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */ testContainsWords(text) {\n        return !this.allWhitespaceOrEmptyRe.test(text);\n    }\n    /**\n   * Return the number of newlines if there are no words.\n   *\n   * If any word is found then return zero regardless of the actual number of newlines.\n   *\n   * @param   { string }  text  Input string.\n   * @returns { number }\n   */ countNewlinesNoWords(text) {\n        this.newlineOrNonWhitespaceRe.lastIndex = 0;\n        let counter = 0;\n        let match;\n        while((match = this.newlineOrNonWhitespaceRe.exec(text)) !== null){\n            if (match[0] === \"\\n\") {\n                counter++;\n            } else {\n                return 0;\n            }\n        }\n        return counter;\n    }\n}\n/**\n * Helps to build text from inline and block elements.\n *\n * @class BlockTextBuilder\n */ class BlockTextBuilder {\n    /**\n   * Creates an instance of BlockTextBuilder.\n   *\n   * @param { Options } options HtmlToText options.\n   * @param { import('selderee').Picker<DomNode, TagDefinition> } picker Selectors decision tree picker.\n   * @param { any} [metadata] Optional metadata for HTML document, for use in formatters.\n   */ constructor(options, picker, metadata = undefined){\n        this.options = options;\n        this.picker = picker;\n        this.metadata = metadata;\n        this.whitespaceProcessor = new WhitespaceProcessor(options);\n        /** @type { StackItem } */ this._stackItem = new BlockStackItem(options);\n        /** @type { TransformerStackItem } */ this._wordTransformer = undefined;\n    }\n    /**\n   * Put a word-by-word transform function onto the transformations stack.\n   *\n   * Mainly used for uppercasing. Can be bypassed to add unformatted text such as URLs.\n   *\n   * Word transformations applied before wrapping.\n   *\n   * @param { (str: string) => string } wordTransform Word transformation function.\n   */ pushWordTransform(wordTransform) {\n        this._wordTransformer = new TransformerStackItem(this._wordTransformer, wordTransform);\n    }\n    /**\n   * Remove a function from the word transformations stack.\n   *\n   * @returns { (str: string) => string } A function that was removed.\n   */ popWordTransform() {\n        if (!this._wordTransformer) {\n            return undefined;\n        }\n        const transform = this._wordTransformer.transform;\n        this._wordTransformer = this._wordTransformer.next;\n        return transform;\n    }\n    /**\n   * Ignore wordwrap option in followup inline additions and disable automatic wrapping.\n   */ startNoWrap() {\n        this._stackItem.isNoWrap = true;\n    }\n    /**\n   * Return automatic wrapping to behavior defined by options.\n   */ stopNoWrap() {\n        this._stackItem.isNoWrap = false;\n    }\n    /** @returns { (str: string) => string } */ _getCombinedWordTransformer() {\n        const wt = this._wordTransformer ? (str)=>applyTransformer(str, this._wordTransformer) : undefined;\n        const ce = this.options.encodeCharacters;\n        return wt ? ce ? (str)=>ce(wt(str)) : wt : ce;\n    }\n    _popStackItem() {\n        const item = this._stackItem;\n        this._stackItem = item.next;\n        return item;\n    }\n    /**\n   * Add a line break into currently built block.\n   */ addLineBreak() {\n        if (!(this._stackItem instanceof BlockStackItem || this._stackItem instanceof ListItemStackItem || this._stackItem instanceof TableCellStackItem)) {\n            return;\n        }\n        if (this._stackItem.isPre) {\n            this._stackItem.rawText += \"\\n\";\n        } else {\n            this._stackItem.inlineTextBuilder.startNewLine();\n        }\n    }\n    /**\n   * Allow to break line in case directly following text will not fit.\n   */ addWordBreakOpportunity() {\n        if (this._stackItem instanceof BlockStackItem || this._stackItem instanceof ListItemStackItem || this._stackItem instanceof TableCellStackItem) {\n            this._stackItem.inlineTextBuilder.wordBreakOpportunity = true;\n        }\n    }\n    /**\n   * Add a node inline into the currently built block.\n   *\n   * @param { string } str\n   * Text content of a node to add.\n   *\n   * @param { object } [param1]\n   * Object holding the parameters of the operation.\n   *\n   * @param { boolean } [param1.noWordTransform]\n   * Ignore word transformers if there are any.\n   * Don't encode characters as well.\n   * (Use this for things like URL addresses).\n   */ addInline(str, { noWordTransform = false } = {}) {\n        if (!(this._stackItem instanceof BlockStackItem || this._stackItem instanceof ListItemStackItem || this._stackItem instanceof TableCellStackItem)) {\n            return;\n        }\n        if (this._stackItem.isPre) {\n            this._stackItem.rawText += str;\n            return;\n        }\n        if (str.length === 0 || // empty string\n        this._stackItem.stashedLineBreaks && // stashed linebreaks make whitespace irrelevant\n        !this.whitespaceProcessor.testContainsWords(str) // no words to add\n        ) {\n            return;\n        }\n        if (this.options.preserveNewlines) {\n            const newlinesNumber = this.whitespaceProcessor.countNewlinesNoWords(str);\n            if (newlinesNumber > 0) {\n                this._stackItem.inlineTextBuilder.startNewLine(newlinesNumber);\n                // keep stashedLineBreaks unchanged\n                return;\n            }\n        }\n        if (this._stackItem.stashedLineBreaks) {\n            this._stackItem.inlineTextBuilder.startNewLine(this._stackItem.stashedLineBreaks);\n        }\n        this.whitespaceProcessor.shrinkWrapAdd(str, this._stackItem.inlineTextBuilder, noWordTransform ? undefined : this._getCombinedWordTransformer(), this._stackItem.isNoWrap);\n        this._stackItem.stashedLineBreaks = 0; // inline text doesn't introduce line breaks\n    }\n    /**\n   * Add a string inline into the currently built block.\n   *\n   * Use this for markup elements that don't have to adhere\n   * to text layout rules.\n   *\n   * @param { string } str Text to add.\n   */ addLiteral(str) {\n        if (!(this._stackItem instanceof BlockStackItem || this._stackItem instanceof ListItemStackItem || this._stackItem instanceof TableCellStackItem)) {\n            return;\n        }\n        if (str.length === 0) {\n            return;\n        }\n        if (this._stackItem.isPre) {\n            this._stackItem.rawText += str;\n            return;\n        }\n        if (this._stackItem.stashedLineBreaks) {\n            this._stackItem.inlineTextBuilder.startNewLine(this._stackItem.stashedLineBreaks);\n        }\n        this.whitespaceProcessor.addLiteral(str, this._stackItem.inlineTextBuilder, this._stackItem.isNoWrap);\n        this._stackItem.stashedLineBreaks = 0;\n    }\n    /**\n   * Start building a new block.\n   *\n   * @param { object } [param0]\n   * Object holding the parameters of the block.\n   *\n   * @param { number } [param0.leadingLineBreaks]\n   * This block should have at least this number of line breaks to separate it from any preceding block.\n   *\n   * @param { number }  [param0.reservedLineLength]\n   * Reserve this number of characters on each line for block markup.\n   *\n   * @param { boolean } [param0.isPre]\n   * Should HTML whitespace be preserved inside this block.\n   */ openBlock({ leadingLineBreaks = 1, reservedLineLength = 0, isPre = false } = {}) {\n        const maxLineLength = Math.max(20, this._stackItem.inlineTextBuilder.maxLineLength - reservedLineLength);\n        this._stackItem = new BlockStackItem(this.options, this._stackItem, leadingLineBreaks, maxLineLength);\n        if (isPre) {\n            this._stackItem.isPre = true;\n        }\n    }\n    /**\n   * Finalize currently built block, add it's content to the parent block.\n   *\n   * @param { object } [param0]\n   * Object holding the parameters of the block.\n   *\n   * @param { number } [param0.trailingLineBreaks]\n   * This block should have at least this number of line breaks to separate it from any following block.\n   *\n   * @param { (str: string) => string } [param0.blockTransform]\n   * A function to transform the block text before adding to the parent block.\n   * This happens after word wrap and should be used in combination with reserved line length\n   * in order to keep line lengths correct.\n   * Used for whole block markup.\n   */ closeBlock({ trailingLineBreaks = 1, blockTransform = undefined } = {}) {\n        const block = this._popStackItem();\n        const blockText = blockTransform ? blockTransform(getText(block)) : getText(block);\n        addText(this._stackItem, blockText, block.leadingLineBreaks, Math.max(block.stashedLineBreaks, trailingLineBreaks));\n    }\n    /**\n   * Start building a new list.\n   *\n   * @param { object } [param0]\n   * Object holding the parameters of the list.\n   *\n   * @param { number } [param0.maxPrefixLength]\n   * Length of the longest list item prefix.\n   * If not supplied or too small then list items won't be aligned properly.\n   *\n   * @param { 'left' | 'right' } [param0.prefixAlign]\n   * Specify how prefixes of different lengths have to be aligned\n   * within a column.\n   *\n   * @param { number } [param0.interRowLineBreaks]\n   * Minimum number of line breaks between list items.\n   *\n   * @param { number } [param0.leadingLineBreaks]\n   * This list should have at least this number of line breaks to separate it from any preceding block.\n   */ openList({ maxPrefixLength = 0, prefixAlign = \"left\", interRowLineBreaks = 1, leadingLineBreaks = 2 } = {}) {\n        this._stackItem = new ListStackItem(this.options, this._stackItem, {\n            interRowLineBreaks: interRowLineBreaks,\n            leadingLineBreaks: leadingLineBreaks,\n            maxLineLength: this._stackItem.inlineTextBuilder.maxLineLength,\n            maxPrefixLength: maxPrefixLength,\n            prefixAlign: prefixAlign\n        });\n    }\n    /**\n   * Start building a new list item.\n   *\n   * @param {object} param0\n   * Object holding the parameters of the list item.\n   *\n   * @param { string } [param0.prefix]\n   * Prefix for this list item (item number, bullet point, etc).\n   */ openListItem({ prefix = \"\" } = {}) {\n        if (!(this._stackItem instanceof ListStackItem)) {\n            throw new Error(\"Can't add a list item to something that is not a list! Check the formatter.\");\n        }\n        const list = this._stackItem;\n        const prefixLength = Math.max(prefix.length, list.maxPrefixLength);\n        const maxLineLength = Math.max(20, list.inlineTextBuilder.maxLineLength - prefixLength);\n        this._stackItem = new ListItemStackItem(this.options, list, {\n            prefix: prefix,\n            maxLineLength: maxLineLength,\n            leadingLineBreaks: list.interRowLineBreaks\n        });\n    }\n    /**\n   * Finalize currently built list item, add it's content to the parent list.\n   */ closeListItem() {\n        const listItem = this._popStackItem();\n        const list = listItem.next;\n        const prefixLength = Math.max(listItem.prefix.length, list.maxPrefixLength);\n        const spacing = \"\\n\" + \" \".repeat(prefixLength);\n        const prefix = list.prefixAlign === \"right\" ? listItem.prefix.padStart(prefixLength) : listItem.prefix.padEnd(prefixLength);\n        const text = prefix + getText(listItem).replace(/\\n/g, spacing);\n        addText(list, text, listItem.leadingLineBreaks, Math.max(listItem.stashedLineBreaks, list.interRowLineBreaks));\n    }\n    /**\n   * Finalize currently built list, add it's content to the parent block.\n   *\n   * @param { object } param0\n   * Object holding the parameters of the list.\n   *\n   * @param { number } [param0.trailingLineBreaks]\n   * This list should have at least this number of line breaks to separate it from any following block.\n   */ closeList({ trailingLineBreaks = 2 } = {}) {\n        const list = this._popStackItem();\n        const text = getText(list);\n        if (text) {\n            addText(this._stackItem, text, list.leadingLineBreaks, trailingLineBreaks);\n        }\n    }\n    /**\n   * Start building a table.\n   */ openTable() {\n        this._stackItem = new TableStackItem(this._stackItem);\n    }\n    /**\n   * Start building a table row.\n   */ openTableRow() {\n        if (!(this._stackItem instanceof TableStackItem)) {\n            throw new Error(\"Can't add a table row to something that is not a table! Check the formatter.\");\n        }\n        this._stackItem = new TableRowStackItem(this._stackItem);\n    }\n    /**\n   * Start building a table cell.\n   *\n   * @param { object } [param0]\n   * Object holding the parameters of the cell.\n   *\n   * @param { number } [param0.maxColumnWidth]\n   * Wrap cell content to this width. Fall back to global wordwrap value if undefined.\n   */ openTableCell({ maxColumnWidth = undefined } = {}) {\n        if (!(this._stackItem instanceof TableRowStackItem)) {\n            throw new Error(\"Can't add a table cell to something that is not a table row! Check the formatter.\");\n        }\n        this._stackItem = new TableCellStackItem(this.options, this._stackItem, maxColumnWidth);\n    }\n    /**\n   * Finalize currently built table cell and add it to parent table row's cells.\n   *\n   * @param { object } [param0]\n   * Object holding the parameters of the cell.\n   *\n   * @param { number } [param0.colspan] How many columns this cell should occupy.\n   * @param { number } [param0.rowspan] How many rows this cell should occupy.\n   */ closeTableCell({ colspan = 1, rowspan = 1 } = {}) {\n        const cell = this._popStackItem();\n        const text = trimCharacter(getText(cell), \"\\n\");\n        cell.next.cells.push({\n            colspan: colspan,\n            rowspan: rowspan,\n            text: text\n        });\n    }\n    /**\n   * Finalize currently built table row and add it to parent table's rows.\n   */ closeTableRow() {\n        const row = this._popStackItem();\n        row.next.rows.push(row.cells);\n    }\n    /**\n   * Finalize currently built table and add the rendered text to the parent block.\n   *\n   * @param { object } param0\n   * Object holding the parameters of the table.\n   *\n   * @param { TablePrinter } param0.tableToString\n   * A function to convert a table of stringified cells into a complete table.\n   *\n   * @param { number } [param0.leadingLineBreaks]\n   * This table should have at least this number of line breaks to separate if from any preceding block.\n   *\n   * @param { number } [param0.trailingLineBreaks]\n   * This table should have at least this number of line breaks to separate it from any following block.\n   */ closeTable({ tableToString, leadingLineBreaks = 2, trailingLineBreaks = 2 }) {\n        const table = this._popStackItem();\n        const output = tableToString(table.rows);\n        if (output) {\n            addText(this._stackItem, output, leadingLineBreaks, trailingLineBreaks);\n        }\n    }\n    /**\n   * Return the rendered text content of this builder.\n   *\n   * @returns { string }\n   */ toString() {\n        return getText(this._stackItem.getRoot());\n    // There should only be the root item if everything is closed properly.\n    }\n}\nfunction getText(stackItem) {\n    if (!(stackItem instanceof BlockStackItem || stackItem instanceof ListItemStackItem || stackItem instanceof TableCellStackItem)) {\n        throw new Error(\"Only blocks, list items and table cells can be requested for text contents.\");\n    }\n    return stackItem.inlineTextBuilder.isEmpty() ? stackItem.rawText : stackItem.rawText + stackItem.inlineTextBuilder.toString();\n}\nfunction addText(stackItem, text, leadingLineBreaks, trailingLineBreaks) {\n    if (!(stackItem instanceof BlockStackItem || stackItem instanceof ListItemStackItem || stackItem instanceof TableCellStackItem)) {\n        throw new Error(\"Only blocks, list items and table cells can contain text.\");\n    }\n    const parentText = getText(stackItem);\n    const lineBreaks = Math.max(stackItem.stashedLineBreaks, leadingLineBreaks);\n    stackItem.inlineTextBuilder.clear();\n    if (parentText) {\n        stackItem.rawText = parentText + \"\\n\".repeat(lineBreaks) + text;\n    } else {\n        stackItem.rawText = text;\n        stackItem.leadingLineBreaks = lineBreaks;\n    }\n    stackItem.stashedLineBreaks = trailingLineBreaks;\n}\n/**\n * @param { string } str A string to transform.\n * @param { TransformerStackItem } transformer A transformer item (with possible continuation).\n * @returns { string }\n */ function applyTransformer(str, transformer) {\n    return transformer ? applyTransformer(transformer.transform(str), transformer.next) : str;\n}\n/**\n * Compile selectors into a decision tree,\n * return a function intended for batch processing.\n *\n * @param   { Options } [options = {}]   HtmlToText options (defaults, formatters, user options merged, deduplicated).\n * @returns { (html: string, metadata?: any) => string } Pre-configured converter function.\n * @static\n */ function compile$1(options = {}) {\n    const selectorsWithoutFormat = options.selectors.filter((s)=>!s.format);\n    if (selectorsWithoutFormat.length) {\n        throw new Error(\"Following selectors have no specified format: \" + selectorsWithoutFormat.map((s)=>`\\`${s.selector}\\``).join(\", \"));\n    }\n    const picker = new selderee__WEBPACK_IMPORTED_MODULE_4__.DecisionTree(options.selectors.map((s)=>[\n            s.selector,\n            s\n        ])).build(_selderee_plugin_htmlparser2__WEBPACK_IMPORTED_MODULE_0__.hp2Builder);\n    if (typeof options.encodeCharacters !== \"function\") {\n        options.encodeCharacters = makeReplacerFromDict(options.encodeCharacters);\n    }\n    const baseSelectorsPicker = new selderee__WEBPACK_IMPORTED_MODULE_4__.DecisionTree(options.baseElements.selectors.map((s, i)=>[\n            s,\n            i + 1\n        ])).build(_selderee_plugin_htmlparser2__WEBPACK_IMPORTED_MODULE_0__.hp2Builder);\n    function findBaseElements(dom) {\n        return findBases(dom, options, baseSelectorsPicker);\n    }\n    const limitedWalk = limitedDepthRecursive(options.limits.maxDepth, recursiveWalk, function(dom, builder) {\n        builder.addInline(options.limits.ellipsis || \"\");\n    });\n    return function(html, metadata = undefined) {\n        return process(html, metadata, options, picker, findBaseElements, limitedWalk);\n    };\n}\n/**\n * Convert given HTML according to preprocessed options.\n *\n * @param { string } html HTML content to convert.\n * @param { any } metadata Optional metadata for HTML document, for use in formatters.\n * @param { Options } options HtmlToText options (preprocessed).\n * @param { import('selderee').Picker<DomNode, TagDefinition> } picker\n * Tag definition picker for DOM nodes processing.\n * @param { (dom: DomNode[]) => DomNode[] } findBaseElements\n * Function to extract elements from HTML DOM\n * that will only be present in the output text.\n * @param { RecursiveCallback } walk Recursive callback.\n * @returns { string }\n */ function process(html, metadata, options, picker, findBaseElements, walk) {\n    const maxInputLength = options.limits.maxInputLength;\n    if (maxInputLength && html && html.length > maxInputLength) {\n        console.warn(`Input length ${html.length} is above allowed limit of ${maxInputLength}. Truncating without ellipsis.`);\n        html = html.substring(0, maxInputLength);\n    }\n    const document = (0,htmlparser2__WEBPACK_IMPORTED_MODULE_1__.parseDocument)(html, {\n        decodeEntities: options.decodeEntities\n    });\n    const bases = findBaseElements(document.children);\n    const builder = new BlockTextBuilder(options, picker, metadata);\n    walk(bases, builder);\n    return builder.toString();\n}\nfunction findBases(dom, options, baseSelectorsPicker) {\n    const results = [];\n    function recursiveWalk(walk, /** @type { DomNode[] } */ dom) {\n        dom = dom.slice(0, options.limits.maxChildNodes);\n        for (const elem of dom){\n            if (elem.type !== \"tag\") {\n                continue;\n            }\n            const pickedSelectorIndex = baseSelectorsPicker.pick1(elem);\n            if (pickedSelectorIndex > 0) {\n                results.push({\n                    selectorIndex: pickedSelectorIndex,\n                    element: elem\n                });\n            } else if (elem.children) {\n                walk(elem.children);\n            }\n            if (results.length >= options.limits.maxBaseElements) {\n                return;\n            }\n        }\n    }\n    const limitedWalk = limitedDepthRecursive(options.limits.maxDepth, recursiveWalk);\n    limitedWalk(dom);\n    if (options.baseElements.orderBy !== \"occurrence\") {\n        results.sort((a, b)=>a.selectorIndex - b.selectorIndex);\n    }\n    return options.baseElements.returnDomByDefault && results.length === 0 ? dom : results.map((x)=>x.element);\n}\n/**\n * Function to walk through DOM nodes and accumulate their string representations.\n *\n * @param   { RecursiveCallback } walk    Recursive callback.\n * @param   { DomNode[] }         [dom]   Nodes array to process.\n * @param   { BlockTextBuilder }  builder Passed around to accumulate output text.\n * @private\n */ function recursiveWalk(walk, dom, builder) {\n    if (!dom) {\n        return;\n    }\n    const options = builder.options;\n    const tooManyChildNodes = dom.length > options.limits.maxChildNodes;\n    if (tooManyChildNodes) {\n        dom = dom.slice(0, options.limits.maxChildNodes);\n        dom.push({\n            data: options.limits.ellipsis,\n            type: \"text\"\n        });\n    }\n    for (const elem of dom){\n        switch(elem.type){\n            case \"text\":\n                {\n                    builder.addInline(elem.data);\n                    break;\n                }\n            case \"tag\":\n                {\n                    const tagDefinition = builder.picker.pick1(elem);\n                    const format = options.formatters[tagDefinition.format];\n                    format(elem, walk, builder, tagDefinition.options || {});\n                    break;\n                }\n        }\n    }\n    return;\n}\n/**\n * @param { Object<string,string | false> } dict\n * A dictionary where keys are characters to replace\n * and values are replacement strings.\n *\n * First code point from dict keys is used.\n * Compound emojis with ZWJ are not supported (not until Node 16).\n *\n * @returns { ((str: string) => string) | undefined }\n */ function makeReplacerFromDict(dict) {\n    if (!dict || Object.keys(dict).length === 0) {\n        return undefined;\n    }\n    /** @type { [string, string][] } */ const entries = Object.entries(dict).filter(([, v])=>v !== false);\n    const regex = new RegExp(entries.map(([c])=>`(${unicodeEscape([\n            ...c\n        ][0])})`).join(\"|\"), \"g\");\n    const values = entries.map(([, v])=>v);\n    const replacer = (m, ...cgs)=>values[cgs.findIndex((cg)=>cg)];\n    return (str)=>str.replace(regex, replacer);\n}\n/**\n * Dummy formatter that discards the input and does nothing.\n *\n * @type { FormatCallback }\n */ function formatSkip(elem, walk, builder, formatOptions) {\n/* do nothing */ }\n/**\n * Insert the given string literal inline instead of a tag.\n *\n * @type { FormatCallback }\n */ function formatInlineString(elem, walk, builder, formatOptions) {\n    builder.addLiteral(formatOptions.string || \"\");\n}\n/**\n * Insert a block with the given string literal instead of a tag.\n *\n * @type { FormatCallback }\n */ function formatBlockString(elem, walk, builder, formatOptions) {\n    builder.openBlock({\n        leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n    });\n    builder.addLiteral(formatOptions.string || \"\");\n    builder.closeBlock({\n        trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n    });\n}\n/**\n * Process an inline-level element.\n *\n * @type { FormatCallback }\n */ function formatInline(elem, walk, builder, formatOptions) {\n    walk(elem.children, builder);\n}\n/**\n * Process a block-level container.\n *\n * @type { FormatCallback }\n */ function formatBlock$1(elem, walk, builder, formatOptions) {\n    builder.openBlock({\n        leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n    });\n    walk(elem.children, builder);\n    builder.closeBlock({\n        trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n    });\n}\nfunction renderOpenTag(elem) {\n    const attrs = elem.attribs && elem.attribs.length ? \" \" + Object.entries(elem.attribs).map(([k, v])=>v === \"\" ? k : `${k}=${v.replace(/\"/g, \"&quot;\")}`).join(\" \") : \"\";\n    return `<${elem.name}${attrs}>`;\n}\nfunction renderCloseTag(elem) {\n    return `</${elem.name}>`;\n}\n/**\n * Render an element as inline HTML tag, walk through it's children.\n *\n * @type { FormatCallback }\n */ function formatInlineTag(elem, walk, builder, formatOptions) {\n    builder.startNoWrap();\n    builder.addLiteral(renderOpenTag(elem));\n    builder.stopNoWrap();\n    walk(elem.children, builder);\n    builder.startNoWrap();\n    builder.addLiteral(renderCloseTag(elem));\n    builder.stopNoWrap();\n}\n/**\n * Render an element as HTML block bag, walk through it's children.\n *\n * @type { FormatCallback }\n */ function formatBlockTag(elem, walk, builder, formatOptions) {\n    builder.openBlock({\n        leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n    });\n    builder.startNoWrap();\n    builder.addLiteral(renderOpenTag(elem));\n    builder.stopNoWrap();\n    walk(elem.children, builder);\n    builder.startNoWrap();\n    builder.addLiteral(renderCloseTag(elem));\n    builder.stopNoWrap();\n    builder.closeBlock({\n        trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n    });\n}\n/**\n * Render an element with all it's children as inline HTML.\n *\n * @type { FormatCallback }\n */ function formatInlineHtml(elem, walk, builder, formatOptions) {\n    builder.startNoWrap();\n    builder.addLiteral((0,dom_serializer__WEBPACK_IMPORTED_MODULE_3__.render)(elem, {\n        decodeEntities: builder.options.decodeEntities\n    }));\n    builder.stopNoWrap();\n}\n/**\n * Render an element with all it's children as HTML block.\n *\n * @type { FormatCallback }\n */ function formatBlockHtml(elem, walk, builder, formatOptions) {\n    builder.openBlock({\n        leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n    });\n    builder.startNoWrap();\n    builder.addLiteral((0,dom_serializer__WEBPACK_IMPORTED_MODULE_3__.render)(elem, {\n        decodeEntities: builder.options.decodeEntities\n    }));\n    builder.stopNoWrap();\n    builder.closeBlock({\n        trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n    });\n}\n/**\n * Render inline element wrapped with given strings.\n *\n * @type { FormatCallback }\n */ function formatInlineSurround(elem, walk, builder, formatOptions) {\n    builder.addLiteral(formatOptions.prefix || \"\");\n    walk(elem.children, builder);\n    builder.addLiteral(formatOptions.suffix || \"\");\n}\nvar genericFormatters = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    block: formatBlock$1,\n    blockHtml: formatBlockHtml,\n    blockString: formatBlockString,\n    blockTag: formatBlockTag,\n    inline: formatInline,\n    inlineHtml: formatInlineHtml,\n    inlineString: formatInlineString,\n    inlineSurround: formatInlineSurround,\n    inlineTag: formatInlineTag,\n    skip: formatSkip\n});\nfunction getRow(matrix, j) {\n    if (!matrix[j]) {\n        matrix[j] = [];\n    }\n    return matrix[j];\n}\nfunction findFirstVacantIndex(row, x = 0) {\n    while(row[x]){\n        x++;\n    }\n    return x;\n}\nfunction transposeInPlace(matrix, maxSize) {\n    for(let i = 0; i < maxSize; i++){\n        const rowI = getRow(matrix, i);\n        for(let j = 0; j < i; j++){\n            const rowJ = getRow(matrix, j);\n            if (rowI[j] || rowJ[i]) {\n                const temp = rowI[j];\n                rowI[j] = rowJ[i];\n                rowJ[i] = temp;\n            }\n        }\n    }\n}\nfunction putCellIntoLayout(cell, layout, baseRow, baseCol) {\n    for(let r = 0; r < cell.rowspan; r++){\n        const layoutRow = getRow(layout, baseRow + r);\n        for(let c = 0; c < cell.colspan; c++){\n            layoutRow[baseCol + c] = cell;\n        }\n    }\n}\nfunction getOrInitOffset(offsets, index) {\n    if (offsets[index] === undefined) {\n        offsets[index] = index === 0 ? 0 : 1 + getOrInitOffset(offsets, index - 1);\n    }\n    return offsets[index];\n}\nfunction updateOffset(offsets, base, span, value) {\n    offsets[base + span] = Math.max(getOrInitOffset(offsets, base + span), getOrInitOffset(offsets, base) + value);\n}\n/**\n * Render a table into a string.\n * Cells can contain multiline text and span across multiple rows and columns.\n *\n * Modifies cells to add lines array.\n *\n * @param { TablePrinterCell[][] } tableRows Table to render.\n * @param { number } rowSpacing Number of spaces between columns.\n * @param { number } colSpacing Number of empty lines between rows.\n * @returns { string }\n */ function tableToString(tableRows, rowSpacing, colSpacing) {\n    const layout = [];\n    let colNumber = 0;\n    const rowNumber = tableRows.length;\n    const rowOffsets = [\n        0\n    ];\n    // Fill the layout table and row offsets row-by-row.\n    for(let j = 0; j < rowNumber; j++){\n        const layoutRow = getRow(layout, j);\n        const cells = tableRows[j];\n        let x = 0;\n        for(let i = 0; i < cells.length; i++){\n            const cell = cells[i];\n            x = findFirstVacantIndex(layoutRow, x);\n            putCellIntoLayout(cell, layout, j, x);\n            x += cell.colspan;\n            cell.lines = cell.text.split(\"\\n\");\n            const cellHeight = cell.lines.length;\n            updateOffset(rowOffsets, j, cell.rowspan, cellHeight + rowSpacing);\n        }\n        colNumber = layoutRow.length > colNumber ? layoutRow.length : colNumber;\n    }\n    transposeInPlace(layout, rowNumber > colNumber ? rowNumber : colNumber);\n    const outputLines = [];\n    const colOffsets = [\n        0\n    ];\n    // Fill column offsets and output lines column-by-column.\n    for(let x = 0; x < colNumber; x++){\n        let y = 0;\n        let cell;\n        const rowsInThisColumn = Math.min(rowNumber, layout[x].length);\n        while(y < rowsInThisColumn){\n            cell = layout[x][y];\n            if (cell) {\n                if (!cell.rendered) {\n                    let cellWidth = 0;\n                    for(let j = 0; j < cell.lines.length; j++){\n                        const line = cell.lines[j];\n                        const lineOffset = rowOffsets[y] + j;\n                        outputLines[lineOffset] = (outputLines[lineOffset] || \"\").padEnd(colOffsets[x]) + line;\n                        cellWidth = line.length > cellWidth ? line.length : cellWidth;\n                    }\n                    updateOffset(colOffsets, x, cell.colspan, cellWidth + colSpacing);\n                    cell.rendered = true;\n                }\n                y += cell.rowspan;\n            } else {\n                const lineOffset = rowOffsets[y];\n                outputLines[lineOffset] = outputLines[lineOffset] || \"\";\n                y++;\n            }\n        }\n    }\n    return outputLines.join(\"\\n\");\n}\n/**\n * Process a line-break.\n *\n * @type { FormatCallback }\n */ function formatLineBreak(elem, walk, builder, formatOptions) {\n    builder.addLineBreak();\n}\n/**\n * Process a `wbr` tag (word break opportunity).\n *\n * @type { FormatCallback }\n */ function formatWbr(elem, walk, builder, formatOptions) {\n    builder.addWordBreakOpportunity();\n}\n/**\n * Process a horizontal line.\n *\n * @type { FormatCallback }\n */ function formatHorizontalLine(elem, walk, builder, formatOptions) {\n    builder.openBlock({\n        leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n    });\n    builder.addInline(\"-\".repeat(formatOptions.length || builder.options.wordwrap || 40));\n    builder.closeBlock({\n        trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n    });\n}\n/**\n * Process a paragraph.\n *\n * @type { FormatCallback }\n */ function formatParagraph(elem, walk, builder, formatOptions) {\n    builder.openBlock({\n        leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n    });\n    walk(elem.children, builder);\n    builder.closeBlock({\n        trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n    });\n}\n/**\n * Process a preformatted content.\n *\n * @type { FormatCallback }\n */ function formatPre(elem, walk, builder, formatOptions) {\n    builder.openBlock({\n        isPre: true,\n        leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n    });\n    walk(elem.children, builder);\n    builder.closeBlock({\n        trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n    });\n}\n/**\n * Process a heading.\n *\n * @type { FormatCallback }\n */ function formatHeading(elem, walk, builder, formatOptions) {\n    builder.openBlock({\n        leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n    });\n    if (formatOptions.uppercase !== false) {\n        builder.pushWordTransform((str)=>str.toUpperCase());\n        walk(elem.children, builder);\n        builder.popWordTransform();\n    } else {\n        walk(elem.children, builder);\n    }\n    builder.closeBlock({\n        trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n    });\n}\n/**\n * Process a blockquote.\n *\n * @type { FormatCallback }\n */ function formatBlockquote(elem, walk, builder, formatOptions) {\n    builder.openBlock({\n        leadingLineBreaks: formatOptions.leadingLineBreaks || 2,\n        reservedLineLength: 2\n    });\n    walk(elem.children, builder);\n    builder.closeBlock({\n        trailingLineBreaks: formatOptions.trailingLineBreaks || 2,\n        blockTransform: (str)=>(formatOptions.trimEmptyLines !== false ? trimCharacter(str, \"\\n\") : str).split(\"\\n\").map((line)=>\"> \" + line).join(\"\\n\")\n    });\n}\nfunction withBrackets(str, brackets) {\n    if (!brackets) {\n        return str;\n    }\n    const lbr = typeof brackets[0] === \"string\" ? brackets[0] : \"[\";\n    const rbr = typeof brackets[1] === \"string\" ? brackets[1] : \"]\";\n    return lbr + str + rbr;\n}\nfunction pathRewrite(path, rewriter, baseUrl, metadata, elem) {\n    const modifiedPath = typeof rewriter === \"function\" ? rewriter(path, metadata, elem) : path;\n    return modifiedPath[0] === \"/\" && baseUrl ? trimCharacterEnd(baseUrl, \"/\") + modifiedPath : modifiedPath;\n}\n/**\n * Process an image.\n *\n * @type { FormatCallback }\n */ function formatImage(elem, walk, builder, formatOptions) {\n    const attribs = elem.attribs || {};\n    const alt = attribs.alt ? attribs.alt : \"\";\n    const src = !attribs.src ? \"\" : pathRewrite(attribs.src, formatOptions.pathRewrite, formatOptions.baseUrl, builder.metadata, elem);\n    const text = !src ? alt : !alt ? withBrackets(src, formatOptions.linkBrackets) : alt + \" \" + withBrackets(src, formatOptions.linkBrackets);\n    builder.addInline(text, {\n        noWordTransform: true\n    });\n}\n// a img baseUrl\n// a img pathRewrite\n// a img linkBrackets\n// a     ignoreHref: false\n//            ignoreText ?\n// a     noAnchorUrl: true\n//            can be replaced with selector\n// a     hideLinkHrefIfSameAsText: false\n//            how to compare, what to show (text, href, normalized) ?\n// a     mailto protocol removed without options\n// a     protocols: mailto, tel, ...\n//            can be matched with selector?\n// anchors, protocols - only if no pathRewrite fn is provided\n// normalize-url ?\n// a\n// a[href^=\"#\"] - format:skip by default\n// a[href^=\"mailto:\"] - ?\n/**\n * Process an anchor.\n *\n * @type { FormatCallback }\n */ function formatAnchor(elem, walk, builder, formatOptions) {\n    function getHref() {\n        if (formatOptions.ignoreHref) {\n            return \"\";\n        }\n        if (!elem.attribs || !elem.attribs.href) {\n            return \"\";\n        }\n        let href = elem.attribs.href.replace(/^mailto:/, \"\");\n        if (formatOptions.noAnchorUrl && href[0] === \"#\") {\n            return \"\";\n        }\n        href = pathRewrite(href, formatOptions.pathRewrite, formatOptions.baseUrl, builder.metadata, elem);\n        return href;\n    }\n    const href = getHref();\n    if (!href) {\n        walk(elem.children, builder);\n    } else {\n        let text = \"\";\n        builder.pushWordTransform((str)=>{\n            if (str) {\n                text += str;\n            }\n            return str;\n        });\n        walk(elem.children, builder);\n        builder.popWordTransform();\n        const hideSameLink = formatOptions.hideLinkHrefIfSameAsText && href === text;\n        if (!hideSameLink) {\n            builder.addInline(!text ? href : \" \" + withBrackets(href, formatOptions.linkBrackets), {\n                noWordTransform: true\n            });\n        }\n    }\n}\n/**\n * @param { DomNode }           elem               List items with their prefixes.\n * @param { RecursiveCallback } walk               Recursive callback to process child nodes.\n * @param { BlockTextBuilder }  builder            Passed around to accumulate output text.\n * @param { FormatOptions }     formatOptions      Options specific to a formatter.\n * @param { () => string }      nextPrefixCallback Function that returns increasing index each time it is called.\n */ function formatList(elem, walk, builder, formatOptions, nextPrefixCallback) {\n    const isNestedList = get(elem, [\n        \"parent\",\n        \"name\"\n    ]) === \"li\";\n    // With Roman numbers, index length is not as straightforward as with Arabic numbers or letters,\n    // so the dumb length comparison is the most robust way to get the correct value.\n    let maxPrefixLength = 0;\n    const listItems = (elem.children || [])// it might be more accurate to check only for html spaces here, but no significant benefit\n    .filter((child)=>child.type !== \"text\" || !/^\\s*$/.test(child.data)).map(function(child) {\n        if (child.name !== \"li\") {\n            return {\n                node: child,\n                prefix: \"\"\n            };\n        }\n        const prefix = isNestedList ? nextPrefixCallback().trimStart() : nextPrefixCallback();\n        if (prefix.length > maxPrefixLength) {\n            maxPrefixLength = prefix.length;\n        }\n        return {\n            node: child,\n            prefix: prefix\n        };\n    });\n    if (!listItems.length) {\n        return;\n    }\n    builder.openList({\n        interRowLineBreaks: 1,\n        leadingLineBreaks: isNestedList ? 1 : formatOptions.leadingLineBreaks || 2,\n        maxPrefixLength: maxPrefixLength,\n        prefixAlign: \"left\"\n    });\n    for (const { node, prefix } of listItems){\n        builder.openListItem({\n            prefix: prefix\n        });\n        walk([\n            node\n        ], builder);\n        builder.closeListItem();\n    }\n    builder.closeList({\n        trailingLineBreaks: isNestedList ? 1 : formatOptions.trailingLineBreaks || 2\n    });\n}\n/**\n * Process an unordered list.\n *\n * @type { FormatCallback }\n */ function formatUnorderedList(elem, walk, builder, formatOptions) {\n    const prefix = formatOptions.itemPrefix || \" * \";\n    return formatList(elem, walk, builder, formatOptions, ()=>prefix);\n}\n/**\n * Process an ordered list.\n *\n * @type { FormatCallback }\n */ function formatOrderedList(elem, walk, builder, formatOptions) {\n    let nextIndex = Number(elem.attribs.start || \"1\");\n    const indexFunction = getOrderedListIndexFunction(elem.attribs.type);\n    const nextPrefixCallback = ()=>\" \" + indexFunction(nextIndex++) + \". \";\n    return formatList(elem, walk, builder, formatOptions, nextPrefixCallback);\n}\n/**\n * Return a function that can be used to generate index markers of a specified format.\n *\n * @param   { string } [olType='1'] Marker type.\n * @returns { (i: number) => string }\n */ function getOrderedListIndexFunction(olType = \"1\") {\n    switch(olType){\n        case \"a\":\n            return (i)=>numberToLetterSequence(i, \"a\");\n        case \"A\":\n            return (i)=>numberToLetterSequence(i, \"A\");\n        case \"i\":\n            return (i)=>numberToRoman(i).toLowerCase();\n        case \"I\":\n            return (i)=>numberToRoman(i);\n        case \"1\":\n        default:\n            return (i)=>i.toString();\n    }\n}\n/**\n * Given a list of class and ID selectors (prefixed with '.' and '#'),\n * return them as separate lists of names without prefixes.\n *\n * @param { string[] } selectors Class and ID selectors (`[\".class\", \"#id\"]` etc).\n * @returns { { classes: string[], ids: string[] } }\n */ function splitClassesAndIds(selectors) {\n    const classes = [];\n    const ids = [];\n    for (const selector of selectors){\n        if (selector.startsWith(\".\")) {\n            classes.push(selector.substring(1));\n        } else if (selector.startsWith(\"#\")) {\n            ids.push(selector.substring(1));\n        }\n    }\n    return {\n        classes: classes,\n        ids: ids\n    };\n}\nfunction isDataTable(attr, tables) {\n    if (tables === true) {\n        return true;\n    }\n    if (!attr) {\n        return false;\n    }\n    const { classes, ids } = splitClassesAndIds(tables);\n    const attrClasses = (attr[\"class\"] || \"\").split(\" \");\n    const attrIds = (attr[\"id\"] || \"\").split(\" \");\n    return attrClasses.some((x)=>classes.includes(x)) || attrIds.some((x)=>ids.includes(x));\n}\n/**\n * Process a table (either as a container or as a data table, depending on options).\n *\n * @type { FormatCallback }\n */ function formatTable(elem, walk, builder, formatOptions) {\n    return isDataTable(elem.attribs, builder.options.tables) ? formatDataTable(elem, walk, builder, formatOptions) : formatBlock(elem, walk, builder, formatOptions);\n}\nfunction formatBlock(elem, walk, builder, formatOptions) {\n    builder.openBlock({\n        leadingLineBreaks: formatOptions.leadingLineBreaks\n    });\n    walk(elem.children, builder);\n    builder.closeBlock({\n        trailingLineBreaks: formatOptions.trailingLineBreaks\n    });\n}\n/**\n * Process a data table.\n *\n * @type { FormatCallback }\n */ function formatDataTable(elem, walk, builder, formatOptions) {\n    builder.openTable();\n    elem.children.forEach(walkTable);\n    builder.closeTable({\n        tableToString: (rows)=>tableToString(rows, formatOptions.rowSpacing ?? 0, formatOptions.colSpacing ?? 3),\n        leadingLineBreaks: formatOptions.leadingLineBreaks,\n        trailingLineBreaks: formatOptions.trailingLineBreaks\n    });\n    function formatCell(cellNode) {\n        const colspan = +get(cellNode, [\n            \"attribs\",\n            \"colspan\"\n        ]) || 1;\n        const rowspan = +get(cellNode, [\n            \"attribs\",\n            \"rowspan\"\n        ]) || 1;\n        builder.openTableCell({\n            maxColumnWidth: formatOptions.maxColumnWidth\n        });\n        walk(cellNode.children, builder);\n        builder.closeTableCell({\n            colspan: colspan,\n            rowspan: rowspan\n        });\n    }\n    function walkTable(elem) {\n        if (elem.type !== \"tag\") {\n            return;\n        }\n        const formatHeaderCell = formatOptions.uppercaseHeaderCells !== false ? (cellNode)=>{\n            builder.pushWordTransform((str)=>str.toUpperCase());\n            formatCell(cellNode);\n            builder.popWordTransform();\n        } : formatCell;\n        switch(elem.name){\n            case \"thead\":\n            case \"tbody\":\n            case \"tfoot\":\n            case \"center\":\n                elem.children.forEach(walkTable);\n                return;\n            case \"tr\":\n                {\n                    builder.openTableRow();\n                    for (const childOfTr of elem.children){\n                        if (childOfTr.type !== \"tag\") {\n                            continue;\n                        }\n                        switch(childOfTr.name){\n                            case \"th\":\n                                {\n                                    formatHeaderCell(childOfTr);\n                                    break;\n                                }\n                            case \"td\":\n                                {\n                                    formatCell(childOfTr);\n                                    break;\n                                }\n                        }\n                    }\n                    builder.closeTableRow();\n                    break;\n                }\n        }\n    }\n}\nvar textFormatters = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    anchor: formatAnchor,\n    blockquote: formatBlockquote,\n    dataTable: formatDataTable,\n    heading: formatHeading,\n    horizontalLine: formatHorizontalLine,\n    image: formatImage,\n    lineBreak: formatLineBreak,\n    orderedList: formatOrderedList,\n    paragraph: formatParagraph,\n    pre: formatPre,\n    table: formatTable,\n    unorderedList: formatUnorderedList,\n    wbr: formatWbr\n});\n/**\n * Default options.\n *\n * @constant\n * @type { Options }\n * @default\n * @private\n */ const DEFAULT_OPTIONS = {\n    baseElements: {\n        selectors: [\n            \"body\"\n        ],\n        orderBy: \"selectors\",\n        returnDomByDefault: true\n    },\n    decodeEntities: true,\n    encodeCharacters: {},\n    formatters: {},\n    limits: {\n        ellipsis: \"...\",\n        maxBaseElements: undefined,\n        maxChildNodes: undefined,\n        maxDepth: undefined,\n        maxInputLength: 1 << 24 // 16_777_216\n    },\n    longWordSplit: {\n        forceWrapOnLimit: false,\n        wrapCharacters: []\n    },\n    preserveNewlines: false,\n    selectors: [\n        {\n            selector: \"*\",\n            format: \"inline\"\n        },\n        {\n            selector: \"a\",\n            format: \"anchor\",\n            options: {\n                baseUrl: null,\n                hideLinkHrefIfSameAsText: false,\n                ignoreHref: false,\n                linkBrackets: [\n                    \"[\",\n                    \"]\"\n                ],\n                noAnchorUrl: true\n            }\n        },\n        {\n            selector: \"article\",\n            format: \"block\",\n            options: {\n                leadingLineBreaks: 1,\n                trailingLineBreaks: 1\n            }\n        },\n        {\n            selector: \"aside\",\n            format: \"block\",\n            options: {\n                leadingLineBreaks: 1,\n                trailingLineBreaks: 1\n            }\n        },\n        {\n            selector: \"blockquote\",\n            format: \"blockquote\",\n            options: {\n                leadingLineBreaks: 2,\n                trailingLineBreaks: 2,\n                trimEmptyLines: true\n            }\n        },\n        {\n            selector: \"br\",\n            format: \"lineBreak\"\n        },\n        {\n            selector: \"div\",\n            format: \"block\",\n            options: {\n                leadingLineBreaks: 1,\n                trailingLineBreaks: 1\n            }\n        },\n        {\n            selector: \"footer\",\n            format: \"block\",\n            options: {\n                leadingLineBreaks: 1,\n                trailingLineBreaks: 1\n            }\n        },\n        {\n            selector: \"form\",\n            format: \"block\",\n            options: {\n                leadingLineBreaks: 1,\n                trailingLineBreaks: 1\n            }\n        },\n        {\n            selector: \"h1\",\n            format: \"heading\",\n            options: {\n                leadingLineBreaks: 3,\n                trailingLineBreaks: 2,\n                uppercase: true\n            }\n        },\n        {\n            selector: \"h2\",\n            format: \"heading\",\n            options: {\n                leadingLineBreaks: 3,\n                trailingLineBreaks: 2,\n                uppercase: true\n            }\n        },\n        {\n            selector: \"h3\",\n            format: \"heading\",\n            options: {\n                leadingLineBreaks: 3,\n                trailingLineBreaks: 2,\n                uppercase: true\n            }\n        },\n        {\n            selector: \"h4\",\n            format: \"heading\",\n            options: {\n                leadingLineBreaks: 2,\n                trailingLineBreaks: 2,\n                uppercase: true\n            }\n        },\n        {\n            selector: \"h5\",\n            format: \"heading\",\n            options: {\n                leadingLineBreaks: 2,\n                trailingLineBreaks: 2,\n                uppercase: true\n            }\n        },\n        {\n            selector: \"h6\",\n            format: \"heading\",\n            options: {\n                leadingLineBreaks: 2,\n                trailingLineBreaks: 2,\n                uppercase: true\n            }\n        },\n        {\n            selector: \"header\",\n            format: \"block\",\n            options: {\n                leadingLineBreaks: 1,\n                trailingLineBreaks: 1\n            }\n        },\n        {\n            selector: \"hr\",\n            format: \"horizontalLine\",\n            options: {\n                leadingLineBreaks: 2,\n                length: undefined,\n                trailingLineBreaks: 2\n            }\n        },\n        {\n            selector: \"img\",\n            format: \"image\",\n            options: {\n                baseUrl: null,\n                linkBrackets: [\n                    \"[\",\n                    \"]\"\n                ]\n            }\n        },\n        {\n            selector: \"main\",\n            format: \"block\",\n            options: {\n                leadingLineBreaks: 1,\n                trailingLineBreaks: 1\n            }\n        },\n        {\n            selector: \"nav\",\n            format: \"block\",\n            options: {\n                leadingLineBreaks: 1,\n                trailingLineBreaks: 1\n            }\n        },\n        {\n            selector: \"ol\",\n            format: \"orderedList\",\n            options: {\n                leadingLineBreaks: 2,\n                trailingLineBreaks: 2\n            }\n        },\n        {\n            selector: \"p\",\n            format: \"paragraph\",\n            options: {\n                leadingLineBreaks: 2,\n                trailingLineBreaks: 2\n            }\n        },\n        {\n            selector: \"pre\",\n            format: \"pre\",\n            options: {\n                leadingLineBreaks: 2,\n                trailingLineBreaks: 2\n            }\n        },\n        {\n            selector: \"section\",\n            format: \"block\",\n            options: {\n                leadingLineBreaks: 1,\n                trailingLineBreaks: 1\n            }\n        },\n        {\n            selector: \"table\",\n            format: \"table\",\n            options: {\n                colSpacing: 3,\n                leadingLineBreaks: 2,\n                maxColumnWidth: 60,\n                rowSpacing: 0,\n                trailingLineBreaks: 2,\n                uppercaseHeaderCells: true\n            }\n        },\n        {\n            selector: \"ul\",\n            format: \"unorderedList\",\n            options: {\n                itemPrefix: \" * \",\n                leadingLineBreaks: 2,\n                trailingLineBreaks: 2\n            }\n        },\n        {\n            selector: \"wbr\",\n            format: \"wbr\"\n        }\n    ],\n    tables: [],\n    whitespaceCharacters: \" \t\\r\\n\\f​\",\n    wordwrap: 80\n};\nconst concatMerge = (acc, src, options)=>[\n        ...acc,\n        ...src\n    ];\nconst overwriteMerge = (acc, src, options)=>[\n        ...src\n    ];\nconst selectorsMerge = (acc, src, options)=>acc.some((s)=>typeof s === \"object\") ? concatMerge(acc, src) // selectors\n     : overwriteMerge(acc, src) // baseElements.selectors\n;\n/**\n * Preprocess options, compile selectors into a decision tree,\n * return a function intended for batch processing.\n *\n * @param   { Options } [options = {}]   HtmlToText options.\n * @returns { (html: string, metadata?: any) => string } Pre-configured converter function.\n * @static\n */ function compile(options = {}) {\n    options = deepmerge__WEBPACK_IMPORTED_MODULE_2__(DEFAULT_OPTIONS, options, {\n        arrayMerge: overwriteMerge,\n        customMerge: (key)=>key === \"selectors\" ? selectorsMerge : undefined\n    });\n    options.formatters = Object.assign({}, genericFormatters, textFormatters, options.formatters);\n    options.selectors = mergeDuplicatesPreferLast(options.selectors, (s)=>s.selector);\n    handleDeprecatedOptions(options);\n    return compile$1(options);\n}\n/**\n * Convert given HTML content to plain text string.\n *\n * @param   { string }  html           HTML content to convert.\n * @param   { Options } [options = {}] HtmlToText options.\n * @param   { any }     [metadata]     Optional metadata for HTML document, for use in formatters.\n * @returns { string }                 Plain text string.\n * @static\n *\n * @example\n * const { convert } = require('html-to-text');\n * const text = convert('<h1>Hello World</h1>', {\n *   wordwrap: 130\n * });\n * console.log(text); // HELLO WORLD\n */ function convert(html, options = {}, metadata = undefined) {\n    return compile(options)(html, metadata);\n}\n/**\n * Map previously existing and now deprecated options to the new options layout.\n * This is a subject for cleanup in major releases.\n *\n * @param { Options } options HtmlToText options.\n */ function handleDeprecatedOptions(options) {\n    if (options.tags) {\n        const tagDefinitions = Object.entries(options.tags).map(([selector, definition])=>({\n                ...definition,\n                selector: selector || \"*\"\n            }));\n        options.selectors.push(...tagDefinitions);\n        options.selectors = mergeDuplicatesPreferLast(options.selectors, (s)=>s.selector);\n    }\n    function set(obj, path, value) {\n        const valueKey = path.pop();\n        for (const key of path){\n            let nested = obj[key];\n            if (!nested) {\n                nested = {};\n                obj[key] = nested;\n            }\n            obj = nested;\n        }\n        obj[valueKey] = value;\n    }\n    if (options[\"baseElement\"]) {\n        const baseElement = options[\"baseElement\"];\n        set(options, [\n            \"baseElements\",\n            \"selectors\"\n        ], Array.isArray(baseElement) ? baseElement : [\n            baseElement\n        ]);\n    }\n    if (options[\"returnDomByDefault\"] !== undefined) {\n        set(options, [\n            \"baseElements\",\n            \"returnDomByDefault\"\n        ], options[\"returnDomByDefault\"]);\n    }\n    for (const definition of options.selectors){\n        if (definition.format === \"anchor\" && get(definition, [\n            \"options\",\n            \"noLinkBrackets\"\n        ])) {\n            set(definition, [\n                \"options\",\n                \"linkBrackets\"\n            ], false);\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/html-to-text/lib/html-to-text.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/htmlparser2/lib/esm/Parser.js":
/*!****************************************************!*\
  !*** ./node_modules/htmlparser2/lib/esm/Parser.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Parser: () => (/* binding */ Parser)\n/* harmony export */ });\n/* harmony import */ var _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Tokenizer.js */ \"(rsc)/./node_modules/htmlparser2/lib/esm/Tokenizer.js\");\n/* harmony import */ var entities_lib_decode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! entities/lib/decode.js */ \"(rsc)/./node_modules/entities/lib/esm/decode.js\");\n\n\nconst formTags = new Set([\n    \"input\",\n    \"option\",\n    \"optgroup\",\n    \"select\",\n    \"button\",\n    \"datalist\",\n    \"textarea\"\n]);\nconst pTag = new Set([\n    \"p\"\n]);\nconst tableSectionTags = new Set([\n    \"thead\",\n    \"tbody\"\n]);\nconst ddtTags = new Set([\n    \"dd\",\n    \"dt\"\n]);\nconst rtpTags = new Set([\n    \"rt\",\n    \"rp\"\n]);\nconst openImpliesClose = new Map([\n    [\n        \"tr\",\n        new Set([\n            \"tr\",\n            \"th\",\n            \"td\"\n        ])\n    ],\n    [\n        \"th\",\n        new Set([\n            \"th\"\n        ])\n    ],\n    [\n        \"td\",\n        new Set([\n            \"thead\",\n            \"th\",\n            \"td\"\n        ])\n    ],\n    [\n        \"body\",\n        new Set([\n            \"head\",\n            \"link\",\n            \"script\"\n        ])\n    ],\n    [\n        \"li\",\n        new Set([\n            \"li\"\n        ])\n    ],\n    [\n        \"p\",\n        pTag\n    ],\n    [\n        \"h1\",\n        pTag\n    ],\n    [\n        \"h2\",\n        pTag\n    ],\n    [\n        \"h3\",\n        pTag\n    ],\n    [\n        \"h4\",\n        pTag\n    ],\n    [\n        \"h5\",\n        pTag\n    ],\n    [\n        \"h6\",\n        pTag\n    ],\n    [\n        \"select\",\n        formTags\n    ],\n    [\n        \"input\",\n        formTags\n    ],\n    [\n        \"output\",\n        formTags\n    ],\n    [\n        \"button\",\n        formTags\n    ],\n    [\n        \"datalist\",\n        formTags\n    ],\n    [\n        \"textarea\",\n        formTags\n    ],\n    [\n        \"option\",\n        new Set([\n            \"option\"\n        ])\n    ],\n    [\n        \"optgroup\",\n        new Set([\n            \"optgroup\",\n            \"option\"\n        ])\n    ],\n    [\n        \"dd\",\n        ddtTags\n    ],\n    [\n        \"dt\",\n        ddtTags\n    ],\n    [\n        \"address\",\n        pTag\n    ],\n    [\n        \"article\",\n        pTag\n    ],\n    [\n        \"aside\",\n        pTag\n    ],\n    [\n        \"blockquote\",\n        pTag\n    ],\n    [\n        \"details\",\n        pTag\n    ],\n    [\n        \"div\",\n        pTag\n    ],\n    [\n        \"dl\",\n        pTag\n    ],\n    [\n        \"fieldset\",\n        pTag\n    ],\n    [\n        \"figcaption\",\n        pTag\n    ],\n    [\n        \"figure\",\n        pTag\n    ],\n    [\n        \"footer\",\n        pTag\n    ],\n    [\n        \"form\",\n        pTag\n    ],\n    [\n        \"header\",\n        pTag\n    ],\n    [\n        \"hr\",\n        pTag\n    ],\n    [\n        \"main\",\n        pTag\n    ],\n    [\n        \"nav\",\n        pTag\n    ],\n    [\n        \"ol\",\n        pTag\n    ],\n    [\n        \"pre\",\n        pTag\n    ],\n    [\n        \"section\",\n        pTag\n    ],\n    [\n        \"table\",\n        pTag\n    ],\n    [\n        \"ul\",\n        pTag\n    ],\n    [\n        \"rt\",\n        rtpTags\n    ],\n    [\n        \"rp\",\n        rtpTags\n    ],\n    [\n        \"tbody\",\n        tableSectionTags\n    ],\n    [\n        \"tfoot\",\n        tableSectionTags\n    ]\n]);\nconst voidElements = new Set([\n    \"area\",\n    \"base\",\n    \"basefont\",\n    \"br\",\n    \"col\",\n    \"command\",\n    \"embed\",\n    \"frame\",\n    \"hr\",\n    \"img\",\n    \"input\",\n    \"isindex\",\n    \"keygen\",\n    \"link\",\n    \"meta\",\n    \"param\",\n    \"source\",\n    \"track\",\n    \"wbr\"\n]);\nconst foreignContextElements = new Set([\n    \"math\",\n    \"svg\"\n]);\nconst htmlIntegrationElements = new Set([\n    \"mi\",\n    \"mo\",\n    \"mn\",\n    \"ms\",\n    \"mtext\",\n    \"annotation-xml\",\n    \"foreignobject\",\n    \"desc\",\n    \"title\"\n]);\nconst reNameEnd = /\\s|\\//;\nclass Parser {\n    constructor(cbs, options = {}){\n        var _a, _b, _c, _d, _e;\n        this.options = options;\n        /** The start index of the last event. */ this.startIndex = 0;\n        /** The end index of the last event. */ this.endIndex = 0;\n        /**\n         * Store the start index of the current open tag,\n         * so we can update the start index for attributes.\n         */ this.openTagStart = 0;\n        this.tagname = \"\";\n        this.attribname = \"\";\n        this.attribvalue = \"\";\n        this.attribs = null;\n        this.stack = [];\n        this.foreignContext = [];\n        this.buffers = [];\n        this.bufferOffset = 0;\n        /** The index of the last written buffer. Used when resuming after a `pause()`. */ this.writeIndex = 0;\n        /** Indicates whether the parser has finished running / `.end` has been called. */ this.ended = false;\n        this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};\n        this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode;\n        this.lowerCaseAttributeNames = (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode;\n        this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.options, this);\n        (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 ? void 0 : _e.call(_d, this);\n    }\n    // Tokenizer event handlers\n    /** @internal */ ontext(start, endIndex) {\n        var _a, _b;\n        const data = this.getSlice(start, endIndex);\n        this.endIndex = endIndex - 1;\n        (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, data);\n        this.startIndex = endIndex;\n    }\n    /** @internal */ ontextentity(cp) {\n        var _a, _b;\n        /*\n         * Entities can be emitted on the character, or directly after.\n         * We use the section start here to get accurate indices.\n         */ const index = this.tokenizer.getSectionStart();\n        this.endIndex = index - 1;\n        (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, (0,entities_lib_decode_js__WEBPACK_IMPORTED_MODULE_1__.fromCodePoint)(cp));\n        this.startIndex = index;\n    }\n    isVoidElement(name) {\n        return !this.options.xmlMode && voidElements.has(name);\n    }\n    /** @internal */ onopentagname(start, endIndex) {\n        this.endIndex = endIndex;\n        let name = this.getSlice(start, endIndex);\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        this.emitOpenTag(name);\n    }\n    emitOpenTag(name) {\n        var _a, _b, _c, _d;\n        this.openTagStart = this.startIndex;\n        this.tagname = name;\n        const impliesClose = !this.options.xmlMode && openImpliesClose.get(name);\n        if (impliesClose) {\n            while(this.stack.length > 0 && impliesClose.has(this.stack[this.stack.length - 1])){\n                const element = this.stack.pop();\n                (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, element, true);\n            }\n        }\n        if (!this.isVoidElement(name)) {\n            this.stack.push(name);\n            if (foreignContextElements.has(name)) {\n                this.foreignContext.push(true);\n            } else if (htmlIntegrationElements.has(name)) {\n                this.foreignContext.push(false);\n            }\n        }\n        (_d = (_c = this.cbs).onopentagname) === null || _d === void 0 ? void 0 : _d.call(_c, name);\n        if (this.cbs.onopentag) this.attribs = {};\n    }\n    endOpenTag(isImplied) {\n        var _a, _b;\n        this.startIndex = this.openTagStart;\n        if (this.attribs) {\n            (_b = (_a = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a, this.tagname, this.attribs, isImplied);\n            this.attribs = null;\n        }\n        if (this.cbs.onclosetag && this.isVoidElement(this.tagname)) {\n            this.cbs.onclosetag(this.tagname, true);\n        }\n        this.tagname = \"\";\n    }\n    /** @internal */ onopentagend(endIndex) {\n        this.endIndex = endIndex;\n        this.endOpenTag(false);\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    }\n    /** @internal */ onclosetag(start, endIndex) {\n        var _a, _b, _c, _d, _e, _f;\n        this.endIndex = endIndex;\n        let name = this.getSlice(start, endIndex);\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        if (foreignContextElements.has(name) || htmlIntegrationElements.has(name)) {\n            this.foreignContext.pop();\n        }\n        if (!this.isVoidElement(name)) {\n            const pos = this.stack.lastIndexOf(name);\n            if (pos !== -1) {\n                if (this.cbs.onclosetag) {\n                    let count = this.stack.length - pos;\n                    while(count--){\n                        // We know the stack has sufficient elements.\n                        this.cbs.onclosetag(this.stack.pop(), count !== 0);\n                    }\n                } else this.stack.length = pos;\n            } else if (!this.options.xmlMode && name === \"p\") {\n                // Implicit open before close\n                this.emitOpenTag(\"p\");\n                this.closeCurrentTag(true);\n            }\n        } else if (!this.options.xmlMode && name === \"br\") {\n            // We can't use `emitOpenTag` for implicit open, as `br` would be implicitly closed.\n            (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 ? void 0 : _b.call(_a, \"br\");\n            (_d = (_c = this.cbs).onopentag) === null || _d === void 0 ? void 0 : _d.call(_c, \"br\", {}, true);\n            (_f = (_e = this.cbs).onclosetag) === null || _f === void 0 ? void 0 : _f.call(_e, \"br\", false);\n        }\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    }\n    /** @internal */ onselfclosingtag(endIndex) {\n        this.endIndex = endIndex;\n        if (this.options.xmlMode || this.options.recognizeSelfClosing || this.foreignContext[this.foreignContext.length - 1]) {\n            this.closeCurrentTag(false);\n            // Set `startIndex` for next node\n            this.startIndex = endIndex + 1;\n        } else {\n            // Ignore the fact that the tag is self-closing.\n            this.onopentagend(endIndex);\n        }\n    }\n    closeCurrentTag(isOpenImplied) {\n        var _a, _b;\n        const name = this.tagname;\n        this.endOpenTag(isOpenImplied);\n        // Self-closing tags will be on the top of the stack\n        if (this.stack[this.stack.length - 1] === name) {\n            // If the opening tag isn't implied, the closing tag has to be implied.\n            (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, name, !isOpenImplied);\n            this.stack.pop();\n        }\n    }\n    /** @internal */ onattribname(start, endIndex) {\n        this.startIndex = start;\n        const name = this.getSlice(start, endIndex);\n        this.attribname = this.lowerCaseAttributeNames ? name.toLowerCase() : name;\n    }\n    /** @internal */ onattribdata(start, endIndex) {\n        this.attribvalue += this.getSlice(start, endIndex);\n    }\n    /** @internal */ onattribentity(cp) {\n        this.attribvalue += (0,entities_lib_decode_js__WEBPACK_IMPORTED_MODULE_1__.fromCodePoint)(cp);\n    }\n    /** @internal */ onattribend(quote, endIndex) {\n        var _a, _b;\n        this.endIndex = endIndex;\n        (_b = (_a = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a, this.attribname, this.attribvalue, quote === _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.QuoteType.Double ? '\"' : quote === _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.QuoteType.Single ? \"'\" : quote === _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.QuoteType.NoValue ? undefined : null);\n        if (this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {\n            this.attribs[this.attribname] = this.attribvalue;\n        }\n        this.attribvalue = \"\";\n    }\n    getInstructionName(value) {\n        const index = value.search(reNameEnd);\n        let name = index < 0 ? value : value.substr(0, index);\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        return name;\n    }\n    /** @internal */ ondeclaration(start, endIndex) {\n        this.endIndex = endIndex;\n        const value = this.getSlice(start, endIndex);\n        if (this.cbs.onprocessinginstruction) {\n            const name = this.getInstructionName(value);\n            this.cbs.onprocessinginstruction(`!${name}`, `!${value}`);\n        }\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    }\n    /** @internal */ onprocessinginstruction(start, endIndex) {\n        this.endIndex = endIndex;\n        const value = this.getSlice(start, endIndex);\n        if (this.cbs.onprocessinginstruction) {\n            const name = this.getInstructionName(value);\n            this.cbs.onprocessinginstruction(`?${name}`, `?${value}`);\n        }\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    }\n    /** @internal */ oncomment(start, endIndex, offset) {\n        var _a, _b, _c, _d;\n        this.endIndex = endIndex;\n        (_b = (_a = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a, this.getSlice(start, endIndex - offset));\n        (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    }\n    /** @internal */ oncdata(start, endIndex, offset) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        this.endIndex = endIndex;\n        const value = this.getSlice(start, endIndex - offset);\n        if (this.options.xmlMode || this.options.recognizeCDATA) {\n            (_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a);\n            (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);\n            (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e);\n        } else {\n            (_h = (_g = this.cbs).oncomment) === null || _h === void 0 ? void 0 : _h.call(_g, `[CDATA[${value}]]`);\n            (_k = (_j = this.cbs).oncommentend) === null || _k === void 0 ? void 0 : _k.call(_j);\n        }\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    }\n    /** @internal */ onend() {\n        var _a, _b;\n        if (this.cbs.onclosetag) {\n            // Set the end index for all remaining tags\n            this.endIndex = this.startIndex;\n            for(let index = this.stack.length; index > 0; this.cbs.onclosetag(this.stack[--index], true));\n        }\n        (_b = (_a = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    /**\n     * Resets the parser to a blank state, ready to parse a new HTML document\n     */ reset() {\n        var _a, _b, _c, _d;\n        (_b = (_a = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a);\n        this.tokenizer.reset();\n        this.tagname = \"\";\n        this.attribname = \"\";\n        this.attribs = null;\n        this.stack.length = 0;\n        this.startIndex = 0;\n        this.endIndex = 0;\n        (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);\n        this.buffers.length = 0;\n        this.bufferOffset = 0;\n        this.writeIndex = 0;\n        this.ended = false;\n    }\n    /**\n     * Resets the parser, then parses a complete document and\n     * pushes it to the handler.\n     *\n     * @param data Document to parse.\n     */ parseComplete(data) {\n        this.reset();\n        this.end(data);\n    }\n    getSlice(start, end) {\n        while(start - this.bufferOffset >= this.buffers[0].length){\n            this.shiftBuffer();\n        }\n        let slice = this.buffers[0].slice(start - this.bufferOffset, end - this.bufferOffset);\n        while(end - this.bufferOffset > this.buffers[0].length){\n            this.shiftBuffer();\n            slice += this.buffers[0].slice(0, end - this.bufferOffset);\n        }\n        return slice;\n    }\n    shiftBuffer() {\n        this.bufferOffset += this.buffers[0].length;\n        this.writeIndex--;\n        this.buffers.shift();\n    }\n    /**\n     * Parses a chunk of data and calls the corresponding callbacks.\n     *\n     * @param chunk Chunk to parse.\n     */ write(chunk) {\n        var _a, _b;\n        if (this.ended) {\n            (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(\".write() after done!\"));\n            return;\n        }\n        this.buffers.push(chunk);\n        if (this.tokenizer.running) {\n            this.tokenizer.write(chunk);\n            this.writeIndex++;\n        }\n    }\n    /**\n     * Parses the end of the buffer and clears the stack, calls onend.\n     *\n     * @param chunk Optional final chunk to parse.\n     */ end(chunk) {\n        var _a, _b;\n        if (this.ended) {\n            (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(\".end() after done!\"));\n            return;\n        }\n        if (chunk) this.write(chunk);\n        this.ended = true;\n        this.tokenizer.end();\n    }\n    /**\n     * Pauses parsing. The parser won't emit events until `resume` is called.\n     */ pause() {\n        this.tokenizer.pause();\n    }\n    /**\n     * Resumes parsing after `pause` was called.\n     */ resume() {\n        this.tokenizer.resume();\n        while(this.tokenizer.running && this.writeIndex < this.buffers.length){\n            this.tokenizer.write(this.buffers[this.writeIndex++]);\n        }\n        if (this.ended) this.tokenizer.end();\n    }\n    /**\n     * Alias of `write`, for backwards compatibility.\n     *\n     * @param chunk Chunk to parse.\n     * @deprecated\n     */ parseChunk(chunk) {\n        this.write(chunk);\n    }\n    /**\n     * Alias of `end`, for backwards compatibility.\n     *\n     * @param chunk Optional final chunk to parse.\n     * @deprecated\n     */ done(chunk) {\n        this.end(chunk);\n    }\n} //# sourceMappingURL=Parser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/htmlparser2/lib/esm/Parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/htmlparser2/lib/esm/Tokenizer.js":
/*!*******************************************************!*\
  !*** ./node_modules/htmlparser2/lib/esm/Tokenizer.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QuoteType: () => (/* binding */ QuoteType),\n/* harmony export */   \"default\": () => (/* binding */ Tokenizer)\n/* harmony export */ });\n/* harmony import */ var entities_lib_decode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! entities/lib/decode.js */ \"(rsc)/./node_modules/entities/lib/esm/decode.js\");\n\nvar CharCodes;\n(function(CharCodes) {\n    CharCodes[CharCodes[\"Tab\"] = 9] = \"Tab\";\n    CharCodes[CharCodes[\"NewLine\"] = 10] = \"NewLine\";\n    CharCodes[CharCodes[\"FormFeed\"] = 12] = \"FormFeed\";\n    CharCodes[CharCodes[\"CarriageReturn\"] = 13] = \"CarriageReturn\";\n    CharCodes[CharCodes[\"Space\"] = 32] = \"Space\";\n    CharCodes[CharCodes[\"ExclamationMark\"] = 33] = \"ExclamationMark\";\n    CharCodes[CharCodes[\"Number\"] = 35] = \"Number\";\n    CharCodes[CharCodes[\"Amp\"] = 38] = \"Amp\";\n    CharCodes[CharCodes[\"SingleQuote\"] = 39] = \"SingleQuote\";\n    CharCodes[CharCodes[\"DoubleQuote\"] = 34] = \"DoubleQuote\";\n    CharCodes[CharCodes[\"Dash\"] = 45] = \"Dash\";\n    CharCodes[CharCodes[\"Slash\"] = 47] = \"Slash\";\n    CharCodes[CharCodes[\"Zero\"] = 48] = \"Zero\";\n    CharCodes[CharCodes[\"Nine\"] = 57] = \"Nine\";\n    CharCodes[CharCodes[\"Semi\"] = 59] = \"Semi\";\n    CharCodes[CharCodes[\"Lt\"] = 60] = \"Lt\";\n    CharCodes[CharCodes[\"Eq\"] = 61] = \"Eq\";\n    CharCodes[CharCodes[\"Gt\"] = 62] = \"Gt\";\n    CharCodes[CharCodes[\"Questionmark\"] = 63] = \"Questionmark\";\n    CharCodes[CharCodes[\"UpperA\"] = 65] = \"UpperA\";\n    CharCodes[CharCodes[\"LowerA\"] = 97] = \"LowerA\";\n    CharCodes[CharCodes[\"UpperF\"] = 70] = \"UpperF\";\n    CharCodes[CharCodes[\"LowerF\"] = 102] = \"LowerF\";\n    CharCodes[CharCodes[\"UpperZ\"] = 90] = \"UpperZ\";\n    CharCodes[CharCodes[\"LowerZ\"] = 122] = \"LowerZ\";\n    CharCodes[CharCodes[\"LowerX\"] = 120] = \"LowerX\";\n    CharCodes[CharCodes[\"OpeningSquareBracket\"] = 91] = \"OpeningSquareBracket\";\n})(CharCodes || (CharCodes = {}));\n/** All the states the tokenizer can be in. */ var State;\n(function(State) {\n    State[State[\"Text\"] = 1] = \"Text\";\n    State[State[\"BeforeTagName\"] = 2] = \"BeforeTagName\";\n    State[State[\"InTagName\"] = 3] = \"InTagName\";\n    State[State[\"InSelfClosingTag\"] = 4] = \"InSelfClosingTag\";\n    State[State[\"BeforeClosingTagName\"] = 5] = \"BeforeClosingTagName\";\n    State[State[\"InClosingTagName\"] = 6] = \"InClosingTagName\";\n    State[State[\"AfterClosingTagName\"] = 7] = \"AfterClosingTagName\";\n    // Attributes\n    State[State[\"BeforeAttributeName\"] = 8] = \"BeforeAttributeName\";\n    State[State[\"InAttributeName\"] = 9] = \"InAttributeName\";\n    State[State[\"AfterAttributeName\"] = 10] = \"AfterAttributeName\";\n    State[State[\"BeforeAttributeValue\"] = 11] = \"BeforeAttributeValue\";\n    State[State[\"InAttributeValueDq\"] = 12] = \"InAttributeValueDq\";\n    State[State[\"InAttributeValueSq\"] = 13] = \"InAttributeValueSq\";\n    State[State[\"InAttributeValueNq\"] = 14] = \"InAttributeValueNq\";\n    // Declarations\n    State[State[\"BeforeDeclaration\"] = 15] = \"BeforeDeclaration\";\n    State[State[\"InDeclaration\"] = 16] = \"InDeclaration\";\n    // Processing instructions\n    State[State[\"InProcessingInstruction\"] = 17] = \"InProcessingInstruction\";\n    // Comments & CDATA\n    State[State[\"BeforeComment\"] = 18] = \"BeforeComment\";\n    State[State[\"CDATASequence\"] = 19] = \"CDATASequence\";\n    State[State[\"InSpecialComment\"] = 20] = \"InSpecialComment\";\n    State[State[\"InCommentLike\"] = 21] = \"InCommentLike\";\n    // Special tags\n    State[State[\"BeforeSpecialS\"] = 22] = \"BeforeSpecialS\";\n    State[State[\"SpecialStartSequence\"] = 23] = \"SpecialStartSequence\";\n    State[State[\"InSpecialTag\"] = 24] = \"InSpecialTag\";\n    State[State[\"BeforeEntity\"] = 25] = \"BeforeEntity\";\n    State[State[\"BeforeNumericEntity\"] = 26] = \"BeforeNumericEntity\";\n    State[State[\"InNamedEntity\"] = 27] = \"InNamedEntity\";\n    State[State[\"InNumericEntity\"] = 28] = \"InNumericEntity\";\n    State[State[\"InHexEntity\"] = 29] = \"InHexEntity\";\n})(State || (State = {}));\nfunction isWhitespace(c) {\n    return c === CharCodes.Space || c === CharCodes.NewLine || c === CharCodes.Tab || c === CharCodes.FormFeed || c === CharCodes.CarriageReturn;\n}\nfunction isEndOfTagSection(c) {\n    return c === CharCodes.Slash || c === CharCodes.Gt || isWhitespace(c);\n}\nfunction isNumber(c) {\n    return c >= CharCodes.Zero && c <= CharCodes.Nine;\n}\nfunction isASCIIAlpha(c) {\n    return c >= CharCodes.LowerA && c <= CharCodes.LowerZ || c >= CharCodes.UpperA && c <= CharCodes.UpperZ;\n}\nfunction isHexDigit(c) {\n    return c >= CharCodes.UpperA && c <= CharCodes.UpperF || c >= CharCodes.LowerA && c <= CharCodes.LowerF;\n}\nvar QuoteType;\n(function(QuoteType) {\n    QuoteType[QuoteType[\"NoValue\"] = 0] = \"NoValue\";\n    QuoteType[QuoteType[\"Unquoted\"] = 1] = \"Unquoted\";\n    QuoteType[QuoteType[\"Single\"] = 2] = \"Single\";\n    QuoteType[QuoteType[\"Double\"] = 3] = \"Double\";\n})(QuoteType || (QuoteType = {}));\n/**\n * Sequences used to match longer strings.\n *\n * We don't have `Script`, `Style`, or `Title` here. Instead, we re-use the *End\n * sequences with an increased offset.\n */ const Sequences = {\n    Cdata: new Uint8Array([\n        0x43,\n        0x44,\n        0x41,\n        0x54,\n        0x41,\n        0x5b\n    ]),\n    CdataEnd: new Uint8Array([\n        0x5d,\n        0x5d,\n        0x3e\n    ]),\n    CommentEnd: new Uint8Array([\n        0x2d,\n        0x2d,\n        0x3e\n    ]),\n    ScriptEnd: new Uint8Array([\n        0x3c,\n        0x2f,\n        0x73,\n        0x63,\n        0x72,\n        0x69,\n        0x70,\n        0x74\n    ]),\n    StyleEnd: new Uint8Array([\n        0x3c,\n        0x2f,\n        0x73,\n        0x74,\n        0x79,\n        0x6c,\n        0x65\n    ]),\n    TitleEnd: new Uint8Array([\n        0x3c,\n        0x2f,\n        0x74,\n        0x69,\n        0x74,\n        0x6c,\n        0x65\n    ])\n};\nclass Tokenizer {\n    constructor({ xmlMode = false, decodeEntities = true }, cbs){\n        this.cbs = cbs;\n        /** The current state the tokenizer is in. */ this.state = State.Text;\n        /** The read buffer. */ this.buffer = \"\";\n        /** The beginning of the section that is currently being read. */ this.sectionStart = 0;\n        /** The index within the buffer that we are currently looking at. */ this.index = 0;\n        /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */ this.baseState = State.Text;\n        /** For special parsing behavior inside of script and style tags. */ this.isSpecial = false;\n        /** Indicates whether the tokenizer has been paused. */ this.running = true;\n        /** The offset of the current buffer. */ this.offset = 0;\n        this.currentSequence = undefined;\n        this.sequenceIndex = 0;\n        this.trieIndex = 0;\n        this.trieCurrent = 0;\n        /** For named entities, the index of the value. For numeric entities, the code point. */ this.entityResult = 0;\n        this.entityExcess = 0;\n        this.xmlMode = xmlMode;\n        this.decodeEntities = decodeEntities;\n        this.entityTrie = xmlMode ? entities_lib_decode_js__WEBPACK_IMPORTED_MODULE_0__.xmlDecodeTree : entities_lib_decode_js__WEBPACK_IMPORTED_MODULE_0__.htmlDecodeTree;\n    }\n    reset() {\n        this.state = State.Text;\n        this.buffer = \"\";\n        this.sectionStart = 0;\n        this.index = 0;\n        this.baseState = State.Text;\n        this.currentSequence = undefined;\n        this.running = true;\n        this.offset = 0;\n    }\n    write(chunk) {\n        this.offset += this.buffer.length;\n        this.buffer = chunk;\n        this.parse();\n    }\n    end() {\n        if (this.running) this.finish();\n    }\n    pause() {\n        this.running = false;\n    }\n    resume() {\n        this.running = true;\n        if (this.index < this.buffer.length + this.offset) {\n            this.parse();\n        }\n    }\n    /**\n     * The current index within all of the written data.\n     */ getIndex() {\n        return this.index;\n    }\n    /**\n     * The start of the current section.\n     */ getSectionStart() {\n        return this.sectionStart;\n    }\n    stateText(c) {\n        if (c === CharCodes.Lt || !this.decodeEntities && this.fastForwardTo(CharCodes.Lt)) {\n            if (this.index > this.sectionStart) {\n                this.cbs.ontext(this.sectionStart, this.index);\n            }\n            this.state = State.BeforeTagName;\n            this.sectionStart = this.index;\n        } else if (this.decodeEntities && c === CharCodes.Amp) {\n            this.state = State.BeforeEntity;\n        }\n    }\n    stateSpecialStartSequence(c) {\n        const isEnd = this.sequenceIndex === this.currentSequence.length;\n        const isMatch = isEnd ? isEndOfTagSection(c) : (c | 0x20) === this.currentSequence[this.sequenceIndex];\n        if (!isMatch) {\n            this.isSpecial = false;\n        } else if (!isEnd) {\n            this.sequenceIndex++;\n            return;\n        }\n        this.sequenceIndex = 0;\n        this.state = State.InTagName;\n        this.stateInTagName(c);\n    }\n    /** Look for an end tag. For <title> tags, also decode entities. */ stateInSpecialTag(c) {\n        if (this.sequenceIndex === this.currentSequence.length) {\n            if (c === CharCodes.Gt || isWhitespace(c)) {\n                const endOfText = this.index - this.currentSequence.length;\n                if (this.sectionStart < endOfText) {\n                    // Spoof the index so that reported locations match up.\n                    const actualIndex = this.index;\n                    this.index = endOfText;\n                    this.cbs.ontext(this.sectionStart, endOfText);\n                    this.index = actualIndex;\n                }\n                this.isSpecial = false;\n                this.sectionStart = endOfText + 2; // Skip over the `</`\n                this.stateInClosingTagName(c);\n                return; // We are done; skip the rest of the function.\n            }\n            this.sequenceIndex = 0;\n        }\n        if ((c | 0x20) === this.currentSequence[this.sequenceIndex]) {\n            this.sequenceIndex += 1;\n        } else if (this.sequenceIndex === 0) {\n            if (this.currentSequence === Sequences.TitleEnd) {\n                // We have to parse entities in <title> tags.\n                if (this.decodeEntities && c === CharCodes.Amp) {\n                    this.state = State.BeforeEntity;\n                }\n            } else if (this.fastForwardTo(CharCodes.Lt)) {\n                // Outside of <title> tags, we can fast-forward.\n                this.sequenceIndex = 1;\n            }\n        } else {\n            // If we see a `<`, set the sequence index to 1; useful for eg. `<</script>`.\n            this.sequenceIndex = Number(c === CharCodes.Lt);\n        }\n    }\n    stateCDATASequence(c) {\n        if (c === Sequences.Cdata[this.sequenceIndex]) {\n            if (++this.sequenceIndex === Sequences.Cdata.length) {\n                this.state = State.InCommentLike;\n                this.currentSequence = Sequences.CdataEnd;\n                this.sequenceIndex = 0;\n                this.sectionStart = this.index + 1;\n            }\n        } else {\n            this.sequenceIndex = 0;\n            this.state = State.InDeclaration;\n            this.stateInDeclaration(c); // Reconsume the character\n        }\n    }\n    /**\n     * When we wait for one specific character, we can speed things up\n     * by skipping through the buffer until we find it.\n     *\n     * @returns Whether the character was found.\n     */ fastForwardTo(c) {\n        while(++this.index < this.buffer.length + this.offset){\n            if (this.buffer.charCodeAt(this.index - this.offset) === c) {\n                return true;\n            }\n        }\n        /*\n         * We increment the index at the end of the `parse` loop,\n         * so set it to `buffer.length - 1` here.\n         *\n         * TODO: Refactor `parse` to increment index before calling states.\n         */ this.index = this.buffer.length + this.offset - 1;\n        return false;\n    }\n    /**\n     * Comments and CDATA end with `-->` and `]]>`.\n     *\n     * Their common qualities are:\n     * - Their end sequences have a distinct character they start with.\n     * - That character is then repeated, so we have to check multiple repeats.\n     * - All characters but the start character of the sequence can be skipped.\n     */ stateInCommentLike(c) {\n        if (c === this.currentSequence[this.sequenceIndex]) {\n            if (++this.sequenceIndex === this.currentSequence.length) {\n                if (this.currentSequence === Sequences.CdataEnd) {\n                    this.cbs.oncdata(this.sectionStart, this.index, 2);\n                } else {\n                    this.cbs.oncomment(this.sectionStart, this.index, 2);\n                }\n                this.sequenceIndex = 0;\n                this.sectionStart = this.index + 1;\n                this.state = State.Text;\n            }\n        } else if (this.sequenceIndex === 0) {\n            // Fast-forward to the first character of the sequence\n            if (this.fastForwardTo(this.currentSequence[0])) {\n                this.sequenceIndex = 1;\n            }\n        } else if (c !== this.currentSequence[this.sequenceIndex - 1]) {\n            // Allow long sequences, eg. --->, ]]]>\n            this.sequenceIndex = 0;\n        }\n    }\n    /**\n     * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.\n     *\n     * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).\n     * We allow anything that wouldn't end the tag.\n     */ isTagStartChar(c) {\n        return this.xmlMode ? !isEndOfTagSection(c) : isASCIIAlpha(c);\n    }\n    startSpecial(sequence, offset) {\n        this.isSpecial = true;\n        this.currentSequence = sequence;\n        this.sequenceIndex = offset;\n        this.state = State.SpecialStartSequence;\n    }\n    stateBeforeTagName(c) {\n        if (c === CharCodes.ExclamationMark) {\n            this.state = State.BeforeDeclaration;\n            this.sectionStart = this.index + 1;\n        } else if (c === CharCodes.Questionmark) {\n            this.state = State.InProcessingInstruction;\n            this.sectionStart = this.index + 1;\n        } else if (this.isTagStartChar(c)) {\n            const lower = c | 0x20;\n            this.sectionStart = this.index;\n            if (!this.xmlMode && lower === Sequences.TitleEnd[2]) {\n                this.startSpecial(Sequences.TitleEnd, 3);\n            } else {\n                this.state = !this.xmlMode && lower === Sequences.ScriptEnd[2] ? State.BeforeSpecialS : State.InTagName;\n            }\n        } else if (c === CharCodes.Slash) {\n            this.state = State.BeforeClosingTagName;\n        } else {\n            this.state = State.Text;\n            this.stateText(c);\n        }\n    }\n    stateInTagName(c) {\n        if (isEndOfTagSection(c)) {\n            this.cbs.onopentagname(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.state = State.BeforeAttributeName;\n            this.stateBeforeAttributeName(c);\n        }\n    }\n    stateBeforeClosingTagName(c) {\n        if (isWhitespace(c)) {\n        // Ignore\n        } else if (c === CharCodes.Gt) {\n            this.state = State.Text;\n        } else {\n            this.state = this.isTagStartChar(c) ? State.InClosingTagName : State.InSpecialComment;\n            this.sectionStart = this.index;\n        }\n    }\n    stateInClosingTagName(c) {\n        if (c === CharCodes.Gt || isWhitespace(c)) {\n            this.cbs.onclosetag(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.state = State.AfterClosingTagName;\n            this.stateAfterClosingTagName(c);\n        }\n    }\n    stateAfterClosingTagName(c) {\n        // Skip everything until \">\"\n        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n            this.state = State.Text;\n            this.baseState = State.Text;\n            this.sectionStart = this.index + 1;\n        }\n    }\n    stateBeforeAttributeName(c) {\n        if (c === CharCodes.Gt) {\n            this.cbs.onopentagend(this.index);\n            if (this.isSpecial) {\n                this.state = State.InSpecialTag;\n                this.sequenceIndex = 0;\n            } else {\n                this.state = State.Text;\n            }\n            this.baseState = this.state;\n            this.sectionStart = this.index + 1;\n        } else if (c === CharCodes.Slash) {\n            this.state = State.InSelfClosingTag;\n        } else if (!isWhitespace(c)) {\n            this.state = State.InAttributeName;\n            this.sectionStart = this.index;\n        }\n    }\n    stateInSelfClosingTag(c) {\n        if (c === CharCodes.Gt) {\n            this.cbs.onselfclosingtag(this.index);\n            this.state = State.Text;\n            this.baseState = State.Text;\n            this.sectionStart = this.index + 1;\n            this.isSpecial = false; // Reset special state, in case of self-closing special tags\n        } else if (!isWhitespace(c)) {\n            this.state = State.BeforeAttributeName;\n            this.stateBeforeAttributeName(c);\n        }\n    }\n    stateInAttributeName(c) {\n        if (c === CharCodes.Eq || isEndOfTagSection(c)) {\n            this.cbs.onattribname(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.state = State.AfterAttributeName;\n            this.stateAfterAttributeName(c);\n        }\n    }\n    stateAfterAttributeName(c) {\n        if (c === CharCodes.Eq) {\n            this.state = State.BeforeAttributeValue;\n        } else if (c === CharCodes.Slash || c === CharCodes.Gt) {\n            this.cbs.onattribend(QuoteType.NoValue, this.index);\n            this.state = State.BeforeAttributeName;\n            this.stateBeforeAttributeName(c);\n        } else if (!isWhitespace(c)) {\n            this.cbs.onattribend(QuoteType.NoValue, this.index);\n            this.state = State.InAttributeName;\n            this.sectionStart = this.index;\n        }\n    }\n    stateBeforeAttributeValue(c) {\n        if (c === CharCodes.DoubleQuote) {\n            this.state = State.InAttributeValueDq;\n            this.sectionStart = this.index + 1;\n        } else if (c === CharCodes.SingleQuote) {\n            this.state = State.InAttributeValueSq;\n            this.sectionStart = this.index + 1;\n        } else if (!isWhitespace(c)) {\n            this.sectionStart = this.index;\n            this.state = State.InAttributeValueNq;\n            this.stateInAttributeValueNoQuotes(c); // Reconsume token\n        }\n    }\n    handleInAttributeValue(c, quote) {\n        if (c === quote || !this.decodeEntities && this.fastForwardTo(quote)) {\n            this.cbs.onattribdata(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.cbs.onattribend(quote === CharCodes.DoubleQuote ? QuoteType.Double : QuoteType.Single, this.index);\n            this.state = State.BeforeAttributeName;\n        } else if (this.decodeEntities && c === CharCodes.Amp) {\n            this.baseState = this.state;\n            this.state = State.BeforeEntity;\n        }\n    }\n    stateInAttributeValueDoubleQuotes(c) {\n        this.handleInAttributeValue(c, CharCodes.DoubleQuote);\n    }\n    stateInAttributeValueSingleQuotes(c) {\n        this.handleInAttributeValue(c, CharCodes.SingleQuote);\n    }\n    stateInAttributeValueNoQuotes(c) {\n        if (isWhitespace(c) || c === CharCodes.Gt) {\n            this.cbs.onattribdata(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.cbs.onattribend(QuoteType.Unquoted, this.index);\n            this.state = State.BeforeAttributeName;\n            this.stateBeforeAttributeName(c);\n        } else if (this.decodeEntities && c === CharCodes.Amp) {\n            this.baseState = this.state;\n            this.state = State.BeforeEntity;\n        }\n    }\n    stateBeforeDeclaration(c) {\n        if (c === CharCodes.OpeningSquareBracket) {\n            this.state = State.CDATASequence;\n            this.sequenceIndex = 0;\n        } else {\n            this.state = c === CharCodes.Dash ? State.BeforeComment : State.InDeclaration;\n        }\n    }\n    stateInDeclaration(c) {\n        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n            this.cbs.ondeclaration(this.sectionStart, this.index);\n            this.state = State.Text;\n            this.sectionStart = this.index + 1;\n        }\n    }\n    stateInProcessingInstruction(c) {\n        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n            this.cbs.onprocessinginstruction(this.sectionStart, this.index);\n            this.state = State.Text;\n            this.sectionStart = this.index + 1;\n        }\n    }\n    stateBeforeComment(c) {\n        if (c === CharCodes.Dash) {\n            this.state = State.InCommentLike;\n            this.currentSequence = Sequences.CommentEnd;\n            // Allow short comments (eg. <!-->)\n            this.sequenceIndex = 2;\n            this.sectionStart = this.index + 1;\n        } else {\n            this.state = State.InDeclaration;\n        }\n    }\n    stateInSpecialComment(c) {\n        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n            this.cbs.oncomment(this.sectionStart, this.index, 0);\n            this.state = State.Text;\n            this.sectionStart = this.index + 1;\n        }\n    }\n    stateBeforeSpecialS(c) {\n        const lower = c | 0x20;\n        if (lower === Sequences.ScriptEnd[3]) {\n            this.startSpecial(Sequences.ScriptEnd, 4);\n        } else if (lower === Sequences.StyleEnd[3]) {\n            this.startSpecial(Sequences.StyleEnd, 4);\n        } else {\n            this.state = State.InTagName;\n            this.stateInTagName(c); // Consume the token again\n        }\n    }\n    stateBeforeEntity(c) {\n        // Start excess with 1 to include the '&'\n        this.entityExcess = 1;\n        this.entityResult = 0;\n        if (c === CharCodes.Number) {\n            this.state = State.BeforeNumericEntity;\n        } else if (c === CharCodes.Amp) {\n        // We have two `&` characters in a row. Stay in the current state.\n        } else {\n            this.trieIndex = 0;\n            this.trieCurrent = this.entityTrie[0];\n            this.state = State.InNamedEntity;\n            this.stateInNamedEntity(c);\n        }\n    }\n    stateInNamedEntity(c) {\n        this.entityExcess += 1;\n        this.trieIndex = (0,entities_lib_decode_js__WEBPACK_IMPORTED_MODULE_0__.determineBranch)(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c);\n        if (this.trieIndex < 0) {\n            this.emitNamedEntity();\n            this.index--;\n            return;\n        }\n        this.trieCurrent = this.entityTrie[this.trieIndex];\n        const masked = this.trieCurrent & entities_lib_decode_js__WEBPACK_IMPORTED_MODULE_0__.BinTrieFlags.VALUE_LENGTH;\n        // If the branch is a value, store it and continue\n        if (masked) {\n            // The mask is the number of bytes of the value, including the current byte.\n            const valueLength = (masked >> 14) - 1;\n            // If we have a legacy entity while parsing strictly, just skip the number of bytes\n            if (!this.allowLegacyEntity() && c !== CharCodes.Semi) {\n                this.trieIndex += valueLength;\n            } else {\n                // Add 1 as we have already incremented the excess\n                const entityStart = this.index - this.entityExcess + 1;\n                if (entityStart > this.sectionStart) {\n                    this.emitPartial(this.sectionStart, entityStart);\n                }\n                // If this is a surrogate pair, consume the next two bytes\n                this.entityResult = this.trieIndex;\n                this.trieIndex += valueLength;\n                this.entityExcess = 0;\n                this.sectionStart = this.index + 1;\n                if (valueLength === 0) {\n                    this.emitNamedEntity();\n                }\n            }\n        }\n    }\n    emitNamedEntity() {\n        this.state = this.baseState;\n        if (this.entityResult === 0) {\n            return;\n        }\n        const valueLength = (this.entityTrie[this.entityResult] & entities_lib_decode_js__WEBPACK_IMPORTED_MODULE_0__.BinTrieFlags.VALUE_LENGTH) >> 14;\n        switch(valueLength){\n            case 1:\n                {\n                    this.emitCodePoint(this.entityTrie[this.entityResult] & ~entities_lib_decode_js__WEBPACK_IMPORTED_MODULE_0__.BinTrieFlags.VALUE_LENGTH);\n                    break;\n                }\n            case 2:\n                {\n                    this.emitCodePoint(this.entityTrie[this.entityResult + 1]);\n                    break;\n                }\n            case 3:\n                {\n                    this.emitCodePoint(this.entityTrie[this.entityResult + 1]);\n                    this.emitCodePoint(this.entityTrie[this.entityResult + 2]);\n                }\n        }\n    }\n    stateBeforeNumericEntity(c) {\n        if ((c | 0x20) === CharCodes.LowerX) {\n            this.entityExcess++;\n            this.state = State.InHexEntity;\n        } else {\n            this.state = State.InNumericEntity;\n            this.stateInNumericEntity(c);\n        }\n    }\n    emitNumericEntity(strict) {\n        const entityStart = this.index - this.entityExcess - 1;\n        const numberStart = entityStart + 2 + Number(this.state === State.InHexEntity);\n        if (numberStart !== this.index) {\n            // Emit leading data if any\n            if (entityStart > this.sectionStart) {\n                this.emitPartial(this.sectionStart, entityStart);\n            }\n            this.sectionStart = this.index + Number(strict);\n            this.emitCodePoint((0,entities_lib_decode_js__WEBPACK_IMPORTED_MODULE_0__.replaceCodePoint)(this.entityResult));\n        }\n        this.state = this.baseState;\n    }\n    stateInNumericEntity(c) {\n        if (c === CharCodes.Semi) {\n            this.emitNumericEntity(true);\n        } else if (isNumber(c)) {\n            this.entityResult = this.entityResult * 10 + (c - CharCodes.Zero);\n            this.entityExcess++;\n        } else {\n            if (this.allowLegacyEntity()) {\n                this.emitNumericEntity(false);\n            } else {\n                this.state = this.baseState;\n            }\n            this.index--;\n        }\n    }\n    stateInHexEntity(c) {\n        if (c === CharCodes.Semi) {\n            this.emitNumericEntity(true);\n        } else if (isNumber(c)) {\n            this.entityResult = this.entityResult * 16 + (c - CharCodes.Zero);\n            this.entityExcess++;\n        } else if (isHexDigit(c)) {\n            this.entityResult = this.entityResult * 16 + ((c | 0x20) - CharCodes.LowerA + 10);\n            this.entityExcess++;\n        } else {\n            if (this.allowLegacyEntity()) {\n                this.emitNumericEntity(false);\n            } else {\n                this.state = this.baseState;\n            }\n            this.index--;\n        }\n    }\n    allowLegacyEntity() {\n        return !this.xmlMode && (this.baseState === State.Text || this.baseState === State.InSpecialTag);\n    }\n    /**\n     * Remove data that has already been consumed from the buffer.\n     */ cleanup() {\n        // If we are inside of text or attributes, emit what we already have.\n        if (this.running && this.sectionStart !== this.index) {\n            if (this.state === State.Text || this.state === State.InSpecialTag && this.sequenceIndex === 0) {\n                this.cbs.ontext(this.sectionStart, this.index);\n                this.sectionStart = this.index;\n            } else if (this.state === State.InAttributeValueDq || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueNq) {\n                this.cbs.onattribdata(this.sectionStart, this.index);\n                this.sectionStart = this.index;\n            }\n        }\n    }\n    shouldContinue() {\n        return this.index < this.buffer.length + this.offset && this.running;\n    }\n    /**\n     * Iterates through the buffer, calling the function corresponding to the current state.\n     *\n     * States that are more likely to be hit are higher up, as a performance improvement.\n     */ parse() {\n        while(this.shouldContinue()){\n            const c = this.buffer.charCodeAt(this.index - this.offset);\n            switch(this.state){\n                case State.Text:\n                    {\n                        this.stateText(c);\n                        break;\n                    }\n                case State.SpecialStartSequence:\n                    {\n                        this.stateSpecialStartSequence(c);\n                        break;\n                    }\n                case State.InSpecialTag:\n                    {\n                        this.stateInSpecialTag(c);\n                        break;\n                    }\n                case State.CDATASequence:\n                    {\n                        this.stateCDATASequence(c);\n                        break;\n                    }\n                case State.InAttributeValueDq:\n                    {\n                        this.stateInAttributeValueDoubleQuotes(c);\n                        break;\n                    }\n                case State.InAttributeName:\n                    {\n                        this.stateInAttributeName(c);\n                        break;\n                    }\n                case State.InCommentLike:\n                    {\n                        this.stateInCommentLike(c);\n                        break;\n                    }\n                case State.InSpecialComment:\n                    {\n                        this.stateInSpecialComment(c);\n                        break;\n                    }\n                case State.BeforeAttributeName:\n                    {\n                        this.stateBeforeAttributeName(c);\n                        break;\n                    }\n                case State.InTagName:\n                    {\n                        this.stateInTagName(c);\n                        break;\n                    }\n                case State.InClosingTagName:\n                    {\n                        this.stateInClosingTagName(c);\n                        break;\n                    }\n                case State.BeforeTagName:\n                    {\n                        this.stateBeforeTagName(c);\n                        break;\n                    }\n                case State.AfterAttributeName:\n                    {\n                        this.stateAfterAttributeName(c);\n                        break;\n                    }\n                case State.InAttributeValueSq:\n                    {\n                        this.stateInAttributeValueSingleQuotes(c);\n                        break;\n                    }\n                case State.BeforeAttributeValue:\n                    {\n                        this.stateBeforeAttributeValue(c);\n                        break;\n                    }\n                case State.BeforeClosingTagName:\n                    {\n                        this.stateBeforeClosingTagName(c);\n                        break;\n                    }\n                case State.AfterClosingTagName:\n                    {\n                        this.stateAfterClosingTagName(c);\n                        break;\n                    }\n                case State.BeforeSpecialS:\n                    {\n                        this.stateBeforeSpecialS(c);\n                        break;\n                    }\n                case State.InAttributeValueNq:\n                    {\n                        this.stateInAttributeValueNoQuotes(c);\n                        break;\n                    }\n                case State.InSelfClosingTag:\n                    {\n                        this.stateInSelfClosingTag(c);\n                        break;\n                    }\n                case State.InDeclaration:\n                    {\n                        this.stateInDeclaration(c);\n                        break;\n                    }\n                case State.BeforeDeclaration:\n                    {\n                        this.stateBeforeDeclaration(c);\n                        break;\n                    }\n                case State.BeforeComment:\n                    {\n                        this.stateBeforeComment(c);\n                        break;\n                    }\n                case State.InProcessingInstruction:\n                    {\n                        this.stateInProcessingInstruction(c);\n                        break;\n                    }\n                case State.InNamedEntity:\n                    {\n                        this.stateInNamedEntity(c);\n                        break;\n                    }\n                case State.BeforeEntity:\n                    {\n                        this.stateBeforeEntity(c);\n                        break;\n                    }\n                case State.InHexEntity:\n                    {\n                        this.stateInHexEntity(c);\n                        break;\n                    }\n                case State.InNumericEntity:\n                    {\n                        this.stateInNumericEntity(c);\n                        break;\n                    }\n                default:\n                    {\n                        // `this._state === State.BeforeNumericEntity`\n                        this.stateBeforeNumericEntity(c);\n                    }\n            }\n            this.index++;\n        }\n        this.cleanup();\n    }\n    finish() {\n        if (this.state === State.InNamedEntity) {\n            this.emitNamedEntity();\n        }\n        // If there is remaining data, emit it in a reasonable way\n        if (this.sectionStart < this.index) {\n            this.handleTrailingData();\n        }\n        this.cbs.onend();\n    }\n    /** Handle any trailing data. */ handleTrailingData() {\n        const endIndex = this.buffer.length + this.offset;\n        if (this.state === State.InCommentLike) {\n            if (this.currentSequence === Sequences.CdataEnd) {\n                this.cbs.oncdata(this.sectionStart, endIndex, 0);\n            } else {\n                this.cbs.oncomment(this.sectionStart, endIndex, 0);\n            }\n        } else if (this.state === State.InNumericEntity && this.allowLegacyEntity()) {\n            this.emitNumericEntity(false);\n        // All trailing data will have been consumed\n        } else if (this.state === State.InHexEntity && this.allowLegacyEntity()) {\n            this.emitNumericEntity(false);\n        // All trailing data will have been consumed\n        } else if (this.state === State.InTagName || this.state === State.BeforeAttributeName || this.state === State.BeforeAttributeValue || this.state === State.AfterAttributeName || this.state === State.InAttributeName || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueDq || this.state === State.InAttributeValueNq || this.state === State.InClosingTagName) {\n        /*\n             * If we are currently in an opening or closing tag, us not calling the\n             * respective callback signals that the tag should be ignored.\n             */ } else {\n            this.cbs.ontext(this.sectionStart, endIndex);\n        }\n    }\n    emitPartial(start, endIndex) {\n        if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {\n            this.cbs.onattribdata(start, endIndex);\n        } else {\n            this.cbs.ontext(start, endIndex);\n        }\n    }\n    emitCodePoint(cp) {\n        if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {\n            this.cbs.onattribentity(cp);\n        } else {\n            this.cbs.ontextentity(cp);\n        }\n    }\n} //# sourceMappingURL=Tokenizer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/htmlparser2/lib/esm/Tokenizer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/htmlparser2/lib/esm/index.js":
/*!***************************************************!*\
  !*** ./node_modules/htmlparser2/lib/esm/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultHandler: () => (/* reexport safe */ domhandler__WEBPACK_IMPORTED_MODULE_1__.DomHandler),\n/* harmony export */   DomHandler: () => (/* reexport safe */ domhandler__WEBPACK_IMPORTED_MODULE_1__.DomHandler),\n/* harmony export */   DomUtils: () => (/* reexport module object */ domutils__WEBPACK_IMPORTED_MODULE_4__),\n/* harmony export */   ElementType: () => (/* reexport module object */ domelementtype__WEBPACK_IMPORTED_MODULE_3__),\n/* harmony export */   Parser: () => (/* reexport safe */ _Parser_js__WEBPACK_IMPORTED_MODULE_0__.Parser),\n/* harmony export */   Tokenizer: () => (/* reexport safe */ _Tokenizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   createDomStream: () => (/* binding */ createDomStream),\n/* harmony export */   getFeed: () => (/* reexport safe */ domutils__WEBPACK_IMPORTED_MODULE_4__.getFeed),\n/* harmony export */   parseDOM: () => (/* binding */ parseDOM),\n/* harmony export */   parseDocument: () => (/* binding */ parseDocument),\n/* harmony export */   parseFeed: () => (/* binding */ parseFeed)\n/* harmony export */ });\n/* harmony import */ var _Parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Parser.js */ \"(rsc)/./node_modules/htmlparser2/lib/esm/Parser.js\");\n/* harmony import */ var domhandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! domhandler */ \"(rsc)/./node_modules/domhandler/lib/esm/index.js\");\n/* harmony import */ var _Tokenizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Tokenizer.js */ \"(rsc)/./node_modules/htmlparser2/lib/esm/Tokenizer.js\");\n/* harmony import */ var domelementtype__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! domelementtype */ \"(rsc)/./node_modules/domelementtype/lib/esm/index.js\");\n/* harmony import */ var domutils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! domutils */ \"(rsc)/./node_modules/domutils/lib/esm/index.js\");\n\n\n\n\n// Helper methods\n/**\n * Parses the data, returns the resulting document.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n */ function parseDocument(data, options) {\n    const handler = new domhandler__WEBPACK_IMPORTED_MODULE_1__.DomHandler(undefined, options);\n    new _Parser_js__WEBPACK_IMPORTED_MODULE_0__.Parser(handler, options).end(data);\n    return handler.root;\n}\n/**\n * Parses data, returns an array of the root nodes.\n *\n * Note that the root nodes still have a `Document` node as their parent.\n * Use `parseDocument` to get the `Document` node instead.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n * @deprecated Use `parseDocument` instead.\n */ function parseDOM(data, options) {\n    return parseDocument(data, options).children;\n}\n/**\n * Creates a parser instance, with an attached DOM handler.\n *\n * @param callback A callback that will be called once parsing has been completed.\n * @param options Optional options for the parser and DOM builder.\n * @param elementCallback An optional callback that will be called every time a tag has been completed inside of the DOM.\n */ function createDomStream(callback, options, elementCallback) {\n    const handler = new domhandler__WEBPACK_IMPORTED_MODULE_1__.DomHandler(callback, options, elementCallback);\n    return new _Parser_js__WEBPACK_IMPORTED_MODULE_0__.Parser(handler, options);\n}\n\n/*\n * All of the following exports exist for backwards-compatibility.\n * They should probably be removed eventually.\n */ \n\n\nconst parseFeedDefaultOptions = {\n    xmlMode: true\n};\n/**\n * Parse a feed.\n *\n * @param feed The feed that should be parsed, as a string.\n * @param options Optionally, options for parsing. When using this, you should set `xmlMode` to `true`.\n */ function parseFeed(feed, options = parseFeedDefaultOptions) {\n    return (0,domutils__WEBPACK_IMPORTED_MODULE_4__.getFeed)(parseDOM(feed, options));\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXFDO0FBQ0E7QUFDSTtBQUdTO0FBQ2xELGlCQUFpQjtBQUNqQjs7Ozs7Q0FLQyxHQUNNLFNBQVNHLGNBQWNDLElBQUksRUFBRUMsT0FBTztJQUN2QyxNQUFNQyxVQUFVLElBQUlMLGtEQUFVQSxDQUFDTSxXQUFXRjtJQUMxQyxJQUFJTCw4Q0FBTUEsQ0FBQ00sU0FBU0QsU0FBU0csR0FBRyxDQUFDSjtJQUNqQyxPQUFPRSxRQUFRRyxJQUFJO0FBQ3ZCO0FBQ0E7Ozs7Ozs7OztDQVNDLEdBQ00sU0FBU0MsU0FBU04sSUFBSSxFQUFFQyxPQUFPO0lBQ2xDLE9BQU9GLGNBQWNDLE1BQU1DLFNBQVNNLFFBQVE7QUFDaEQ7QUFDQTs7Ozs7O0NBTUMsR0FDTSxTQUFTQyxnQkFBZ0JDLFFBQVEsRUFBRVIsT0FBTyxFQUFFUyxlQUFlO0lBQzlELE1BQU1SLFVBQVUsSUFBSUwsa0RBQVVBLENBQUNZLFVBQVVSLFNBQVNTO0lBQ2xELE9BQU8sSUFBSWQsOENBQU1BLENBQUNNLFNBQVNEO0FBQy9CO0FBQ3VEO0FBQ3ZEOzs7Q0FHQyxHQUM2QztBQUNYO0FBQ0E7QUFDbkMsTUFBTWMsMEJBQTBCO0lBQUVDLFNBQVM7QUFBSztBQUNoRDs7Ozs7Q0FLQyxHQUNNLFNBQVNDLFVBQVVDLElBQUksRUFBRWpCLFVBQVVjLHVCQUF1QjtJQUM3RCxPQUFPRCxpREFBT0EsQ0FBQ1IsU0FBU1ksTUFBTWpCO0FBQ2xDO0FBQ3FDLENBQ3JDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dhaGVndXJ1LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL2VzbS9pbmRleC5qcz8yOTM3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhcnNlciB9IGZyb20gXCIuL1BhcnNlci5qc1wiO1xuZXhwb3J0IHsgUGFyc2VyIH0gZnJvbSBcIi4vUGFyc2VyLmpzXCI7XG5pbXBvcnQgeyBEb21IYW5kbGVyLCB9IGZyb20gXCJkb21oYW5kbGVyXCI7XG5leHBvcnQgeyBEb21IYW5kbGVyLCBcbi8vIE9sZCBuYW1lIGZvciBEb21IYW5kbGVyXG5Eb21IYW5kbGVyIGFzIERlZmF1bHRIYW5kbGVyLCB9IGZyb20gXCJkb21oYW5kbGVyXCI7XG4vLyBIZWxwZXIgbWV0aG9kc1xuLyoqXG4gKiBQYXJzZXMgdGhlIGRhdGEsIHJldHVybnMgdGhlIHJlc3VsdGluZyBkb2N1bWVudC5cbiAqXG4gKiBAcGFyYW0gZGF0YSBUaGUgZGF0YSB0aGF0IHNob3VsZCBiZSBwYXJzZWQuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbCBvcHRpb25zIGZvciB0aGUgcGFyc2VyIGFuZCBET00gYnVpbGRlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRG9jdW1lbnQoZGF0YSwgb3B0aW9ucykge1xuICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgRG9tSGFuZGxlcih1bmRlZmluZWQsIG9wdGlvbnMpO1xuICAgIG5ldyBQYXJzZXIoaGFuZGxlciwgb3B0aW9ucykuZW5kKGRhdGEpO1xuICAgIHJldHVybiBoYW5kbGVyLnJvb3Q7XG59XG4vKipcbiAqIFBhcnNlcyBkYXRhLCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSByb290IG5vZGVzLlxuICpcbiAqIE5vdGUgdGhhdCB0aGUgcm9vdCBub2RlcyBzdGlsbCBoYXZlIGEgYERvY3VtZW50YCBub2RlIGFzIHRoZWlyIHBhcmVudC5cbiAqIFVzZSBgcGFyc2VEb2N1bWVudGAgdG8gZ2V0IHRoZSBgRG9jdW1lbnRgIG5vZGUgaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0gZGF0YSBUaGUgZGF0YSB0aGF0IHNob3VsZCBiZSBwYXJzZWQuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbCBvcHRpb25zIGZvciB0aGUgcGFyc2VyIGFuZCBET00gYnVpbGRlci5cbiAqIEBkZXByZWNhdGVkIFVzZSBgcGFyc2VEb2N1bWVudGAgaW5zdGVhZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRE9NKGRhdGEsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gcGFyc2VEb2N1bWVudChkYXRhLCBvcHRpb25zKS5jaGlsZHJlbjtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIHBhcnNlciBpbnN0YW5jZSwgd2l0aCBhbiBhdHRhY2hlZCBET00gaGFuZGxlci5cbiAqXG4gKiBAcGFyYW0gY2FsbGJhY2sgQSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgY2FsbGVkIG9uY2UgcGFyc2luZyBoYXMgYmVlbiBjb21wbGV0ZWQuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbCBvcHRpb25zIGZvciB0aGUgcGFyc2VyIGFuZCBET00gYnVpbGRlci5cbiAqIEBwYXJhbSBlbGVtZW50Q2FsbGJhY2sgQW4gb3B0aW9uYWwgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGNhbGxlZCBldmVyeSB0aW1lIGEgdGFnIGhhcyBiZWVuIGNvbXBsZXRlZCBpbnNpZGUgb2YgdGhlIERPTS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURvbVN0cmVhbShjYWxsYmFjaywgb3B0aW9ucywgZWxlbWVudENhbGxiYWNrKSB7XG4gICAgY29uc3QgaGFuZGxlciA9IG5ldyBEb21IYW5kbGVyKGNhbGxiYWNrLCBvcHRpb25zLCBlbGVtZW50Q2FsbGJhY2spO1xuICAgIHJldHVybiBuZXcgUGFyc2VyKGhhbmRsZXIsIG9wdGlvbnMpO1xufVxuZXhwb3J0IHsgZGVmYXVsdCBhcyBUb2tlbml6ZXIsIH0gZnJvbSBcIi4vVG9rZW5pemVyLmpzXCI7XG4vKlxuICogQWxsIG9mIHRoZSBmb2xsb3dpbmcgZXhwb3J0cyBleGlzdCBmb3IgYmFja3dhcmRzLWNvbXBhdGliaWxpdHkuXG4gKiBUaGV5IHNob3VsZCBwcm9iYWJseSBiZSByZW1vdmVkIGV2ZW50dWFsbHkuXG4gKi9cbmV4cG9ydCAqIGFzIEVsZW1lbnRUeXBlIGZyb20gXCJkb21lbGVtZW50dHlwZVwiO1xuaW1wb3J0IHsgZ2V0RmVlZCB9IGZyb20gXCJkb211dGlsc1wiO1xuZXhwb3J0IHsgZ2V0RmVlZCB9IGZyb20gXCJkb211dGlsc1wiO1xuY29uc3QgcGFyc2VGZWVkRGVmYXVsdE9wdGlvbnMgPSB7IHhtbE1vZGU6IHRydWUgfTtcbi8qKlxuICogUGFyc2UgYSBmZWVkLlxuICpcbiAqIEBwYXJhbSBmZWVkIFRoZSBmZWVkIHRoYXQgc2hvdWxkIGJlIHBhcnNlZCwgYXMgYSBzdHJpbmcuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbGx5LCBvcHRpb25zIGZvciBwYXJzaW5nLiBXaGVuIHVzaW5nIHRoaXMsIHlvdSBzaG91bGQgc2V0IGB4bWxNb2RlYCB0byBgdHJ1ZWAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUZlZWQoZmVlZCwgb3B0aW9ucyA9IHBhcnNlRmVlZERlZmF1bHRPcHRpb25zKSB7XG4gICAgcmV0dXJuIGdldEZlZWQocGFyc2VET00oZmVlZCwgb3B0aW9ucykpO1xufVxuZXhwb3J0ICogYXMgRG9tVXRpbHMgZnJvbSBcImRvbXV0aWxzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiUGFyc2VyIiwiRG9tSGFuZGxlciIsIkRlZmF1bHRIYW5kbGVyIiwicGFyc2VEb2N1bWVudCIsImRhdGEiLCJvcHRpb25zIiwiaGFuZGxlciIsInVuZGVmaW5lZCIsImVuZCIsInJvb3QiLCJwYXJzZURPTSIsImNoaWxkcmVuIiwiY3JlYXRlRG9tU3RyZWFtIiwiY2FsbGJhY2siLCJlbGVtZW50Q2FsbGJhY2siLCJkZWZhdWx0IiwiVG9rZW5pemVyIiwiRWxlbWVudFR5cGUiLCJnZXRGZWVkIiwicGFyc2VGZWVkRGVmYXVsdE9wdGlvbnMiLCJ4bWxNb2RlIiwicGFyc2VGZWVkIiwiZmVlZCIsIkRvbVV0aWxzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/htmlparser2/lib/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/leac/lib/leac.mjs":
/*!****************************************!*\
  !*** ./node_modules/leac/lib/leac.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createLexer: () => (/* binding */ o)\n/* harmony export */ });\nconst e = /\\n/g;\nfunction n(n) {\n    const o = [\n        ...n.matchAll(e)\n    ].map((e)=>e.index || 0);\n    o.unshift(-1);\n    const s = t(o, 0, o.length);\n    return (e)=>r(s, e);\n}\nfunction t(e, n, r) {\n    if (r - n == 1) return {\n        offset: e[n],\n        index: n + 1\n    };\n    const o = Math.ceil((n + r) / 2), s = t(e, n, o), l = t(e, o, r);\n    return {\n        offset: s.offset,\n        low: s,\n        high: l\n    };\n}\nfunction r(e, n) {\n    return function(e) {\n        return Object.prototype.hasOwnProperty.call(e, \"index\");\n    }(e) ? {\n        line: e.index,\n        column: n - e.offset\n    } : r(e.high.offset < n ? e.high : e.low, n);\n}\nfunction o(e, t = \"\", r = {}) {\n    const o = \"string\" != typeof t ? t : r, l = \"string\" == typeof t ? t : \"\", c = e.map(s), f = !!o.lineNumbers;\n    return function(e, t = 0) {\n        const r = f ? n(e) : ()=>({\n                line: 0,\n                column: 0\n            });\n        let o = t;\n        const s = [];\n        e: for(; o < e.length;){\n            let n = !1;\n            for (const t of c){\n                t.regex.lastIndex = o;\n                const c = t.regex.exec(e);\n                if (c && c[0].length > 0) {\n                    if (!t.discard) {\n                        const e = r(o), n = \"string\" == typeof t.replace ? c[0].replace(new RegExp(t.regex.source, t.regex.flags), t.replace) : c[0];\n                        s.push({\n                            state: l,\n                            name: t.name,\n                            text: n,\n                            offset: o,\n                            len: c[0].length,\n                            line: e.line,\n                            column: e.column\n                        });\n                    }\n                    if (o = t.regex.lastIndex, n = !0, t.push) {\n                        const n = t.push(e, o);\n                        s.push(...n.tokens), o = n.offset;\n                    }\n                    if (t.pop) break e;\n                    break;\n                }\n            }\n            if (!n) break;\n        }\n        return {\n            tokens: s,\n            offset: o,\n            complete: e.length <= o\n        };\n    };\n}\nfunction s(e, n) {\n    return {\n        ...e,\n        regex: l(e, n)\n    };\n}\nfunction l(e, n) {\n    if (0 === e.name.length) throw new Error(`Rule #${n} has empty name, which is not allowed.`);\n    if (function(e) {\n        return Object.prototype.hasOwnProperty.call(e, \"regex\");\n    }(e)) return function(e) {\n        if (e.global) throw new Error(`Regular expression /${e.source}/${e.flags} contains the global flag, which is not allowed.`);\n        return e.sticky ? e : new RegExp(e.source, e.flags + \"y\");\n    }(e.regex);\n    if (function(e) {\n        return Object.prototype.hasOwnProperty.call(e, \"str\");\n    }(e)) {\n        if (0 === e.str.length) throw new Error(`Rule #${n} (\"${e.name}\") has empty \"str\" property, which is not allowed.`);\n        return new RegExp(c(e.str), \"y\");\n    }\n    return new RegExp(c(e.name), \"y\");\n}\nfunction c(e) {\n    return e.replace(/[-[\\]{}()*+!<=:?./\\\\^$|#\\s,]/g, \"\\\\$&\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGVhYy9saWIvbGVhYy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLElBQUU7QUFBTSxTQUFTQyxFQUFFQSxDQUFDO0lBQUUsTUFBTUMsSUFBRTtXQUFJRCxFQUFFRSxRQUFRLENBQUNIO0tBQUcsQ0FBQ0ksR0FBRyxDQUFFSixDQUFBQSxJQUFHQSxFQUFFSyxLQUFLLElBQUU7SUFBSUgsRUFBRUksT0FBTyxDQUFDLENBQUM7SUFBRyxNQUFNQyxJQUFFQyxFQUFFTixHQUFFLEdBQUVBLEVBQUVPLE1BQU07SUFBRSxPQUFPVCxDQUFBQSxJQUFHVSxFQUFFSCxHQUFFUDtBQUFFO0FBQUMsU0FBU1EsRUFBRVIsQ0FBQyxFQUFDQyxDQUFDLEVBQUNTLENBQUM7SUFBRSxJQUFHQSxJQUFFVCxLQUFHLEdBQUUsT0FBTTtRQUFDVSxRQUFPWCxDQUFDLENBQUNDLEVBQUU7UUFBQ0ksT0FBTUosSUFBRTtJQUFDO0lBQUUsTUFBTUMsSUFBRVUsS0FBS0MsSUFBSSxDQUFDLENBQUNaLElBQUVTLENBQUFBLElBQUcsSUFBR0gsSUFBRUMsRUFBRVIsR0FBRUMsR0FBRUMsSUFBR1ksSUFBRU4sRUFBRVIsR0FBRUUsR0FBRVE7SUFBRyxPQUFNO1FBQUNDLFFBQU9KLEVBQUVJLE1BQU07UUFBQ0ksS0FBSVI7UUFBRVMsTUFBS0Y7SUFBQztBQUFDO0FBQUMsU0FBU0osRUFBRVYsQ0FBQyxFQUFDQyxDQUFDO0lBQUUsT0FBTyxTQUFTRCxDQUFDO1FBQUUsT0FBT2lCLE9BQU9DLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNwQixHQUFFO0lBQVEsRUFBRUEsS0FBRztRQUFDcUIsTUFBS3JCLEVBQUVLLEtBQUs7UUFBQ2lCLFFBQU9yQixJQUFFRCxFQUFFVyxNQUFNO0lBQUEsSUFBRUQsRUFBRVYsRUFBRWdCLElBQUksQ0FBQ0wsTUFBTSxHQUFDVixJQUFFRCxFQUFFZ0IsSUFBSSxHQUFDaEIsRUFBRWUsR0FBRyxFQUFDZDtBQUFFO0FBQUMsU0FBU0MsRUFBRUYsQ0FBQyxFQUFDUSxJQUFFLEVBQUUsRUFBQ0UsSUFBRSxDQUFDLENBQUM7SUFBRSxNQUFNUixJQUFFLFlBQVUsT0FBT00sSUFBRUEsSUFBRUUsR0FBRUksSUFBRSxZQUFVLE9BQU9OLElBQUVBLElBQUUsSUFBR2UsSUFBRXZCLEVBQUVJLEdBQUcsQ0FBQ0csSUFBR2lCLElBQUUsQ0FBQyxDQUFDdEIsRUFBRXVCLFdBQVc7SUFBQyxPQUFPLFNBQVN6QixDQUFDLEVBQUNRLElBQUUsQ0FBQztRQUFFLE1BQU1FLElBQUVjLElBQUV2QixFQUFFRCxLQUFHLElBQUs7Z0JBQUNxQixNQUFLO2dCQUFFQyxRQUFPO1lBQUM7UUFBRyxJQUFJcEIsSUFBRU07UUFBRSxNQUFNRCxJQUFFLEVBQUU7UUFBQ1AsR0FBRSxNQUFLRSxJQUFFRixFQUFFUyxNQUFNLEVBQUU7WUFBQyxJQUFJUixJQUFFLENBQUM7WUFBRSxLQUFJLE1BQU1PLEtBQUtlLEVBQUU7Z0JBQUNmLEVBQUVrQixLQUFLLENBQUNDLFNBQVMsR0FBQ3pCO2dCQUFFLE1BQU1xQixJQUFFZixFQUFFa0IsS0FBSyxDQUFDRSxJQUFJLENBQUM1QjtnQkFBRyxJQUFHdUIsS0FBR0EsQ0FBQyxDQUFDLEVBQUUsQ0FBQ2QsTUFBTSxHQUFDLEdBQUU7b0JBQUMsSUFBRyxDQUFDRCxFQUFFcUIsT0FBTyxFQUFDO3dCQUFDLE1BQU03QixJQUFFVSxFQUFFUixJQUFHRCxJQUFFLFlBQVUsT0FBT08sRUFBRXNCLE9BQU8sR0FBQ1AsQ0FBQyxDQUFDLEVBQUUsQ0FBQ08sT0FBTyxDQUFDLElBQUlDLE9BQU92QixFQUFFa0IsS0FBSyxDQUFDTSxNQUFNLEVBQUN4QixFQUFFa0IsS0FBSyxDQUFDTyxLQUFLLEdBQUV6QixFQUFFc0IsT0FBTyxJQUFFUCxDQUFDLENBQUMsRUFBRTt3QkFBQ2hCLEVBQUUyQixJQUFJLENBQUM7NEJBQUNDLE9BQU1yQjs0QkFBRXNCLE1BQUs1QixFQUFFNEIsSUFBSTs0QkFBQ0MsTUFBS3BDOzRCQUFFVSxRQUFPVDs0QkFBRW9DLEtBQUlmLENBQUMsQ0FBQyxFQUFFLENBQUNkLE1BQU07NEJBQUNZLE1BQUtyQixFQUFFcUIsSUFBSTs0QkFBQ0MsUUFBT3RCLEVBQUVzQixNQUFNO3dCQUFBO29CQUFFO29CQUFDLElBQUdwQixJQUFFTSxFQUFFa0IsS0FBSyxDQUFDQyxTQUFTLEVBQUMxQixJQUFFLENBQUMsR0FBRU8sRUFBRTBCLElBQUksRUFBQzt3QkFBQyxNQUFNakMsSUFBRU8sRUFBRTBCLElBQUksQ0FBQ2xDLEdBQUVFO3dCQUFHSyxFQUFFMkIsSUFBSSxJQUFJakMsRUFBRXNDLE1BQU0sR0FBRXJDLElBQUVELEVBQUVVLE1BQU07b0JBQUE7b0JBQUMsSUFBR0gsRUFBRWdDLEdBQUcsRUFBQyxNQUFNeEM7b0JBQUU7Z0JBQUs7WUFBQztZQUFDLElBQUcsQ0FBQ0MsR0FBRTtRQUFLO1FBQUMsT0FBTTtZQUFDc0MsUUFBT2hDO1lBQUVJLFFBQU9UO1lBQUV1QyxVQUFTekMsRUFBRVMsTUFBTSxJQUFFUDtRQUFDO0lBQUM7QUFBQztBQUFDLFNBQVNLLEVBQUVQLENBQUMsRUFBQ0MsQ0FBQztJQUFFLE9BQU07UUFBQyxHQUFHRCxDQUFDO1FBQUMwQixPQUFNWixFQUFFZCxHQUFFQztJQUFFO0FBQUM7QUFBQyxTQUFTYSxFQUFFZCxDQUFDLEVBQUNDLENBQUM7SUFBRSxJQUFHLE1BQUlELEVBQUVvQyxJQUFJLENBQUMzQixNQUFNLEVBQUMsTUFBTSxJQUFJaUMsTUFBTSxDQUFDLE1BQU0sRUFBRXpDLEVBQUUsc0NBQXNDLENBQUM7SUFBRSxJQUFHLFNBQVNELENBQUM7UUFBRSxPQUFPaUIsT0FBT0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ3BCLEdBQUU7SUFBUSxFQUFFQSxJQUFHLE9BQU8sU0FBU0EsQ0FBQztRQUFFLElBQUdBLEVBQUUyQyxNQUFNLEVBQUMsTUFBTSxJQUFJRCxNQUFNLENBQUMsb0JBQW9CLEVBQUUxQyxFQUFFZ0MsTUFBTSxDQUFDLENBQUMsRUFBRWhDLEVBQUVpQyxLQUFLLENBQUMsZ0RBQWdELENBQUM7UUFBRSxPQUFPakMsRUFBRTRDLE1BQU0sR0FBQzVDLElBQUUsSUFBSStCLE9BQU8vQixFQUFFZ0MsTUFBTSxFQUFDaEMsRUFBRWlDLEtBQUssR0FBQztJQUFJLEVBQUVqQyxFQUFFMEIsS0FBSztJQUFFLElBQUcsU0FBUzFCLENBQUM7UUFBRSxPQUFPaUIsT0FBT0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ3BCLEdBQUU7SUFBTSxFQUFFQSxJQUFHO1FBQUMsSUFBRyxNQUFJQSxFQUFFNkMsR0FBRyxDQUFDcEMsTUFBTSxFQUFDLE1BQU0sSUFBSWlDLE1BQU0sQ0FBQyxNQUFNLEVBQUV6QyxFQUFFLEdBQUcsRUFBRUQsRUFBRW9DLElBQUksQ0FBQyxrREFBa0QsQ0FBQztRQUFFLE9BQU8sSUFBSUwsT0FBT1IsRUFBRXZCLEVBQUU2QyxHQUFHLEdBQUU7SUFBSTtJQUFDLE9BQU8sSUFBSWQsT0FBT1IsRUFBRXZCLEVBQUVvQyxJQUFJLEdBQUU7QUFBSTtBQUFDLFNBQVNiLEVBQUV2QixDQUFDO0lBQUUsT0FBT0EsRUFBRThCLE9BQU8sQ0FBQyxpQ0FBZ0M7QUFBTztBQUEwQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dhaGVndXJ1LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbGVhYy9saWIvbGVhYy5tanM/YzE5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBlPS9cXG4vZztmdW5jdGlvbiBuKG4pe2NvbnN0IG89Wy4uLm4ubWF0Y2hBbGwoZSldLm1hcCgoZT0+ZS5pbmRleHx8MCkpO28udW5zaGlmdCgtMSk7Y29uc3Qgcz10KG8sMCxvLmxlbmd0aCk7cmV0dXJuIGU9PnIocyxlKX1mdW5jdGlvbiB0KGUsbixyKXtpZihyLW49PTEpcmV0dXJue29mZnNldDplW25dLGluZGV4Om4rMX07Y29uc3Qgbz1NYXRoLmNlaWwoKG4rcikvMikscz10KGUsbixvKSxsPXQoZSxvLHIpO3JldHVybntvZmZzZXQ6cy5vZmZzZXQsbG93OnMsaGlnaDpsfX1mdW5jdGlvbiByKGUsbil7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxcImluZGV4XCIpfShlKT97bGluZTplLmluZGV4LGNvbHVtbjpuLWUub2Zmc2V0fTpyKGUuaGlnaC5vZmZzZXQ8bj9lLmhpZ2g6ZS5sb3csbil9ZnVuY3Rpb24gbyhlLHQ9XCJcIixyPXt9KXtjb25zdCBvPVwic3RyaW5nXCIhPXR5cGVvZiB0P3Q6cixsPVwic3RyaW5nXCI9PXR5cGVvZiB0P3Q6XCJcIixjPWUubWFwKHMpLGY9ISFvLmxpbmVOdW1iZXJzO3JldHVybiBmdW5jdGlvbihlLHQ9MCl7Y29uc3Qgcj1mP24oZSk6KCk9Pih7bGluZTowLGNvbHVtbjowfSk7bGV0IG89dDtjb25zdCBzPVtdO2U6Zm9yKDtvPGUubGVuZ3RoOyl7bGV0IG49ITE7Zm9yKGNvbnN0IHQgb2YgYyl7dC5yZWdleC5sYXN0SW5kZXg9bztjb25zdCBjPXQucmVnZXguZXhlYyhlKTtpZihjJiZjWzBdLmxlbmd0aD4wKXtpZighdC5kaXNjYXJkKXtjb25zdCBlPXIobyksbj1cInN0cmluZ1wiPT10eXBlb2YgdC5yZXBsYWNlP2NbMF0ucmVwbGFjZShuZXcgUmVnRXhwKHQucmVnZXguc291cmNlLHQucmVnZXguZmxhZ3MpLHQucmVwbGFjZSk6Y1swXTtzLnB1c2goe3N0YXRlOmwsbmFtZTp0Lm5hbWUsdGV4dDpuLG9mZnNldDpvLGxlbjpjWzBdLmxlbmd0aCxsaW5lOmUubGluZSxjb2x1bW46ZS5jb2x1bW59KX1pZihvPXQucmVnZXgubGFzdEluZGV4LG49ITAsdC5wdXNoKXtjb25zdCBuPXQucHVzaChlLG8pO3MucHVzaCguLi5uLnRva2Vucyksbz1uLm9mZnNldH1pZih0LnBvcClicmVhayBlO2JyZWFrfX1pZighbilicmVha31yZXR1cm57dG9rZW5zOnMsb2Zmc2V0Om8sY29tcGxldGU6ZS5sZW5ndGg8PW99fX1mdW5jdGlvbiBzKGUsbil7cmV0dXJuey4uLmUscmVnZXg6bChlLG4pfX1mdW5jdGlvbiBsKGUsbil7aWYoMD09PWUubmFtZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKGBSdWxlICMke259IGhhcyBlbXB0eSBuYW1lLCB3aGljaCBpcyBub3QgYWxsb3dlZC5gKTtpZihmdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsXCJyZWdleFwiKX0oZSkpcmV0dXJuIGZ1bmN0aW9uKGUpe2lmKGUuZ2xvYmFsKXRocm93IG5ldyBFcnJvcihgUmVndWxhciBleHByZXNzaW9uIC8ke2Uuc291cmNlfS8ke2UuZmxhZ3N9IGNvbnRhaW5zIHRoZSBnbG9iYWwgZmxhZywgd2hpY2ggaXMgbm90IGFsbG93ZWQuYCk7cmV0dXJuIGUuc3RpY2t5P2U6bmV3IFJlZ0V4cChlLnNvdXJjZSxlLmZsYWdzK1wieVwiKX0oZS5yZWdleCk7aWYoZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLFwic3RyXCIpfShlKSl7aWYoMD09PWUuc3RyLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoYFJ1bGUgIyR7bn0gKFwiJHtlLm5hbWV9XCIpIGhhcyBlbXB0eSBcInN0clwiIHByb3BlcnR5LCB3aGljaCBpcyBub3QgYWxsb3dlZC5gKTtyZXR1cm4gbmV3IFJlZ0V4cChjKGUuc3RyKSxcInlcIil9cmV0dXJuIG5ldyBSZWdFeHAoYyhlLm5hbWUpLFwieVwiKX1mdW5jdGlvbiBjKGUpe3JldHVybiBlLnJlcGxhY2UoL1stW1xcXXt9KCkqKyE8PTo/Li9cXFxcXiR8I1xccyxdL2csXCJcXFxcJCZcIil9ZXhwb3J0e28gYXMgY3JlYXRlTGV4ZXJ9O1xuIl0sIm5hbWVzIjpbImUiLCJuIiwibyIsIm1hdGNoQWxsIiwibWFwIiwiaW5kZXgiLCJ1bnNoaWZ0IiwicyIsInQiLCJsZW5ndGgiLCJyIiwib2Zmc2V0IiwiTWF0aCIsImNlaWwiLCJsIiwibG93IiwiaGlnaCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImxpbmUiLCJjb2x1bW4iLCJjIiwiZiIsImxpbmVOdW1iZXJzIiwicmVnZXgiLCJsYXN0SW5kZXgiLCJleGVjIiwiZGlzY2FyZCIsInJlcGxhY2UiLCJSZWdFeHAiLCJzb3VyY2UiLCJmbGFncyIsInB1c2giLCJzdGF0ZSIsIm5hbWUiLCJ0ZXh0IiwibGVuIiwidG9rZW5zIiwicG9wIiwiY29tcGxldGUiLCJFcnJvciIsImdsb2JhbCIsInN0aWNreSIsInN0ciIsImNyZWF0ZUxleGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/leac/lib/leac.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/parseley/lib/parseley.mjs":
/*!************************************************!*\
  !*** ./node_modules/parseley/lib/parseley.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ast: () => (/* binding */ ast),\n/* harmony export */   compareSelectors: () => (/* binding */ compareSelectors),\n/* harmony export */   compareSpecificity: () => (/* binding */ compareSpecificity),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   parse1: () => (/* binding */ parse1),\n/* harmony export */   serialize: () => (/* binding */ serialize)\n/* harmony export */ });\n/* harmony import */ var leac__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! leac */ \"(rsc)/./node_modules/leac/lib/leac.mjs\");\n/* harmony import */ var peberminta__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! peberminta */ \"(rsc)/./node_modules/peberminta/lib/core.mjs\");\n\n\nvar ast = /*#__PURE__*/ Object.freeze({\n    __proto__: null\n});\nconst ws = `(?:[ \\\\t\\\\r\\\\n\\\\f]*)`;\nconst nl = `(?:\\\\n|\\\\r\\\\n|\\\\r|\\\\f)`;\nconst nonascii = `[^\\\\x00-\\\\x7F]`;\nconst unicode = `(?:\\\\\\\\[0-9a-f]{1,6}(?:\\\\r\\\\n|[ \\\\n\\\\r\\\\t\\\\f])?)`;\nconst escape = `(?:\\\\\\\\[^\\\\n\\\\r\\\\f0-9a-f])`;\nconst nmstart = `(?:[_a-z]|${nonascii}|${unicode}|${escape})`;\nconst nmchar = `(?:[_a-z0-9-]|${nonascii}|${unicode}|${escape})`;\nconst name = `(?:${nmchar}+)`;\nconst ident = `(?:[-]?${nmstart}${nmchar}*)`;\nconst string1 = `'([^\\\\n\\\\r\\\\f\\\\\\\\']|\\\\\\\\${nl}|${nonascii}|${unicode}|${escape})*'`;\nconst string2 = `\"([^\\\\n\\\\r\\\\f\\\\\\\\\"]|\\\\\\\\${nl}|${nonascii}|${unicode}|${escape})*\"`;\nconst lexSelector = (0,leac__WEBPACK_IMPORTED_MODULE_0__.createLexer)([\n    {\n        name: \"ws\",\n        regex: new RegExp(ws)\n    },\n    {\n        name: \"hash\",\n        regex: new RegExp(`#${name}`, \"i\")\n    },\n    {\n        name: \"ident\",\n        regex: new RegExp(ident, \"i\")\n    },\n    {\n        name: \"str1\",\n        regex: new RegExp(string1, \"i\")\n    },\n    {\n        name: \"str2\",\n        regex: new RegExp(string2, \"i\")\n    },\n    {\n        name: \"*\"\n    },\n    {\n        name: \".\"\n    },\n    {\n        name: \",\"\n    },\n    {\n        name: \"[\"\n    },\n    {\n        name: \"]\"\n    },\n    {\n        name: \"=\"\n    },\n    {\n        name: \">\"\n    },\n    {\n        name: \"|\"\n    },\n    {\n        name: \"+\"\n    },\n    {\n        name: \"~\"\n    },\n    {\n        name: \"^\"\n    },\n    {\n        name: \"$\"\n    }\n]);\nconst lexEscapedString = (0,leac__WEBPACK_IMPORTED_MODULE_0__.createLexer)([\n    {\n        name: \"unicode\",\n        regex: new RegExp(unicode, \"i\")\n    },\n    {\n        name: \"escape\",\n        regex: new RegExp(escape, \"i\")\n    },\n    {\n        name: \"any\",\n        regex: new RegExp(\"[\\\\s\\\\S]\", \"i\")\n    }\n]);\nfunction sumSpec([a0, a1, a2], [b0, b1, b2]) {\n    return [\n        a0 + b0,\n        a1 + b1,\n        a2 + b2\n    ];\n}\nfunction sumAllSpec(ss) {\n    return ss.reduce(sumSpec, [\n        0,\n        0,\n        0\n    ]);\n}\nconst unicodeEscapedSequence_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.token((t)=>t.name === \"unicode\" ? String.fromCodePoint(parseInt(t.text.slice(1), 16)) : undefined);\nconst escapedSequence_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.token((t)=>t.name === \"escape\" ? t.text.slice(1) : undefined);\nconst anyChar_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.token((t)=>t.name === \"any\" ? t.text : undefined);\nconst escapedString_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.map(peberminta__WEBPACK_IMPORTED_MODULE_1__.many(peberminta__WEBPACK_IMPORTED_MODULE_1__.or(unicodeEscapedSequence_, escapedSequence_, anyChar_)), (cs)=>cs.join(\"\"));\nfunction unescape(escapedString) {\n    const lexerResult = lexEscapedString(escapedString);\n    const result = escapedString_({\n        tokens: lexerResult.tokens,\n        options: undefined\n    }, 0);\n    return result.value;\n}\nfunction literal(name) {\n    return peberminta__WEBPACK_IMPORTED_MODULE_1__.token((t)=>t.name === name ? true : undefined);\n}\nconst whitespace_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.token((t)=>t.name === \"ws\" ? null : undefined);\nconst optionalWhitespace_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.option(whitespace_, null);\nfunction optionallySpaced(parser) {\n    return peberminta__WEBPACK_IMPORTED_MODULE_1__.middle(optionalWhitespace_, parser, optionalWhitespace_);\n}\nconst identifier_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.token((t)=>t.name === \"ident\" ? unescape(t.text) : undefined);\nconst hashId_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.token((t)=>t.name === \"hash\" ? unescape(t.text.slice(1)) : undefined);\nconst string_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.token((t)=>t.name.startsWith(\"str\") ? unescape(t.text.slice(1, -1)) : undefined);\nconst namespace_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.left(peberminta__WEBPACK_IMPORTED_MODULE_1__.option(identifier_, \"\"), literal(\"|\"));\nconst qualifiedName_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.eitherOr(peberminta__WEBPACK_IMPORTED_MODULE_1__.ab(namespace_, identifier_, (ns, name)=>({\n        name: name,\n        namespace: ns\n    })), peberminta__WEBPACK_IMPORTED_MODULE_1__.map(identifier_, (name)=>({\n        name: name,\n        namespace: null\n    })));\nconst uniSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.eitherOr(peberminta__WEBPACK_IMPORTED_MODULE_1__.ab(namespace_, literal(\"*\"), (ns)=>({\n        type: \"universal\",\n        namespace: ns,\n        specificity: [\n            0,\n            0,\n            0\n        ]\n    })), peberminta__WEBPACK_IMPORTED_MODULE_1__.map(literal(\"*\"), ()=>({\n        type: \"universal\",\n        namespace: null,\n        specificity: [\n            0,\n            0,\n            0\n        ]\n    })));\nconst tagSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.map(qualifiedName_, ({ name, namespace })=>({\n        type: \"tag\",\n        name: name,\n        namespace: namespace,\n        specificity: [\n            0,\n            0,\n            1\n        ]\n    }));\nconst classSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.ab(literal(\".\"), identifier_, (fullstop, name)=>({\n        type: \"class\",\n        name: name,\n        specificity: [\n            0,\n            1,\n            0\n        ]\n    }));\nconst idSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.map(hashId_, (name)=>({\n        type: \"id\",\n        name: name,\n        specificity: [\n            1,\n            0,\n            0\n        ]\n    }));\nconst attrModifier_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.token((t)=>{\n    if (t.name === \"ident\") {\n        if (t.text === \"i\" || t.text === \"I\") {\n            return \"i\";\n        }\n        if (t.text === \"s\" || t.text === \"S\") {\n            return \"s\";\n        }\n    }\n    return undefined;\n});\nconst attrValue_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.eitherOr(peberminta__WEBPACK_IMPORTED_MODULE_1__.ab(string_, peberminta__WEBPACK_IMPORTED_MODULE_1__.option(peberminta__WEBPACK_IMPORTED_MODULE_1__.right(optionalWhitespace_, attrModifier_), null), (v, mod)=>({\n        value: v,\n        modifier: mod\n    })), peberminta__WEBPACK_IMPORTED_MODULE_1__.ab(identifier_, peberminta__WEBPACK_IMPORTED_MODULE_1__.option(peberminta__WEBPACK_IMPORTED_MODULE_1__.right(whitespace_, attrModifier_), null), (v, mod)=>({\n        value: v,\n        modifier: mod\n    })));\nconst attrMatcher_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.choice(peberminta__WEBPACK_IMPORTED_MODULE_1__.map(literal(\"=\"), ()=>\"=\"), peberminta__WEBPACK_IMPORTED_MODULE_1__.ab(literal(\"~\"), literal(\"=\"), ()=>\"~=\"), peberminta__WEBPACK_IMPORTED_MODULE_1__.ab(literal(\"|\"), literal(\"=\"), ()=>\"|=\"), peberminta__WEBPACK_IMPORTED_MODULE_1__.ab(literal(\"^\"), literal(\"=\"), ()=>\"^=\"), peberminta__WEBPACK_IMPORTED_MODULE_1__.ab(literal(\"$\"), literal(\"=\"), ()=>\"$=\"), peberminta__WEBPACK_IMPORTED_MODULE_1__.ab(literal(\"*\"), literal(\"=\"), ()=>\"*=\"));\nconst attrPresenceSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.abc(literal(\"[\"), optionallySpaced(qualifiedName_), literal(\"]\"), (lbr, { name, namespace })=>({\n        type: \"attrPresence\",\n        name: name,\n        namespace: namespace,\n        specificity: [\n            0,\n            1,\n            0\n        ]\n    }));\nconst attrValueSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.middle(literal(\"[\"), peberminta__WEBPACK_IMPORTED_MODULE_1__.abc(optionallySpaced(qualifiedName_), attrMatcher_, optionallySpaced(attrValue_), ({ name, namespace }, matcher, { value, modifier })=>({\n        type: \"attrValue\",\n        name: name,\n        namespace: namespace,\n        matcher: matcher,\n        value: value,\n        modifier: modifier,\n        specificity: [\n            0,\n            1,\n            0\n        ]\n    })), literal(\"]\"));\nconst attrSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.eitherOr(attrPresenceSelector_, attrValueSelector_);\nconst typeSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.eitherOr(uniSelector_, tagSelector_);\nconst subclassSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.choice(idSelector_, classSelector_, attrSelector_);\nconst compoundSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.map(peberminta__WEBPACK_IMPORTED_MODULE_1__.eitherOr(peberminta__WEBPACK_IMPORTED_MODULE_1__.flatten(typeSelector_, peberminta__WEBPACK_IMPORTED_MODULE_1__.many(subclassSelector_)), peberminta__WEBPACK_IMPORTED_MODULE_1__.many1(subclassSelector_)), (ss)=>{\n    return {\n        type: \"compound\",\n        list: ss,\n        specificity: sumAllSpec(ss.map((s)=>s.specificity))\n    };\n});\nconst combinator_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.choice(peberminta__WEBPACK_IMPORTED_MODULE_1__.map(literal(\">\"), ()=>\">\"), peberminta__WEBPACK_IMPORTED_MODULE_1__.map(literal(\"+\"), ()=>\"+\"), peberminta__WEBPACK_IMPORTED_MODULE_1__.map(literal(\"~\"), ()=>\"~\"), peberminta__WEBPACK_IMPORTED_MODULE_1__.ab(literal(\"|\"), literal(\"|\"), ()=>\"||\"));\nconst combinatorSeparator_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.eitherOr(optionallySpaced(combinator_), peberminta__WEBPACK_IMPORTED_MODULE_1__.map(whitespace_, ()=>\" \"));\nconst complexSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.leftAssoc2(compoundSelector_, peberminta__WEBPACK_IMPORTED_MODULE_1__.map(combinatorSeparator_, (c)=>(left, right)=>({\n            type: \"compound\",\n            list: [\n                ...right.list,\n                {\n                    type: \"combinator\",\n                    combinator: c,\n                    left: left,\n                    specificity: left.specificity\n                }\n            ],\n            specificity: sumSpec(left.specificity, right.specificity)\n        })), compoundSelector_);\nconst listSelector_ = peberminta__WEBPACK_IMPORTED_MODULE_1__.leftAssoc2(peberminta__WEBPACK_IMPORTED_MODULE_1__.map(complexSelector_, (s)=>({\n        type: \"list\",\n        list: [\n            s\n        ]\n    })), peberminta__WEBPACK_IMPORTED_MODULE_1__.map(optionallySpaced(literal(\",\")), ()=>(acc, next)=>({\n            type: \"list\",\n            list: [\n                ...acc.list,\n                next\n            ]\n        })), complexSelector_);\nfunction parse_(parser, str) {\n    if (!(typeof str === \"string\" || str instanceof String)) {\n        throw new Error(\"Expected a selector string. Actual input is not a string!\");\n    }\n    const lexerResult = lexSelector(str);\n    if (!lexerResult.complete) {\n        throw new Error(`The input \"${str}\" was only partially tokenized, stopped at offset ${lexerResult.offset}!\\n` + prettyPrintPosition(str, lexerResult.offset));\n    }\n    const result = optionallySpaced(parser)({\n        tokens: lexerResult.tokens,\n        options: undefined\n    }, 0);\n    if (!result.matched) {\n        throw new Error(`No match for \"${str}\" input!`);\n    }\n    if (result.position < lexerResult.tokens.length) {\n        const token = lexerResult.tokens[result.position];\n        throw new Error(`The input \"${str}\" was only partially parsed, stopped at offset ${token.offset}!\\n` + prettyPrintPosition(str, token.offset, token.len));\n    }\n    return result.value;\n}\nfunction prettyPrintPosition(str, offset, len = 1) {\n    return `${str.replace(/(\\t)|(\\r)|(\\n)/g, (m, t, r)=>t ? \"␉\" : r ? \"␍\" : \"␊\")}\\n${\"\".padEnd(offset)}${\"^\".repeat(len)}`;\n}\nfunction parse(str) {\n    return parse_(listSelector_, str);\n}\nfunction parse1(str) {\n    return parse_(complexSelector_, str);\n}\nfunction serialize(selector) {\n    if (!selector.type) {\n        throw new Error(\"This is not an AST node.\");\n    }\n    switch(selector.type){\n        case \"universal\":\n            return _serNs(selector.namespace) + \"*\";\n        case \"tag\":\n            return _serNs(selector.namespace) + _serIdent(selector.name);\n        case \"class\":\n            return \".\" + _serIdent(selector.name);\n        case \"id\":\n            return \"#\" + _serIdent(selector.name);\n        case \"attrPresence\":\n            return `[${_serNs(selector.namespace)}${_serIdent(selector.name)}]`;\n        case \"attrValue\":\n            return `[${_serNs(selector.namespace)}${_serIdent(selector.name)}${selector.matcher}\"${_serStr(selector.value)}\"${selector.modifier ? selector.modifier : \"\"}]`;\n        case \"combinator\":\n            return serialize(selector.left) + selector.combinator;\n        case \"compound\":\n            return selector.list.reduce((acc, node)=>{\n                if (node.type === \"combinator\") {\n                    return serialize(node) + acc;\n                } else {\n                    return acc + serialize(node);\n                }\n            }, \"\");\n        case \"list\":\n            return selector.list.map(serialize).join(\",\");\n    }\n}\nfunction _serNs(ns) {\n    return ns || ns === \"\" ? _serIdent(ns) + \"|\" : \"\";\n}\nfunction _codePoint(char) {\n    return `\\\\${char.codePointAt(0).toString(16)} `;\n}\nfunction _serIdent(str) {\n    return str.replace(/(^[0-9])|(^-[0-9])|(^-$)|([-0-9a-zA-Z_]|[^\\x00-\\x7F])|(\\x00)|([\\x01-\\x1f]|\\x7f)|([\\s\\S])/g, (m, d1, d2, hy, safe, nl, ctrl, other)=>d1 ? _codePoint(d1) : d2 ? \"-\" + _codePoint(d2.slice(1)) : hy ? \"\\\\-\" : safe ? safe : nl ? \"�\" : ctrl ? _codePoint(ctrl) : \"\\\\\" + other);\n}\nfunction _serStr(str) {\n    return str.replace(/(\")|(\\\\)|(\\x00)|([\\x01-\\x1f]|\\x7f)/g, (m, dq, bs, nl, ctrl)=>dq ? '\\\\\"' : bs ? \"\\\\\\\\\" : nl ? \"�\" : _codePoint(ctrl));\n}\nfunction normalize(selector) {\n    if (!selector.type) {\n        throw new Error(\"This is not an AST node.\");\n    }\n    switch(selector.type){\n        case \"compound\":\n            {\n                selector.list.forEach(normalize);\n                selector.list.sort((a, b)=>_compareArrays(_getSelectorPriority(a), _getSelectorPriority(b)));\n                break;\n            }\n        case \"combinator\":\n            {\n                normalize(selector.left);\n                break;\n            }\n        case \"list\":\n            {\n                selector.list.forEach(normalize);\n                selector.list.sort((a, b)=>serialize(a) < serialize(b) ? -1 : 1);\n                break;\n            }\n    }\n    return selector;\n}\nfunction _getSelectorPriority(selector) {\n    switch(selector.type){\n        case \"universal\":\n            return [\n                1\n            ];\n        case \"tag\":\n            return [\n                1\n            ];\n        case \"id\":\n            return [\n                2\n            ];\n        case \"class\":\n            return [\n                3,\n                selector.name\n            ];\n        case \"attrPresence\":\n            return [\n                4,\n                serialize(selector)\n            ];\n        case \"attrValue\":\n            return [\n                5,\n                serialize(selector)\n            ];\n        case \"combinator\":\n            return [\n                15,\n                serialize(selector)\n            ];\n    }\n}\nfunction compareSelectors(a, b) {\n    return _compareArrays(a.specificity, b.specificity);\n}\nfunction compareSpecificity(a, b) {\n    return _compareArrays(a, b);\n}\nfunction _compareArrays(a, b) {\n    if (!Array.isArray(a) || !Array.isArray(b)) {\n        throw new Error(\"Arguments must be arrays.\");\n    }\n    const shorter = a.length < b.length ? a.length : b.length;\n    for(let i = 0; i < shorter; i++){\n        if (a[i] === b[i]) {\n            continue;\n        }\n        return a[i] < b[i] ? -1 : 1;\n    }\n    return a.length - b.length;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/parseley/lib/parseley.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/peberminta/lib/core.mjs":
/*!**********************************************!*\
  !*** ./node_modules/peberminta/lib/core.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ab: () => (/* binding */ ab),\n/* harmony export */   abc: () => (/* binding */ abc),\n/* harmony export */   action: () => (/* binding */ action),\n/* harmony export */   ahead: () => (/* binding */ ahead),\n/* harmony export */   all: () => (/* binding */ all),\n/* harmony export */   and: () => (/* binding */ all),\n/* harmony export */   any: () => (/* binding */ any),\n/* harmony export */   chain: () => (/* binding */ chain),\n/* harmony export */   chainReduce: () => (/* binding */ chainReduce),\n/* harmony export */   choice: () => (/* binding */ choice),\n/* harmony export */   condition: () => (/* binding */ condition),\n/* harmony export */   decide: () => (/* binding */ decide),\n/* harmony export */   discard: () => (/* binding */ skip),\n/* harmony export */   eitherOr: () => (/* binding */ otherwise),\n/* harmony export */   emit: () => (/* binding */ emit),\n/* harmony export */   end: () => (/* binding */ end),\n/* harmony export */   eof: () => (/* binding */ end),\n/* harmony export */   error: () => (/* binding */ error),\n/* harmony export */   fail: () => (/* binding */ fail),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   flatten1: () => (/* binding */ flatten1),\n/* harmony export */   left: () => (/* binding */ left),\n/* harmony export */   leftAssoc1: () => (/* binding */ leftAssoc1),\n/* harmony export */   leftAssoc2: () => (/* binding */ leftAssoc2),\n/* harmony export */   longest: () => (/* binding */ longest),\n/* harmony export */   lookAhead: () => (/* binding */ ahead),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   many: () => (/* binding */ many),\n/* harmony export */   many1: () => (/* binding */ many1),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   map1: () => (/* binding */ map1),\n/* harmony export */   match: () => (/* binding */ match),\n/* harmony export */   middle: () => (/* binding */ middle),\n/* harmony export */   not: () => (/* binding */ not),\n/* harmony export */   of: () => (/* binding */ emit),\n/* harmony export */   option: () => (/* binding */ option),\n/* harmony export */   or: () => (/* binding */ choice),\n/* harmony export */   otherwise: () => (/* binding */ otherwise),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   parserPosition: () => (/* binding */ parserPosition),\n/* harmony export */   peek: () => (/* binding */ peek),\n/* harmony export */   recursive: () => (/* binding */ recursive),\n/* harmony export */   reduceLeft: () => (/* binding */ reduceLeft),\n/* harmony export */   reduceRight: () => (/* binding */ reduceRight),\n/* harmony export */   remainingTokensNumber: () => (/* binding */ remainingTokensNumber),\n/* harmony export */   right: () => (/* binding */ right),\n/* harmony export */   rightAssoc1: () => (/* binding */ rightAssoc1),\n/* harmony export */   rightAssoc2: () => (/* binding */ rightAssoc2),\n/* harmony export */   satisfy: () => (/* binding */ satisfy),\n/* harmony export */   sepBy: () => (/* binding */ sepBy),\n/* harmony export */   sepBy1: () => (/* binding */ sepBy1),\n/* harmony export */   skip: () => (/* binding */ skip),\n/* harmony export */   some: () => (/* binding */ many1),\n/* harmony export */   start: () => (/* binding */ start),\n/* harmony export */   takeUntil: () => (/* binding */ takeUntil),\n/* harmony export */   takeUntilP: () => (/* binding */ takeUntilP),\n/* harmony export */   takeWhile: () => (/* binding */ takeWhile),\n/* harmony export */   takeWhileP: () => (/* binding */ takeWhileP),\n/* harmony export */   token: () => (/* binding */ token),\n/* harmony export */   tryParse: () => (/* binding */ tryParse)\n/* harmony export */ });\n/* harmony import */ var _util_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.mjs */ \"(rsc)/./node_modules/peberminta/lib/util.mjs\");\n\nfunction emit(value) {\n    return (data, i)=>({\n            matched: true,\n            position: i,\n            value: value\n        });\n}\nfunction make(f) {\n    return (data, i)=>({\n            matched: true,\n            position: i,\n            value: f(data, i)\n        });\n}\nfunction action(f) {\n    return (data, i)=>{\n        f(data, i);\n        return {\n            matched: true,\n            position: i,\n            value: null\n        };\n    };\n}\nfunction fail(data, i) {\n    return {\n        matched: false\n    };\n}\nfunction error(message) {\n    return (data, i)=>{\n        throw new Error(message instanceof Function ? message(data, i) : message);\n    };\n}\nfunction token(onToken, onEnd) {\n    return (data, i)=>{\n        let position = i;\n        let value = undefined;\n        if (i < data.tokens.length) {\n            value = onToken(data.tokens[i], data, i);\n            if (value !== undefined) {\n                position++;\n            }\n        } else {\n            onEnd?.(data, i);\n        }\n        return value === undefined ? {\n            matched: false\n        } : {\n            matched: true,\n            position: position,\n            value: value\n        };\n    };\n}\nfunction any(data, i) {\n    return i < data.tokens.length ? {\n        matched: true,\n        position: i + 1,\n        value: data.tokens[i]\n    } : {\n        matched: false\n    };\n}\nfunction satisfy(test) {\n    return (data, i)=>i < data.tokens.length && test(data.tokens[i], data, i) ? {\n            matched: true,\n            position: i + 1,\n            value: data.tokens[i]\n        } : {\n            matched: false\n        };\n}\nfunction mapInner(r, f) {\n    return r.matched ? {\n        matched: true,\n        position: r.position,\n        value: f(r.value, r.position)\n    } : r;\n}\nfunction mapOuter(r, f) {\n    return r.matched ? f(r) : r;\n}\nfunction map(p, mapper) {\n    return (data, i)=>mapInner(p(data, i), (v, j)=>mapper(v, data, i, j));\n}\nfunction map1(p, mapper) {\n    return (data, i)=>mapOuter(p(data, i), (m)=>mapper(m, data, i));\n}\nfunction peek(p, f) {\n    return (data, i)=>{\n        const r = p(data, i);\n        f(r, data, i);\n        return r;\n    };\n}\nfunction option(p, def) {\n    return (data, i)=>{\n        const r = p(data, i);\n        return r.matched ? r : {\n            matched: true,\n            position: i,\n            value: def\n        };\n    };\n}\nfunction not(p) {\n    return (data, i)=>{\n        const r = p(data, i);\n        return r.matched ? {\n            matched: false\n        } : {\n            matched: true,\n            position: i,\n            value: true\n        };\n    };\n}\nfunction choice(...ps) {\n    return (data, i)=>{\n        for (const p of ps){\n            const result = p(data, i);\n            if (result.matched) {\n                return result;\n            }\n        }\n        return {\n            matched: false\n        };\n    };\n}\nfunction otherwise(pa, pb) {\n    return (data, i)=>{\n        const r1 = pa(data, i);\n        return r1.matched ? r1 : pb(data, i);\n    };\n}\nfunction longest(...ps) {\n    return (data, i)=>{\n        let match = undefined;\n        for (const p of ps){\n            const result = p(data, i);\n            if (result.matched && (!match || match.position < result.position)) {\n                match = result;\n            }\n        }\n        return match || {\n            matched: false\n        };\n    };\n}\nfunction takeWhile(p, test) {\n    return (data, i)=>{\n        const values = [];\n        let success = true;\n        do {\n            const r = p(data, i);\n            if (r.matched && test(r.value, values.length + 1, data, i, r.position)) {\n                values.push(r.value);\n                i = r.position;\n            } else {\n                success = false;\n            }\n        }while (success);\n        return {\n            matched: true,\n            position: i,\n            value: values\n        };\n    };\n}\nfunction takeUntil(p, test) {\n    return takeWhile(p, (value, n, data, i, j)=>!test(value, n, data, i, j));\n}\nfunction takeWhileP(pValue, pTest) {\n    return takeWhile(pValue, (value, n, data, i)=>pTest(data, i).matched);\n}\nfunction takeUntilP(pValue, pTest) {\n    return takeWhile(pValue, (value, n, data, i)=>!pTest(data, i).matched);\n}\nfunction many(p) {\n    return takeWhile(p, ()=>true);\n}\nfunction many1(p) {\n    return ab(p, many(p), (head, tail)=>[\n            head,\n            ...tail\n        ]);\n}\nfunction ab(pa, pb, join) {\n    return (data, i)=>mapOuter(pa(data, i), (ma)=>mapInner(pb(data, ma.position), (vb, j)=>join(ma.value, vb, data, i, j)));\n}\nfunction left(pa, pb) {\n    return ab(pa, pb, (va)=>va);\n}\nfunction right(pa, pb) {\n    return ab(pa, pb, (va, vb)=>vb);\n}\nfunction abc(pa, pb, pc, join) {\n    return (data, i)=>mapOuter(pa(data, i), (ma)=>mapOuter(pb(data, ma.position), (mb)=>mapInner(pc(data, mb.position), (vc, j)=>join(ma.value, mb.value, vc, data, i, j))));\n}\nfunction middle(pa, pb, pc) {\n    return abc(pa, pb, pc, (ra, rb)=>rb);\n}\nfunction all(...ps) {\n    return (data, i)=>{\n        const result = [];\n        let position = i;\n        for (const p of ps){\n            const r1 = p(data, position);\n            if (r1.matched) {\n                result.push(r1.value);\n                position = r1.position;\n            } else {\n                return {\n                    matched: false\n                };\n            }\n        }\n        return {\n            matched: true,\n            position: position,\n            value: result\n        };\n    };\n}\nfunction skip(...ps) {\n    return map(all(...ps), ()=>null);\n}\nfunction flatten(...ps) {\n    return flatten1(all(...ps));\n}\nfunction flatten1(p) {\n    return map(p, (vs)=>vs.flatMap((v)=>v));\n}\nfunction sepBy1(pValue, pSep) {\n    return ab(pValue, many(right(pSep, pValue)), (head, tail)=>[\n            head,\n            ...tail\n        ]);\n}\nfunction sepBy(pValue, pSep) {\n    return otherwise(sepBy1(pValue, pSep), emit([]));\n}\nfunction chainReduce(acc, f) {\n    return (data, i)=>{\n        let loop = true;\n        let acc1 = acc;\n        let pos = i;\n        do {\n            const r = f(acc1, data, pos)(data, pos);\n            if (r.matched) {\n                acc1 = r.value;\n                pos = r.position;\n            } else {\n                loop = false;\n            }\n        }while (loop);\n        return {\n            matched: true,\n            position: pos,\n            value: acc1\n        };\n    };\n}\nfunction reduceLeft(acc, p, reducer) {\n    return chainReduce(acc, (acc)=>map(p, (v, data, i, j)=>reducer(acc, v, data, i, j)));\n}\nfunction reduceRight(p, acc, reducer) {\n    return map(many(p), (vs, data, i, j)=>vs.reduceRight((acc, v)=>reducer(v, acc, data, i, j), acc));\n}\nfunction leftAssoc1(pLeft, pOper) {\n    return chain(pLeft, (v0)=>reduceLeft(v0, pOper, (acc, f)=>f(acc)));\n}\nfunction rightAssoc1(pOper, pRight) {\n    return ab(reduceRight(pOper, (y)=>y, (f, acc)=>(y)=>f(acc(y))), pRight, (f, v)=>f(v));\n}\nfunction leftAssoc2(pLeft, pOper, pRight) {\n    return chain(pLeft, (v0)=>reduceLeft(v0, ab(pOper, pRight, (f, y)=>[\n                f,\n                y\n            ]), (acc, [f, y])=>f(acc, y)));\n}\nfunction rightAssoc2(pLeft, pOper, pRight) {\n    return ab(reduceRight(ab(pLeft, pOper, (x, f)=>[\n            x,\n            f\n        ]), (y)=>y, ([x, f], acc)=>(y)=>f(x, acc(y))), pRight, (f, v)=>f(v));\n}\nfunction condition(cond, pTrue, pFalse) {\n    return (data, i)=>cond(data, i) ? pTrue(data, i) : pFalse(data, i);\n}\nfunction decide(p) {\n    return (data, i)=>mapOuter(p(data, i), (m1)=>m1.value(data, m1.position));\n}\nfunction chain(p, f) {\n    return (data, i)=>mapOuter(p(data, i), (m1)=>f(m1.value, data, i, m1.position)(data, m1.position));\n}\nfunction ahead(p) {\n    return (data, i)=>mapOuter(p(data, i), (m1)=>({\n                matched: true,\n                position: i,\n                value: m1.value\n            }));\n}\nfunction recursive(f) {\n    return function(data, i) {\n        return f()(data, i);\n    };\n}\nfunction start(data, i) {\n    return i !== 0 ? {\n        matched: false\n    } : {\n        matched: true,\n        position: i,\n        value: true\n    };\n}\nfunction end(data, i) {\n    return i < data.tokens.length ? {\n        matched: false\n    } : {\n        matched: true,\n        position: i,\n        value: true\n    };\n}\nfunction remainingTokensNumber(data, i) {\n    return data.tokens.length - i;\n}\nfunction parserPosition(data, i, formatToken, contextTokens = 3) {\n    const len = data.tokens.length;\n    const lowIndex = (0,_util_mjs__WEBPACK_IMPORTED_MODULE_0__.clamp)(0, i - contextTokens, len - contextTokens);\n    const highIndex = (0,_util_mjs__WEBPACK_IMPORTED_MODULE_0__.clamp)(contextTokens, i + 1 + contextTokens, len);\n    const tokensSlice = data.tokens.slice(lowIndex, highIndex);\n    const lines = [];\n    const indexWidth = String(highIndex - 1).length + 1;\n    if (i < 0) {\n        lines.push(`${String(i).padStart(indexWidth)} >>`);\n    }\n    if (0 < lowIndex) {\n        lines.push(\"...\".padStart(indexWidth + 6));\n    }\n    for(let j = 0; j < tokensSlice.length; j++){\n        const index = lowIndex + j;\n        lines.push(`${String(index).padStart(indexWidth)} ${index === i ? \">\" : \" \"} ${(0,_util_mjs__WEBPACK_IMPORTED_MODULE_0__.escapeWhitespace)(formatToken(tokensSlice[j]))}`);\n    }\n    if (highIndex < len) {\n        lines.push(\"...\".padStart(indexWidth + 6));\n    }\n    if (len <= i) {\n        lines.push(`${String(i).padStart(indexWidth)} >>`);\n    }\n    return lines.join(\"\\n\");\n}\nfunction parse(parser, tokens, options, formatToken = JSON.stringify) {\n    const data = {\n        tokens: tokens,\n        options: options\n    };\n    const result = parser(data, 0);\n    if (!result.matched) {\n        throw new Error(\"No match\");\n    }\n    if (result.position < data.tokens.length) {\n        throw new Error(`Partial match. Parsing stopped at:\\n${parserPosition(data, result.position, formatToken)}`);\n    }\n    return result.value;\n}\nfunction tryParse(parser, tokens, options) {\n    const result = parser({\n        tokens: tokens,\n        options: options\n    }, 0);\n    return result.matched ? result.value : undefined;\n}\nfunction match(matcher, tokens, options) {\n    const result = matcher({\n        tokens: tokens,\n        options: options\n    }, 0);\n    return result.value;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/peberminta/lib/core.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/peberminta/lib/util.mjs":
/*!**********************************************!*\
  !*** ./node_modules/peberminta/lib/util.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clamp: () => (/* binding */ clamp),\n/* harmony export */   escapeWhitespace: () => (/* binding */ escapeWhitespace)\n/* harmony export */ });\nfunction clamp(left, x, right) {\n    return Math.max(left, Math.min(x, right));\n}\nfunction escapeWhitespace(str) {\n    return str.replace(/(\\t)|(\\r)|(\\n)/g, (m, t, r)=>t ? \"\\\\t\" : r ? \"\\\\r\" : \"\\\\n\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGViZXJtaW50YS9saWIvdXRpbC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxTQUFTQSxNQUFNQyxJQUFJLEVBQUVDLENBQUMsRUFBRUMsS0FBSztJQUN6QixPQUFPQyxLQUFLQyxHQUFHLENBQUNKLE1BQU1HLEtBQUtFLEdBQUcsQ0FBQ0osR0FBR0M7QUFDdEM7QUFDQSxTQUFTSSxpQkFBaUJDLEdBQUc7SUFDekIsT0FBT0EsSUFBSUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDQyxHQUFHQyxHQUFHQyxJQUFNRCxJQUFJLFFBQVFDLElBQUksUUFBUTtBQUMvRTtBQUVtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dhaGVndXJ1LXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvcGViZXJtaW50YS9saWIvdXRpbC5tanM/M2NmMCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBjbGFtcChsZWZ0LCB4LCByaWdodCkge1xuICAgIHJldHVybiBNYXRoLm1heChsZWZ0LCBNYXRoLm1pbih4LCByaWdodCkpO1xufVxuZnVuY3Rpb24gZXNjYXBlV2hpdGVzcGFjZShzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyhcXHQpfChcXHIpfChcXG4pL2csIChtLCB0LCByKSA9PiB0ID8gJ1xcXFx0JyA6IHIgPyAnXFxcXHInIDogJ1xcXFxuJyk7XG59XG5cbmV4cG9ydCB7IGNsYW1wLCBlc2NhcGVXaGl0ZXNwYWNlIH07XG4iXSwibmFtZXMiOlsiY2xhbXAiLCJsZWZ0IiwieCIsInJpZ2h0IiwiTWF0aCIsIm1heCIsIm1pbiIsImVzY2FwZVdoaXRlc3BhY2UiLCJzdHIiLCJyZXBsYWNlIiwibSIsInQiLCJyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/peberminta/lib/util.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/selderee/lib/selderee.mjs":
/*!************************************************!*\
  !*** ./node_modules/selderee/lib/selderee.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ast: () => (/* binding */ Ast),\n/* harmony export */   DecisionTree: () => (/* binding */ DecisionTree),\n/* harmony export */   Picker: () => (/* binding */ Picker),\n/* harmony export */   Treeify: () => (/* binding */ TreeifyBuilder),\n/* harmony export */   Types: () => (/* binding */ Types)\n/* harmony export */ });\n/* harmony import */ var parseley__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! parseley */ \"(rsc)/./node_modules/parseley/lib/parseley.mjs\");\n\n\nvar Ast = /*#__PURE__*/ Object.freeze({\n    __proto__: null\n});\nvar Types = /*#__PURE__*/ Object.freeze({\n    __proto__: null\n});\nconst treeify = (nodes)=>\"▽\\n\" + treeifyArray(nodes, thinLines);\nconst thinLines = [\n    [\n        \"├─\",\n        \"│ \"\n    ],\n    [\n        \"└─\",\n        \"  \"\n    ]\n];\nconst heavyLines = [\n    [\n        \"┠─\",\n        \"┃ \"\n    ],\n    [\n        \"┖─\",\n        \"  \"\n    ]\n];\nconst doubleLines = [\n    [\n        \"╟─\",\n        \"║ \"\n    ],\n    [\n        \"╙─\",\n        \"  \"\n    ]\n];\nfunction treeifyArray(nodes, tpl = heavyLines) {\n    return prefixItems(tpl, nodes.map((n)=>treeifyNode(n)));\n}\nfunction treeifyNode(node) {\n    switch(node.type){\n        case \"terminal\":\n            {\n                const vctr = node.valueContainer;\n                return `◁ #${vctr.index} ${JSON.stringify(vctr.specificity)} ${vctr.value}`;\n            }\n        case \"tagName\":\n            return `◻ Tag name\\n${treeifyArray(node.variants, doubleLines)}`;\n        case \"attrValue\":\n            return `▣ Attr value: ${node.name}\\n${treeifyArray(node.matchers, doubleLines)}`;\n        case \"attrPresence\":\n            return `◨ Attr presence: ${node.name}\\n${treeifyArray(node.cont)}`;\n        case \"pushElement\":\n            return `◉ Push element: ${node.combinator}\\n${treeifyArray(node.cont, thinLines)}`;\n        case \"popElement\":\n            return `◌ Pop element\\n${treeifyArray(node.cont, thinLines)}`;\n        case \"variant\":\n            return `◇ = ${node.value}\\n${treeifyArray(node.cont)}`;\n        case \"matcher\":\n            return `◈ ${node.matcher} \"${node.value}\"${node.modifier || \"\"}\\n${treeifyArray(node.cont)}`;\n    }\n}\nfunction prefixItems(tpl, items) {\n    return items.map((item, i, { length })=>prefixItem(tpl, item, i === length - 1)).join(\"\\n\");\n}\nfunction prefixItem(tpl, item, tail = true) {\n    const tpl1 = tpl[tail ? 1 : 0];\n    return tpl1[0] + item.split(\"\\n\").join(\"\\n\" + tpl1[1]);\n}\nvar TreeifyBuilder = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    treeify: treeify\n});\nclass DecisionTree {\n    constructor(input){\n        this.branches = weave(toAstTerminalPairs(input));\n    }\n    build(builder) {\n        return builder(this.branches);\n    }\n}\nfunction toAstTerminalPairs(array) {\n    const len = array.length;\n    const results = new Array(len);\n    for(let i = 0; i < len; i++){\n        const [selectorString, val] = array[i];\n        const ast = preprocess(parseley__WEBPACK_IMPORTED_MODULE_0__.parse1(selectorString));\n        results[i] = {\n            ast: ast,\n            terminal: {\n                type: \"terminal\",\n                valueContainer: {\n                    index: i,\n                    value: val,\n                    specificity: ast.specificity\n                }\n            }\n        };\n    }\n    return results;\n}\nfunction preprocess(ast) {\n    reduceSelectorVariants(ast);\n    parseley__WEBPACK_IMPORTED_MODULE_0__.normalize(ast);\n    return ast;\n}\nfunction reduceSelectorVariants(ast) {\n    const newList = [];\n    ast.list.forEach((sel)=>{\n        switch(sel.type){\n            case \"class\":\n                newList.push({\n                    matcher: \"~=\",\n                    modifier: null,\n                    name: \"class\",\n                    namespace: null,\n                    specificity: sel.specificity,\n                    type: \"attrValue\",\n                    value: sel.name\n                });\n                break;\n            case \"id\":\n                newList.push({\n                    matcher: \"=\",\n                    modifier: null,\n                    name: \"id\",\n                    namespace: null,\n                    specificity: sel.specificity,\n                    type: \"attrValue\",\n                    value: sel.name\n                });\n                break;\n            case \"combinator\":\n                reduceSelectorVariants(sel.left);\n                newList.push(sel);\n                break;\n            case \"universal\":\n                break;\n            default:\n                newList.push(sel);\n                break;\n        }\n    });\n    ast.list = newList;\n}\nfunction weave(items) {\n    const branches = [];\n    while(items.length){\n        const topKind = findTopKey(items, (sel)=>true, getSelectorKind);\n        const { matches, nonmatches, empty } = breakByKind(items, topKind);\n        items = nonmatches;\n        if (matches.length) {\n            branches.push(branchOfKind(topKind, matches));\n        }\n        if (empty.length) {\n            branches.push(...terminate(empty));\n        }\n    }\n    return branches;\n}\nfunction terminate(items) {\n    const results = [];\n    for (const item of items){\n        const terminal = item.terminal;\n        if (terminal.type === \"terminal\") {\n            results.push(terminal);\n        } else {\n            const { matches, rest } = partition(terminal.cont, (node)=>node.type === \"terminal\");\n            matches.forEach((node)=>results.push(node));\n            if (rest.length) {\n                terminal.cont = rest;\n                results.push(terminal);\n            }\n        }\n    }\n    return results;\n}\nfunction breakByKind(items, selectedKind) {\n    const matches = [];\n    const nonmatches = [];\n    const empty = [];\n    for (const item of items){\n        const simpsels = item.ast.list;\n        if (simpsels.length) {\n            const isMatch = simpsels.some((node)=>getSelectorKind(node) === selectedKind);\n            (isMatch ? matches : nonmatches).push(item);\n        } else {\n            empty.push(item);\n        }\n    }\n    return {\n        matches,\n        nonmatches,\n        empty\n    };\n}\nfunction getSelectorKind(sel) {\n    switch(sel.type){\n        case \"attrPresence\":\n            return `attrPresence ${sel.name}`;\n        case \"attrValue\":\n            return `attrValue ${sel.name}`;\n        case \"combinator\":\n            return `combinator ${sel.combinator}`;\n        default:\n            return sel.type;\n    }\n}\nfunction branchOfKind(kind, items) {\n    if (kind === \"tag\") {\n        return tagNameBranch(items);\n    }\n    if (kind.startsWith(\"attrValue \")) {\n        return attrValueBranch(kind.substring(10), items);\n    }\n    if (kind.startsWith(\"attrPresence \")) {\n        return attrPresenceBranch(kind.substring(13), items);\n    }\n    if (kind === \"combinator >\") {\n        return combinatorBranch(\">\", items);\n    }\n    if (kind === \"combinator +\") {\n        return combinatorBranch(\"+\", items);\n    }\n    throw new Error(`Unsupported selector kind: ${kind}`);\n}\nfunction tagNameBranch(items) {\n    const groups = spliceAndGroup(items, (x)=>x.type === \"tag\", (x)=>x.name);\n    const variants = Object.entries(groups).map(([name, group])=>({\n            type: \"variant\",\n            value: name,\n            cont: weave(group.items)\n        }));\n    return {\n        type: \"tagName\",\n        variants: variants\n    };\n}\nfunction attrPresenceBranch(name, items) {\n    for (const item of items){\n        spliceSimpleSelector(item, (x)=>x.type === \"attrPresence\" && x.name === name);\n    }\n    return {\n        type: \"attrPresence\",\n        name: name,\n        cont: weave(items)\n    };\n}\nfunction attrValueBranch(name, items) {\n    const groups = spliceAndGroup(items, (x)=>x.type === \"attrValue\" && x.name === name, (x)=>`${x.matcher} ${x.modifier || \"\"} ${x.value}`);\n    const matchers = [];\n    for (const group of Object.values(groups)){\n        const sel = group.oneSimpleSelector;\n        const predicate = getAttrPredicate(sel);\n        const continuation = weave(group.items);\n        matchers.push({\n            type: \"matcher\",\n            matcher: sel.matcher,\n            modifier: sel.modifier,\n            value: sel.value,\n            predicate: predicate,\n            cont: continuation\n        });\n    }\n    return {\n        type: \"attrValue\",\n        name: name,\n        matchers: matchers\n    };\n}\nfunction getAttrPredicate(sel) {\n    if (sel.modifier === \"i\") {\n        const expected = sel.value.toLowerCase();\n        switch(sel.matcher){\n            case \"=\":\n                return (actual)=>expected === actual.toLowerCase();\n            case \"~=\":\n                return (actual)=>actual.toLowerCase().split(/[ \\t]+/).includes(expected);\n            case \"^=\":\n                return (actual)=>actual.toLowerCase().startsWith(expected);\n            case \"$=\":\n                return (actual)=>actual.toLowerCase().endsWith(expected);\n            case \"*=\":\n                return (actual)=>actual.toLowerCase().includes(expected);\n            case \"|=\":\n                return (actual)=>{\n                    const lower = actual.toLowerCase();\n                    return expected === lower || lower.startsWith(expected) && lower[expected.length] === \"-\";\n                };\n        }\n    } else {\n        const expected = sel.value;\n        switch(sel.matcher){\n            case \"=\":\n                return (actual)=>expected === actual;\n            case \"~=\":\n                return (actual)=>actual.split(/[ \\t]+/).includes(expected);\n            case \"^=\":\n                return (actual)=>actual.startsWith(expected);\n            case \"$=\":\n                return (actual)=>actual.endsWith(expected);\n            case \"*=\":\n                return (actual)=>actual.includes(expected);\n            case \"|=\":\n                return (actual)=>expected === actual || actual.startsWith(expected) && actual[expected.length] === \"-\";\n        }\n    }\n}\nfunction combinatorBranch(combinator, items) {\n    const groups = spliceAndGroup(items, (x)=>x.type === \"combinator\" && x.combinator === combinator, (x)=>parseley__WEBPACK_IMPORTED_MODULE_0__.serialize(x.left));\n    const leftItems = [];\n    for (const group of Object.values(groups)){\n        const rightCont = weave(group.items);\n        const leftAst = group.oneSimpleSelector.left;\n        leftItems.push({\n            ast: leftAst,\n            terminal: {\n                type: \"popElement\",\n                cont: rightCont\n            }\n        });\n    }\n    return {\n        type: \"pushElement\",\n        combinator: combinator,\n        cont: weave(leftItems)\n    };\n}\nfunction spliceAndGroup(items, predicate, keyCallback) {\n    const groups = {};\n    while(items.length){\n        const bestKey = findTopKey(items, predicate, keyCallback);\n        const bestKeyPredicate = (sel)=>predicate(sel) && keyCallback(sel) === bestKey;\n        const hasBestKeyPredicate = (item)=>item.ast.list.some(bestKeyPredicate);\n        const { matches, rest } = partition1(items, hasBestKeyPredicate);\n        let oneSimpleSelector = null;\n        for (const item of matches){\n            const splicedNode = spliceSimpleSelector(item, bestKeyPredicate);\n            if (!oneSimpleSelector) {\n                oneSimpleSelector = splicedNode;\n            }\n        }\n        if (oneSimpleSelector == null) {\n            throw new Error(\"No simple selector is found.\");\n        }\n        groups[bestKey] = {\n            oneSimpleSelector: oneSimpleSelector,\n            items: matches\n        };\n        items = rest;\n    }\n    return groups;\n}\nfunction spliceSimpleSelector(item, predicate) {\n    const simpsels = item.ast.list;\n    const matches = new Array(simpsels.length);\n    let firstIndex = -1;\n    for(let i = simpsels.length; i-- > 0;){\n        if (predicate(simpsels[i])) {\n            matches[i] = true;\n            firstIndex = i;\n        }\n    }\n    if (firstIndex == -1) {\n        throw new Error(`Couldn't find the required simple selector.`);\n    }\n    const result = simpsels[firstIndex];\n    item.ast.list = simpsels.filter((sel, i)=>!matches[i]);\n    return result;\n}\nfunction findTopKey(items, predicate, keyCallback) {\n    const candidates = {};\n    for (const item of items){\n        const candidates1 = {};\n        for (const node of item.ast.list.filter(predicate)){\n            candidates1[keyCallback(node)] = true;\n        }\n        for (const key of Object.keys(candidates1)){\n            if (candidates[key]) {\n                candidates[key]++;\n            } else {\n                candidates[key] = 1;\n            }\n        }\n    }\n    let topKind = \"\";\n    let topCounter = 0;\n    for (const entry of Object.entries(candidates)){\n        if (entry[1] > topCounter) {\n            topKind = entry[0];\n            topCounter = entry[1];\n        }\n    }\n    return topKind;\n}\nfunction partition(src, predicate) {\n    const matches = [];\n    const rest = [];\n    for (const x of src){\n        if (predicate(x)) {\n            matches.push(x);\n        } else {\n            rest.push(x);\n        }\n    }\n    return {\n        matches,\n        rest\n    };\n}\nfunction partition1(src, predicate) {\n    const matches = [];\n    const rest = [];\n    for (const x of src){\n        if (predicate(x)) {\n            matches.push(x);\n        } else {\n            rest.push(x);\n        }\n    }\n    return {\n        matches,\n        rest\n    };\n}\nclass Picker {\n    constructor(f){\n        this.f = f;\n    }\n    pickAll(el) {\n        return this.f(el);\n    }\n    pick1(el, preferFirst = false) {\n        const results = this.f(el);\n        const len = results.length;\n        if (len === 0) {\n            return null;\n        }\n        if (len === 1) {\n            return results[0].value;\n        }\n        const comparator = preferFirst ? comparatorPreferFirst : comparatorPreferLast;\n        let result = results[0];\n        for(let i = 1; i < len; i++){\n            const next = results[i];\n            if (comparator(result, next)) {\n                result = next;\n            }\n        }\n        return result.value;\n    }\n}\nfunction comparatorPreferFirst(acc, next) {\n    const diff = (0,parseley__WEBPACK_IMPORTED_MODULE_0__.compareSpecificity)(next.specificity, acc.specificity);\n    return diff > 0 || diff === 0 && next.index < acc.index;\n}\nfunction comparatorPreferLast(acc, next) {\n    const diff = (0,parseley__WEBPACK_IMPORTED_MODULE_0__.compareSpecificity)(next.specificity, acc.specificity);\n    return diff > 0 || diff === 0 && next.index > acc.index;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selderee/lib/selderee.mjs\n");

/***/ })

};
;